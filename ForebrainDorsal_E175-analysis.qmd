---
title: "Forebrain Dorsal E17.5 Data-set Anaysis"
---

```{r}
library(ggplot2)
library(tibble)
library(zeallot)
library(COTAN)
#devtools::load_all("../COTAN/")

options(parallelly.fork.enable = TRUE)

outDir <- "Data/MouseCortexFromLoom/"
if (!file.exists(outDir)) {
  dir.create(outDir)
}

setLoggingLevel(2)
setLoggingFile(file.path(outDir, "ForebrainDorsal_E175-analysis.log"))
```

Read the already created COTAN object

```{r}
fb175Obj <- readRDS(file.path("Data/MouseCortexFromLoom/SourceData/", "e17.5_ForebrainDorsal.cotan.RDS"))
sampleCondition <- getMetadataElement(fb175Obj, datasetTags()[["cond"]])

sampleCondition
```

Inspect cells' sizes

```{r}
cellSizePlot(fb175Obj, splitPattern = ":", numCol = 1)
```

Drop cells with too many reads reads as they are probably doublets

```{r}
cellsSizeThr <- 10000
fb175Obj <- addElementToMetaDataset(fb175Obj, "Cells size threshold", cellsSizeThr)

cells_to_rem <- getCells(fb175Obj)[getCellsSize(fb175Obj) > cellsSizeThr]
fb175Obj <- dropGenesCells(fb175Obj, cells = cells_to_rem)

cellSizePlot(fb175Obj, splitPattern = ":", numCol = 1)
```

Inspect the number of expressed genes per cell

```{r}
genesSizePlot(fb175Obj, splitPattern = ":", numCol = 1)
```

Drop cells with too low genes expression as they are probably dead

```{r}
genesSizeLowThr <- 700
fb175Obj <- addElementToMetaDataset(fb175Obj, "Num genes low threshold", genesSizeLowThr)

numExprGenes <- getNumExpressedGenes(fb175Obj)
cells_to_rem <- names(numExprGenes)[numExprGenes < genesSizeLowThr]
fb175Obj <- dropGenesCells(fb175Obj, cells = cells_to_rem)

genesSizePlot(fb175Obj, splitPattern = ":", numCol = 1)
```

Check number of mitochondrial genes expressed in each cell

```{r}
mitGenesPattern <- "^mt."
getGenes(fb175Obj)[grep(mitGenesPattern, getGenes(fb175Obj))]

c(mitPlot, mitSizes) %<-%
  mitochondrialPercentagePlot(fb175Obj, genePrefix = mitGenesPattern,
                              splitPattern = ":", numCol = 1)

plot(mitPlot)
```

Cells with a too high percentage of mitochondrial genes are likely dead (or at the last problematic) cells. So we drop them!

```{r}
mitPercThr <- 1.5
fb175Obj <- addElementToMetaDataset(fb175Obj, "Mitoc. perc. threshold", mitPercThr)

cells_to_rem <- rownames(mitSizes)[mitSizes[["mit.percentage"]] > mitPercThr]

fb175Obj <- dropGenesCells(fb175Obj, cells = cells_to_rem)

c(mitPlot, mitSizes) %<-%
  mitochondrialPercentagePlot(fb175Obj, genePrefix = mitGenesPattern,
                              splitPattern = ":", numCol = 1)

plot(mitPlot)
```

Check no further outlines after all the culling

```{r}
cellSizePlot(fb175Obj, splitPattern = ":", numCol = 1)
genesSizePlot(fb175Obj, splitPattern = ":", numCol = 1)
```

Clean: round 1

```{r}
fb175Obj <- clean(fb175Obj)

c(pcaCellsPlot, pcaCellsData, genesPlot,
  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb175Obj)

plot(pcaCellsPlot)
plot(genesPlot)

fb175Obj <- addElementToMetaDataset(fb175Obj, "Num drop B group", 0)
```

Visualize if all is ok:

```{r}
plot(UDEPlot)

plot(nuPlot)

plot(zoomedNuPlot)
```

Final cleaning to check all is OK

```{r eval=FALSE}
fb175Obj <- clean(fb175Obj)

c(pcaCellsPlot, pcaCellsData, genesPlot,
  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb175Obj)

plot(pcaCellsPlot)
plot(genesPlot)
plot(UDEPlot)
plot(nuPlot)
plot(zoomedNuPlot)

plot(cellSizePlot(fb175Obj, splitPattern = ":", numCol = 1))
plot(genesSizePlot(fb175Obj, splitPattern = ":", numCol = 1))
```

```{r, echo=FALSE, eval=TRUE}
# Loading the already elaborated object
fb175Obj <- readRDS("Data/MouseCortexFromLoom/e17.5_ForebrainDorsal.cotan.RDS")
```

Calculate genes' COEX

```{r, eval=FALSE, echo=TRUE}
fb175Obj <- proceedToCoex(fb175Obj, calcCoex = TRUE, cores = 12,
                          saveObj = TRUE, outDir = outDir)
```

```{r}
gdiData <- calculateGDI(fb175Obj)

genesToLabel <- head(rownames(gdiData[order(gdiData[["GDI"]],
                                            decreasing = TRUE), ]), n = 10L)

genesToLabel

gdiPlot <- GDIPlot(fb175Obj, GDIIn = gdiData, GDIThreshold = 1.4,
                   genes = list("Top 10 GDI genes" = genesToLabel))

plot(gdiPlot)
```

Save the COTAN object

```{r, eval=FALSE, echo=TRUE}
saveRDS(fb175Obj, file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))
```

```{r, eval=FALSE, echo=TRUE}
c(splitClusters, splitCoexDF) %<-%
  cellsUniformClustering(fb175Obj, GDIThreshold = 1.4, cores = 13L,
                         saveObj = TRUE, outDir = outDir)

fb175Obj <- addClusterization(fb175Obj, clName = "split",
                              clusters = splitClusters,
                              coexDF = splitCoexDF, override = TRUE)

```

```{r}
splitClusters <- getClusterizationData(fb175Obj,clName = "split")$clusters

table(splitClusters)
```

```{r, echo=FALSE, eval=FALSE}
saveRDS(fb175Obj, file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))
```

```{r, echo=TRUE, eval=FALSE}
c(mergedClusters, mergedCoexDF) %<-%
  mergeUniformCellsClusters(fb175Obj, clusters = splitClusters,
                            GDIThreshold = 1.4, batchSize = 20L, cores = 13L,
                            saveObj = TRUE, outDir = outDir)

fb175Obj <- addClusterization(fb175Obj, clName = "merge",
                              clusters = mergedClusters,
                              coexDF = mergedCoexDF,
                              override = TRUE)
```

```{r}
mergedClusters <- getClusterizationData(fb175Obj,clName = "merge")$clusters
table(mergedClusters)
```

```{r, echo=FALSE, eval=FALSE}
saveRDS(fb175Obj, file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))

```

------------------------------------------------------------------------

```{r}
#| label: time
Sys.time()
```

```{r}
#| label: session info
sessionInfo()
```
