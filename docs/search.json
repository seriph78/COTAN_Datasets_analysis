[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "CorticalCells_GSM2861511_E135-analysis.html",
    "href": "CorticalCells_GSM2861511_E135-analysis.html",
    "title": "Cortical cells DGE E13.5 Data-set Anaysis",
    "section": "",
    "text": "Read the dataset from file\n\ndataset <- read.csv(file.path(\"Data/Yuzwa_MouseCortex/\", \"GSM2861511_E135_Only_Cortical_Cells_DGE.txt.gz\"),\n                    header = TRUE, sep = \"\\t\", strip.white = TRUE,\n                    row.names = 1)\n\nCrate the COTAN object\n\nsampleCondition <- \"CorticalCells_GSM2861511_E135\"\ncc135Obj <- COTAN(raw = dataset)\ncc135Obj <- initializeMetaDataset(cc135Obj,\n                                  GEO = \"GSM2861511_E135\",\n                                  sequencingMethod = \"Drop_seq\",\n                                  sampleCondition = sampleCondition)\n\nInspect cellsâ€™ sizes\n\ncellSizePlot(cc135Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\ncellsSizeThr <- 7500\ncc135Obj <- addElementToMetaDataset(cc135Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem <- getCells(cc135Obj)[getCellsSize(cc135Obj) > cellsSizeThr]\ncc135Obj <- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\ncellSizePlot(cc135Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(cc135Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nDrop cells with too high genes expession as they are probably duplets\n\ngenesSizeThr <- 3000\ncc135Obj <- addElementToMetaDataset(cc135Obj, \"Num genes threshold\", genesSizeThr)\n\nnumExprGenes <- getNumExpressedGenes(cc135Obj)\ncells_to_rem <- names(numExprGenes)[numExprGenes > genesSizeThr]\ncc135Obj <- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\ngenesSizePlot(cc135Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nCheck number of mitocondrial genes expressed in each cell\n\nmitGenesPattern <- \"^mt-\"\ngetGenes(cc135Obj)[grep(mitGenesPattern, getGenes(cc135Obj))]\n\n [1] \"mt-Co1\"  \"mt-Co3\"  \"mt-Cytb\" \"mt-Nd1\"  \"mt-Nd2\"  \"mt-Nd4\"  \"mt-Nd5\" \n [8] \"mt-Nd6\"  \"mt-Rnr1\" \"mt-Rnr2\" \"mt-Ta\"   \"mt-Tc\"   \"mt-Te\"   \"mt-Tf\"  \n[15] \"mt-Ti\"   \"mt-Tl1\"  \"mt-Tl2\"  \"mt-Tm\"   \"mt-Tn\"   \"mt-Tp\"   \"mt-Tq\"  \n[22] \"mt-Ts2\"  \"mt-Tt\"   \"mt-Tv\"   \"mt-Tw\"  \n\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(cc135Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr <- 10.0\ncc135Obj <- addElementToMetaDataset(cc135Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem <- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] > mitPercThr]\n\ncc135Obj <- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(cc135Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(cc135Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\ngenesSizePlot(cc135Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nClean: round 1\n\ncc135Obj <- clean(cc135Obj)\n\nGenes/cells selection done: dropped [4473] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\n\nB group contains high number of hemoglobin genes: so they are not interesting\n\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc135Obj <- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\nClean: round 2\n\ncc135Obj <- clean(cc135Obj)\n\nGenes/cells selection done: dropped [11] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\n\nB group contains just 3 cells quite different in the 3rd-5th components: better to drop them\n\nplot(pcaCellsData)\n\n\n\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc135Obj <- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\nClean: round 3\n\ncc135Obj <- clean(cc135Obj)\n\nGenes/cells selection done: dropped [1] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\ncc135Obj <- addElementToMetaDataset(cc135Obj, \"Num drop B group\", 2)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nlowUDEThr <- 0.17 # the threshold to remove low UDE cells\n\nnuDf <- data.frame(\"nu\" = sort(getNu(cc135Obj)), \"n\" = seq_along(getNu(cc135Obj)))\nUDEPlot_zoomed <- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 400L) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = lowUDEThr, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 200L, y = 0.25,\n                     label = paste0(\"to remove cells with nu < \", lowUDEThr),\n                     color = \"darkred\", size = 4.5)\n\nplot(UDEPlot_zoomed)\n\nWarning: Removed 701 rows containing missing values (`geom_point()`).\n\n\n\n\n\nDrop very low UDE cells as they are likely outliers\n\ncc135Obj <- addElementToMetaDataset(cc135Obj, \"Low UDE threshold\", lowUDEThr)\n\ncells_to_rem <- rownames(nuDf)[nuDf[[\"nu\"]] < lowUDEThr]\ncc135Obj <- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\nFinal cleaning to check all is OK\n\ncc135Obj <- clean(cc135Obj)\n\nGenes/cells selection done: dropped [3] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(cellSizePlot(cc135Obj))\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nplot(genesSizePlot(cc135Obj))\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\ncc135Obj <- proceedToCoex(cc135Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\nSave the COTAN object\n\nsaveRDS(cc135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\n\n\n\ngdiData <- calculateGDI(cc135Obj)\n\ngenesToLabel <- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\n [1] \"Neurod6\"       \"2610017I09Rik\" \"Nr2e1\"         \"Ina\"          \n [5] \"Stmn2\"         \"Mdk\"           \"Mapt\"          \"Sox2\"         \n [9] \"Gas1\"          \"Nsg2\"         \n\ngdiPlot <- GDIPlot(cc135Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nRemoved 0 low GDI genes (such as the fully-expressed) in GDI plot\n\nplot(gdiPlot)\n\n\n\n\n\nsplitClusters <- cellsUniformClustering(cc135Obj, GDIThreshold = 1.4, cores = 13,\n                                        saveObj = TRUE, outDir = outDir)\n\nc(splitCoexDF, splitPValueDF) %<-% DEAOnClusters(cc135Obj, clusters = splitClusters)\n\ncc135Obj <- addClusterization(cc135Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\ntable(splitClusters)\n\n\nsaveRDS(cc135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(mergedClusters, mergedCoexDF, mergedPValueDF) %<-%\n  mergeUniformCellsClusters(cc135Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\ncc135Obj <- addClusterization(cc135Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\ntable(mergedClusters)\n\n\nsaveRDS(cc135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\n#clustersMarkersHeatmapPlot(cc135Obj, groupMarkers, clName = \"merge\", kCuts = 4)\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.2   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.14        jsonlite_1.8.4        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.21        \n [10] GlobalOptions_0.1.2    vctrs_0.6.1            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-20    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.1          zoo_1.8-12             igraph_1.4.2          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.5-4           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-8     future_1.32.0         \n [34] shiny_1.7.4            clue_0.3-64            digest_0.6.31         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.0      \n [40] Seurat_4.3.0           tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.13.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-1 \n [49] httr_1.4.5             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.0         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.2          dendextend_1.17.1      MASS_7.3-59           \n [58] openssl_2.0.6          rjson_0.2.21           tools_4.3.0           \n [61] lmtest_0.9-40          httpuv_1.6.9           future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.0             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_1.6-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-1    RcppAnnoy_0.0.20      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.0           \n [88] circlize_0.4.15        splines_4.3.0          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-6          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-0          knitr_1.42             gridExtra_2.3         \n[100] IRanges_2.34.0         scattermore_1.1        stats4_4.3.0          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.20          codetools_0.2-19       cli_3.6.1             \n[112] uwot_0.1.14            xtable_1.8-4           reticulate_1.28       \n[115] munsell_0.5.0          Rcpp_1.0.10            globals_0.16.2        \n[118] spatstat.random_3.1-4  png_0.1-8              parallel_4.3.0        \n[121] Rfast_2.0.7            ellipsis_0.3.2         assertthat_0.2.1      \n[124] listenv_0.9.0          ggthemes_4.2.4         viridisLite_0.4.1     \n[127] scales_1.2.1           ggridges_0.5.4         SeuratObject_4.1.3    \n[130] leiden_0.4.3           purrr_1.0.1            crayon_1.5.2          \n[133] GetoptLong_1.0.5       rlang_1.1.0            cowplot_1.1.1"
  },
  {
    "objectID": "CorticalCells_GSM2861514_E175-analysis.html",
    "href": "CorticalCells_GSM2861514_E175-analysis.html",
    "title": "Cortical cells DGE E17.5 Data-set Anaysis",
    "section": "",
    "text": "#library(SingleCellExperiment)\n#library(DuoClustering2018)\n#library(tidyr)\nlibrary(ggplot2)\n#library(ggsankey) # remotes::install_github(\"davidsjoberg/ggsankey\")\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir <- \"Data/Yuzwa_MouseCortex/\"\n\nsetLoggingLevel(1)\n\nSetting new log level to 1\n\nsetLoggingFile(file.path(outDir, \"CorticalCells_GSM2861514_E175-analysis.log\"))\n\nSetting log file to be: Data/Yuzwa_MouseCortex//CorticalCells_GSM2861514_E175-analysis.log\n\n\nRead the dataset from file\n\ndataset <- read.csv(file.path(outDir <- \"Data/Yuzwa_MouseCortex/\"\n, \"GSM2861514_E175_Only_Cortical_Cells_DGE.txt\"),\n       header = TRUE, sep = \"\\t\", strip.white = TRUE,row.names = 1)\n\nCrate the COTAN object\n\nsampleCondition <- \"CorticalCells_GSM2861514_E175\"\ncc175Obj <- COTAN(raw = dataset)\ncc175Obj <- initializeMetaDataset(cc175Obj,\n                                  GEO = \"GSM2861511_E135\",\n                                  sequencingMethod = \"Drop_seq\",\n                                  sampleCondition = sampleCondition)\n\nInspect cellsâ€™ sizes\n\ncellSizePlot(cc175Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\ncellsSizeThr <- 6000\ncc175Obj <- addElementToMetaDataset(cc175Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem <- getCells(cc175Obj)[getCellsSize(cc175Obj) > cellsSizeThr]\ncc175Obj <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\ncellSizePlot(cc175Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(cc175Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nDrop cells with too high genes expession as they are probably duplets\n\ngenesSizeThr <- 2800\ncc175Obj <- addElementToMetaDataset(cc175Obj, \"Num genes threshold\", genesSizeThr)\n\nnumExprGenes <- getNumExpressedGenes(cc175Obj)\ncells_to_rem <- names(numExprGenes)[numExprGenes > genesSizeThr]\ncc175Obj <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\ngenesSizePlot(cc175Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nCheck number of mitocondrial genes expressed in each cell\n\nmitGenesPattern <- \"^mt-\"\ngetGenes(cc175Obj)[grep(mitGenesPattern, getGenes(cc175Obj))]\n\n [1] \"mt-Co1\"  \"mt-Co2\"  \"mt-Co3\"  \"mt-Cytb\" \"mt-Nd1\"  \"mt-Nd2\"  \"mt-Nd4\" \n [8] \"mt-Nd5\"  \"mt-Nd6\"  \"mt-Rnr1\" \"mt-Rnr2\" \"mt-Ta\"   \"mt-Tc\"   \"mt-Te\"  \n[15] \"mt-Tf\"   \"mt-Ti\"   \"mt-Tl1\"  \"mt-Tl2\"  \"mt-Tm\"   \"mt-Tp\"   \"mt-Tq\"  \n[22] \"mt-Ts2\"  \"mt-Tt\"   \"mt-Tv\"   \"mt-Tw\"   \"mt-Ty\"  \n\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(cc175Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr <- 10.0\ncc175Obj <- addElementToMetaDataset(cc175Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem <- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] > mitPercThr]\n\ncc175Obj <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(cc175Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(cc175Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\ngenesSizePlot(cc175Obj)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nClean: round 1\n\ncc175Obj <- clean(cc175Obj)\n\nGenes/cells selection done: dropped [4751] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\n\nB group contains high number of hemoglobin genes: so they are not interesting\n\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc175Obj <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\nClean: round 2\n\ncc175Obj <- clean(cc175Obj)\n\nGenes/cells selection done: dropped [8] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\n\nB group contains just 3 cells quite different in the 3rd-5th components: better to drop them\n\nplot(pcaCellsData)\n\n\n\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc175Obj <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\nClean: round 3\n\ncc175Obj <- clean(cc175Obj)\n\nGenes/cells selection done: dropped [7] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\ncc175Obj <- addElementToMetaDataset(cc175Obj, \"Num drop B group\", 2)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nlowUDEThr <- 0.2 # the threshold to remove low UDE cells\n\nnuDf <- data.frame(\"nu\" = sort(getNu(cc175Obj)), \"n\" = seq_along(getNu(cc175Obj)))\nUDEPlot_zoomed <- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 400L) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = lowUDEThr, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 200L, y = 0.25,\n                     label = paste0(\"to remove cells with nu < \", lowUDEThr),\n                     color = \"darkred\", size = 4.5)\n\nplot(UDEPlot_zoomed)\n\nWarning: Removed 465 rows containing missing values (`geom_point()`).\n\n\n\n\n\nDrop very low UDE cells as they are likely outliers\n\ncc175Obj <- addElementToMetaDataset(cc175Obj, \"Low UDE threshold\", lowUDEThr)\n\ncells_to_rem <- rownames(nuDf)[nuDf[[\"nu\"]] < lowUDEThr]\ncc175Obj <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\nFinal cleaning to check all is OK\n\ncc175Obj <- clean(cc175Obj)\n\nGenes/cells selection done: dropped [0] genes and [0] cells\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(cellSizePlot(cc175Obj))\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\nplot(genesSizePlot(cc175Obj))\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\n\nCalculate genesâ€™ COEX\n\ncc175Obj <- proceedToCoex(cc175Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\ngdiData <- calculateGDI(cc175Obj)\n\ngenesToLabel <- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\ngdiPlot <- GDIPlot(cc175Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n\nSave the COTAN object\n\nsaveRDS(cc175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\ncc175Obj <- readRDS(\"Data/Yuzwa_MouseCortex/CorticalCells_GSM2861514_E175.cotan.RDS\")\n\n\nsplitClusters <- cellsUniformClustering(cc175Obj, GDIThreshold = 1.4, cores = 13,\n                                        saveObj = TRUE, outDir = outDir)\n\nc(splitCoexDF, splitPValueDF) %<-% DEAOnClusters(cc175Obj, clusters = splitClusters)\n\ncc175Obj <- addClusterization(cc175Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\ntable(splitClusters)\n\n\nsaveRDS(cc175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(mergedClusters, mergedCoexDF, mergedPValueDF) %<-%\n  mergeUniformCellsClusters(cc175Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\ncc175Obj <- addClusterization(cc175Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\ntable(mergedClusters)\n\n\nsaveRDS(cc175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\nRetry dropping the unclustered cells [spoiler: does not change anything!]\n\ncells_to_rem <- names(splitClusters)[splitClusters == \"-1\"]\ncc175Obj_2 <- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\ncc175Obj_2 <- addElementToMetaDataset(cc175Obj_2, datasetTags()[[\"cond\"]],\n                                      value = paste0(sampleCondition, \"_2\"))\n\ncc175Obj_2 <- clean(cc175Obj_2)\ncc175Obj_2 <- estimateDispersionBisection(cc175Obj_2, cores = 13)\n\nsplitClusters_2 <- splitClusters[!names(splitClusters) %in% cells_to_rem]\n\n\n#clustersMarkersHeatmapPlot(cc175Obj, groupMarkers, clName = \"merge\", kCuts = 4)"
  },
  {
    "objectID": "Dataset1.html",
    "href": "Dataset1.html",
    "title": "Dataset1: Mouse cortex",
    "section": "",
    "text": "options(parallelly.fork.enable = TRUE)\nlibrary(COTAN)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(factoextra)\n\nLoading required package: ggplot2\n\n\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n\nlibrary(Rtsne)\nlibrary(qpdf)\nlibrary(stringr)\nTo drop cells by cell library size:\nTo drop cells by mitochondrial percentage:"
  },
  {
    "objectID": "Dataset1.html#cotan-analysis",
    "href": "Dataset1.html#cotan-analysis",
    "title": "Dataset1: Mouse cortex",
    "section": "COTAN analysis",
    "text": "COTAN analysis\nIn this part, all the contingency tables are computed and used to get the statistics.\n\nobj <- estimateDispersionBisection(obj, cores = 15L)\n\ndispersion | min: -0.00997257232666016 | max: 691 | % negative: 2.21864245441898\n\n\nCOEX evaluation and storing\n\nobj <- calculateCoex(obj)\n\n\n# saving the structure\nsaveRDS(obj, file = file.path(outDir, paste0(cond, \".cotan.RDS\")))\n\n\nobj <- readRDS(file = file.path(outDir, paste0(cond, \".cotan.RDS\")))\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.5.0     qpdf_1.3.2        Rtsne_0.16        factoextra_1.0.7 \n[5] ggplot2_3.4.2     data.table_1.14.8 zeallot_0.1.0     COTAN_2.1.2      \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.14        jsonlite_1.8.4        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.21        \n [10] GlobalOptions_0.1.2    vctrs_0.6.1            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-20    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.1          zoo_1.8-12             igraph_1.4.2          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.5-4           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-8     future_1.32.0         \n [34] shiny_1.7.4            clue_0.3-64            digest_0.6.31         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.0      \n [40] Seurat_4.3.0           tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.13.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-1 \n [49] httr_1.4.5             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.0         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.2          dendextend_1.17.1      MASS_7.3-59           \n [58] openssl_2.0.6          rjson_0.2.21           tools_4.3.0           \n [61] lmtest_0.9-40          httpuv_1.6.9           future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.0             cluster_2.1.4         \n [70] reshape2_1.4.4         generics_0.1.3         gtable_0.3.3          \n [73] spatstat.data_3.0-1    tidyr_1.3.0            sp_1.6-0              \n [76] utf8_1.2.3             BiocGenerics_0.46.0    spatstat.geom_3.2-1   \n [79] RcppAnnoy_0.0.20       ggrepel_0.9.3          RANN_2.6.1            \n [82] foreach_1.5.2          pillar_1.9.0           later_1.3.0           \n [85] circlize_0.4.15        splines_4.3.0          dplyr_1.1.2           \n [88] lattice_0.21-8         survival_3.5-5         deldir_1.0-6          \n [91] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [94] pbapply_1.7-0          knitr_1.42             gridExtra_2.3         \n [97] IRanges_2.34.0         scattermore_1.1        stats4_4.3.0          \n[100] xfun_0.39              matrixStats_1.0.0      stringi_1.7.12        \n[103] lazyeval_0.2.2         yaml_2.3.7             evaluate_0.20         \n[106] codetools_0.2-19       tibble_3.2.1           cli_3.6.1             \n[109] uwot_0.1.14            xtable_1.8-4           reticulate_1.28       \n[112] munsell_0.5.0          Rcpp_1.0.10            globals_0.16.2        \n[115] spatstat.random_3.1-4  png_0.1-8              parallel_4.3.0        \n[118] Rfast_2.0.7            ellipsis_0.3.2         assertthat_0.2.1      \n[121] listenv_0.9.0          ggthemes_4.2.4         viridisLite_0.4.1     \n[124] scales_1.2.1           ggridges_0.5.4         SeuratObject_4.1.3    \n[127] leiden_0.4.3           purrr_1.0.1            crayon_1.5.2          \n[130] GetoptLong_1.0.5       rlang_1.1.0            cowplot_1.1.1"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html",
    "href": "geneCoexAnalysisDataset1.html",
    "title": "Gene Correlation Analysis",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\n\nLoading required package: grid\n\n\n========================================\nComplexHeatmap version 2.16.0\nBioconductor page: http://bioconductor.org/packages/ComplexHeatmap/\nGithub page: https://github.com/jokergoo/ComplexHeatmap\nDocumentation: http://jokergoo.github.io/ComplexHeatmap-reference\n\nIf you use it in published research, please cite either one:\n- Gu, Z. Complex Heatmap Visualization. iMeta 2022.\n- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional \n    genomic data. Bioinformatics 2016.\n\n\nThe new InteractiveComplexHeatmap package can directly export static \ncomplex heatmaps into an interactive Shiny app with zero effort. Have a try!\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(ComplexHeatmap))\n========================================\n\nlibrary(circlize)\n\n========================================\ncirclize version 0.4.15\nCRAN page: https://cran.r-project.org/package=circlize\nGithub page: https://github.com/jokergoo/circlize\nDocumentation: https://jokergoo.github.io/circlize_book/book/\n\nIf you use it in published research, please cite:\nGu, Z. circlize implements and enhances circular visualization\n  in R. Bioinformatics 2014.\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(circlize))\n========================================\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#cotan",
    "href": "geneCoexAnalysisDataset1.html#cotan",
    "title": "Gene Correlation Analysis",
    "section": "COTAN",
    "text": "COTAN\n\nobj <- readRDS(\"Data/MouseCortex/MouseCortex_E14.5.cotan.RDS\")\n\n\n# pValues <- calculatePValue(obj, geneSubsetCol = \n#             c(genesList$NPGs,genesList$PNGs,genesList$hk),\n#             geneSubsetRow = \n#              c(genesList$NPGs,genesList$PNGs,genesList$hk))\ncoexMat <- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDIPlot(obj,genes = genesList,GDIThreshold = 1.4)\n\nSetting new log level to 1\n\n\nRemoved 0 low GDI genes (such as the fully-expressed) in GDI plot"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#seurat-correlation",
    "href": "geneCoexAnalysisDataset1.html#seurat-correlation",
    "title": "Gene Correlation Analysis",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(Seurat)\n\nAttaching SeuratObject\n\n\n\nAttaching package: 'Seurat'\n\n\nThe following object is masked from 'package:COTAN':\n\n    UMAPPlot\n\nlibrary(patchwork)\nlibrary(Rfast)\n\nLoading required package: Rcpp\n\n\nLoading required package: RcppZiggurat\n\n\n\nAttaching package: 'Rfast'\n\n\nThe following object is masked from 'package:dplyr':\n\n    nth\n\n\n\nsrat<- CreateSeuratObject(counts = getRawData(obj), project = \"E14.5\", min.cells = 3, min.features = 200)\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\nsrat[[\"percent.mt\"]] <- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat <- NormalizeData(srat)\nsrat <- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 <- VariableFeaturePlot(srat)\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\nWhen using repel, set xnudge and ynudge to 0 for optimal results\n\n\nWarning: ggrepel: 17 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\nWhen using repel, set xnudge and ynudge to 0 for optimal results\n\n\nWarning: ggrepel: 5 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nall.genes <- rownames(srat)\nsrat <- ScaleData(srat, features = all.genes)\n\nCentering and scaling data matrix\n\nseurat.data = srat[[\"RNA\"]]@data\n\n\nseurat.data.cor = cora(t(as.matrix(seurat.data)[c(genesList$NPGs,genesList$hk,genesList$PNGs),]), large = T)\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.1 GiB\n\nrownames(seurat.data.cor) <- c(genesList$NPGs,genesList$hk,genesList$PNGs)\ncolnames(seurat.data.cor) <- c(genesList$NPGs,genesList$hk,genesList$PNGs)\n\ndiag(seurat.data.cor) <- 0\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(seurat.data.cor),\n        #width = ncol(seurat.corMat)*unit(2.5, \"mm\"), \n        height = nrow(seurat.data.cor)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"Seurat corr SCT\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nsrat <-  SCTransform(srat, method = \"glmGamPoi\", vars.to.regress = \"percent.mt\", verbose = FALSE)\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nseurat.data = srat[[\"SCT\"]]@data\nseurat.data.cor = cora(t(as.matrix(seurat.data)[c(genesList$NPGs,genesList$hk,genesList$PNGs),]), large = T)\n\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.1 GiB\n\nrownames(seurat.data.cor) <- c(genesList$NPGs,genesList$hk,genesList$PNGs)\ncolnames(seurat.data.cor) <- c(genesList$NPGs,genesList$hk,genesList$PNGs)\n\ndiag(seurat.data.cor) <- 0\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(seurat.data.cor),\n        #width = ncol(seurat.corMat)*unit(2.5, \"mm\"), \n        height = nrow(seurat.data.cor)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"Seurat corr SCT\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] Rfast_2.0.7           RcppZiggurat_0.1.6    Rcpp_1.0.10          \n [4] patchwork_1.1.2       SeuratObject_4.1.3    Seurat_4.3.0         \n [7] dplyr_1.1.2           circlize_0.4.15       ComplexHeatmap_2.16.0\n[10] COTAN_2.1.2          \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3          rstudioapi_0.14            \n  [3] jsonlite_1.8.4              shape_1.4.6                \n  [5] umap_0.2.10.0               magrittr_2.0.3             \n  [7] spatstat.utils_3.0-3        farver_2.1.1               \n  [9] rmarkdown_2.21              zlibbioc_1.46.0            \n [11] GlobalOptions_0.1.2         vctrs_0.6.1                \n [13] ROCR_1.0-11                 DelayedMatrixStats_1.22.0  \n [15] spatstat.explore_3.2-1      RCurl_1.98-1.12            \n [17] askpass_1.1                 S4Arrays_1.0.1             \n [19] htmltools_0.5.5             sctransform_0.3.5          \n [21] parallelly_1.36.0           KernSmooth_2.23-20         \n [23] htmlwidgets_1.6.2           ica_1.0-3                  \n [25] plyr_1.8.8                  plotly_4.10.1              \n [27] zoo_1.8-12                  igraph_1.4.2               \n [29] mime_0.12                   lifecycle_1.0.3            \n [31] iterators_1.0.14            pkgconfig_2.0.3            \n [33] Matrix_1.5-4                R6_2.5.1                   \n [35] fastmap_1.1.1               GenomeInfoDbData_1.2.10    \n [37] MatrixGenerics_1.12.0       fitdistrplus_1.1-8         \n [39] future_1.32.0               shiny_1.7.4                \n [41] clue_0.3-64                 digest_0.6.31              \n [43] colorspace_2.1-0            S4Vectors_0.38.0           \n [45] tensor_1.5                  RSpectra_0.16-1            \n [47] irlba_2.3.5.1               GenomicRanges_1.52.0       \n [49] labeling_0.4.2              progressr_0.13.0           \n [51] fansi_1.0.4                 spatstat.sparse_3.0-1      \n [53] httr_1.4.5                  polyclip_1.10-4            \n [55] abind_1.4-5                 compiler_4.3.0             \n [57] withr_2.5.0                 doParallel_1.0.17          \n [59] viridis_0.6.2               dendextend_1.17.1          \n [61] MASS_7.3-59                 openssl_2.0.6              \n [63] DelayedArray_0.26.1         rjson_0.2.21               \n [65] tools_4.3.0                 lmtest_0.9-40              \n [67] httpuv_1.6.9                future.apply_1.11.0        \n [69] goftest_1.2-3               glmGamPoi_1.12.1           \n [71] glue_1.6.2                  nlme_3.1-162               \n [73] promises_1.2.0.1            Rtsne_0.16                 \n [75] cluster_2.1.4               reshape2_1.4.4             \n [77] generics_0.1.3              gtable_0.3.3               \n [79] spatstat.data_3.0-1         tidyr_1.3.0                \n [81] data.table_1.14.8           XVector_0.40.0             \n [83] sp_1.6-0                    utf8_1.2.3                 \n [85] BiocGenerics_0.46.0         spatstat.geom_3.2-1        \n [87] RcppAnnoy_0.0.20            ggrepel_0.9.3              \n [89] RANN_2.6.1                  foreach_1.5.2              \n [91] pillar_1.9.0                stringr_1.5.0              \n [93] later_1.3.0                 splines_4.3.0              \n [95] lattice_0.21-8              survival_3.5-5             \n [97] deldir_1.0-6                tidyselect_1.2.0           \n [99] miniUI_0.1.1.1              pbapply_1.7-0              \n[101] knitr_1.42                  gridExtra_2.3              \n[103] IRanges_2.34.0              SummarizedExperiment_1.30.1\n[105] scattermore_1.1             stats4_4.3.0               \n[107] xfun_0.39                   Biobase_2.60.0             \n[109] factoextra_1.0.7            matrixStats_1.0.0          \n[111] stringi_1.7.12              lazyeval_0.2.2             \n[113] yaml_2.3.7                  evaluate_0.20              \n[115] codetools_0.2-19            tibble_3.2.1               \n[117] cli_3.6.1                   uwot_0.1.14                \n[119] xtable_1.8-4                reticulate_1.28            \n[121] munsell_0.5.0               GenomeInfoDb_1.36.0        \n[123] globals_0.16.2              spatstat.random_3.1-4      \n[125] zeallot_0.1.0               png_0.1-8                  \n[127] parallel_4.3.0              ellipsis_0.3.2             \n[129] ggplot2_3.4.2               assertthat_0.2.1           \n[131] sparseMatrixStats_1.12.0    bitops_1.0-7               \n[133] listenv_0.9.0               ggthemes_4.2.4             \n[135] viridisLite_0.4.1           scales_1.2.1               \n[137] ggridges_0.5.4              leiden_0.4.3               \n[139] purrr_1.0.1                 crayon_1.5.2               \n[141] GetoptLong_1.0.5            rlang_1.1.0                \n[143] cowplot_1.1.1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COTAN_Datasets_analysis",
    "section": "",
    "text": "Dataset 1\nThis is a mouse cortex dataset E14.5 Drop-seq from **Single-cell transcriptomic analysis of mouse neocortical development**\n**Loo, Simon _et al._**, _Nature Communications_, 2019: https://www.nature.com/articles/s41467-018-08079-9"
  }
]