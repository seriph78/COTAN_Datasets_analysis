{
  "hash": "5463a7555f72a7ae9567a15bb3c0807f",
  "result": {
    "markdown": "---\ntitle: \"Gene Correlation Analysis E15.0 Mouse Brain\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\n```\n:::\n\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\n1.  Constitutive genes\n2.  Neural progenitor genes\n3.  Pan neuronal genes\n4.  Some layer marker genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesList <- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)\n```\n:::\n\n\n## COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobj <- readRDS(\"Data/MouseCortexFromLoom/e15.0_ForebrainDorsal.cotan.RDS\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nint.genes <- c(genesList$NPGs,genesList$hk,genesList$PNGs,genesList$layers)[c(genesList$NPGs,genesList$hk,genesList$PNGs,genesList$layers) %in% getGenes(obj)]\n\n\ncoexMat.big <- getGenesCoex(obj)[int.genes,int.genes]\n\n\ncoexMat <- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE15.0MouseBrain_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGDIPlot(obj,genes = genesList,GDIThreshold = 1.4)\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE15.0MouseBrain_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Seurat correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsrat<- CreateSeuratObject(counts = getRawData(obj), project = \"E14.5\", min.cells = 3, min.features = 200)\nsrat[[\"percent.mt\"]] <- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat <- NormalizeData(srat)\nsrat <- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 <- VariableFeaturePlot(srat)\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE15.0MouseBrain_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE15.0MouseBrain_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall.genes <- rownames(srat)\nsrat <- ScaleData(srat, features = all.genes)\nseurat.data = srat[[\"RNA\"]]@data\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nint.genes <- rownames(seurat.data)[rownames(seurat.data) %in% c(genesList$NPGs, genesList$hk, genesList$PNGs, genesList$layers)]\nsubset_data <- t(as.matrix(seurat.data)[int.genes,])\n\n# Get gene names for the subset\nsubset_gene_names <- colnames(subset_data)\n\nnum_cores <- 12  # Change this to the desired number of cores\ncl <- parallel::makeCluster(num_cores)\nregisterDoParallel(cl)\n\ncor_p_values <- foreach(i = 1:ncol(subset_data), .combine = \"cbind\") %dopar% {\n  p_values <- numeric(ncol(subset_data))\n  for (j in 1:ncol(subset_data)) {\n    if (i == j) {\n      p_values[j] <- 1\n    } else {\n      cor_result <- cor.test(subset_data[, i], subset_data[, j], method = \"pearson\")\n      p_values[j] <- cor_result$p.value\n    }\n  }\n  return(p_values)\n}\n\n# Stop the parallel backend\nstopCluster(cl)\n# Extract correlation coefficients and p-values\nseurat.data.cor.big <- cor(subset_data, method = \"pearson\")\n\n# Create a named matrix for p-values\nrownames(cor_p_values) <- colnames(cor_p_values) <- subset_gene_names\np_values <- cor_p_values\n\ndiag(seurat.data.cor.big) <- 0\n\nseurat.data.cor <- seurat.data.cor.big[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(seurat.data.cor),\n        #width = ncol(seurat.corMat)*unit(2.5, \"mm\"), \n        height = nrow(seurat.data.cor)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"Seurat corr\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE15.0MouseBrain_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsrat <-  SCTransform(srat, method = \"glmGamPoi\", vars.to.regress = \"percent.mt\", verbose = FALSE)\nseurat.data = srat[[\"SCT\"]]@data\n\nint.genes <- rownames(seurat.data)[rownames(seurat.data) %in% c(genesList$NPGs, genesList$hk, genesList$PNGs, genesList$layers)]\nsubset_data <- t(as.matrix(seurat.data)[int.genes,])\n\n# Get gene names for the subset\nsubset_gene_names <- colnames(subset_data)\n\nnum_cores <- 12  # Change this to the desired number of cores\ncl <- makeCluster(num_cores)\nregisterDoParallel(cl)\n\ncor_p_values <- foreach(i = 1:ncol(subset_data), .combine = \"cbind\") %dopar% {\n  p_values <- numeric(ncol(subset_data))\n  for (j in 1:ncol(subset_data)) {\n    if (i == j) {\n      p_values[j] <- 1\n    } else {\n      cor_result <- cor.test(subset_data[, i], subset_data[, j], method = \"pearson\")\n      p_values[j] <- cor_result$p.value\n    }\n  }\n  return(p_values)\n}\n\n# Stop the parallel backend\nstopCluster(cl)\n# Extract correlation coefficients and p-values\nseurat.data.cor.big <- cor(subset_data, method = \"pearson\")\n\n# Create a named matrix for p-values\nrownames(cor_p_values) <- colnames(cor_p_values) <- subset_gene_names\np_values <- cor_p_values\n\ndiag(seurat.data.cor.big) <- 0\n\nseurat.data.cor <- seurat.data.cor.big[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\n\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\ndiag(seurat.data.cor) <- 0\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(seurat.data.cor),\n        #width = ncol(seurat.corMat)*unit(2.5, \"mm\"), \n        height = nrow(seurat.data.cor)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"Seurat corr SCT\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE15.0MouseBrain_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-08-25 15:16:06 CEST\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] parallel  grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] doParallel_1.0.17     iterators_1.0.14      foreach_1.5.2        \n [4] Rfast_2.0.8           RcppZiggurat_0.1.6    Rcpp_1.0.11          \n [7] patchwork_1.1.2       SeuratObject_4.1.3    Seurat_4.3.0.1       \n[10] Hmisc_5.1-0           dplyr_1.1.2           circlize_0.4.15      \n[13] ComplexHeatmap_2.16.0 COTAN_2.1.7          \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21            splines_4.3.1              \n  [3] later_1.3.1                 bitops_1.0-7               \n  [5] tibble_3.2.1                polyclip_1.10-4            \n  [7] rpart_4.1.19                factoextra_1.0.7           \n  [9] lifecycle_1.0.3             globals_0.16.2             \n [11] lattice_0.21-8              MASS_7.3-60                \n [13] dendextend_1.17.1           backports_1.4.1            \n [15] magrittr_2.0.3              plotly_4.10.2              \n [17] rmarkdown_2.24              yaml_2.3.7                 \n [19] httpuv_1.6.11               glmGamPoi_1.12.2           \n [21] sctransform_0.3.5           askpass_1.1                \n [23] sp_2.0-0                    spatstat.sparse_3.0-2      \n [25] reticulate_1.30             cowplot_1.1.1              \n [27] pbapply_1.7-2               RColorBrewer_1.1-3         \n [29] zlibbioc_1.46.0             abind_1.4-5                \n [31] GenomicRanges_1.52.0        Rtsne_0.16                 \n [33] purrr_1.0.1                 BiocGenerics_0.46.0        \n [35] RCurl_1.98-1.12             nnet_7.3-19                \n [37] GenomeInfoDbData_1.2.10     IRanges_2.34.1             \n [39] S4Vectors_0.38.1            ggrepel_0.9.3              \n [41] irlba_2.3.5.1               listenv_0.9.0              \n [43] spatstat.utils_3.0-3        umap_0.2.10.0              \n [45] goftest_1.2-3               RSpectra_0.16-1            \n [47] spatstat.random_3.1-5       fitdistrplus_1.1-11        \n [49] parallelly_1.36.0           DelayedMatrixStats_1.22.5  \n [51] DelayedArray_0.26.7         leiden_0.4.3               \n [53] codetools_0.2-19            tidyselect_1.2.0           \n [55] shape_1.4.6                 farver_2.1.1               \n [57] viridis_0.6.4               matrixStats_1.0.0          \n [59] stats4_4.3.1                base64enc_0.1-3            \n [61] spatstat.explore_3.2-1      jsonlite_1.8.7             \n [63] GetoptLong_1.0.5            ellipsis_0.3.2             \n [65] progressr_0.14.0            Formula_1.2-5              \n [67] ggridges_0.5.4              survival_3.5-5             \n [69] tools_4.3.1                 ica_1.0-3                  \n [71] glue_1.6.2                  gridExtra_2.3              \n [73] xfun_0.39                   MatrixGenerics_1.12.3      \n [75] ggthemes_4.2.4              GenomeInfoDb_1.36.1        \n [77] withr_2.5.0                 fastmap_1.1.1              \n [79] fansi_1.0.4                 openssl_2.1.0              \n [81] digest_0.6.33               parallelDist_0.2.6         \n [83] R6_2.5.1                    mime_0.12                  \n [85] colorspace_2.1-0            scattermore_1.2            \n [87] Cairo_1.6-1                 tensor_1.5                 \n [89] spatstat.data_3.0-1         utf8_1.2.3                 \n [91] tidyr_1.3.0                 generics_0.1.3             \n [93] data.table_1.14.8           S4Arrays_1.0.5             \n [95] httr_1.4.6                  htmlwidgets_1.6.2          \n [97] uwot_0.1.16                 pkgconfig_2.0.3            \n [99] gtable_0.3.3                lmtest_0.9-40              \n[101] XVector_0.40.0              htmltools_0.5.5            \n[103] clue_0.3-64                 Biobase_2.60.0             \n[105] scales_1.2.1                png_0.1-8                  \n[107] knitr_1.43                  rstudioapi_0.15.0          \n[109] reshape2_1.4.4              rjson_0.2.21               \n[111] checkmate_2.2.0             nlme_3.1-162               \n[113] zoo_1.8-12                  GlobalOptions_0.1.2        \n[115] stringr_1.5.0               KernSmooth_2.23-22         \n[117] miniUI_0.1.1.1              foreign_0.8-82             \n[119] pillar_1.9.0                vctrs_0.6.3                \n[121] RANN_2.6.1                  promises_1.2.0.1           \n[123] xtable_1.8-4                cluster_2.1.4              \n[125] htmlTable_2.4.1             evaluate_0.21              \n[127] zeallot_0.1.0               cli_3.6.1                  \n[129] compiler_4.3.1              rlang_1.1.1                \n[131] crayon_1.5.2                future.apply_1.11.0        \n[133] labeling_0.4.2              plyr_1.8.8                 \n[135] stringi_1.7.12              viridisLite_0.4.2          \n[137] deldir_1.0-9                assertthat_0.2.1           \n[139] munsell_0.5.0               lazyeval_0.2.2             \n[141] spatstat.geom_3.2-4         Matrix_1.6-0               \n[143] sparseMatrixStats_1.12.2    future_1.33.0              \n[145] ggplot2_3.4.2               shiny_1.7.5                \n[147] SummarizedExperiment_1.30.2 ROCR_1.0-11                \n[149] igraph_1.5.1                RcppParallel_5.1.7         \n```\n:::\n:::\n",
    "supporting": [
      "geneCoexAnalysisE15.0MouseBrain_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}