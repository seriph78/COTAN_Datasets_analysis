{
  "hash": "16d35821c920f6565ea297cadfb2a317",
  "result": {
    "markdown": "---\ntitle: \"E14.5 Mouse Cortex Loo 2019\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(parallelly.fork.enable = TRUE)\nlibrary(COTAN)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(factoextra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n```\n:::\n\n```{.r .cell-code}\nlibrary(Rtsne)\nlibrary(qpdf)\nlibrary(stringr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ne14_dge = read.table(\"../COTAN_small_paper/data/MouseCortex/E14_combined_matrix.txt.gz\",header=T,sep=\"\\t\",row.names=1)\n\nprint(dim(e14_dge))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21313 11069\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutDir <- \"Data/MouseCortex/\"\nsetLoggingLevel(1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSetting new log level to 1\n```\n:::\n\n```{.r .cell-code}\nsetLoggingFile(file.path(outDir, \"Dataset.log\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSetting log file to be: Data/MouseCortex//Dataset.log\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncond <- \"MouseCortex_E14.5\"\nobj <- COTAN(raw = e14_dge)\nobj <- initializeMetaDataset(obj,\n                             GEO = \"GSE123335\",\n                             sequencingMethod = \"Drop_seq\",\n                             sampleCondition = cond)\nrm(e14_dge)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nECDPlot(obj, yCut = 400L)\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncellSizePlot(obj,splitPattern = \"_\",numCol = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesSizePlot(obj,splitPattern = \"_\",numCol = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmit <- mitochondrialPercentagePlot(obj, genePrefix = \"^mt-\",splitPattern = \"_\",numCol = 1)\nmit[[\"plot\"]]\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nTo drop cells by cell library size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells_to_rem <- getCells(obj)[getCellsSize(obj) > 15000]\nobj <- dropGenesCells(obj, cells = cells_to_rem)\ncellSizePlot(obj,splitPattern = \"_\",numCol = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesSizePlot(obj,splitPattern = \"_\",numCol = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nTo drop cells by mitochondrial percentage:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_rem <- mit[[\"sizes\"]][[\"mit.percentage\"]] > 7.5\ncells_to_rem <- rownames(mit[[\"sizes\"]])[to_rem]\nobj <- dropGenesCells(obj, cells = cells_to_rem)\n\nmit <- mitochondrialPercentagePlot(obj, genePrefix = \"^mt-\",splitPattern = \"_\",numCol = 1)\n\nmit[[\"plot\"]]\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncellSizePlot(obj,splitPattern = \"_\",numCol = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nobj <- clean(obj)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGenes/cells selection done: dropped [7655] genes and [0] cells\n```\n:::\n\n```{.r .cell-code}\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.1 GiB\n```\n:::\n\n```{.r .cell-code}\npcaCellsPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\nobj <- dropGenesCells(obj, cells = cells_to_rem)\nobj <- clean(obj)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGenes/cells selection done: dropped [1] genes and [0] cells\n```\n:::\n\n```{.r .cell-code}\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.1 GiB\n```\n:::\n\n```{.r .cell-code}\npcaCellsPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n genesPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(nuPlot)\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnuDf <- data.frame(\"nu\" = sort(getNu(obj)), \"n\" = seq_along(getNu(obj)))\nyset <- 0.18 # the threshold to remove low UDE cells\nplot.ude <- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 3000) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = yset, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 1000L, y = 0.25,\n                     label = paste0(\"to remove cells with nu < \", yset),\n                     color = \"darkred\", size = 4.5)\n\nplot.ude\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 7905 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nobj <- addElementToMetaDataset(obj, \"Threshold low UDE cells:\", yset)\n\ncells_to_rem <- rownames(nuDf)[nuDf[[\"nu\"]] < yset]\nobj <- dropGenesCells(obj, cells = cells_to_rem)\nobj <- clean(obj)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGenes/cells selection done: dropped [0] genes and [0] cells\n```\n:::\n\n```{.r .cell-code}\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in asMethod(object): sparse->dense coercion: allocating vector of size\n1.1 GiB\n```\n:::\n\n```{.r .cell-code}\npcaCellsPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUDEPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnuPlot\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUDEPlot$data$Sample <- str_split(rownames(UDEPlot$data),pattern = \"_\",simplify = T)[,1]\n\nggplot(UDEPlot$data, aes(PC1,PC2,color = Sample)) + geom_point(size = 0.5, alpha=0.7)\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(UDEPlot$data, aes(PC2,PC3,color = Sample)) + geom_point(size = 0.5, alpha=0.7)\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(UDEPlot$data, aes(PC2,PC5,color = Sample)) + geom_point(size = 0.5, alpha=0.7)\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(UDEPlot$data, aes(PC2,PC5,color = groups)) + geom_point(size = 0.5, alpha=0.7)\n```\n\n::: {.cell-output-display}\n![](Dataset1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## COTAN analysis\n\nIn this part, all the contingency tables are computed and used to get the statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobj <- estimateDispersionBisection(obj, cores = 15L)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ndispersion | min: -0.00997257232666016 | max: 691 | % negative: 2.21864245441898\n```\n:::\n:::\n\n\n`COEX` evaluation and storing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobj <- calculateCoex(obj)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# saving the structure\nsaveRDS(obj, file = file.path(outDir, paste0(cond, \".cotan.RDS\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nobj <- readRDS(file = file.path(outDir, paste0(cond, \".cotan.RDS\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.5.0     qpdf_1.3.2        Rtsne_0.16        factoextra_1.0.7 \n[5] ggplot2_3.4.2     data.table_1.14.8 zeallot_0.1.0     COTAN_2.1.2      \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.14        jsonlite_1.8.4        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.21        \n [10] GlobalOptions_0.1.2    vctrs_0.6.1            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-20    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.1          zoo_1.8-12             igraph_1.4.2          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.5-4           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-8     future_1.32.0         \n [34] shiny_1.7.4            clue_0.3-64            digest_0.6.31         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.0      \n [40] Seurat_4.3.0           tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.13.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-1 \n [49] httr_1.4.5             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.0         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.2          dendextend_1.17.1      MASS_7.3-59           \n [58] openssl_2.0.6          rjson_0.2.21           tools_4.3.0           \n [61] lmtest_0.9-40          httpuv_1.6.9           future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.0             cluster_2.1.4         \n [70] reshape2_1.4.4         generics_0.1.3         gtable_0.3.3          \n [73] spatstat.data_3.0-1    tidyr_1.3.0            sp_1.6-0              \n [76] utf8_1.2.3             BiocGenerics_0.46.0    spatstat.geom_3.2-1   \n [79] RcppAnnoy_0.0.20       ggrepel_0.9.3          RANN_2.6.1            \n [82] foreach_1.5.2          pillar_1.9.0           later_1.3.0           \n [85] circlize_0.4.15        splines_4.3.0          dplyr_1.1.2           \n [88] lattice_0.21-8         survival_3.5-5         deldir_1.0-6          \n [91] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [94] pbapply_1.7-0          knitr_1.42             gridExtra_2.3         \n [97] IRanges_2.34.0         scattermore_1.1        stats4_4.3.0          \n[100] xfun_0.39              matrixStats_1.0.0      stringi_1.7.12        \n[103] lazyeval_0.2.2         yaml_2.3.7             evaluate_0.20         \n[106] codetools_0.2-19       tibble_3.2.1           cli_3.6.1             \n[109] uwot_0.1.14            xtable_1.8-4           reticulate_1.28       \n[112] munsell_0.5.0          Rcpp_1.0.10            globals_0.16.2        \n[115] spatstat.random_3.1-4  png_0.1-8              parallel_4.3.0        \n[118] Rfast_2.0.7            ellipsis_0.3.2         assertthat_0.2.1      \n[121] listenv_0.9.0          ggthemes_4.2.4         viridisLite_0.4.1     \n[124] scales_1.2.1           ggridges_0.5.4         SeuratObject_4.1.3    \n[127] leiden_0.4.3           purrr_1.0.1            crayon_1.5.2          \n[130] GetoptLong_1.0.5       rlang_1.1.0            cowplot_1.1.1         \n```\n:::\n:::\n",
    "supporting": [
      "Dataset1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}