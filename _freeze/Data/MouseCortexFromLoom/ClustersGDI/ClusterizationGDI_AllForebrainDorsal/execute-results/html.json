{
  "hash": "13a94b8c38b9ebd2da6fda6caee6383f",
  "result": {
    "markdown": "---\ntitle: \"GDI of all loom clusters\"\nauthor: \"trinetra75\"\ndate: \"2023-11-22\"\noutput: html_document\n---\n\n\n## Preamble\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#library(SingleCellExperiment)\n#library(DuoClustering2018)\n#library(tidyr)\nlibrary(rlang)\n#library(testthat)\n#library(ggplot2)\n#library(ggsankey) # remotes::install_github(\"davidsjoberg/ggsankey\")\n#library(tibble)\nlibrary(zeallot)\n#library(Seurat)\n#library(aricode)\n#library(funtimes)\n#library(monocle3)\n#library(cluster)\nlibrary(data.table)\n\nlibrary(COTAN)\n#devtools::load_all(\"~/dev/COTAN/COTAN/\")\n\noptions(parallelly.fork.enable = TRUE)\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(\".\", \"ClusterizationsGDI_AllForebrainDorsal.log\"))\n```\n:::\n\n\n### Definition of functions to extract data from clustersList\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetClData <- function(objCOTAN, clList, cl) {\n  cluster <- names(clList)[[cl]]\n  cells <- clList[[cl]]\n  res <- checkClusterUniformity(objCOTAN, cluster = cluster, cells = cells,\n                                GDIThreshold = 1.4, cores = 6, saveObj = FALSE)\n  res <- c(list(\"cluster\" = cluster, \"size\" = length(cells)), res)\n  res <- as.data.frame(res)\n  rownames(res) <- cluster\n  colnames(res)\n  return(res)\n}\n\nclDataVal <- list(\"cluster\" = NULL, \"size\" = NULL, \"isUniform\" = NULL,\n                  \"fractionAbove\" = NULL, \"1stPercentile\" = NULL)\n```\n:::\n\n\n## Forebrain Dorsal E13.5\n\n### Load dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb135Obj <- readRDS(file = file.path(\"../../MouseCortexFromLoom/\", \"e13.5_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition <- getMetadataElement(fb135Obj, datasetTags()[[\"cond\"]])\n\nlogThis(sampleCondition)\n\nallClust <- getClusterizations(fb135Obj)\n\nlogThis(\"\")\nlogThis(paste(\"Number of cells:\", getNumCells(fb135Obj)))\n\nlogThis(\"\")\nlogThis(\"Available clusterizations:\")\nlogThis(paste0(allClust, collapse = \", \"))\n\nclSizes <- vapply(allClust, function(x) { nlevels(getClusters(fb135Obj, x))}, integer(1L))\nclSizes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            split             merge original.clusters original.subclass \n               35                31               159                40 \n   original.class       cell.typist            seurat   seurat.high.res \n               13                13                19                36 \n          monocle  monocle.high.res \n               11                27 \n```\n:::\n\n```{.r .cell-code}\nlogThis(paste(names(clSizes), clSizes, sep = \": \", collapse = \", \"))\n```\n:::\n\n\n### Extract original cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\noriginalFB135 <- getClusters(fb135Obj, clName = \"original.clusters\")\n\nnlevels(originalFB135)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 159\n```\n:::\n\n```{.r .cell-code}\nsort(table(originalFB135), decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\noriginalFB135\n432 186 187 434 184 437 510 509 183 185 438 433 525 443 446 192 568 188 441 565 \n536 423 334 326 292 259 248 239 178 168 155 141 130  82  74  65  65  63  56  53 \n428 181 679 440 189 118 507 431 442 445 497 444 193 426 511 439 178 436 508 135 \n 52  51  49  46  39  36  35  32  30  29  29  26  25  25  23  22  20  20  20  19 \n 68 177 427 435 175 225 120 271  67 173 430 494 524 176 429 493 496 502 566 117 \n 17  14  14  13  12  12  11  11  11  10  10  10  10   9   9   9   9   9   9   8 \n136 161 194 332 504 112 174 222 228 675 115 158 270 505 670 114 133 159 227 267 \n  8   8   8   8   8   7   7   6   6   6   5   5   5   5   5   4   4   4   4   4 \n359  41 470 564 162 179 329 447 492 519 535 671 119 130 146 163 168 195 224 226 \n  4   4   4   4   3   3   3   3   3   3   3   3   2   2   2   2   2   2   2   2 \n251 263 273 326 453 516 520 528 538 569 575 672 676 677 683 691 793 107 113 125 \n  2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   1   1   1 \n137 138 144 180 182 196 216 254 259 269 333 355 358 374  40 420 454 458 468 471 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n495 498 499 523 549  55 559 658 666 673 678 686 688 689 731 744 760 795  82 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n```\n:::\n\n```{.r .cell-code}\n# drop too small clusters: those whose size is less than 15\nlargeClFB135 <- which(table(originalFB135) >= 50)\nlargeOrigFB135 <- originalFB135[(originalFB135 %in% names(largeClFB135)),\n                                drop = TRUE]\n\nlargeOrigFB135 <- toClustersList(largeOrigFB135)\n```\n:::\n\n\n### Calculate GDI for each cluster in E13.5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Length larger clusters\")\nvapply(largeOrigFB135, length, integer(1))\n\nresDataFB135 <- lapply(seq_along(largeOrigFB135), FUN = getClData,\n                       objCOTAN = fb135Obj, clList = largeOrigFB135)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclDataFB135 <- data.table::rbindlist(resDataFB135)\nclDataFB135 <- column_to_rownames(clDataFB135, var = \"cluster\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(clDataFB135,\n        file = file.path(\"../../MouseCortexFromLoom/ClustersGDI/\", \"e13.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclDataFB135 <- readRDS(\"../../MouseCortexFromLoom/ClustersGDI/e13.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\")\nclDataFB135[order(clDataFB135$size, decreasing = T),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    size isUniform fractionAbove X1stPercentile\n432  536     FALSE  3.770380e-02       1.484698\n186  423     FALSE  4.307131e-02       1.609718\n187  334     FALSE  1.303433e-02       1.423035\n434  326      TRUE  4.379562e-03       1.376828\n184  292     FALSE  1.170610e-02       1.414304\n437  259      TRUE  4.410239e-03       1.364885\n510  248      TRUE  9.610563e-03       1.397472\n509  239      TRUE  4.471580e-03       1.373229\n183  178     FALSE  1.458630e-02       1.427795\n185  168     FALSE  1.630482e-02       1.428907\n438  155      TRUE  1.080901e-03       1.320271\n433  141      TRUE  4.997501e-03       1.363220\n525  130      TRUE  1.488711e-03       1.329041\n443   82      TRUE  2.276508e-03       1.344695\n446   74      TRUE  8.701706e-05       1.300874\n192   65      TRUE  2.597852e-04       1.310808\n568   65      TRUE  0.000000e+00       1.233130\n188   63      TRUE  1.147802e-03       1.314789\n441   56      TRUE  0.000000e+00       1.277716\n565   53      TRUE  0.000000e+00       1.232690\n428   52      TRUE  0.000000e+00       1.263561\n181   51      TRUE  3.013116e-03       1.330148\n```\n:::\n:::\n\n\n## Forebrain Dorsal E15.0\n\n### Load dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- readRDS(file = file.path(\"../../MouseCortexFromLoom/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition <- getMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\nlogThis(sampleCondition)\n\nallClust <- getClusterizations(fb150Obj)\n\nlogThis(\"\")\nlogThis(paste(\"Number of cells:\", getNumCells(fb150Obj)))\n\nlogThis(\"\")\nlogThis(\"Available clusterizations:\")\nlogThis(paste0(allClust, collapse = \", \"))\n\nclSizes <- vapply(allClust, function(x) { nlevels(getClusters(fb150Obj, x))}, integer(1L))\nclSizes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            split             merge            seurat   seurat.high.res \n               57                50                21                40 \noriginal.clusters original.subclass    original.class           monocle \n              229                47                14                11 \n monocle.high.res       cell.typist \n               46                13 \n```\n:::\n\n```{.r .cell-code}\nlogThis(paste(names(clSizes), clSizes, sep = \": \", collapse = \", \"))\n```\n:::\n\n\n### Extract original cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\noriginalFB150 <- getClusters(fb150Obj, clName = \"original.clusters\")\n\nnlevels(originalFB150)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 229\n```\n:::\n\n```{.r .cell-code}\nsort(table(originalFB150), decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\noriginalFB150\n525 432 511 509 510 508 184 428 434 437 507 568 433 504 426 185 187 505 516 565 \n826 586 540 402 402 397 322 318 273 258 183 181 176 174 173 172 163 147 137 133 \n427 524 679 439 436 493 498 446 438 441 183 497 192 506 188 443 502 494 574 575 \n120 108 105 102  93  93  79  66  63  60  54  51  46  46  43  42  42  41  41  41 \n492 118 177 519 526 566 182 181 501 573 193 429 445 499 518 440 560 178 442 514 \n 38  36  31  31  28  28  27  26  24  24  23  23  23  23  22  21  20  19  19  19 \n523 186 569 444 557 271 452 495 520 535 542 677 527 431 135 455 458 496 512 676 \n 19  18  18  17  16  15  15  15  15  14  14  14  13  12  11  11  11  11  11  11 \n120 159 517 145 161 174 179 558 227 332 457 470 503 739 117 175 176 189 559 564 \n 10  10  10   9   9   9   9   9   8   8   8   8   8   8   7   7   7   7   7   7 \n180 225 538 549 561 671  68 695 738 747 136 144 222 226 273 500 536 678 112 114 \n  6   6   6   6   6   6   6   6   6   6   5   5   5   5   5   5   5   5   4   4 \n115 157 267 328 453 456 534 550 570 686 731 737 133 146 147 158 172 173 270 326 \n  4   4   4   4   4   4   4   4   4   4   4   4   3   3   3   3   3   3   3   3 \n430 513 515 528 533 539 544 571 674 675 732 113 125 130 143 152 162 163 195 259 \n  3   3   3   3   3   3   3   3   3   3   3   2   2   2   2   2   2   2   2   2 \n435 451 454 531 543 548 552 554 562 670 689 740 119 122 134 137 142 151 156 191 \n  2   2   2   2   2   2   2   2   2   2   2   2   1   1   1   1   1   1   1   1 \n194 223 224 228 234 240 262 268 269 275 286 296 308 314 329 333 359  41 448 450 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n468 529 530 532 537 540 553 567 572 601 614 634 647 649  67 672 680 681 684 693 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n696 726 734 749 750 751 760 771  88 \n  1   1   1   1   1   1   1   1   1 \n```\n:::\n\n```{.r .cell-code}\n# drop too small clusters: those whose size is less than 15\nlargeClFB150 <- which(table(originalFB150) >= 50)\nlargeOrigFB150 <- originalFB150[(originalFB150 %in% names(largeClFB150)),\n                                drop = TRUE]\n\nlargeOrigFB150 <- toClustersList(largeOrigFB150)\n```\n:::\n\n\n### Calculate GDI for each cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Length larger clusters\")\nvapply(largeOrigFB150, length, integer(1))\n\nresDataFB150 <- lapply(seq_along(largeOrigFB150), FUN = getClData,\n                       objCOTAN = fb150Obj, clList = largeOrigFB150)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclDataFB150 <- data.table::rbindlist(resDataFB150)\nclDataFB150 <- column_to_rownames(clDataFB150, var = \"cluster\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(clDataFB150,\n        file = file.path(\"../../MouseCortexFromLoom/ClustersGDI/\", \"e15.0_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclDataFB150 <- readRDS(\"../../MouseCortexFromLoom/ClustersGDI/e15.0_ForebrainDorsal_GDI_of_original_clusterization.RDS\")\n\nclDataFB150[order(clDataFB150$size,decreasing = T),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    size isUniform fractionAbove X1stPercentile\n525  826     FALSE  0.3016472479       2.352178\n432  586     FALSE  0.0254880232       1.459100\n511  540     FALSE  0.1510725315       1.913734\n509  402      TRUE  0.0067395414       1.381121\n510  402     FALSE  0.0152561426       1.420390\n508  397      TRUE  0.0046488461       1.370125\n184  322     FALSE  0.0268745853       1.498304\n428  318      TRUE  0.0012377332       1.342660\n434  273      TRUE  0.0004509380       1.329601\n437  258      TRUE  0.0025343004       1.342904\n507  183      TRUE  0.0094123856       1.393946\n568  181      TRUE  0.0000000000       1.305810\n433  176      TRUE  0.0011034483       1.336980\n504  174      TRUE  0.0039181957       1.361682\n426  173      TRUE  0.0004750143       1.330498\n185  172     FALSE  0.0101354303       1.400158\n187  163      TRUE  0.0054207120       1.359734\n505  147      TRUE  0.0001728011       1.293017\n516  137      TRUE  0.0014539856       1.328445\n565  133      TRUE  0.0073304826       1.385537\n427  120      TRUE  0.0000000000       1.274314\n524  108     FALSE  0.0187910535       1.439259\n679  105      TRUE  0.0023903726       1.339173\n439  102      TRUE  0.0000000000       1.267754\n436   93      TRUE  0.0000000000       1.253222\n493   93      TRUE  0.0007476325       1.324079\n498   79      TRUE  0.0010643016       1.321372\n446   66      TRUE  0.0000000000       1.296987\n438   63      TRUE  0.0000000000       1.265541\n441   60      TRUE  0.0000000000       1.277497\n183   54      TRUE  0.0002659810       1.305260\n497   51      TRUE  0.0003751993       1.301691\n```\n:::\n:::\n\n\n## Forebrain Dorsal E17.5\n\n### Load dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb175Obj <- readRDS(file = file.path(\"../../MouseCortexFromLoom/\", \"e17.5_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition <- getMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])\n\nlogThis(sampleCondition)\n\nallClust <- getClusterizations(fb175Obj)\n\nlogThis(\"\")\nlogThis(paste(\"Number of cells:\", getNumCells(fb175Obj)))\n\nlogThis(\"\")\nlogThis(\"Available clusterizations:\")\nlogThis(paste0(allClust, collapse = \", \"))\n\nclSizes <- vapply(allClust, function(x) { nlevels(getClusters(fb175Obj, x))}, integer(1L))\nclSizes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            split             merge original.clusters original.subclass \n               25                19               136                27 \n   original.class       cell.typist            seurat   seurat.high.res \n                9                10                19                21 \n          monocle  monocle.high.res \n                7                24 \n```\n:::\n\n```{.r .cell-code}\nlogThis(paste(names(clSizes), clSizes, sep = \": \", collapse = \", \"))\n```\n:::\n\n\n### Extract original cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\noriginalFB175 <- getClusters(fb175Obj, clName = \"original.clusters\")\n\nnlevels(originalFB175)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 136\n```\n:::\n\n```{.r .cell-code}\nsort(table(originalFB175), decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\noriginalFB175\n516 505 515 427 504 514 428 493 506 513 508 517 523 177 436 498 512 507 524 172 \n297 203 159 147 135 119 110  80  72  69  58  58  55  38  38  38  37  36  29  28 \n568 439 492 495 503 574 575 179 426 526 521 441 433 442 494 497 502 178 501 565 \n 27  26  23  22  22  22  20  18  17  17  16  15  13  13  13  13  13  12  12  12 \n678 446 518 677 180 536 573 135 159 174 309 564 225 452 453 522 525 676 679 161 \n 11  10  10  10   9   8   8   7   7   7   7   7   6   6   6   6   6   6   6   5 \n176 184 277 437 458 520 535 539 144 175 182 187 457 499 519 537 569 117 185 262 \n  5   5   5   5   5   5   5   5   4   4   4   4   4   4   4   4   4   3   3   3 \n355 359 425 509 511 689 142 158 189 307 315 429 432 434 443 448 538 543 690 737 \n  3   3   3   3   3   3   2   2   2   2   2   2   2   2   2   2   2   2   2   2 \n115 120 124 132 136 151 160 173 183 188 227 245 261 273 286 298 306 308 310 316 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n317 438 440 455 500 510 557 560 562 570 572 671 673 688 740 796 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n```\n:::\n\n```{.r .cell-code}\n# drop too small clusters: those whose size is less than 15\nlargeClFB175 <- which(table(originalFB175) >= 50)\nlargeOrigFB175 <- originalFB175[(originalFB175 %in% names(largeClFB175)),\n                                drop = TRUE]\n\nlargeOrigFB175 <- toClustersList(largeOrigFB175)\n```\n:::\n\n\n### Calculate GDI for each cluster\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Length larger clusters\")\nvapply(largeOrigFB175, length, integer(1))\n\nresDataFB175 <- lapply(seq_along(largeOrigFB175), FUN = getClData,\n                       objCOTAN = fb175Obj, clList = largeOrigFB175)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclDataFB175 <- data.table::rbindlist(resDataFB175)\nclDataFB175 <- column_to_rownames(clDataFB175, var = \"cluster\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(clDataFB175,\n        file = file.path(\"../../MouseCortexFromLoom/ClustersGDI/\", \"e17.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclDataFB175 <- readRDS(\"../../MouseCortexFromLoom/ClustersGDI/e17.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\")\nclDataFB175[order(clDataFB175$size,decreasing = T),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    size isUniform fractionAbove X1stPercentile\n516  297      TRUE  5.787234e-03       1.380640\n505  203      TRUE  7.261505e-04       1.330011\n515  159     FALSE  8.098331e-02       1.736907\n427  147      TRUE  0.000000e+00       1.275390\n504  135      TRUE  0.000000e+00       1.265854\n514  119     FALSE  3.665886e-02       1.517923\n428  110      TRUE  0.000000e+00       1.263149\n493   80      TRUE  1.512224e-03       1.331605\n506   72      TRUE  8.827684e-05       1.285308\n513   69     FALSE  7.475535e-02       1.649405\n508   58      TRUE  0.000000e+00       1.255277\n517   58      TRUE  8.074475e-03       1.383811\n523   55     FALSE  1.395007e-02       1.416125\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}