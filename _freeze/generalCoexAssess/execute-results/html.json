{
  "hash": "6af727ce95d3134556c98fb365830be1",
  "result": {
    "markdown": "---\ntitle: \"General Coex Evaluation\"\nfig-width: 15\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(gghalves)\nlibrary(ggstatsplot)\nlibrary(\"gridExtra\")\nlibrary(cowplot)\nlibrary(Matrix)\nlibrary(ggstance)\nlibrary(scales)\nlibrary(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\n#Define colors\ncolors.methods <- c(\"#ed5537\",\"#a3505c\",\"#95ba8f\",\"#B3CDE3\",\"#8856A7\" )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#layer.genes <- read.csv(\"CoexData/some_layer_maerkers.csv\", header = T,row.names = 1)\n\ngenesList <- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") #unique(unlist(str_split(layer.genes$supertype.markers.combo,pattern = \",\"))) \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)\n```\n:::\n\n\n## COEX and Correlations\n\nImport COTAN coex and correlations data from file\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable.tot.hk <- NA\ntable.tot.neural <- NA\nfor (file in list.files(\"CoexData/\",pattern = \"Corr|Coex\")) {\n#for (file in list.files(\"CoexData/\",pattern = \"Corr_e13.5|CorrSCT_e13.5|Coex_e13.5\")) {  \n  \n  #print(file)\n  #corr <- readRDS(paste0(\"CoexData/\",file))\n  corr <- read_fst(paste0(\"CoexData/\",file),to = 2)\n  colnames.corr <- colnames(corr)\n  genesListPartial <- genesList\n  for (na in names(genesListPartial)) {\n      if(!all(genesListPartial[[na]] %in% colnames.corr)){\n        print(na)\n        genesListPartial[[na]] <- genesListPartial[[na]][-which(!genesList[[na]] %in% colnames.corr)]\n    }\n  }\n\n  \n  corr <- read_fst(paste0(\"CoexData/\",file), \n        columns = unlist(genesListPartial))\n  corr <- as.data.frame(as.matrix(corr))\n  rownames(corr) <- colnames.corr\n  \n  if(str_detect(file,pattern = \"CotanCoex\")){\n    code <- \"COTAN coex\"\n  }else if(str_detect(file,pattern = \"CorrSCT\")){\n    code <- \"Seurat SCT corr.\"\n  }else if(str_detect(file,pattern = \"MonocleCorr\")){\n    code <- \"Monocle corr.\"\n    #print(\"ok\")\n  }else if(str_detect(file,pattern = \"ScanPyCorr\")){\n    code <- \"ScanPy corr.\"\n    #print(\"ok\")\n  }else if(str_detect(file,pattern = \"Corr\")){\n    code <- \"Seurat corr.\"\n  }\n  \n  table.hk <- as.data.frame(corr[,genesListPartial$hk])\n  table.hk$Gene1 <- rownames(table.hk)\n  \n  table.hk <- pivot_longer(as.data.frame(table.hk),cols = c(1:(ncol(table.hk)-1)),names_to = \"Gene2\")\n  table.hk$Method <- code\n  \n  table.hk$Dataset <- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n\n  table.tot.hk <- rbind(table.tot.hk,table.hk)\n  table.tot.hk <- table.tot.hk[! table.tot.hk$Gene1 == table.tot.hk$Gene2,]\n \n  #Not hk\n  table.neural <- as.data.frame(corr[rownames(corr) %in% c(genesListPartial$NPGs,genesListPartial$PNGs,genesListPartial$layers),\n                                     colnames(corr) %in% c(genesListPartial$NPGs,genesListPartial$PNGs,genesList$layers)])\n  \n  table.neural$Gene1 <- rownames(table.neural)\n  \n  table.neural <- pivot_longer(as.data.frame(table.neural),cols = c(1:(ncol(table.neural)-1)),names_to = \"Gene2\")\n  table.neural$Method <- code\n  table.neural$Dataset <- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n  \n  table.tot.neural <- rbind(table.tot.neural,table.neural)\n  table.tot.neural <- table.tot.neural[! table.tot.neural$Gene1 == table.tot.neural$Gene2,]\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"hk\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n```\n:::\n\n```{.r .cell-code}\ntable.tot.hk$Method <- factor(table.tot.hk$Method, levels = c(\"Seurat corr.\", \"Seurat SCT corr.\", \"Monocle corr.\", \"ScanPy corr.\", \"COTAN coex\"))\ntable.tot.neural$Method <- factor(table.tot.neural$Method, levels = c(\"Seurat corr.\", \"Seurat SCT corr.\", \"Monocle corr.\", \"ScanPy corr.\", \"COTAN coex\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable.tot.hk <- table.tot.hk[2:nrow(table.tot.hk),]\ntable.tot.hk$GeneType <- \"Constitutive\" \ntable.tot.neural <- table.tot.neural[2:nrow(table.tot.neural),]\ntable.tot.neural$GeneType <- \"Neural\"\n\n## For ECDL\ntmp.tot <- NA\nfor (method in unique(table.tot.hk$Method)) {\n  tmp <- as.data.frame(table.tot.hk[table.tot.hk$Method == method,])\n  tmp$n <- NA\n  tmp[order(abs(tmp$value)),]$n <- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis <- 1-tmp$n\n  tmp.tot <- rbind(tmp.tot,tmp)\n}\ntmp.tot <- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.hk <- tmp.tot\n\ntmp.tot <- NA\nfor (method in unique(table.tot.neural$Method)) {\n  tmp <- as.data.frame(table.tot.neural[table.tot.neural$Method == method,])\n  tmp$n <- NA\n  tmp[order(abs(tmp$value)),]$n <- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis <- 1-tmp$n\n  tmp.tot <- rbind(tmp.tot,tmp)\n}\ntmp.tot <- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.neural <- tmp.tot\n\n############\n\ntable.tot <- rbind(table.tot.hk,table.tot.neural) \ntable.tot <- table.tot[!table.tot$Gene1 == table.tot$Gene2,]\n\nidentical(table.tot[table.tot$Method == \"COTAN coex\",]$Gene1,\n          table.tot[table.tot$Method == \"Seurat corr.\",]$Gene1 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nidentical(table.tot[table.tot$Method == \"COTAN coex\",]$Gene2,\n          table.tot[table.tot$Method == \"Seurat corr.\",]$Gene2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ntable.tot$Method <- factor(table.tot$Method, levels = c(\"Seurat corr.\", \"Seurat SCT corr.\", \"Monocle corr.\", \"ScanPy corr.\", \"COTAN coex\"))\n\nhead(table.tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Gene1  Gene2        value     Method                  Dataset\n2 0610007N19Rik  Calm1  0.030413962 COTAN coex CorticalCells_GSM2861511\n3 0610007N19Rik Cox6b1  0.008228765 COTAN coex CorticalCells_GSM2861511\n4 0610007N19Rik   Ppia -0.051969707 COTAN coex CorticalCells_GSM2861511\n5 0610007N19Rik  Rpl18  0.061781637 COTAN coex CorticalCells_GSM2861511\n6 0610007N19Rik  Cox7c  0.060690748 COTAN coex CorticalCells_GSM2861511\n7 0610007N19Rik    Erh  0.070534482 COTAN coex CorticalCells_GSM2861511\n      GeneType         n     Y_axis\n2 Constitutive 0.8021629 0.19783714\n3 Constitutive 0.3250217 0.67497834\n4 Constitutive 0.9391370 0.06086305\n5 Constitutive 0.9640681 0.03593190\n6 Constitutive 0.9620358 0.03796424\n7 Constitutive 0.9775790 0.02242102\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable.tot$ValAbs <- abs(table.tot$value)\ntable.tot$LogValAbs <- log(table.tot$ValAbs+0.001)\ntable.tot$SqrValAbs <- table.tot$ValAbs**2\n\nggplot(table.tot,aes(x=Method,y=ValAbs, fill=Method)) +\ngeom_half_violin(alpha=0.8) +\n  #geom_point(position = \"jitter\", size= 0.1,alpha = 0.3)+ \n  #geom_half_boxplot(width=0.1, alpha=0.8,side = \"r\") +\n  theme_bw()+   theme(legend.position=\"none\")+#ylim(0,1)+\n  facet_grid(GeneType ~ . , space = \"free_y\", scales = \"free\")+\n  scale_fill_manual(values = colors.methods)\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-5-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot[table.tot$GeneType == \"Neural\",], aes(x = ValAbs, y = -0.5)) +\n\n  # horizontal box plot\n  geom_boxploth(aes(fill = Method)) +\n\n  # normal density plot\n  geom_density(aes(x = ValAbs), inherit.aes = FALSE) +\n\n  # # vertical lines at Q1 / Q2 / Q3\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xlower..)) +\n   stat_boxploth(geom = \"vline\", aes(xintercept = ..xmiddle..)) +\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xupper..)) +\n  # \n   facet_grid(Method ~ .) +\n  \n  # reproduce original chart's color scale (o/w ordered factors will result\n  # in viridis scale by default, using the current version of ggplot2)\n  #scale_fill_discrete()+\n  scale_fill_manual(values = colors.methods)+\n  theme_bw()+   theme(legend.position=\"none\")+xlim(0,0.2)\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-6-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot[table.tot$GeneType == \"Constitutive\",], aes(x = ValAbs, y = -0.5)) +\n  # horizontal box plot\n  geom_boxploth(aes(fill = Method), outlier.size = 0.5,width=3) +\n  # normal density plot\n  geom_density(aes(x = ValAbs), inherit.aes = FALSE) +\n  # # vertical lines at Q1 / Q2 / Q3\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xlower..)) +\n   stat_boxploth(geom = \"vline\", aes(xintercept = ..xmiddle..)) +\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xupper..)) +\n  # \n   facet_grid(Method ~ .) +\n    # reproduce original chart's color scale (o/w ordered factors will result\n  # in viridis scale by default, using the current version of ggplot2)\n  #scale_fill_discrete()+\n  scale_fill_manual(values = colors.methods)+\n  theme_bw()+   theme(legend.position=\"none\")+xlim(0,0.1)\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-7-1.png){width=1440}\n:::\n:::\n\n\nWe can clearly observe that the coex is generally more near to zero than the correlations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot,aes(x=ValAbs, color=Method, y = Y_axis)) + \n  geom_point(alpha=0.8) +\n  scale_color_manual(values = colors.methods)+\n  scale_y_continuous(trans= \"log\",breaks = c(0,0.1,0.25,0.5)\n                         )+\n  scale_x_continuous(trans= \"log\",\n                     breaks = c(0.1,0.2,0.3, 0.4,0.5,0.8), limits = c(0.01,0.85))+\n  theme_bw()+   theme(legend.position=\"bottom\")+ \n  facet_grid(GeneType ~  Dataset)\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-8-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot.hk,aes(x=abs(value), color=Method))+stat_ecdf(geom = \"point\", size = 0.5 )+scale_color_manual(values = colors.methods)+\n  scale_y_continuous(trans= \"exp\")+facet_grid(. ~  Dataset)\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-9-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot,aes(x=Method,y=LogValAbs, fill=Method)) +\n#geom_half_boxplot(alpha=0.8) +\n  #geom_point(position = \"jitter\", size= 0.1,alpha = 0.3)+ \n  geom_boxplot(alpha=0.8,outlier.size = 0.1,outlier.colour='blue') +\n  theme_bw()+   theme(legend.position=\"none\")+#ylim(0,0.2)+\n  facet_grid(GeneType ~ Dataset , space = \"free_y\", scales = \"free\")+\n  scale_fill_manual(values = colors.methods)\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-10-1.png){width=1440}\n:::\n:::\n\n\n## *p*-values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable.tot.hk <- NA\ntable.tot.neural <- NA\nfor (file in list.files(\"CoexData/\",pattern = \"PValue\")) {\n  pval <- read_fst(paste0(\"CoexData/\",file),to = 2)\n\n  colnames.pval <- colnames(pval)\n  genesListPartial <- genesList\n  for (na in names(genesListPartial)) {\n      if(!all(genesListPartial[[na]] %in% colnames.pval)){\n        print(na)\n        genesListPartial[[na]] <- genesListPartial[[na]][-which(!genesList[[na]] %in% colnames.pval)]\n    }\n  }\n\n\n  pval <- read_fst(paste0(\"CoexData/\",file), \n        columns = unlist(genesListPartial),)\n  pval <- as.matrix(pval)\n  rownames(pval) <- colnames.pval\n  \n  \n  if(all(diag(pval[colnames(pval),]) == 1)){\n      diag(pval[colnames(pval),]) = 0\n    }\n  \n  #pval <- as.data.frame(as.matrix(pval))\n  if(str_detect(file,pattern = \"Cotan\")){\n    code <- \"COTAN\"\n  }else if(str_detect(file,pattern = \"PValuesSCT\")){\n    code <- \"Seurat SCT\"\n  }else if(str_detect(file,pattern = \"SeuratPValues\")){\n    code <- \"Seurat\"\n  }else if(str_detect(file,pattern = \"MonoclePValues\")){\n    code <- \"Monocle\"\n  }else if(str_detect(file,pattern = \"ScanPyPValues\")){\n    code <- \"ScanPy\"\n  }\n  \n  \n  table.hk <- as.data.frame(pval[,genesListPartial$hk])\n  table.hk$Gene1 <- rownames(table.hk)\n  \n  table.hk <- pivot_longer(as.data.frame(table.hk),\n                           cols = c(1:(ncol(table.hk)-1)),names_to = \"Gene2\")\n  table.hk$Method <- code\n  table.hk$Dataset <- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n\n  table.tot.hk <- rbind(table.tot.hk,table.hk)\n  table.tot.hk <- table.tot.hk[! table.tot.hk$Gene1 == table.tot.hk$Gene2,]\n \n  #Not hk\n  pval <- as.data.frame(pval)\n  table.neural <- pval[c(genesListPartial$NPGs,genesListPartial$PNGs,genesListPartial$layers),                              c(genesListPartial$NPGs,genesListPartial$PNGs,genesListPartial$layers)]\n  \n  table.neural$Gene1 <- rownames(table.neural)\n  \n  table.neural <- pivot_longer(as.data.frame(table.neural),\n                           cols = c(1:(ncol(table.neural)-1)),names_to = \"Gene2\")\n  \n  table.neural$Method <- code\n  table.neural$Dataset <- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n  \n  table.tot.neural <- rbind(table.tot.neural,table.neural)\n  table.tot.neural <- table.tot.neural[! table.tot.neural$Gene1 == table.tot.neural$Gene2,]\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"hk\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n```\n:::\n\n```{.r .cell-code}\ntable.tot.hk <- table.tot.hk[2:nrow(table.tot.hk),]\ntable.tot.hk$GeneType <- \"Constitutive\" \ntable.tot.neural <- table.tot.neural[2:nrow(table.tot.neural),]\ntable.tot.neural$GeneType <- \"Neural\"\n\n## For ECDL\ntmp.tot <- NA\nfor (method in unique(table.tot.hk$Method)) {\n  tmp <- as.data.frame(table.tot.hk[table.tot.hk$Method == method,])\n  tmp$n <- NA\n  tmp[order(abs(tmp$value)),]$n <- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis <- 1-tmp$n\n  tmp.tot <- rbind(tmp.tot,tmp)\n}\ntmp.tot <- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.hk <- tmp.tot\n\ntmp.tot <- NA\nfor (method in unique(table.tot.neural$Method)) {\n  tmp <- as.data.frame(table.tot.neural[table.tot.neural$Method == method,])\n  tmp$n <- NA\n  tmp[order(abs(tmp$value)),]$n <- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis <- 1-tmp$n\n  tmp.tot <- rbind(tmp.tot,tmp)\n}\ntmp.tot <- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.neural <- tmp.tot\n\n############\n\ntable.tot.hk$Method <- factor(table.tot.hk$Method, levels = c(\"Seurat\", \"Seurat SCT\", \"Monocle\", \"ScanPy\", \"COTAN\"))\ntable.tot.neural$Method <- factor(table.tot.neural$Method, levels = c(\"Seurat\", \"Seurat SCT\", \"Monocle\", \"ScanPy\", \"COTAN\"))\n\ntable.tot.neural <- table.tot.neural[order(table.tot.neural$Method,decreasing = F),]\ntable.tot.hk <- table.tot.hk[order(table.tot.hk$Method,decreasing = F),]\n\ntable.tot <- rbind(table.tot.hk,table.tot.neural) \ntable.tot <- table.tot[!table.tot$Gene1 == table.tot$Gene2,]\n\nidentical(table.tot[table.tot$Method == \"COTAN\",]$Gene1,\n          table.tot[table.tot$Method == \"Seurat\",]$Gene1 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nidentical(table.tot[table.tot$Method == \"COTAN\",]$Gene1,\n          table.tot[table.tot$Method == \"Monocle\",]$Gene1 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nhead(table.tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                Gene1  Gene2       value Method                  Dataset\n3834146 0610007N19Rik  Calm1 0.849134106 Seurat CorticalCells_GSM2861511\n3834147 0610007N19Rik Cox6b1 0.143918297 Seurat CorticalCells_GSM2861511\n3834148 0610007N19Rik   Ppia 0.343763970 Seurat CorticalCells_GSM2861511\n3834149 0610007N19Rik  Rpl18 0.015566169 Seurat CorticalCells_GSM2861511\n3834150 0610007N19Rik  Cox7c 0.001363415 Seurat CorticalCells_GSM2861511\n3834151 0610007N19Rik    Erh 0.126004288 Seurat CorticalCells_GSM2861511\n            GeneType         n    Y_axis\n3834146 Constitutive 0.8971864 0.1028136\n3834147 Constitutive 0.3391140 0.6608860\n3834148 Constitutive 0.5164962 0.4835038\n3834149 Constitutive 0.1654806 0.8345194\n3834150 Constitutive 0.1020740 0.8979260\n3834151 Constitutive 0.3209477 0.6790523\n```\n:::\n:::\n\n\n### Constitutive genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot[table.tot$GeneType == \"Constitutive\",], aes(y = value)) +\n  geom_boxplot(aes(fill = Method), outlier.size = 0.5,width=3) +\n  scale_fill_discrete()+ scale_fill_manual(values = colors.methods)+\n  facet_grid(. ~ Dataset )+\n  theme_bw()#+   theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-12-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot.hk,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+\n  scale_color_manual(values = colors.methods)+\n  facet_grid(. ~ Dataset )+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-13-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot.hk,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+ scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),limits = c(10^(-100),0.05)) + ylim(0,0.4) +scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-14-1.png){width=1440}\n:::\n:::\n\n\nWe can observe from this plot that COTAN has lower false positive error in fact the number of constitutive genes with *p-*values lower than 0.05 is quite smaller than from Seurat (both normalization).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot[table.tot$GeneType == \"Constitutive\",],aes(x=value, color=Method))+geom_density()+xlim(0,0.05)+\n  scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-15-1.png){width=1440}\n:::\n:::\n\n\n### Neural genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot[table.tot$GeneType == \"Neural\",], aes(y = (value))) +\n  geom_boxplot(aes(fill = Method), outlier.size = 0.5,width=3) +\n  scale_fill_discrete()+scale_fill_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw() #+ theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-16-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot[table.tot$GeneType == \"Neural\",], aes(y = log(value+0.001))) +\n  geom_boxplot(aes(fill = Method), outlier.size = 0.5,width=3) +\n  scale_fill_discrete()+scale_fill_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw() #+ theme(legend.position=\"none\")\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-17-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot.neural,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+scale_color_manual(values = colors.methods)+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-18-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot.neural,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(0.0001,0.05)) +\n  scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-19-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot.neural,aes(x=value,y=n, color=Method))+geom_point(size = 0.5,alpha = 0.8)+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(10^(-300),0.05)) + ylim(0,0.5)+\n  scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-20-1.png){width=1440}\n:::\n:::\n\n\n### Direct comparision\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot,aes(x=value, color=Method))+geom_density()+\n  facet_grid(GeneType ~ Dataset,scales=\"free\")+\n  scale_color_manual(values = colors.methods)+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-21-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot,aes(x=value,y=n, color=Method))+geom_point(size = 0.8, alpha=0.8 )+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(1e-10,0.05)\n    ) + \n  facet_grid(. ~ GeneType ,scales=\"free\") +\n  scale_color_manual(values = colors.methods)+xlab(\"p-values\")+\n  theme_bw()+ theme(legend.position=\"right\")\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-22-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(table.tot,aes(x=value,y=n, color=Method))+geom_point(size = 0.8, alpha=0.8 )+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(1e-10,0.05)\n    ) + \n  facet_grid(Dataset ~ GeneType ,scales=\"free\") +\n  scale_color_manual(values = colors.methods)+xlab(\"p-values\")+\n  theme_bw()+ theme(legend.position=\"right\")\n```\n\n::: {.cell-output-display}\n![](generalCoexAssess_files/figure-html/unnamed-chunk-23-1.png){width=1440}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-05-08 19:52:31 CEST\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] fstcore_0.9.18        fst_0.9.8             dplyr_1.1.2          \n [4] circlize_0.4.15       ComplexHeatmap_2.16.0 COTAN_2.5.0          \n [7] scales_1.3.0          ggstance_0.3.6        Matrix_1.6-3         \n[10] cowplot_1.1.1         gridExtra_2.3         ggstatsplot_0.12.0   \n[13] gghalves_0.1.4        ggplot2_3.5.0         stringr_1.5.0        \n[16] tidyr_1.3.0          \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               tibble_3.2.1             \n  [5] polyclip_1.10-4           datawizard_0.9.0         \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] doParallel_1.0.17         globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] insight_0.19.6            dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             Seurat_5.0.0             \n [21] sctransform_0.4.1         askpass_1.2.0            \n [23] spam_2.10-0               sp_2.1-1                 \n [25] spatstat.sparse_3.0-2     reticulate_1.36.1        \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] multcomp_1.4-25           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] BiocGenerics_0.46.0       TH.data_1.1-2            \n [35] sandwich_3.1-0            IRanges_2.34.1           \n [37] S4Vectors_0.38.1          ggrepel_0.9.5            \n [39] irlba_2.3.5.1             listenv_0.9.0            \n [41] spatstat.utils_3.0-3      correlation_0.8.4        \n [43] umap_0.2.10.0             goftest_1.2-3            \n [45] RSpectra_0.16-1           spatstat.random_3.2-1    \n [47] dqrng_0.3.0               fitdistrplus_1.1-11      \n [49] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [51] leiden_0.4.3              codetools_0.2-19         \n [53] DelayedArray_0.26.7       tidyselect_1.2.0         \n [55] shape_1.4.6               farver_2.1.1             \n [57] viridis_0.6.4             ScaledMatrix_1.8.1       \n [59] matrixStats_1.2.0         stats4_4.3.2             \n [61] spatstat.explore_3.2-1    jsonlite_1.8.7           \n [63] GetoptLong_1.0.5          ellipsis_0.3.2           \n [65] progressr_0.14.0          ggridges_0.5.4           \n [67] survival_3.5-8            iterators_1.0.14         \n [69] emmeans_1.10.0            foreach_1.5.2            \n [71] tools_4.3.2               ica_1.0-3                \n [73] Rcpp_1.0.11               glue_1.7.0               \n [75] xfun_0.39                 MatrixGenerics_1.12.3    \n [77] ggthemes_5.1.0            withr_3.0.0              \n [79] fastmap_1.1.1             fansi_1.0.4              \n [81] openssl_2.1.0             digest_0.6.33            \n [83] rsvd_1.0.5                parallelDist_0.2.6       \n [85] R6_2.5.1                  mime_0.12                \n [87] estimability_1.5          colorspace_2.1-0         \n [89] scattermore_1.2           tensor_1.5               \n [91] spatstat.data_3.0-1       utf8_1.2.3               \n [93] generics_0.1.3            data.table_1.15.0        \n [95] httr_1.4.6                htmlwidgets_1.6.2        \n [97] S4Arrays_1.2.0            parameters_0.21.1        \n [99] uwot_0.1.16               pkgconfig_2.0.3          \n[101] gtable_0.3.3              statsExpressions_1.5.1   \n[103] lmtest_0.9-40             htmltools_0.5.8          \n[105] dotCall64_1.1-0           clue_0.3-64              \n[107] SeuratObject_5.0.0        png_0.1-8                \n[109] knitr_1.43                rstudioapi_0.15.0        \n[111] reshape2_1.4.4            rjson_0.2.21             \n[113] nlme_3.1-163              coda_0.19-4              \n[115] zoo_1.8-12                GlobalOptions_0.1.2      \n[117] KernSmooth_2.23-22        parallel_4.3.2           \n[119] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[121] pillar_1.9.0              vctrs_0.6.3              \n[123] RANN_2.6.1                promises_1.2.0.1         \n[125] BiocSingular_1.16.0       beachmat_2.16.0          \n[127] xtable_1.8-4              cluster_2.1.6            \n[129] paletteer_1.6.0           evaluate_0.21            \n[131] zeallot_0.1.0             mvtnorm_1.2-2            \n[133] cli_3.6.1                 compiler_4.3.2           \n[135] rlang_1.1.1               crayon_1.5.2             \n[137] future.apply_1.11.0       labeling_0.4.2           \n[139] rematch2_2.1.2            plyr_1.8.8               \n[141] stringi_1.8.1             viridisLite_0.4.2        \n[143] deldir_2.0-2              BiocParallel_1.34.2      \n[145] assertthat_0.2.1          munsell_0.5.0            \n[147] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[149] bayestestR_0.13.1         PCAtools_2.14.0          \n[151] RcppHNSW_0.6.0            patchwork_1.2.0          \n[153] sparseMatrixStats_1.12.2  future_1.33.0            \n[155] shiny_1.8.0               ROCR_1.0-11              \n[157] Rfast_2.1.0               igraph_2.0.3             \n[159] RcppParallel_5.1.7       \n```\n:::\n:::\n",
    "supporting": [
      "generalCoexAssess_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}