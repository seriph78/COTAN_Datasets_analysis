{
  "hash": "b9606570e014cf45f4cd9e666a2c1e57",
  "result": {
    "markdown": "---\ntitle: \"Forebrain Dorsal E17.5 Data-set Anaysis\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n#devtools::load_all(\"../COTAN/\")\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir <- \"Data/MouseCortexFromLoom/\"\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"ForebrainDorsal_E175-analysis.log\"))\n```\n:::\n\n\nRead the already created COTAN object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb175Obj <- readRDS(file.path(\"Data/MouseCortexFromLoom/SourceData/\", \"e17.5_ForebrainDorsal.cotan.RDS\"))\nsampleCondition <- getMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])\n\nsampleCondition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"e17.5_ForebrainDorsal\"\n```\n:::\n:::\n\n\nInspect cells' sizes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nDrop cells with too many reads reads as they are probably doublets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellsSizeThr <- 10000\nfb175Obj <- addElementToMetaDataset(fb175Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem <- getCells(fb175Obj)[getCellsSize(fb175Obj) > cellsSizeThr]\nfb175Obj <- dropGenesCells(fb175Obj, cells = cells_to_rem)\n\ncellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nInspect the number of expressed genes per cell\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nDrop cells with too low genes expression as they are probably dead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesSizeLowThr <- 700\nfb175Obj <- addElementToMetaDataset(fb175Obj, \"Num genes low threshold\", genesSizeLowThr)\n\nnumExprGenes <- getNumExpressedGenes(fb175Obj)\ncells_to_rem <- names(numExprGenes)[numExprGenes < genesSizeLowThr]\nfb175Obj <- dropGenesCells(fb175Obj, cells = cells_to_rem)\n\ngenesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nCheck number of mitochondrial genes expressed in each cell\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmitGenesPattern <- \"^mt.\"\ngetGenes(fb175Obj)[grep(mitGenesPattern, getGenes(fb175Obj))]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mt.Co1\" \"mt.Co3\" \"mt.Nd4\" \"mt.Nd5\" \"mt.Nd1\" \"mt.Nd2\"\n```\n:::\n\n```{.r .cell-code}\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(fb175Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nCells with a too high percentage of mitochondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmitPercThr <- 1.5\nfb175Obj <- addElementToMetaDataset(fb175Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem <- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] > mitPercThr]\n\nfb175Obj <- dropGenesCells(fb175Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(fb175Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nCheck no further outlines after all the culling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngenesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\nClean: round 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb175Obj <- clean(fb175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb175Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfb175Obj <- addElementToMetaDataset(fb175Obj, \"Num drop B group\", 0)\n```\n:::\n\n\nVisualize if all is ok:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(UDEPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(nuPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(zoomedNuPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n:::\n\n\nFinal cleaning to check all is OK\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb175Obj <- clean(fb175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb175Obj)\n\nplot(pcaCellsPlot)\nplot(genesPlot)\nplot(UDEPlot)\nplot(nuPlot)\nplot(zoomedNuPlot)\n\nplot(cellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1))\nplot(genesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nCalculate genes' COEX\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb175Obj <- proceedToCoex(fb175Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngdiData <- calculateGDI(fb175Obj)\n\ngenesToLabel <- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Mfge8\"    \"Myt1l\"    \"Atp1a2\"   \"Sparc\"    \"Apoe\"     \"Phgdh\"   \n [7] \"Slc9a3r1\" \"Tnc\"      \"Ccdc80\"   \"Aldoc\"   \n```\n:::\n\n```{.r .cell-code}\ngdiPlot <- GDIPlot(fb175Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E175-analysis_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nSave the COTAN object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(fb175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(splitClusters, splitCoexDF) %<-%\n  cellsUniformClustering(fb175Obj, GDIThreshold = 1.4, cores = 13L,\n                         saveObj = TRUE, outDir = outDir)\n\nfb175Obj <- addClusterization(fb175Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsplitClusters <- getClusterizationData(fb175Obj,clName = \"split\")$clusters\n\ntable(splitClusters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsplitClusters\n -1  20  04  05  06  07  10  22  11  08  21  23  16  12  18  24  09  14  15  13 \n 10 384 130 119  82  53  44  40  32  22 413 166 159  91  55  50  15 202 146  70 \n 02  01  03  17  19 \n 50  37  32  35  30 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(mergedClusters, mergedCoexDF) %<-%\n  mergeUniformCellsClusters(fb175Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, batchSize = 20L, cores = 13L,\n                            saveObj = TRUE, outDir = outDir)\n\nfb175Obj <- addClusterization(fb175Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmergedClusters <- getClusterizationData(fb175Obj,clName = \"merge\")$clusters\ntable(mergedClusters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmergedClusters\n 16  03  04  05  06  07  18  01  02  12  19  14  13  15  17  08  09  10  11 \n 65  37  50  32 130 119 135  22  15  44  32 237 100 202 194 384 413  90 166 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-08-22 11:46:58 CEST\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.7   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.15.0      jsonlite_1.8.7        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.24        \n [10] GlobalOptions_0.1.2    vctrs_0.6.3            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-22    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.2          zoo_1.8-12             igraph_1.5.1          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.6-0           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-11    future_1.33.0         \n [34] shiny_1.7.5            clue_0.3-64            digest_0.6.33         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.1      \n [40] Seurat_4.3.0.1         tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.14.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-2 \n [49] httr_1.4.6             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.1         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.4          dendextend_1.17.1      MASS_7.3-60           \n [58] openssl_2.1.0          rjson_0.2.21           tools_4.3.1           \n [61] lmtest_0.9-40          httpuv_1.6.11          future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.1             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_2.0-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-4    RcppAnnoy_0.0.21      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.1           \n [88] circlize_0.4.15        splines_4.3.1          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-9          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-2          knitr_1.43             gridExtra_2.3         \n[100] IRanges_2.34.1         scattermore_1.2        stats4_4.3.1          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.21          codetools_0.2-19       cli_3.6.1             \n[112] RcppParallel_5.1.7     uwot_0.1.16            xtable_1.8-4          \n[115] reticulate_1.30        munsell_0.5.0          Rcpp_1.0.11           \n[118] globals_0.16.2         spatstat.random_3.1-5  png_0.1-8             \n[121] parallel_4.3.1         Rfast_2.0.8            ellipsis_0.3.2        \n[124] assertthat_0.2.1       parallelDist_0.2.6     listenv_0.9.0         \n[127] ggthemes_4.2.4         viridisLite_0.4.2      scales_1.2.1          \n[130] ggridges_0.5.4         SeuratObject_4.1.3     leiden_0.4.3          \n[133] purrr_1.0.1            crayon_1.5.2           GetoptLong_1.0.5      \n[136] rlang_1.1.1            cowplot_1.1.1         \n```\n:::\n:::\n",
    "supporting": [
      "ForebrainDorsal_E175-analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}