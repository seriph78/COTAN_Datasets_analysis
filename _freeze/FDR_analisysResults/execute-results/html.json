{
  "hash": "fbd0915d43e91edc1591097241acea7f",
  "result": {
    "markdown": "---\ntitle: \"FDR analysis - Results\"\nauthor: \"Silvia Giulia Galfr√®\"\ndate: \"2024-02-21\"\noutput: html_document\n---\n\n\n## Automatic functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\ndirOut <- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir <- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\"\n```\n:::\n\n\n## Cluster Gene Enrichment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasets_csv <- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      Group\n1      2_Clusters_even_near\n2      2_Clusters_even_near\n3      2_Clusters_even_near\n4    2_Clusters_even_medium\n5    2_Clusters_even_medium\n6    2_Clusters_even_medium\n7       2_Clusters_even_far\n8       2_Clusters_even_far\n9       2_Clusters_even_far\n10   2_Clusters_uneven_near\n11   2_Clusters_uneven_near\n12   2_Clusters_uneven_near\n13 2_Clusters_uneven_medium\n14 2_Clusters_uneven_medium\n15 2_Clusters_uneven_medium\n16    2_Clusters_uneven_far\n17    2_Clusters_uneven_far\n18    2_Clusters_uneven_far\n19          3_Clusters_even\n20          3_Clusters_even\n21          3_Clusters_even\n22        3_Clusters_uneven\n23        3_Clusters_uneven\n24        3_Clusters_uneven\n25        5_Clusters_uneven\n26        5_Clusters_uneven\n27        5_Clusters_uneven\n                                                  Collection E13.5.432\n1                                      E13.5-434_+_E15.0-428         0\n2                                      E15.0-432_+_E13.5-432       536\n3                                      E15.0-508_+_E15.0-509         0\n4                                      E13.5-187_+_E13.5-184         0\n5                                      E15.0-434_+_E17.5-516         0\n6                                      E15.0-437_+_E15.0-508         0\n7                                      E17.5-516_+_E13.5-187         0\n8                                      E15.0-510_+_E13.5-437         0\n9                                      E15.0-509_+_E13.5-184         0\n10                                     E13.5-434_+_E15.0-428         0\n11                                     E15.0-432_+_E13.5-432        66\n12                                     E15.0-508_+_E15.0-509         0\n13                                     E13.5-187_+_E13.5-184         0\n14                                     E15.0-434_+_E17.5-516         0\n15                                     E15.0-437_+_E15.0-508         0\n16                                     E17.5-516_+_E13.5-187         0\n17                                     E15.0-510_+_E13.5-437         0\n18                                     E15.0-509_+_E13.5-184         0\n19                         E15.0-437_+_E13.5-510_+_E13.5-437         0\n20                         E17.5-505_+_E17.5-516_+_E13.5-437         0\n21                         E15.0-510_+_E15.0-428_+_E13.5-510         0\n22                         E15.0-428_+_E13.5-434_+_E15.0-510         0\n23                         E13.5-187_+_E13.5-432_+_E15.0-432       168\n24                         E15.0-509_+_E13.5-184_+_E15.0-508         0\n25 E13.5-510_+_E15.0-437_+_E15.0-510_+_E13.5-432_+_E13.5-437       518\n26 E15.0-428_+_E13.5-434_+_E15.0-434_+_E17.5-505_+_E13.5-184         0\n27 E13.5-432_+_E15.0-509_+_E15.0-432_+_E13.5-187_+_E15.0-508       440\n   E13.5.187 E13.5.434 E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509\n1          0       318         0         0         0         0         0\n2          0         0         0         0         0       536         0\n3          0         0         0         0         0         0       397\n4        292         0       292         0         0         0         0\n5          0         0         0         0         0         0         0\n6          0         0         0         0         0         0         0\n7        297         0         0         0         0         0         0\n8          0         0         0       259         0         0         0\n9          0         0       292         0         0         0       292\n10         0       326         0         0         0         0         0\n11         0         0         0         0         0       586         0\n12         0         0         0         0         0         0       402\n13       334         0        38         0         0         0         0\n14         0         0         0         0         0         0         0\n15         0         0         0         0         0         0         0\n16       334         0         0         0         0         0         0\n17         0         0         0        45         0         0         0\n18         0         0        45         0         0         0       402\n19         0         0         0       248       248         0         0\n20         0         0         0       203         0         0         0\n21         0         0         0         0       248         0         0\n22         0       115         0         0         0         0         0\n23        84         0         0         0         0       586         0\n24         0         0        58         0         0         0       402\n25         0         0         0       259        65         0         0\n26         0       326       163         0         0         0         0\n27        74         0         0         0         0       586       293\n   E15.0.510 E15.0.508 E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1          0         0       318         0         0         0         0\n2          0         0         0         0         0         0         0\n3          0       397         0         0         0         0         0\n4          0         0         0         0         0         0         0\n5          0         0         0       273         0       273         0\n6          0       258         0         0       258         0         0\n7          0         0         0         0         0       297         0\n8        259         0         0         0         0         0         0\n9          0         0         0         0         0         0         0\n10         0         0        37         0         0         0         0\n11         0         0         0         0         0         0         0\n12         0        45         0         0         0         0         0\n13         0         0         0         0         0         0         0\n14         0         0         0        33         0       297         0\n15         0       397         0         0        45         0         0\n16         0         0         0         0         0        38         0\n17       402         0         0         0         0         0         0\n18         0         0         0         0         0         0         0\n19         0         0         0         0       248         0         0\n20         0         0         0         0         0       203       203\n21       248         0       248         0         0         0         0\n22       402         0        58         0         0         0         0\n23         0         0         0         0         0         0         0\n24         0       115         0         0         0         0         0\n25       389         0         0         0        65         0         0\n26         0         0       245        41         0         0        41\n27         0        74         0         0         0         0         0\n```\n:::\n:::\n\n\n### Define which genes are expressed\n\nFor each data set we need to define, independently from the DEA methods, which genes are specific for each cluster. So we need to define first which genes are expressed and which are not expressed. To do so we can take advantage from the fact that we have the original clusters from which the cells were sampled to create the artificial datasets. So looking to the original cluster we define as expressed all genes present in at least the 5% of cells and we define as not expressed the genes completely absent or expressed in less than 3% of cells\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.presence <- readRDS(\"Data/MouseCortexFromLoom/FDR/Results/GenePresence_PerCluster.RDS\")\n\nfor (file in list.files(\"Data/MouseCortexFromLoom/SingleClusterRawData/\")) {\n#  print(file)\n  Code <- str_split(file,pattern = \"_\",simplify = T)[1]\n  Time <- str_split(Code,pattern = \"e\",simplify = T)[2]\n  Cluster <- str_split(Code,pattern = \"e\",simplify = T)[1]\n  Cluster <- str_remove(Cluster,pattern = \"Cl\")\n  Cluster <- paste0(\"E\",Time,\"-\",Cluster)\n  file.presence[,Cluster] <- \"Absent\"\n  dataset.cl <- readRDS(file.path(\"Data/MouseCortexFromLoom/SingleClusterRawData/\",\n                                         file))\n  number.cell.expressing <- rowSums(dataset.cl > 0)\n  AbsentThreshold <- round(0.03*dim(dataset.cl)[2],digits = 0)\n  PresenceThreshold <- round(0.10*dim(dataset.cl)[2],digits = 0)\n  file.presence[names(number.cell.expressing[number.cell.expressing > AbsentThreshold]),Cluster] <- \"Uncertain\" \n  \n  file.presence[names(number.cell.expressing[number.cell.expressing >= PresenceThreshold]),Cluster] <- \"Present\"\n  print(Cluster)\n  print(table(file.presence[,Cluster]))\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-184\"\n\n   Absent   Present Uncertain \n     5519      6027      3149 \n[1] \"E13.5-187\"\n\n   Absent   Present Uncertain \n     4926      7151      2618 \n[1] \"E15.0-428\"\n\n   Absent   Present Uncertain \n     6386      5253      3056 \n[1] \"E13.5-432\"\n\n   Absent   Present Uncertain \n     5765      5975      2955 \n[1] \"E15.0-432\"\n\n   Absent   Present Uncertain \n     5912      5843      2940 \n[1] \"E13.5-434\"\n\n   Absent   Present Uncertain \n     6124      5487      3084 \n[1] \"E15.0-434\"\n\n   Absent   Present Uncertain \n     6301      5396      2998 \n[1] \"E13.5-437\"\n\n   Absent   Present Uncertain \n     5943      5783      2969 \n[1] \"E15.0-437\"\n\n   Absent   Present Uncertain \n     6017      5713      2965 \n[1] \"E17.5-505\"\n\n   Absent   Present Uncertain \n     6048      5662      2985 \n[1] \"E15.0-508\"\n\n   Absent   Present Uncertain \n     5625      6240      2830 \n[1] \"E15.0-509\"\n\n   Absent   Present Uncertain \n     5452      6454      2789 \n[1] \"E13.5-510\"\n\n   Absent   Present Uncertain \n     4924      6958      2813 \n[1] \"E15.0-510\"\n\n   Absent   Present Uncertain \n     5070      6952      2673 \n[1] \"E17.5-516\"\n\n   Absent   Present Uncertain \n     5821      5847      3027 \n```\n:::\n:::\n\n\n# 2 Clusters even\n\n## 2_Clusters_even_near\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"2_Clusters_even_near\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set             set_number\n  <chr> <chr>     <lgl> <chr>                     <int>\n1 Neil2 E13.5-434 FALSE 2_Clusters_even_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_even_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_even_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_even_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_even_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_even_near          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\nplot(roc_resultSeurat)\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/seurat1-1.png){width=672}\n:::\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## 2_Clusters_even_medium\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"2_Clusters_even_medium\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set               set_number\n  <chr> <chr>     <lgl> <chr>                       <int>\n1 Neil2 E13.5-187 FALSE 2_Clusters_even_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_even_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_even_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_even_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_even_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_even_medium          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 2_Clusters_even_far\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"2_Clusters_even_far\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set            set_number\n  <chr> <chr>     <lgl> <chr>                    <int>\n1 Neil2 E17.5-516 FALSE 2_Clusters_even_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_even_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_even_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_even_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_even_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_even_far          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# 2 clusters uneven\n\n## 2_Clusters_uneven_near\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_near\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set               set_number\n  <chr> <chr>     <lgl> <chr>                       <int>\n1 Neil2 E13.5-434 FALSE 2_Clusters_uneven_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_uneven_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\nplot(roc_resultSeurat)\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/seurat4-1.png){width=672}\n:::\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 2_Clusters_even_medium\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_medium\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set                 set_number\n  <chr> <chr>     <lgl> <chr>                         <int>\n1 Neil2 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 2_Clusters_even_far\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_far\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set              set_number\n  <chr> <chr>     <lgl> <chr>                      <int>\n1 Neil2 E17.5-516 FALSE 2_Clusters_uneven_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_uneven_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_uneven_far          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# 3 clusters even\n\n## 3_Clusters_even\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"3_Clusters_even\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set        set_number\n  <chr> <chr>     <lgl> <chr>                <int>\n1 Neil2 E15.0-437 FALSE 3_Clusters_even          1\n2 Neil2 E13.5-510 FALSE 3_Clusters_even          1\n3 Neil2 E13.5-437 FALSE 3_Clusters_even          1\n4 Lamc1 E15.0-437 FALSE 3_Clusters_even          1\n5 Lamc1 E13.5-510 FALSE 3_Clusters_even          1\n6 Lamc1 E13.5-437 FALSE 3_Clusters_even          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E17.5-516\"\n[1] \"E13.5-437\"\n[1] \"E17.5-505\"\n[1] \"E15.0-510\"\n[1] \"E15.0-428\"\n[1] \"E13.5-510\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 3_Clusters_uneven\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"3_Clusters_uneven\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set          set_number\n  <chr> <chr>     <lgl> <chr>                  <int>\n1 Neil2 E15.0-428 FALSE 3_Clusters_uneven          1\n2 Neil2 E13.5-434 FALSE 3_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 3_Clusters_uneven          1\n4 Lamc1 E15.0-428 FALSE 3_Clusters_uneven          1\n5 Lamc1 E13.5-434 FALSE 3_Clusters_uneven          1\n6 Lamc1 E15.0-510 FALSE 3_Clusters_uneven          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E15.0-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E13.5-187\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-184\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df <- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) <- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method <- \"COTAN\"\n# \n# Positive <- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative <- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] <- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] <- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# 5 clusters\n\n## 5_Clusters_uneven\n\nTrue vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset.datasets_csv <-datasets_csv[datasets_csv$Group == \"5_Clusters_uneven\",] \n\nground_truth_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters <- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset <- file.presence[,clusters]\n  \n  \n  #file.presence.subset <- as.matrix(file.presence.subset)\n  \n  \n  ground_truth <- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) <- rownames(file.presence.subset)\n  colnames(ground_truth) <- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] <- 0\n  ground_truth[file.presence.subset == \"Present\"] <- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] <- 0.5\n  \n  file.presence.subset <- ground_truth\n  \n  for (col in colnames(ground_truth)) {\n    ground_truth[,col] <- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset) < 0.65  ,col] <- TRUE\n    }\n  \n  ground_truth$genes <- rownames(ground_truth) \n  ground_truth <- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set <- subset.datasets_csv[ind,1]\n  ground_truth$set_number <- ind \n  ground_truth_tot <- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot <- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  genes clusters  value data_set          set_number\n  <chr> <chr>     <lgl> <chr>                  <int>\n1 Neil2 E13.5-510 FALSE 5_Clusters_uneven          1\n2 Neil2 E15.0-437 FALSE 5_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 5_Clusters_uneven          1\n4 Neil2 E13.5-432 FALSE 5_Clusters_uneven          1\n5 Neil2 E13.5-437 FALSE 5_Clusters_uneven          1\n6 Lamc1 E13.5-510 FALSE 5_Clusters_uneven          1\n```\n:::\n:::\n\n\n### ROC for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names <- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names <- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) <- cl.names\n  colnames(pvalCOTAN) <- cl.names\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan <- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign <- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] < 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl] <-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] < 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes <- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan <- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set <- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number <- ind \n  onlyPositive.pVal.Cotan_tot <- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"E13.5-432\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E13.5-184\"\n[1] \"E15.0-434\"\n[1] \"E17.5-505\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-187\"\n```\n:::\n\n```{.r .cell-code}\nonlyPositive.pVal.Cotan_tot <- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot <- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value <- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN <- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n```\n:::\n\n\n### ROC for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaSeurat_tot <- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat <- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) <- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set <- subset.datasets_csv[ind,1]\n  deaSeurat$set_number <- ind \n  deaSeurat_tot <- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot <-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot <- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value <- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat <- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n```\n:::\n\n\n### ROC for Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaMonocle_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle <- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) <- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set <- subset.datasets_csv[ind,1]\n  deaMonocle$set_number <- ind \n  deaMonocle <- as.data.frame(deaMonocle)\n  deaMonocle_tot <- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot <-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot <- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value <- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle <- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n```\n:::\n\n\n### ROC from ScamPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeaScamPy_tot <- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code <- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization <- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy <- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names <- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name <- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names <- c(cl.names,cl.name)\n    cl.names <- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] <- cl.name   \n  \n  }\n  \n  clusters <- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set <- subset.datasets_csv[ind,1]\n  deaScamPy$set_number <- ind \n  deaScamPy_tot <- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot <-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot <- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value <- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy <- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Monolce=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\ng2+ xlab(\"FPR\") + ylab(\"TPR\")\n```\n\n::: {.cell-output-display}\n![](FDR_analisysResults_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Footer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggplot2_3.4.2               tidyr_1.3.0                \n [3] dplyr_1.1.2                 stringr_1.5.0              \n [5] reticulate_1.35.0           monocle3_1.3.4             \n [7] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[15] Biobase_2.60.0              BiocGenerics_0.46.0        \n[17] Seurat_5.0.0                SeuratObject_5.0.0         \n[19] sp_2.1-1                    pROC_1.18.4                \n[21] COTAN_2.3.3                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] doParallel_1.0.17         globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] dendextend_1.17.1         magrittr_2.0.3           \n [15] plotly_4.10.2             rmarkdown_2.24           \n [17] yaml_2.3.7                httpuv_1.6.11            \n [19] sctransform_0.4.1         spam_2.10-0              \n [21] askpass_1.2.0             spatstat.sparse_3.0-2    \n [23] minqa_1.2.5               cowplot_1.1.1            \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] zlibbioc_1.46.0           abind_1.4-5              \n [29] Rtsne_0.16                purrr_1.0.1              \n [31] RCurl_1.98-1.12           GenomeInfoDbData_1.2.10  \n [33] circlize_0.4.15           ggrepel_0.9.3            \n [35] irlba_2.3.5.1             listenv_0.9.0            \n [37] spatstat.utils_3.0-3      terra_1.7-39             \n [39] umap_0.2.10.0             goftest_1.2-3            \n [41] RSpectra_0.16-1           spatstat.random_3.2-1    \n [43] dqrng_0.3.0               fitdistrplus_1.1-11      \n [45] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [47] leiden_0.4.3              codetools_0.2-19         \n [49] DelayedArray_0.26.7       tidyselect_1.2.0         \n [51] shape_1.4.6               farver_2.1.1             \n [53] lme4_1.1-34               ScaledMatrix_1.8.1       \n [55] viridis_0.6.4             spatstat.explore_3.2-1   \n [57] jsonlite_1.8.7            GetoptLong_1.0.5         \n [59] ellipsis_0.3.2            progressr_0.14.0         \n [61] ggridges_0.5.4            survival_3.5-7           \n [63] iterators_1.0.14          foreach_1.5.2            \n [65] tools_4.3.2               ica_1.0-3                \n [67] Rcpp_1.0.11               glue_1.7.0               \n [69] gridExtra_2.3             xfun_0.39                \n [71] ggthemes_5.0.0            withr_3.0.0              \n [73] fastmap_1.1.1             boot_1.3-28              \n [75] fansi_1.0.4               openssl_2.1.0            \n [77] digest_0.6.33             rsvd_1.0.5               \n [79] parallelDist_0.2.6        R6_2.5.1                 \n [81] mime_0.12                 colorspace_2.1-0         \n [83] scattermore_1.2           tensor_1.5               \n [85] spatstat.data_3.0-1       utf8_1.2.3               \n [87] generics_0.1.3            data.table_1.15.0        \n [89] httr_1.4.6                htmlwidgets_1.6.2        \n [91] S4Arrays_1.2.0            uwot_0.1.16              \n [93] pkgconfig_2.0.3           gtable_0.3.3             \n [95] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n [97] XVector_0.40.0            htmltools_0.5.7          \n [99] dotCall64_1.1-0           clue_0.3-64              \n[101] scales_1.3.0              png_0.1-8                \n[103] knitr_1.43                rstudioapi_0.15.0        \n[105] reshape2_1.4.4            rjson_0.2.21             \n[107] nloptr_2.0.3              nlme_3.1-163             \n[109] zoo_1.8-12                GlobalOptions_0.1.2      \n[111] KernSmooth_2.23-22        parallel_4.3.2           \n[113] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[115] pillar_1.9.0              grid_4.3.2               \n[117] vctrs_0.6.3               RANN_2.6.1               \n[119] promises_1.2.0.1          BiocSingular_1.16.0      \n[121] beachmat_2.16.0           xtable_1.8-4             \n[123] cluster_2.1.6             evaluate_0.21            \n[125] zeallot_0.1.0             cli_3.6.1                \n[127] compiler_4.3.2            rlang_1.1.1              \n[129] crayon_1.5.2              future.apply_1.11.0      \n[131] labeling_0.4.2            plyr_1.8.8               \n[133] stringi_1.8.1             viridisLite_0.4.2        \n[135] deldir_2.0-2              BiocParallel_1.34.2      \n[137] assertthat_0.2.1          munsell_0.5.0            \n[139] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[141] PCAtools_2.14.0           Matrix_1.6-3             \n[143] RcppHNSW_0.6.0            patchwork_1.2.0          \n[145] sparseMatrixStats_1.12.2  future_1.33.0            \n[147] shiny_1.8.0               ROCR_1.0-11              \n[149] Rfast_2.1.0               igraph_1.6.0             \n[151] RcppParallel_5.1.7       \n```\n:::\n:::\n",
    "supporting": [
      "FDR_analisysResults_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}