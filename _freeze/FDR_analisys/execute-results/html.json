{
  "hash": "f1f8734e2199a43ab7bcab7615776dc6",
  "result": {
    "markdown": "---\ntitle: \"FDR analysis - define DE genes\"\nauthor: \"Silvia Giulia Galfr√®\"\ndate: \"2024-02-20\"\noutput: html_document\n---\n\n\n## Automatic functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(COTAN)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\n\ndirOut <- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir <- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat.DEA <- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc <- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n  \n  \n  pbmc <- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n  pbmc <- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n  all.genes <- rownames(pbmc)\n  pbmc <- ScaleData(pbmc, features = all.genes)\n  \n  pbmc <- RunPCA(pbmc)\n  pbmc <- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl <- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl <- factor(clusters.list)\n  \n  pbmc <- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)\n  \n  \n  \n  n.genes.DEA <- sum(pbmc.markers$p_val_adj < 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n  }\n\nMonocle.DEA <- function(dataSet,clusters.list,project, dirOut#,percentage\n                        ){\n  \n  cell_metadata = as.data.frame(clusters.list[colnames(dataSet)])\n  colnames(cell_metadata) <- \"Clusters\"\n  cds <- new_cell_data_set(dataSet[rowSums(dataSet) > 3,],\n                         cell_metadata = cell_metadata\n                         )\n  colData(cds)$cluster <- clusters.list[rownames(colData(cds))]\n\n  #cds <- preprocess_cds(cds, num_dim = 100)\n  #cds <- reduce_dimension(cds)\n  #cds <- cluster_cells(cds, resolution=1e-5)\n  marker_test_res <- top_markers(cds, \n                                 group_cells_by=\"Clusters\", \n                                 genes_to_test_per_group = dim(cds)[1],\n                                  cores=10)\n  \n  # de_results <- fit_models(cds,model_formula_str = \" ~ cluster\",cores = 10,verbose = T)\n  # fit_coefs <- coefficient_table(de_results)\n  # \n  # fit_coefs <- fit_coefs %>% filter(grepl(\"cluster\",term))\n  # fit_coefs <- as.data.frame(fit_coefs)\n  #write.csv(as.data.frame(fit_coefs[,c(\"num_cells_expressed\" ,\"gene_id\",\"p_value\",\"q_value\")]), file = paste0(dirOut,project,\"_de_genes_Monocle_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=sum(marker_test_res$marker_test_q_value < 0.05, na.rm = T),\n              \"marker_test_res\"= marker_test_res\n              ))\n}\n\n\nScamPy.DEA <- function(dataSet,\n                       clusters.list, \n                       project, \n                       dirOut,\n                       percentage){\n  pbmc <- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 20)\n  \n  \n  pbmc@meta.data$TestCl <- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl <- clusters.list\n  \n  exprs <- pbmc@assays$RNA$counts\n  \n  meta <- pbmc[[]]\n  #feature_meta <- GetAssay(pbmc)[[]]\n  tmp <- as.data.frame(matrix(data = NA, \n                              ncol = 1, \n                              nrow = nrow(pbmc@assays$RNA$counts)))\n  rownames(tmp) <- rownames(pbmc@assays$RNA$counts)\n  \n  feature_meta <- tmp\n  #embedding <- Embeddings(pbmc, \"umap\")\n  \n  Sys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py <- import(\"sys\")\n  \n  source_python(\"src/scanpyFDR.py\")\n  scanpyFDR(exprs, \n                   meta, \n                   feature_meta, \n                   \"mt\", \n                   dirOut, \n                   project)\n\n  out <- read.csv(file = paste0(dirOut,\n                                project,\n                                \"_Scampy_DEA_all_genes.csv\"\n                               ),\n                  header = T,\n                  row.names = 1)\n\n  gc()\n\n  return(out)\n}\n```\n:::\n\n\n## Cluster Gene Enrichment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasets_csv <- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      Group\n1      2_Clusters_even_near\n2      2_Clusters_even_near\n3      2_Clusters_even_near\n4    2_Clusters_even_medium\n5    2_Clusters_even_medium\n6    2_Clusters_even_medium\n7       2_Clusters_even_far\n8       2_Clusters_even_far\n9       2_Clusters_even_far\n10   2_Clusters_uneven_near\n11   2_Clusters_uneven_near\n12   2_Clusters_uneven_near\n13 2_Clusters_uneven_medium\n14 2_Clusters_uneven_medium\n15 2_Clusters_uneven_medium\n16    2_Clusters_uneven_far\n17    2_Clusters_uneven_far\n18    2_Clusters_uneven_far\n19          3_Clusters_even\n20          3_Clusters_even\n21          3_Clusters_even\n22        3_Clusters_uneven\n23        3_Clusters_uneven\n24        3_Clusters_uneven\n25        5_Clusters_uneven\n26        5_Clusters_uneven\n27        5_Clusters_uneven\n                                                  Collection E13.5.432\n1                                      E13.5-434_+_E15.0-428         0\n2                                      E15.0-432_+_E13.5-432       536\n3                                      E15.0-508_+_E15.0-509         0\n4                                      E13.5-187_+_E13.5-184         0\n5                                      E15.0-434_+_E17.5-516         0\n6                                      E15.0-437_+_E15.0-508         0\n7                                      E17.5-516_+_E13.5-187         0\n8                                      E15.0-510_+_E13.5-437         0\n9                                      E15.0-509_+_E13.5-184         0\n10                                     E13.5-434_+_E15.0-428         0\n11                                     E15.0-432_+_E13.5-432        66\n12                                     E15.0-508_+_E15.0-509         0\n13                                     E13.5-187_+_E13.5-184         0\n14                                     E15.0-434_+_E17.5-516         0\n15                                     E15.0-437_+_E15.0-508         0\n16                                     E17.5-516_+_E13.5-187         0\n17                                     E15.0-510_+_E13.5-437         0\n18                                     E15.0-509_+_E13.5-184         0\n19                         E15.0-437_+_E13.5-510_+_E13.5-437         0\n20                         E17.5-505_+_E17.5-516_+_E13.5-437         0\n21                         E15.0-510_+_E15.0-428_+_E13.5-510         0\n22                         E15.0-428_+_E13.5-434_+_E15.0-510         0\n23                         E13.5-187_+_E13.5-432_+_E15.0-432       168\n24                         E15.0-509_+_E13.5-184_+_E15.0-508         0\n25 E13.5-510_+_E15.0-437_+_E15.0-510_+_E13.5-432_+_E13.5-437       518\n26 E15.0-428_+_E13.5-434_+_E15.0-434_+_E17.5-505_+_E13.5-184         0\n27 E13.5-432_+_E15.0-509_+_E15.0-432_+_E13.5-187_+_E15.0-508       440\n   E13.5.187 E13.5.434 E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509\n1          0       318         0         0         0         0         0\n2          0         0         0         0         0       536         0\n3          0         0         0         0         0         0       397\n4        292         0       292         0         0         0         0\n5          0         0         0         0         0         0         0\n6          0         0         0         0         0         0         0\n7        297         0         0         0         0         0         0\n8          0         0         0       259         0         0         0\n9          0         0       292         0         0         0       292\n10         0       326         0         0         0         0         0\n11         0         0         0         0         0       586         0\n12         0         0         0         0         0         0       402\n13       334         0        38         0         0         0         0\n14         0         0         0         0         0         0         0\n15         0         0         0         0         0         0         0\n16       334         0         0         0         0         0         0\n17         0         0         0        45         0         0         0\n18         0         0        45         0         0         0       402\n19         0         0         0       248       248         0         0\n20         0         0         0       203         0         0         0\n21         0         0         0         0       248         0         0\n22         0       115         0         0         0         0         0\n23        84         0         0         0         0       586         0\n24         0         0        58         0         0         0       402\n25         0         0         0       259        65         0         0\n26         0       326       163         0         0         0         0\n27        74         0         0         0         0       586       293\n   E15.0.510 E15.0.508 E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1          0         0       318         0         0         0         0\n2          0         0         0         0         0         0         0\n3          0       397         0         0         0         0         0\n4          0         0         0         0         0         0         0\n5          0         0         0       273         0       273         0\n6          0       258         0         0       258         0         0\n7          0         0         0         0         0       297         0\n8        259         0         0         0         0         0         0\n9          0         0         0         0         0         0         0\n10         0         0        37         0         0         0         0\n11         0         0         0         0         0         0         0\n12         0        45         0         0         0         0         0\n13         0         0         0         0         0         0         0\n14         0         0         0        33         0       297         0\n15         0       397         0         0        45         0         0\n16         0         0         0         0         0        38         0\n17       402         0         0         0         0         0         0\n18         0         0         0         0         0         0         0\n19         0         0         0         0       248         0         0\n20         0         0         0         0         0       203       203\n21       248         0       248         0         0         0         0\n22       402         0        58         0         0         0         0\n23         0         0         0         0         0         0         0\n24         0       115         0         0         0         0         0\n25       389         0         0         0        65         0         0\n26         0         0       245        41         0         0        41\n27         0        74         0         0         0         0         0\n```\n:::\n:::\n\n\n### DEA genes for COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (ind in 1:dim(datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN <- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN <- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"bonferroni\")\n\n  df.genes <- deaCOTAN[rowMin(as.matrix(pvalCOTAN)) < 0.05,]\n  \n  write.csv(df.genes,file.path(dirOut,paste0(file.code,\"COTAN_DEA_genes.csv\")))\n  \n  }\n```\n:::\n\n\n\n### DEA genes for Seurat\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (ind in 1:dim(datasets_csv)[1]) {\n  #print(ind)\n  file.code <- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusters <- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  deaSeurat <- Seurat.DEA(getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  write.csv(deaSeurat$markers,\n          file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")))\n}\n```\n:::\n\n### DEA from Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (ind in 1:dim(datasets_csv)[1]) {\n  file.code <- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  print(file.code)\n  clusters <- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  \n  deaMonocle <- Monocle.DEA(dataSet = getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  \n  # deaMonocleOut <- deaMonocle$fit_coefs[,c(\"num_cells_expressed\", \n  #                                         \"gene_id\",\"term\",\"estimate\",\n  #                                         \"std_err\", \"test_val\",\"p_value\", \n  #                                         \"normalized_effect\",\"q_value\")]\n  \n  \n  write.csv(deaMonocle$marker_test_res,\n          file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\"))) \n  \n  #rm(deaMonocleOut)\n  rm(deaMonocle)\n  gc()\n}\n```\n:::\n\n### DEA from ScamPy\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (ind in 1:dim(datasets_csv)[1]) {\n  file.code <- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset <- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusters <- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  \n  deaScamPy <- ScamPy.DEA(dataSet = getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  \n  write.csv(deaScamPy,\n          file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\"))) \n  \n}\n```\n:::\n\n## Footer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] dplyr_1.1.2                 stringr_1.5.0              \n [3] reticulate_1.35.0           monocle3_1.3.4             \n [5] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [7] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [9] IRanges_2.34.1              S4Vectors_0.38.1           \n[11] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[13] Biobase_2.60.0              BiocGenerics_0.46.0        \n[15] Seurat_5.0.0                SeuratObject_5.0.0         \n[17] sp_2.1-1                    COTAN_2.3.3                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] doParallel_1.0.17         globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] dendextend_1.17.1         magrittr_2.0.3           \n [15] plotly_4.10.2             rmarkdown_2.24           \n [17] yaml_2.3.7                httpuv_1.6.11            \n [19] sctransform_0.4.1         spam_2.10-0              \n [21] askpass_1.2.0             spatstat.sparse_3.0-2    \n [23] minqa_1.2.5               cowplot_1.1.1            \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] zlibbioc_1.46.0           abind_1.4-5              \n [29] Rtsne_0.16                purrr_1.0.1              \n [31] RCurl_1.98-1.12           GenomeInfoDbData_1.2.10  \n [33] circlize_0.4.15           ggrepel_0.9.3            \n [35] irlba_2.3.5.1             listenv_0.9.0            \n [37] spatstat.utils_3.0-3      terra_1.7-39             \n [39] umap_0.2.10.0             goftest_1.2-3            \n [41] RSpectra_0.16-1           spatstat.random_3.2-1    \n [43] dqrng_0.3.0               fitdistrplus_1.1-11      \n [45] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [47] leiden_0.4.3              codetools_0.2-19         \n [49] DelayedArray_0.26.7       tidyselect_1.2.0         \n [51] shape_1.4.6               lme4_1.1-34              \n [53] ScaledMatrix_1.8.1        viridis_0.6.4            \n [55] spatstat.explore_3.2-1    jsonlite_1.8.7           \n [57] GetoptLong_1.0.5          ellipsis_0.3.2           \n [59] progressr_0.14.0          ggridges_0.5.4           \n [61] survival_3.5-7            iterators_1.0.14         \n [63] foreach_1.5.2             tools_4.3.2              \n [65] ica_1.0-3                 Rcpp_1.0.11              \n [67] glue_1.7.0                gridExtra_2.3            \n [69] xfun_0.39                 ggthemes_5.0.0           \n [71] withr_3.0.0               fastmap_1.1.1            \n [73] boot_1.3-28               fansi_1.0.4              \n [75] openssl_2.1.0             digest_0.6.33            \n [77] rsvd_1.0.5                parallelDist_0.2.6       \n [79] R6_2.5.1                  mime_0.12                \n [81] colorspace_2.1-0          scattermore_1.2          \n [83] tensor_1.5                spatstat.data_3.0-1      \n [85] utf8_1.2.3                tidyr_1.3.0              \n [87] generics_0.1.3            data.table_1.15.0        \n [89] httr_1.4.6                htmlwidgets_1.6.2        \n [91] S4Arrays_1.2.0            uwot_0.1.16              \n [93] pkgconfig_2.0.3           gtable_0.3.3             \n [95] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n [97] XVector_0.40.0            htmltools_0.5.7          \n [99] dotCall64_1.1-0           clue_0.3-64              \n[101] scales_1.3.0              png_0.1-8                \n[103] knitr_1.43                rstudioapi_0.15.0        \n[105] reshape2_1.4.4            rjson_0.2.21             \n[107] nloptr_2.0.3              nlme_3.1-163             \n[109] zoo_1.8-12                GlobalOptions_0.1.2      \n[111] KernSmooth_2.23-22        parallel_4.3.2           \n[113] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[115] pillar_1.9.0              grid_4.3.2               \n[117] vctrs_0.6.3               RANN_2.6.1               \n[119] promises_1.2.0.1          BiocSingular_1.16.0      \n[121] beachmat_2.16.0           xtable_1.8-4             \n[123] cluster_2.1.6             evaluate_0.21            \n[125] zeallot_0.1.0             cli_3.6.1                \n[127] compiler_4.3.2            rlang_1.1.1              \n[129] crayon_1.5.2              future.apply_1.11.0      \n[131] plyr_1.8.8                stringi_1.8.1            \n[133] viridisLite_0.4.2         deldir_2.0-2             \n[135] BiocParallel_1.34.2       assertthat_0.2.1         \n[137] munsell_0.5.0             lazyeval_0.2.2           \n[139] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[141] Matrix_1.6-3              RcppHNSW_0.6.0           \n[143] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[145] future_1.33.0             ggplot2_3.4.2            \n[147] shiny_1.8.0               ROCR_1.0-11              \n[149] Rfast_2.1.0               igraph_1.6.0             \n[151] RcppParallel_5.1.7       \n```\n:::\n:::\n",
    "supporting": [
      "FDR_analisys_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}