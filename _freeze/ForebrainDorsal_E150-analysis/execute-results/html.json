{
  "hash": "23f42e1e56c24508b05b84c02a52fee8",
  "result": {
    "markdown": "---\ntitle: \"Forebrain Dorsal E15.0 Data-set Anaysis\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir <- \"Data/MouseCortexFromLoom/\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"ForebrainDorsal_E150-analysis.log\"))\n```\n:::\n\n\n## Cleaning\n\nRead the already created COTAN object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- readRDS(\"Data/MouseCortexFromLoom/SourceData/e15.0_ForebrainDorsal.cotan.RDS\")\nsampleCondition <- getMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\nsampleCondition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"e15.0_ForebrainDorsal\"\n```\n:::\n:::\n\n\nInspect cells' sizes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellsSizeThr <- 10000\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem <- getCells(fb150Obj)[getCellsSize(fb150Obj) > cellsSizeThr]\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\ncellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nInspect the number of expressed genes per cell\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nDrop cells with too low genes expession as they are probably dead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesSizeLowThr <- 700\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Num genes low threshold\", genesSizeLowThr)\n\nnumExprGenes <- getNumExpressedGenes(fb150Obj)\ncells_to_rem <- names(numExprGenes)[numExprGenes < genesSizeLowThr]\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\ngenesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nCheck number of mitocondrial genes expressed in each cell\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmitGenesPattern <- \"^mt.\"\ngetGenes(fb150Obj)[grep(mitGenesPattern, getGenes(fb150Obj))]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mt.Co1\"  \"mt.Nd4\"  \"mt.Nd5\"  \"mt.Nd1\"  \"mt.Nd2\"  \"mt.Atp6\"\n```\n:::\n\n```{.r .cell-code}\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(fb150Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmitPercThr <- 1.0\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem <- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] > mitPercThr]\n\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %<-%\n  mitochondrialPercentagePlot(fb150Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nCheck no further outliers after all the culling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngenesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\n### Clean: round 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 0)\n```\n:::\n\n\nB group contains highly diverse cells: drop them!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n```\n:::\n\n\n### Clean: round 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 2-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 1)\n```\n:::\n\n\nB group contains one cell with high diversity in the higher components\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pcaCellsData)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n```\n:::\n\n\n### Clean: round 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 3-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 2)\n```\n:::\n\n\nB group contains one cell with high diversity in the higher components\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pcaCellsData)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n```\n:::\n\n\n### Clean: round 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 3)\n```\n:::\n\n\nB group contains few cell with high diversity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pcaCellsData)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncells_to_rem <- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj <- dropGenesCells(fb150Obj, cells = cells_to_rem)\n```\n:::\n\n\n### Clean: round 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/Clean round 5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfb150Obj <- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 4)\n```\n:::\n\n\nVisualize if all is ok:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(UDEPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(nuPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\nlowUDEThr <- 0.4 # the threshold to remove low UDE cells\n\nnuDf <- data.frame(\"nu\" = sort(getNu(fb150Obj)), \"n\" = seq_along(getNu(fb150Obj)))\nUDEPlot_zoomed <- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 400L) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = lowUDEThr, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 200L, y = 0.25,\n                     label = paste0(\"to remove cells with nu < \", lowUDEThr),\n                     color = \"darkred\", size = 4.5)\n\nplot(UDEPlot_zoomed)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n:::\n\n\nFinal cleaning to check all is OK\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %<-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(UDEPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-20-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(nuPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-20-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(cellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1))\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-20-5.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(genesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1))\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-20-6.png){width=672}\n:::\n:::\n\n\nCalculate genes' COEX\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n\nfb150Obj <- proceedToCoex(fb150Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\nSys.time()\n```\n:::\n\n\nSave the COTAN object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(fb150Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfb150Obj <- readRDS(file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n```\n:::\n\n\n## GDI\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdiData <- calculateGDI(fb150Obj)\n\ngenesToLabel <- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Myt1l\"   \"Aldoc\"   \"Rbfox1\"  \"Gas1\"    \"Zfp36l1\" \"Mapt\"    \"Ank3\"   \n [8] \"Stmn3\"   \"Tubb3\"   \"Pclaf\"  \n```\n:::\n\n```{.r .cell-code}\ngdiPlot <- GDIPlot(fb150Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n```\n\n::: {.cell-output-display}\n![](ForebrainDorsal_E150-analysis_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsplitClusters <- cellsUniformClustering(fb150Obj, GDIThreshold = 1.4, cores = 13,\n                                        saveObj = TRUE, outDir = outDir)\n\nc(splitCoexDF, splitPValueDF) %<-% DEAOnClusters(fb150Obj, clusters = splitClusters)\n\nfb150Obj <- addClusterization(fb150Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\ntable(splitClusters)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Consistent Transcript Cohorts (clustering)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(mergedClusters, mergedCoexDF, mergedPValueDF) %<-%\n  mergeUniformCellsClusters(fb150Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\nfb150Obj <- addClusterization(fb150Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\ntable(mergedClusters)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-11-17 12:57:25 CET\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.3.0   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3        rstudioapi_0.15.0        \n  [3] jsonlite_1.8.7            shape_1.4.6              \n  [5] umap_0.2.10.0             magrittr_2.0.3           \n  [7] spatstat.utils_3.0-3      farver_2.1.1             \n  [9] rmarkdown_2.24            GlobalOptions_0.1.2      \n [11] vctrs_0.6.3               ROCR_1.0-11              \n [13] spatstat.explore_3.2-1    DelayedMatrixStats_1.22.5\n [15] askpass_1.2.0             htmltools_0.5.5          \n [17] S4Arrays_1.2.0            sctransform_0.4.1        \n [19] parallelly_1.36.0         KernSmooth_2.23-22       \n [21] htmlwidgets_1.6.2         ica_1.0-3                \n [23] plyr_1.8.8                plotly_4.10.2            \n [25] zoo_1.8-12                igraph_1.5.1             \n [27] mime_0.12                 lifecycle_1.0.3          \n [29] iterators_1.0.14          pkgconfig_2.0.3          \n [31] rsvd_1.0.5                Matrix_1.6-2             \n [33] R6_2.5.1                  fastmap_1.1.1            \n [35] MatrixGenerics_1.12.3     fitdistrplus_1.1-11      \n [37] future_1.33.0             shiny_1.7.5              \n [39] clue_0.3-64               digest_0.6.33            \n [41] colorspace_2.1-0          patchwork_1.1.2          \n [43] S4Vectors_0.38.1          tensor_1.5               \n [45] Seurat_5.0.0              dqrng_0.3.0              \n [47] RSpectra_0.16-1           irlba_2.3.5.1            \n [49] beachmat_2.16.0           labeling_0.4.2           \n [51] PCAtools_2.14.0           progressr_0.14.0         \n [53] RcppZiggurat_0.1.6        spatstat.sparse_3.0-2    \n [55] fansi_1.0.4               polyclip_1.10-4          \n [57] httr_1.4.6                abind_1.4-5              \n [59] compiler_4.3.2            withr_2.5.0              \n [61] doParallel_1.0.17         BiocParallel_1.34.2      \n [63] viridis_0.6.4             fastDummies_1.7.3        \n [65] dendextend_1.17.1         MASS_7.3-60              \n [67] openssl_2.1.0             DelayedArray_0.26.7      \n [69] rjson_0.2.21              tools_4.3.2              \n [71] lmtest_0.9-40             httpuv_1.6.11            \n [73] future.apply_1.11.0       goftest_1.2-3            \n [75] glue_1.6.2                nlme_3.1-163             \n [77] promises_1.2.0.1          grid_4.3.2               \n [79] Rtsne_0.16                cluster_2.1.4            \n [81] reshape2_1.4.4            generics_0.1.3           \n [83] spatstat.data_3.0-1       gtable_0.3.3             \n [85] tidyr_1.3.0               data.table_1.14.8        \n [87] BiocSingular_1.16.0       ScaledMatrix_1.8.1       \n [89] sp_2.1-1                  utf8_1.2.3               \n [91] spatstat.geom_3.2-4       BiocGenerics_0.46.0      \n [93] RcppAnnoy_0.0.21          ggrepel_0.9.3            \n [95] RANN_2.6.1                foreach_1.5.2            \n [97] pillar_1.9.0              stringr_1.5.0            \n [99] spam_2.10-0               RcppHNSW_0.5.0           \n[101] later_1.3.1               circlize_0.4.15          \n[103] splines_4.3.2             dplyr_1.1.2              \n[105] lattice_0.22-5            deldir_1.0-9             \n[107] survival_3.5-7            tidyselect_1.2.0         \n[109] ComplexHeatmap_2.16.0     miniUI_0.1.1.1           \n[111] pbapply_1.7-2             knitr_1.43               \n[113] gridExtra_2.3             IRanges_2.34.1           \n[115] scattermore_1.2           stats4_4.3.2             \n[117] xfun_0.39                 matrixStats_1.1.0        \n[119] stringi_1.8.1             lazyeval_0.2.2           \n[121] yaml_2.3.7                evaluate_0.21            \n[123] codetools_0.2-19          cli_3.6.1                \n[125] uwot_0.1.16               RcppParallel_5.1.7       \n[127] xtable_1.8-4              reticulate_1.34.0        \n[129] munsell_0.5.0             Rcpp_1.0.11              \n[131] spatstat.random_3.2-1     globals_0.16.2           \n[133] png_0.1-8                 parallel_4.3.2           \n[135] Rfast_2.1.0               ellipsis_0.3.2           \n[137] assertthat_0.2.1          dotCall64_1.1-0          \n[139] parallelDist_0.2.6        sparseMatrixStats_1.12.2 \n[141] listenv_0.9.0             ggthemes_4.2.4           \n[143] viridisLite_0.4.2         scales_1.2.1             \n[145] ggridges_0.5.4            SeuratObject_5.0.0       \n[147] leiden_0.4.3              purrr_1.0.1              \n[149] crayon_1.5.2              GetoptLong_1.0.5         \n[151] rlang_1.1.1               cowplot_1.1.1            \n```\n:::\n:::\n",
    "supporting": [
      "ForebrainDorsal_E150-analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}