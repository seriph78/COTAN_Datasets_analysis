{
  "hash": "78326c9cca99823ca761aa97992f562b",
  "result": {
    "markdown": "---\ntitle: \"Gene Correlation Analysis E13.5 Mouse Brain\"\n---\n\n\n## Prologue\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile <- \"Data/MouseCortexFromLoom/e13.5_ForebrainDorsal.cotan.RDS\"\n\nname <- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname <- str_remove(name,pattern = \".RDS\")\n\nproject = \"E13.5\"\n\n\nsetLoggingLevel(1)\noutDir <- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj <- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"src/Functions.R\")\n```\n:::\n\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\n1.  Constitutive genes\n2.  Neural progenitor genes\n3.  Pan neuronal genes\n4.  Some layer marker genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenesList <- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)\n```\n:::\n\n\n## COTAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint.genes <-getGenes(obj)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoexMat.big <- getGenesCoex(obj)#[int.genes,int.genes]\n\ncoexMat <- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes <- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp <- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGDI_DF <- calculateGDI(obj)\nGDI_DF$geneType <- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType <- cat\n}\n\nGDI_DF$GDI_centered <- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         sum.raw.norm      GDI  exp.cells geneType GDI_centered\nNes          7.581052 4.192489 25.4165830     NPGs   3.04415531\nVim          9.971694 3.984104 76.6512748     NPGs   2.75607580\nSox2         7.082317 3.999433 18.5304156     NPGs   2.77726729\nSox1         5.715170 2.983572  5.6615138     NPGs   1.37290505\nNotch1       7.227078 3.984877 20.6384260     NPGs   2.75714514\nHes1         8.449033 4.822367 31.8409958     NPGs   3.91492097\nHes5         9.585092 4.784038 42.6018872     NPGs   3.86193346\nPax6         8.481894 4.385577 44.5492873     NPGs   3.31108627\nMap2         9.355155 3.931909 70.5681590     PNGs   2.68391910\nTubb3       10.986131 4.374838 76.9524192     PNGs   3.29624084\nNeurod1      5.123468 2.046275  2.8508332     PNGs   0.07715236\nNefm         5.862676 3.085697  5.9024292     PNGs   1.51408601\nNefl         4.741106 2.586671  1.8871713     PNGs   0.82421512\nDcx          8.357463 4.539183 39.6707488     PNGs   3.52343659\nTbr1         7.759295 4.237369 26.0991769     PNGs   3.10619909\nCalm1       10.447080 1.385779 97.8919896       hk  -0.83594052\nCox6b1       9.981533 1.441202 96.6673359       hk  -0.75932183\nPpia        10.196964 2.609030 86.8901827       hk   0.85512419\nRpl18       10.790428 1.335148 99.6386268       hk  -0.90593539\nCox7c       10.031070 1.518121 97.1893194       hk  -0.65298677\nErh          9.280735 2.711007 67.8377836       hk   0.99610081\nH3f3a       10.665312 1.380775 99.6587031       hk  -0.84285899\nTaf1         6.937213 2.168233 17.1049990       hk   0.24575162\nTaf2         6.537627 1.310694 12.1863080       hk  -0.93974092\nGapdh        9.979987 2.531673 92.7323831       hk   0.74818409\nActb        11.323008 1.382499 99.4980928       hk  -0.84047559\nGolph3       6.990454 1.648246 19.0724754       hk  -0.47309720\nZfr          8.192974 2.212476 47.4001205       hk   0.30691375\nSub1         9.735618 2.343091 92.1903232       hk   0.48748156\nTars         6.946500 1.753805 17.9682795       hk  -0.32716939\nAmacr        5.143626 1.632567  3.4932744       hk  -0.49477252\nReln         7.550123 3.069353  8.3718129   layers   1.49149142\nLhx5         4.850935 2.291750  1.5057217   layers   0.41650600\nCux1         8.229655 3.634065 43.1840996   layers   2.27216946\nSatb2        7.683171 3.401215 21.5418591   layers   1.95026951\nTle1         7.461375 2.108275 25.6976511   layers   0.16286267\nMef2c        7.773242 3.876656 19.5543064   layers   2.60753655\nRorb         6.274757 1.635946  7.5486850   layers  -0.49010169\nSox5         9.709193 3.707954 64.7460349   layers   2.37431668\nBcl11b       8.848123 4.654283 43.7060831   layers   3.68255551\nFezf2        8.690887 2.925436 54.6878137   layers   1.29253570\nFoxp2        7.803267 2.713967 28.2674162   layers   1.00019356\nNtf3         5.006960 2.463725  2.2485445   layers   0.65424957\nNA                 NA       NA         NA     <NA>           NA\nNA.1               NA       NA         NA     <NA>           NA\nCux2         6.681962 2.670967  9.2551696   layers   0.94074878\nSlc17a6      7.136129 3.316106 14.1337081   layers   1.83261146\nSema3c       6.576389 2.740901  8.7733387   layers   1.03742781\nThsd7a       4.705115 1.784039  1.3451114   layers  -0.28537229\nSulf2        5.293881 2.461288  3.2523590   layers   0.65088105\nKcnk2        7.401683 1.957314 21.6422405   layers  -0.04583116\nGrik3        5.864890 3.353295  5.0793013   layers   1.88402330\nEtv1         5.600431 2.460104  4.1758683   layers   0.64924346\nTle4         6.694944 1.811217 12.5276049   layers  -0.24780084\nTmem200a     4.701951 2.381286  1.8068661   layers   0.54028368\nGlra2        6.044741 3.654254  5.6414375   layers   2.30007960\nEtv1.1       5.600431 2.460104  4.1758683   layers   0.64924346\nNA.2               NA       NA         NA     <NA>           NA\nSulf1        4.529211 2.076179  0.9235093   layers   0.11849227\nNA.3               NA       NA         NA     <NA>           NA\nSyt6         5.144411 2.559922  2.6902228   layers   0.78723640\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Seurat correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrat<- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] <- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat <- NormalizeData(srat)\nsrat <- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 <- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance <- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall.genes <- rownames(srat)\nsrat <- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr.pval.list <- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big <- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp <- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat <- corr.pval.list$p_values\nseurat.data.cor.big <- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   7130858  380.9   11454895   611.8   11454895   611.8\nVcells 840516207 6412.7 1342169060 10240.0 1342169060 10240.0\n```\n:::\n\n```{.r .cell-code}\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### Seurat SC Transform\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrat <-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data <- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data <-seurat.data[rowSums(seurat.data) > 0,]\n\n\ncorr.pval.list <- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big <- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp <- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat <- corr.pval.list$p_values\nseurat.data.cor.big <- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   8859943  473.2   16748832   894.5   12021442   642.1\nVcells 861708025 6574.4 1932899446 14746.9 1610675510 12288.5\n```\n:::\n\n```{.r .cell-code}\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Monocle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(monocle3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncds <- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds <- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts <- normalized_counts(cds)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Remove genes with all zeros\nnormalized_counts <- normalized_counts[rowSums(normalized_counts) > 0,]\n\n\ncorr.pval.list <- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big <- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp <- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle <- corr.pval.list$p_values\nmonocle.data.cor.big <- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9971655  532.6   16748832   894.5   16748832   894.5\nVcells 896560359 6840.3 2062053399 15732.3 2062053399 15732.3\n```\n:::\n\n```{.r .cell-code}\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## ScanPy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\ndirOutScP <- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py <- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts <- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts <- t(normalized_counts)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Remove genes with all zeros\nnormalized_counts <-normalized_counts[rowSums(normalized_counts) > 0,]\n\n\ncorr.pval.list <- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big <- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp <- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy <- corr.pval.list$p_values\nScanPy.data.cor.big <- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9994943  533.8   16748832   894.5   16748832   894.5\nVcells 966228182 7371.8 2062053399 15732.3 2062053399 15732.3\n```\n:::\n\n```{.r .cell-code}\ndraw(htmp, heatmap_legend_side=\"right\")\n```\n\n::: {.cell-output-display}\n![](geneCoexAnalysisE13.5MouseBrain_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-05-06 11:52:16 CEST\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3             \n```\n:::\n:::\n",
    "supporting": [
      "geneCoexAnalysisE13.5MouseBrain_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}