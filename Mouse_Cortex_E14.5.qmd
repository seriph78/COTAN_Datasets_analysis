---
title: "E14.5 Mouse Cortex Loo 2019"
---

```{r}
options(parallelly.fork.enable = TRUE)
library(COTAN)
library(zeallot)
library(data.table)
library(factoextra)
library(Rtsne)
library(qpdf)
library(stringr)
```

```{r}
e14_dge = read.table("../COTAN_small_paper/data/MouseCortex/E14_combined_matrix.txt.gz",header=T,sep="\t",row.names=1)

print(dim(e14_dge))

```

```{r}
outDir <- "Data/MouseCortex/"
setLoggingLevel(1)
setLoggingFile(file.path(outDir, "Dataset.log"))
```

```{r}
cond <- "MouseCortex_E14.5"
obj <- COTAN(raw = e14_dge)
obj <- initializeMetaDataset(obj,
                             GEO = "GSE123335",
                             sequencingMethod = "Drop_seq",
                             sampleCondition = cond)
rm(e14_dge)
```

```{r}
ECDPlot(obj, yCut = 400L)
```

```{r}
cellSizePlot(obj,splitPattern = "_",numCol = 1)
```

```{r}
genesSizePlot(obj,splitPattern = "_",numCol = 1)
```

```{r}
mit <- mitochondrialPercentagePlot(obj, genePrefix = "^mt-",splitPattern = "_",numCol = 1)
mit[["plot"]]
```

To drop cells by cell library size:

```{r}
cells_to_rem <- getCells(obj)[getCellsSize(obj) > 15000]
obj <- dropGenesCells(obj, cells = cells_to_rem)
cellSizePlot(obj,splitPattern = "_",numCol = 1)
```

```{r}
genesSizePlot(obj,splitPattern = "_",numCol = 1)
```

To drop cells by mitochondrial percentage:

```{r}
to_rem <- mit[["sizes"]][["mit.percentage"]] > 7.5
cells_to_rem <- rownames(mit[["sizes"]])[to_rem]
obj <- dropGenesCells(obj, cells = cells_to_rem)

mit <- mitochondrialPercentagePlot(obj, genePrefix = "^mt-",splitPattern = "_",numCol = 1)

mit[["plot"]]
```

```{r}
cellSizePlot(obj,splitPattern = "_",numCol = 1)
```

```{r}
obj <- clean(obj)
c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoom) %<-% cleanPlots(obj)

pcaCellsPlot
```

```{r}
genesPlot
```

```{r}
cells_to_rem <- rownames(pcaCellsData)[pcaCellsData[["groups"]] == "B"]
obj <- dropGenesCells(obj, cells = cells_to_rem)
obj <- clean(obj)
c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoom) %<-% cleanPlots(obj)

pcaCellsPlot
```

```{r}
 genesPlot
```

```{r}
plot(nuPlot)
```

```{r}
nuDf <- data.frame("nu" = sort(getNu(obj)), "n" = seq_along(getNu(obj)))
yset <- 0.18 # the threshold to remove low UDE cells
plot.ude <- ggplot(nuDf, aes(x = n, y = nu)) +
            geom_point(colour = "#8491B4B2", size = 1.0) +
            xlim(0L, 3000) +
            ylim(0.0, 1.0) +
            geom_hline(yintercept = yset, linetype = "dashed",
                       color = "darkred") +
            annotate(geom = "text", x = 1000L, y = 0.25,
                     label = paste0("to remove cells with nu < ", yset),
                     color = "darkred", size = 4.5)

plot.ude
```

```{r}
obj <- addElementToMetaDataset(obj, "Threshold low UDE cells:", yset)

cells_to_rem <- rownames(nuDf)[nuDf[["nu"]] < yset]
obj <- dropGenesCells(obj, cells = cells_to_rem)
obj <- clean(obj)
c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoom) %<-% cleanPlots(obj)

pcaCellsPlot
```

```{r}
genesPlot
```

```{r}
UDEPlot
```

```{r}
nuPlot
```

```{r}
UDEPlot$data$Sample <- str_split(rownames(UDEPlot$data),pattern = "_",simplify = T)[,1]

ggplot(UDEPlot$data, aes(PC1,PC2,color = Sample)) + geom_point(size = 0.5, alpha=0.7)
```

```{r}
ggplot(UDEPlot$data, aes(PC2,PC3,color = Sample)) + geom_point(size = 0.5, alpha=0.7)
```

```{r}
ggplot(UDEPlot$data, aes(PC2,PC5,color = Sample)) + geom_point(size = 0.5, alpha=0.7)
```

```{r}
ggplot(UDEPlot$data, aes(PC2,PC5,color = groups)) + geom_point(size = 0.5, alpha=0.7)
```

## COTAN analysis

In this part, all the contingency tables are computed and used to get the statistics.

```{r}
obj <- estimateDispersionBisection(obj, cores = 15L)
```

`COEX` evaluation and storing

```{r, eval=FALSE}
obj <- calculateCoex(obj)
```

```{r eval=FALSE, include=TRUE}
# saving the structure
saveRDS(obj, file = file.path(outDir, paste0(cond, ".cotan.RDS")))
```

```{r, eval=TRUE}
obj <- readRDS(file = file.path(outDir, paste0(cond, ".cotan.RDS")))
```

```{r}
sessionInfo()
```
