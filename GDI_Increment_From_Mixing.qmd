---
title: "GDI Increment From Mixing"
author: "Marco Fantozzi"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Preamble

```{r preamble}
library(assertthat)
library(rlang)
library(scales)
library(ggplot2)
library(zeallot)
library(data.table)
library(parallelDist)
library(tidyr)
library(tidyverse)
library(ggh4x)
library(gridExtra)

#options(parallelly.fork.enable = TRUE)

inDir <- file.path("Results")

#setLoggingLevel(2)
#setLoggingFile(file.path(inDir, "MixingClustersGDI_ForebrainDorsal.log"))

outDir <- file.path(inDir, "GDI_Sensitivity")
if (!file.exists(outDir)) {
  dir.create(outDir)
}
```

```{r,eval=TRUE, echo=FALSE}
selectedClusters <- list(
    "E13.5" = c("432", "187", "434", "184", "437", "510"),
    "E15.0" = c("432", "509", "510", "508", "428", "434", "437"),
    "E17.5" = c("516", "505")
)
```

## Load calculated data for analysis

```{r, echo=FALSE, eval=TRUE}
resMix05 <- readRDS(file.path(outDir, paste0("GDI_with_05%_Mixing.RDS")))
resMix10 <- readRDS(file.path(outDir, paste0("GDI_with_10%_Mixing.RDS")))
resMix20 <- readRDS(file.path(outDir, paste0("GDI_with_20%_Mixing.RDS")))
resMix40 <- readRDS(file.path(outDir, paste0("GDI_with_40%_Mixing.RDS")))
resMix80 <- readRDS(file.path(outDir, paste0("GDI_with_80%_Mixing.RDS")))

# create an aligned baseline
resMix00 <- resMix05
resMix00[["MixingFraction"]] <- 0.0
resMix00[["GDI"]] <- resMix00[["GDI"]] - resMix00[["GDIIncrement"]]
resMix00[["GDIIncrement"]] <- 0.0
```

## Recall cluster distance and add it to the results

```{r}
zeroOneAvg <- readRDS(file.path(outDir, "allZeroOne.RDS"))
distZeroOne <- as.matrix(parDist(t(zeroOneAvg), method = "hellinger", diag = TRUE, upper = TRUE))^2

distZeroOneLong <- rownames_to_column(as.data.frame(distZeroOne), var = "MainCluster")
distZeroOneLong <-pivot_longer(distZeroOneLong,
                               cols = !MainCluster,
                               names_to = "OtherCluster", 
                               values_to = "Distance")

distZeroOneLong <- as.data.frame(distZeroOneLong[distZeroOneLong[["Distance"]] != 0.0, ])

assert_that(identical(distZeroOneLong[, 1:2], resMix20[, 1:2]))

perm <- order(distZeroOneLong[["Distance"]])
```

```{r}
# Scatter plot of the effective increment at 40% mixing [Y]
# against estimated distance [X]
distDF <- cbind(distZeroOneLong[, "Distance", drop = FALSE],
                sqrt(distZeroOneLong[, "Distance", drop = FALSE]))
colnames(distDF) <- c("Distance", "DistanceSqrt")

D2IPlot <- ggplot(cbind(resMix40, distDF),
                  aes(x=Distance, y=GDIIncrement)) +
             geom_point() +
             geom_smooth(method=lm, formula = y ~ x)+
             ylab("Top GDI percentile Increment") 
           # +  xlim(0, 1.5) + ylim(0, 1.5) + coord_fixed()

plot(D2IPlot)
```

## Merge all data and plot it using the distance as discriminant

```{r}
allRes <- rbind(resMix05[perm, ], resMix10[perm, ], resMix20[perm, ], resMix40[perm, ], resMix80[perm, ])
allRes <- cbind(allRes, "Distance" = rep(distZeroOneLong[["Distance"]][perm], 5))
rownames(allRes) <- NULL
allRes <- cbind(allRes, "ClusterPair" = rep.int(c(1:210),5))


allResWithBase <- cbind(resMix00[perm, ], "Distance" = distZeroOneLong[["Distance"]][perm])
rownames(allResWithBase) <- NULL
allResWithBase <- cbind(allResWithBase, "ClusterPair" = c(1:210))
allResWithBase <- rbind(allResWithBase, allRes)

assert_that(identical(allRes[, 4], allResWithBase[211:1260, 4]))
```

```{r}
dim(allRes)
```

```{r}
IScPlot <- ggplot(allRes, aes(x=MixingFraction, y=GDIIncrement, color=Distance,)) +
  geom_point() +
  scale_color_continuous(type = "viridis") +
  scale_x_log10()+
             ylab("Top GDI percentile Increment") 

plot(IScPlot)

GScPlot <- ggplot(allResWithBase, aes(x=MixingFraction, y=GDI, color=Distance,)) +
  geom_point() +
  scale_color_continuous(type = "viridis")+
             ylab("Top GDI percentile") 

plot(GScPlot)
```

```{r}
reOrder <- function(df, numBlocks) {
  blockLength <- nrow(df) / numBlocks
  permut <- rep(1:blockLength, each = numBlocks) +
              rep(seq(0, nrow(df) - 1, by = blockLength), times = numBlocks)
  return(df[permut, ])
}

allRes2 <- reOrder(allRes, 5)
allResWithBase2 <- reOrder(allResWithBase, 6)
```

```{r}
rng <- c(1,210)
#rng <- c(1,42)
#rng <- c(43,84)
#rng <- c(85,126)
#rng <- c(127,168)
#rng <- c(169,210)

ILinesPLot <- ggplot(allRes2[allRes2[["ClusterPair"]] %between% rng, ],
                     aes(x = MixingFraction, y = GDIIncrement,
                         color = (ClusterPair - 1) %/% 35 + 0.5)) + 
  geom_path(aes(group = ClusterPair)) +
  theme(legend.position = "none") +
  #scale_x_log10() + 
  scale_colour_stepsn(colours = hcl.colors(6, palette = "Dark 2")[6:1])+
             ylab("Top GDI percentile Increment") 

plot(ILinesPLot)


GLinesPLot <- ggplot(allResWithBase2[allResWithBase2[["ClusterPair"]] %between% rng, ],
                     aes(x = MixingFraction, y = GDI,
                         color = (ClusterPair - 1) %/% 35 + 0.5)) + 
  geom_path(aes(group = ClusterPair)) +
  theme(legend.position = "none") +
  #scale_x_log10() + 
  scale_colour_stepsn(colours = hcl.colors(6, palette = "Dark 2")[6:1]) +
             ylab("Top GDI percentile") 
#  geom_line(data = data.frame(cbind(MixingFraction = c(0,0.8), GDI = c(1.4,1.4))),
#            aes(x = MixingFraction, y = GDI))


plot(GLinesPLot)
```

```{r, fig.height= 10}
mg <- function(mixings) {
  res <- mixings
  res[res !=0 ] <- ceiling(log2(round(res[res !=0 ] * 40)))
  return(res)
}

rng <- c(1,35)
#rng <- c(43,84)
#rng <- c(85,126)
#rng <- c(127,168)
#rng <- c(169,210)

allRes$Group <- factor((allRes$ClusterPair - 1) %/% 35 + 1)
levels(allRes$Group) <- paste0("Distance bin ",c(1:6))

allRes$discreteMixing <- factor(mg(allRes$MixingFraction))
levels(allRes$discreteMixing) <- c("5%","10%","20%","40%","80%")

design <- "
  ABC
  DEF
  DEF
"

first.part <- c("Distance bin 1", "Distance bin 2", "Distance bin 3")
second.part <-c("Distance bin 4", "Distance bin 5", "Distance bin 6") 

IBoxPlotA <- ggplot(allRes[allRes$Group %in% first.part,], aes(x=discreteMixing, 
                       y=GDIIncrement, 
                       fill=Group,
                       group = discreteMixing)) +
  geom_boxplot()+
  geom_jitter(width=0.25, alpha=0.5) +
  scale_fill_manual(values = c("#0B5345","#117A65","#16A085")) +
  facet_grid2(cols = vars(Group))+
  theme_light()+
  theme(legend.position = "none",axis.title.x=element_blank(),
        axis.title.y =element_blank()) #+
             #ylab("Top GDI percentile Increment") 

IBoxPlotB <- ggplot(allRes[allRes$Group %in% second.part,], aes(x=discreteMixing, 
                       y=GDIIncrement, 
                       fill=Group,
                       group = discreteMixing)) +
  geom_boxplot()+
  geom_jitter(width=0.25, alpha=0.5) +
  scale_fill_manual(values = c("#1ABC9C","#48C9B0","#A3E4D7")) +
  facet_grid2(cols = vars(Group))+
  theme_light()+
  theme(legend.position = "none",axis.title.x=element_blank(),
        axis.title.y =element_blank()) 

final.plot1 <- grid.arrange(IBoxPlotA,IBoxPlotB,ncol = 2, nrow = 3,
             layout_matrix = rbind(c(1,1), c(2,2), c(2,2)))

pdf("Results/GDI_Sensitivity/GDI_increment.pdf",width = 7, height = 7)
plot(final.plot1)
dev.off()

plot(final.plot1)


allResWithBase$Group <- factor((allResWithBase$ClusterPair - 1) %/% 35 + 1)
levels(allResWithBase$Group) <- paste0("Distance bin ",c(1:6))


allResWithBase$discreteMixing <- factor(mg(allResWithBase$MixingFraction))
levels(allResWithBase$discreteMixing) <- c("0%","5%","10%","20%","40%","80%")


GBoxPlotA <- ggplot(allResWithBase[allResWithBase$Group %in% first.part,], aes(x=discreteMixing, y=GDI, fill=Group,
                              group = discreteMixing))+
  geom_boxplot()+
  geom_jitter(width=0.25, alpha=0.5) +
  scale_fill_manual(values = c("#0B5345","#117A65","#16A085")) +
  facet_grid2(cols = vars(Group))+
  theme_light()+
  theme(legend.position = "none",axis.title.x=element_blank(),
        axis.title.y =element_blank()) #+
             #ylab("Top GDI percentile Increment") 

GBoxPlotB <- ggplot(allResWithBase[allResWithBase$Group %in% second.part,], aes(x=discreteMixing, y=GDI, fill=Group,
                              group = discreteMixing)) +
  geom_boxplot()+
  geom_jitter(width=0.25, alpha=0.5) +
  scale_fill_manual(values = c("#1ABC9C","#48C9B0","#A3E4D7")) +
  facet_grid2(cols = vars(Group))+
  theme_light()+
  theme(legend.position = "none",axis.title.x=element_blank(),
        axis.title.y =element_blank()) 

final.plot2 <- grid.arrange(GBoxPlotA,GBoxPlotB,ncol = 2, nrow = 5,
             layout_matrix = rbind(c(1,1),c(1,1),c(2,2), c(2,2), c(2,2)))


pdf("Results/GDI_Sensitivity/GDI_TopPercentile.pdf",width = 7, height = 7 )
plot(final.plot2)
dev.off()


plot(final.plot2)
```

## Load calculated data about multi clusters cases for analysis

```{r eval=TRUE, echo=FALSE}
resMix20_2 <- readRDS(file.path(outDir, paste0("GDI_with_20%_Mixing_from_Pairs.RDS")))
```

## Compare estimated vs real GDI increment

```{r}
# Scatter plot of the effective increment [Y] against estimated increment [X]
pg <- ggplot(resMix20_2, aes(x=PredictedGDIIncrement, y=GDIIncrement)) +
  geom_point() +
  geom_smooth(method=lm, formula = y ~ x + 0) +
  coord_fixed() +
  xlim(0, 1.5) + ylim(0, 1.5)+
             ylab("Top GDI percentile Increment") 
  #scale_x_log10() + scale_y_log10() 



plot(pg)
```

The plot shows that having the 20% extraneous cells in the mixture coming from multiple clusters does not affect significantly the sensitivity of the GDI to score cluster uniformity.

```{r}
sessionInfo()
```
