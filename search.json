[
  {
    "objectID": "clustering_comparison.html",
    "href": "clustering_comparison.html",
    "title": "Clustering Comparision",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport scanpy as sc\nfrom sklearn.metrics.cluster import normalized_mutual_info_score, adjusted_rand_score\nfrom sklearn.metrics import homogeneity_score, completeness_score, fowlkes_mallows_score, silhouette_score, davies_bouldin_score, calinski_harabasz_score\nfrom sklearn.metrics.cluster import contingency_matrix, pair_confusion_matrix\nfrom src.utils import sankey_plot\nfrom sklearn.decomposition import PCA\nimport kaleido\nfrom sklearn.preprocessing import StandardScaler\nimport plotly.io as pio\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nDIR = 'Data/'\nDATASET_NAMES = ['PBMC1', 'PBMC2', 'PBMC3','PBMC4']\nTOOLS = ['monocle', 'scanpy', 'scvi-tools', 'seurat', 'COTAN']\nPARAMS_TUNING = ['default', 'celltypist', 'antibody']\nmin_size_cluster = 10\n\n\nlabels_df = pd.read_csv(f'{DIR}PBMC3/COTAN/default/clustering_labels.csv', index_col=0,usecols=[\"cell\",\"cluster\"])\nlabels_df.rename(columns={\"cluster\": \"cluster_COTAN\"}, inplace=True)\nprint(labels_df.shape)\n#print(labels_df.shape)\nfor tool in [t for t in TOOLS if t != 'COTAN']:\n    tool_labels_df = pd.read_csv(f'{DIR}PBMC3/{tool}/default/clustering_labels.csv', index_col=0)\n    labels_df = labels_df.merge(tool_labels_df, how='inner', on='cell')\n    labels_df.rename(columns={\"cluster\": f\"cluster_{tool}\"}, inplace=True)\n#    print(\"labels_df size\"+tool)\n#    print(labels_df.shape)\n\n(10944, 1)\n\n\n\nlabels_df['cluster_COTAN'].value_counts()\n\ncluster_COTAN\n3     1689\n9      688\n20     609\n4      433\n8      432\n5      390\n10     362\n27     331\n47     324\n13     305\n52     302\n19     282\n46     260\n32     253\n43     242\n45     228\n54     219\n23     190\n2      189\n12     177\n35     166\n39     162\n42     159\n17     151\n55     149\n14     146\n18     145\n6      143\n28     132\n53     130\n7      120\n40     111\n51     109\n16     100\n50      99\n44      98\n36      79\n30      78\n41      76\n11      74\n37      67\n22      58\n57      52\n1       49\n56      40\n48      39\n34      37\n31      35\n38      30\n49      29\n15      29\n25      28\n26      27\n29      27\n33      24\n21      21\n24      20\nName: count, dtype: int64\n\n\n\nlabels_df.shape\n\n(3405, 5)\n\n\n\nlabels_df = drop_small_clusters(df = labels_df,min_size = min_size_cluster)\n\n'cluster_COTAN - cluster_COTAN\\n12    809\\n16    462\\n7     392\\n18    272\\n8     254\\n4     177\\n10    152\\n11    145\\n3     122\\n19    117\\n20    106\\n5      97\\n13     94\\n6      77\\n2      75\\n21     55\\n15     42\\n17     35\\n1      35\\n14     28\\n9      27\\n23     22\\n22     15\\nName: count, dtype: int64'\n\n\n\"Index([15, 17, 1, 14, 9, 23, 22], dtype='int64', name='cluster_COTAN')\"\n\n\n'cluster_monocle - cluster_monocle\\n1    1913\\n2    1195\\n3     298\\nName: count, dtype: int64'\n\n\n\"Index([], dtype='int64', name='cluster_monocle')\"\n\n\n'cluster_scanpy - cluster_scanpy\\n3     323\\n1     315\\n2     309\\n4     286\\n7     268\\n6     261\\n8     236\\n5     233\\n9     200\\n10    182\\n11    158\\n12    144\\n13    141\\n14    105\\n15     91\\n16     77\\n17     76\\n18      1\\nName: count, dtype: int64'\n\n\n\"Index([18], dtype='int64', name='cluster_scanpy')\"\n\n\n'cluster_scvi-tools - cluster_scvi-tools\\n1     635\\n2     467\\n3     421\\n4     390\\n5     364\\n6     283\\n7     277\\n8     149\\n9     146\\n10    101\\n11     92\\n12     80\\nName: count, dtype: int64'\n\n\n\"Index([], dtype='int64', name='cluster_scvi-tools')\"\n\n\n'cluster_seurat - cluster_seurat\\n1     879\\n3     581\\n2     504\\n4     408\\n5     273\\n6     260\\n7     153\\n8     144\\n9     129\\n10     74\\nName: count, dtype: int64'\n\n\n\"Index([], dtype='int64', name='cluster_seurat')\"\n\n\n\n# load and concat celltypist labels\ncelltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\ncelltypist_df.index = celltypist_df.index.str[:-2]\ncelltypist_df = labels_df.merge(celltypist_df, how='inner', on='cell')\ncelltypist_df.rename(columns={\"cluster.ids\": f\"cluster_celltypist\"}, inplace=True)\ncelltypist_mapping_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_mapping.csv', index_col=0)\n#print(\"celltypist_df size\")\n#print(celltypist_df.shape)\n\ncelltypist_df = drop_small_clusters(df = celltypist_df, min_size = min_size_cluster)\n\n# load and concat protein surface labels\nantibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\nantibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\nantibody_df.rename(columns={\"cluster.ids\": f\"cluster_antibody\"}, inplace=True)\nantibody_mapping_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_mapping.csv', index_col=1, encoding='latin1')\n    #print(\"antibody_df size\")\n    #print(antibody_df.shape)\n\nantibody_df = drop_small_clusters(df = antibody_df, min_size = min_size_cluster )\n\n\ndef drop_small_clusters(df, min_size):\n    for col in df.columns:\n        # Count the number of occurrences of each cluster\n        cluster_counts = df[col].value_counts()\n        #display(f'{col} - {cluster_counts}')\n        # Find clusters that are smaller than the minimum size\n        small_clusters = cluster_counts[cluster_counts &lt; min_size].index\n        #display(f'{small_clusters}')\n        # Drop rows corresponding to these clusters\n        df = df[~df[col].isin(small_clusters)]\n    return df\n\n\ndef compute_scores(dir, dataset, labels_df, labels_matched, ground_truth_labels):\n    scores = {}\n    scores['NMI'] = {}\n    scores['ARI'] = {}\n    scores['homogeneity'] = {}\n    scores['completeness'] = {}\n    scores['fowlkes_mallows'] = {}\n    scores['precision'] = {}\n    scores['recall'] = {}\n    \n    for tool in TOOLS:\n        scores['NMI'][tool] = normalized_mutual_info_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'], average_method='arithmetic')\n        scores['ARI'][tool] = adjusted_rand_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        scores['homogeneity'][tool] = homogeneity_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        scores['completeness'][tool] = completeness_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        scores['fowlkes_mallows'][tool] = fowlkes_mallows_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        sc = pair_confusion_matrix(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        TP = sc[1,1]\n        FP = sc[0,1]\n        FN = sc[1,0]\n        P_score = TP/(TP+FP)\n        scores['precision'][tool] = P_score\n        scores['recall'][tool] = TP/(TP+FN)\n        \n        \n        \n        \n    scores_df = pd.DataFrame(scores)\n    scores_df.to_csv(f'{dir}{dataset}/scores_{labels_matched}_{ground_truth_labels}.csv')\n    scores_df.to_latex(f'{dir}{dataset}/scores_{labels_matched}_{ground_truth_labels}.tex')\n    display(scores_df)\n\n\ndef print_scores(dataset,tuning):\n    \n    \n    # concat tools labels\n    labels_df = pd.read_csv(f'{DIR}{dataset}/COTAN/{tuning}/clustering_labels.csv', index_col=0)\n    labels_df.rename(columns={\"cluster\": \"cluster_COTAN\"}, inplace=True)\n    #print(\"labels_df size\")\n    #print(labels_df.shape)\n    for tool in [t for t in TOOLS if t != 'COTAN']:\n        tool_labels_df = pd.read_csv(f'{DIR}{dataset}/{tool}/{tuning}/clustering_labels.csv', index_col=0)\n        labels_df = labels_df.merge(tool_labels_df, how='inner', on='cell')\n        labels_df.rename(columns={\"cluster\": f\"cluster_{tool}\"}, inplace=True)\n    #    print(\"labels_df size\"+tool)\n    #    print(labels_df.shape)\n\n    labels_df = drop_small_clusters(df = labels_df,min_size = min_size_cluster)\n    \n    # load and concat celltypist labels\n    celltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\n    celltypist_df.index = celltypist_df.index.str[:-2]\n    celltypist_df = labels_df.merge(celltypist_df, how='inner', on='cell')\n    celltypist_df.rename(columns={\"cluster.ids\": f\"cluster_celltypist\"}, inplace=True)\n    celltypist_mapping_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_mapping.csv', index_col=0)\n    #print(\"celltypist_df size\")\n    #print(celltypist_df.shape)\n\n    celltypist_df = drop_small_clusters(df = celltypist_df, min_size = min_size_cluster)\n    \n    # load and concat protein surface labels\n    antibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\n    antibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\n    antibody_df.rename(columns={\"cluster.ids\": f\"cluster_antibody\"}, inplace=True)\n    antibody_mapping_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_mapping.csv', index_col=1, encoding='latin1')\n    #print(\"antibody_df size\")\n    #print(antibody_df.shape)\n\n    antibody_df = drop_small_clusters(df = antibody_df, min_size = min_size_cluster )\n\n    # read dataset\n    adata = sc.read_10x_mtx(\n        f'{DIR}{dataset}/filtered/10X/',\n        var_names='gene_symbols',\n        cache=False\n    )\n    # keep only labelled cells\n    adata.var_names_make_unique()\n    if tuning=='celltypist':\n        subset_cells = adata.obs_names.isin(celltypist_df.index)\n        adata = adata[subset_cells, :]\n    elif tuning=='antibody':\n        subset_cells = adata.obs_names.isin(antibody_df.index)\n        adata = adata[subset_cells, :]\n    else:\n        subset_cells = adata.obs_names.isin(labels_df.index)\n        adata = adata[subset_cells, :]\n\n    mito_genes = adata.var_names.str.startswith('MT-')\n    # for each cell compute fraction of counts in mito genes vs. all genes\n    # the `.A1` is only necessary as X is sparse (to transform to a dense array after summing)\n    adata.obs['percent_mito'] = np.sum(adata[:, mito_genes].X, axis=1).A1 / np.sum(adata.X, axis=1).A1\n    # add the total counts per cell as observations-annotation to adata\n    adata.obs['n_counts'] = adata.X.sum(axis=1).A1\n\n    sc.pp.normalize_total(adata, target_sum=1e4)\n    sc.pp.log1p(adata)\n    sc.pp.highly_variable_genes(adata, min_mean=0.00125, max_mean=3, min_disp=0.5)\n    adata.raw = adata\n    adata = adata[:, adata.var.highly_variable]\n    #sc.pp.regress_out(adata, ['n_counts', 'percent_mito'])\n    sc.pp.scale(adata, max_value=10)\n    sc.tl.pca(adata, svd_solver='arpack',n_comps=20)\n    pca_matrix = adata.obsm['X_pca']\n    scaler = StandardScaler()\n    scaled_pca_matrix = scaler.fit_transform(pca_matrix)\n\n    #Custers number\n    \n    df = {}\n    for tool in TOOLS:\n        df[tool] = labels_df[f'cluster_{tool}'].unique().shape[0]\n    df_size = pd.DataFrame(df, index=[0])\n    display(f'{dataset} - number of clusters')\n    display(df_size)\n\n    # compute silhouette, Calinski_Harabasz and davies_bouldin scores with scaled PCA    \n    silhouette = {}\n    Calinski_Harabasz = {}\n    davies_bouldin = {}\n    for tool in TOOLS:\n        \n        if tuning=='celltypist':\n            # Convert scaled_pca_matrix to DataFrame to filter by index\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            # Filter PCA matrix based on celltypist_df index\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[celltypist_df.index]\n            # Convert back to numpy array for compatibility with metrics\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_matrix, celltypist_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_matrix, celltypist_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_matrix, celltypist_df[f'cluster_{tool}'])\n            \n            silhouette['celltypist'] = silhouette_score(scaled_pca_matrix, celltypist_df[f'cluster_celltypist'])\n            Calinski_Harabasz['celltypist'] = calinski_harabasz_score(scaled_pca_matrix, celltypist_df[f'cluster_celltypist'])\n            davies_bouldin['celltypist'] = davies_bouldin_score(scaled_pca_matrix, celltypist_df[f'cluster_celltypist'])\n        elif tuning=='antibody':\n            # Repeat similar steps for antibody_df\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[antibody_df.index]\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_matrix, antibody_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_matrix, antibody_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_matrix, antibody_df[f'cluster_{tool}'])\n            \n            silhouette['antibody'] = silhouette_score(scaled_pca_matrix, antibody_df[f'cluster_antibody'])\n            Calinski_Harabasz['antibody'] = calinski_harabasz_score(scaled_pca_matrix, antibody_df[f'cluster_antibody'])\n            davies_bouldin['antibody'] = davies_bouldin_score(scaled_pca_matrix, antibody_df[f'cluster_antibody'])\n\n        else:\n            silhouette[tool] = silhouette_score(scaled_pca_matrix, labels_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_matrix, labels_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_matrix, labels_df[f'cluster_{tool}'])\n        \n        \n    silhouette_df = pd.DataFrame(silhouette, index=[0])\n    silhouette_df.to_csv(f'{DIR}{dataset}/{tuning}_silhouette.csv')\n    silhouette_df.to_latex(f'{DIR}{dataset}/{tuning}_silhouette.tex')\n    display(f'{dataset} - Silhuette (higher is better)')\n    display(silhouette_df)\n\n    Calinski_Harabasz_df = pd.DataFrame(Calinski_Harabasz, index=[0])\n    Calinski_Harabasz_df.to_csv(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz.csv')\n    Calinski_Harabasz_df.to_latex(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz.tex')\n    display(f'{dataset} - Calinski_Harabasz (higher is better)')\n    display(Calinski_Harabasz_df)\n\n    davies_bouldin_df = pd.DataFrame(davies_bouldin, index=[0])\n    davies_bouldin_df.to_csv(f'{DIR}{dataset}/{tuning}_davies_bouldin.csv')\n    davies_bouldin_df.to_latex(f'{DIR}{dataset}/{tuning}_davies_bouldin.tex')\n    display(f'{dataset} - davies_bouldin (lower is better)')\n    display(davies_bouldin_df)\n\n    # compute silhouette, Calinski_Harabasz and davies_bouldin scores with cellTypist probability\n    celltypist_prob_df = pd.read_csv(f'{DIR}{dataset}/celltypist/Immune_All_Low_probability_matrix.csv', index_col=0)\n    #labels_df = pd.read_csv(f'{DIR}{dataset}/COTAN/{tuning}/clustering_labels.csv', index_col=0)\n    celltypist_prob_df.index = celltypist_prob_df.index.str[:-2]\n    #subset_cells = celltypist_prob_df.index.isin(labels_df.index)\n    #celltypist_prob_df = celltypist_prob_df[subset_cells]\n\n    if tuning=='celltypist':\n        subset_cells = celltypist_prob_df.index.isin(celltypist_df.index)\n        celltypist_prob_df = celltypist_prob_df[subset_cells]\n    elif tuning=='antibody':\n        subset_cells = celltypist_prob_df.index.isin(antibody_df.index)\n        celltypist_prob_df = celltypist_prob_df[subset_cells]\n    else:\n        subset_cells = celltypist_prob_df.index.isin(labels_df.index)\n        celltypist_prob_df = celltypist_prob_df[subset_cells]\n    \n    \n    pca = PCA(n_components=20,svd_solver='arpack')\n    pca_data = pca.fit_transform(celltypist_prob_df)\n    df_prob = pd.DataFrame(pca_data)\n    df_prob.index = celltypist_prob_df.index\n    scaler = StandardScaler()\n    scaled_pca_data = pd.DataFrame(scaler.fit_transform(df_prob))\n    scaled_pca_data.index = celltypist_prob_df.index\n    \n    silhouette = {}\n    Calinski_Harabasz = {}\n    davies_bouldin = {}\n    for tool in TOOLS:\n        \n        if tuning=='celltypist':\n            # Convert scaled_pca_matrix to DataFrame to filter by index\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            # Filter PCA matrix based on celltypist_df index\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[celltypist_df.index]\n            # Convert back to numpy array for compatibility with metrics\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_data, celltypist_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_data, celltypist_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_data, celltypist_df[f'cluster_{tool}'])\n            \n            silhouette['celltypist'] = silhouette_score(scaled_pca_data, celltypist_df[f'cluster_celltypist'])\n            Calinski_Harabasz['celltypist'] = calinski_harabasz_score(scaled_pca_data, celltypist_df[f'cluster_celltypist'])\n            davies_bouldin['celltypist'] = davies_bouldin_score(scaled_pca_data, celltypist_df[f'cluster_celltypist'])\n        elif tuning=='antibody':\n            # Repeat similar steps for antibody_df\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[antibody_df.index]\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_data, antibody_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_data, antibody_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_data, antibody_df[f'cluster_{tool}'])\n            \n            silhouette['antibody'] = silhouette_score(scaled_pca_data, antibody_df[f'cluster_antibody'])\n            Calinski_Harabasz['antibody'] = calinski_harabasz_score(scaled_pca_data, antibody_df[f'cluster_antibody'])\n            davies_bouldin['antibody'] = davies_bouldin_score(scaled_pca_data, antibody_df[f'cluster_antibody'])\n\n        else:\n            silhouette[tool] = silhouette_score(scaled_pca_data, labels_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_data, labels_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_data, labels_df[f'cluster_{tool}'])\n        \n    silhouette_df = pd.DataFrame(silhouette, index=[0])\n    silhouette_df.to_csv(f'{DIR}{dataset}/{tuning}_silhouette_fromProb.csv')\n    silhouette_df.to_latex(f'{DIR}{dataset}/{tuning}_silhouette_fromProb.tex')\n    display(f'{dataset} - Silhuette from Prob. (higher is better)')\n    display(silhouette_df)\n\n    Calinski_Harabasz_df = pd.DataFrame(Calinski_Harabasz, index=[0])\n    Calinski_Harabasz_df.to_csv(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz_fromProb.csv')\n    Calinski_Harabasz_df.to_latex(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz_fromProb.tex')\n    display(f'{dataset} - Calinski_Harabasz from Prob. (higher is better)')\n    display(Calinski_Harabasz_df)\n\n    davies_bouldin_df = pd.DataFrame(davies_bouldin, index=[0])\n    davies_bouldin_df.to_csv(f'{DIR}{dataset}/{tuning}_davies_bouldin_fromProb.csv')\n    davies_bouldin_df.to_latex(f'{DIR}{dataset}/{tuning}_davies_bouldin_fromProb.tex')\n    display(f'{dataset} - davies_bouldin  from Prob. (lower is better)')\n    display(davies_bouldin_df)\n\n    display(f'{dataset} - matching {tuning} labels' if tuning != 'default' else f'{dataset} - default labels')\n\n    # compute scores comparing each tool labels with celltypist labels\n    if tuning == 'celltypist' or tuning == 'default':\n        compute_scores(DIR, dataset, celltypist_df, tuning, 'celltypist')\n        labels = []\n        labels_titles = []\n        for tool in TOOLS:\n            labels.append(celltypist_df[f'cluster_{tool}'].to_list())\n            labels_titles.append(tool)\n        labels.append(celltypist_df[f'cluster_celltypist'].map(celltypist_mapping_df['go'].to_dict()).to_list())\n        labels_titles.append('celltypist')\n        title = f'{dataset} - matching {tuning} labels' if tuning != 'default' else f'{dataset} - default labels'\n        sankey_plot(labels=labels, labels_titles=labels_titles, title=title, path=f'{DIR}{dataset}/{tuning}_celltypist.html')\n    \n    # compute scores comparing each tool labels with protein labels\n    if tuning == 'antibody' or tuning == 'default':\n        compute_scores(DIR, dataset, antibody_df, tuning, 'antibody')\n        labels = []\n        labels_titles = []\n        for tool in TOOLS:\n            labels.append(antibody_df[f'cluster_{tool}'].to_list())\n            labels_titles.append(tool)\n        labels.append(antibody_df[f'cluster_antibody'].map(antibody_mapping_df['go'].to_dict()).to_list())\n        labels_titles.append('antibody')\n        title = f'{dataset} - matching {tuning} labels' if tuning != 'default' else f'{dataset} - default labels'\n        sankey_plot(labels=labels, labels_titles=labels_titles, title=title, path=f'{DIR}{dataset}/{tuning}_antibody.html')\n\n\ndef print_clustering_data(dataset,tuning):\n    # concat tools labels\n    labels_df = pd.read_csv(f'{DIR}{dataset}/COTAN/{tuning}/clustering_labels.csv', index_col=0)\n    labels_df.rename(columns={\"cluster\": \"cluster_COTAN\"}, inplace=True)\n    display(f'Initial COTAN cluster number:')\n    display(labels_df.cluster_COTAN.unique().shape[0])\n    #print(\"labels_df size\")\n    #print(labels_df.shape)\n    for tool in [t for t in TOOLS if t != 'COTAN']:\n        tool_labels_df = pd.read_csv(f'{DIR}{dataset}/{tool}/{tuning}/clustering_labels.csv', index_col=0)\n        display(f'Initial {tool} cluster number:')\n        display(labels_df[labels_df.columns[-1]].unique().shape[0])\n        labels_df = labels_df.merge(tool_labels_df, how='inner', on='cell')\n        labels_df.rename(columns={\"cluster\": f\"cluster_{tool}\"}, inplace=True)\n\n    \n    labels_df = drop_small_clusters(df = labels_df,min_size = min_size_cluster)\n    #    print(\"labels_df size\"+tool)\n    #    print(labels_df.shape)\n    \n    if tuning == 'celltypist' or tuning == 'default':\n    # load and concat celltypist labels\n        celltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\n        celltypist_df.index = celltypist_df.index.str[:-2]\n        celltypist_df = labels_df.merge(celltypist_df, how='inner', on='cell')\n        celltypist_df.rename(columns={\"cluster.ids\": f\"cluster_celltypist\"}, inplace=True)\n        celltypist_mapping_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_mapping.csv', index_col=0)\n\n        celltypist_df = drop_small_clusters(df = celltypist_df, min_size = min_size_cluster)\n        \n        #print(\"celltypist_df size\")\n        #print(celltypist_df.shape)\n        labels_cluster_celltypist = np.unique(celltypist_df[\"cluster_celltypist\"])\n        for tool in TOOLS:\n            labels_cluster_tool = np.unique(celltypist_df[f'cluster_{tool}'])\n            cm =contingency_matrix(celltypist_df[\"cluster_celltypist\"], celltypist_df[f'cluster_{tool}'])\n            cm = pd.DataFrame(cm,index=labels_cluster_celltypist,columns=labels_cluster_tool)\n            display(f'{dataset} - contingency_matrix (rows: cellTypist - cols: {tool})')\n            display(cm)\n\n    if tuning == 'antibody' or tuning == 'default':\n        #load and concat protein surface labels\n        antibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\n        display(\"Initial antibody cell/cluster table:\")\n        display(antibody_df[\"cluster.ids\"].value_counts())\n        antibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\n        antibody_df.rename(columns={\"cluster.ids\": f\"cluster_antibody\"}, inplace=True)\n        \n        antibody_df = drop_small_clusters(df = antibody_df, min_size = min_size_cluster )\n        \n        antibody_mapping_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_mapping.csv', index_col=1, encoding='latin1')\n        labels_cluster_antybody = np.unique(antibody_df[\"cluster_antibody\"])\n        for tool in TOOLS:\n            labels_cluster_tool = np.unique(antibody_df[f'cluster_{tool}'])\n            cm =contingency_matrix(antibody_df[\"cluster_antibody\"], antibody_df[f'cluster_{tool}'])\n            cm = pd.DataFrame(cm,index=labels_cluster_antybody,columns=labels_cluster_tool)\n            display(f'{dataset} - contingency_matrix (rows: antibody - cols: {tool})')\n            display(cm)"
  },
  {
    "objectID": "clustering_comparison.html#preamble",
    "href": "clustering_comparison.html#preamble",
    "title": "Clustering Comparision",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport scanpy as sc\nfrom sklearn.metrics.cluster import normalized_mutual_info_score, adjusted_rand_score\nfrom sklearn.metrics import homogeneity_score, completeness_score, fowlkes_mallows_score, silhouette_score, davies_bouldin_score, calinski_harabasz_score\nfrom sklearn.metrics.cluster import contingency_matrix, pair_confusion_matrix\nfrom src.utils import sankey_plot\nfrom sklearn.decomposition import PCA\nimport kaleido\nfrom sklearn.preprocessing import StandardScaler\nimport plotly.io as pio\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nDIR = 'Data/'\nDATASET_NAMES = ['PBMC1', 'PBMC2', 'PBMC3','PBMC4']\nTOOLS = ['monocle', 'scanpy', 'scvi-tools', 'seurat', 'COTAN']\nPARAMS_TUNING = ['default', 'celltypist', 'antibody']\nmin_size_cluster = 10\n\n\nlabels_df = pd.read_csv(f'{DIR}PBMC3/COTAN/default/clustering_labels.csv', index_col=0,usecols=[\"cell\",\"cluster\"])\nlabels_df.rename(columns={\"cluster\": \"cluster_COTAN\"}, inplace=True)\nprint(labels_df.shape)\n#print(labels_df.shape)\nfor tool in [t for t in TOOLS if t != 'COTAN']:\n    tool_labels_df = pd.read_csv(f'{DIR}PBMC3/{tool}/default/clustering_labels.csv', index_col=0)\n    labels_df = labels_df.merge(tool_labels_df, how='inner', on='cell')\n    labels_df.rename(columns={\"cluster\": f\"cluster_{tool}\"}, inplace=True)\n#    print(\"labels_df size\"+tool)\n#    print(labels_df.shape)\n\n(10944, 1)\n\n\n\nlabels_df['cluster_COTAN'].value_counts()\n\ncluster_COTAN\n3     1689\n9      688\n20     609\n4      433\n8      432\n5      390\n10     362\n27     331\n47     324\n13     305\n52     302\n19     282\n46     260\n32     253\n43     242\n45     228\n54     219\n23     190\n2      189\n12     177\n35     166\n39     162\n42     159\n17     151\n55     149\n14     146\n18     145\n6      143\n28     132\n53     130\n7      120\n40     111\n51     109\n16     100\n50      99\n44      98\n36      79\n30      78\n41      76\n11      74\n37      67\n22      58\n57      52\n1       49\n56      40\n48      39\n34      37\n31      35\n38      30\n49      29\n15      29\n25      28\n26      27\n29      27\n33      24\n21      21\n24      20\nName: count, dtype: int64\n\n\n\nlabels_df.shape\n\n(3405, 5)\n\n\n\nlabels_df = drop_small_clusters(df = labels_df,min_size = min_size_cluster)\n\n'cluster_COTAN - cluster_COTAN\\n12    809\\n16    462\\n7     392\\n18    272\\n8     254\\n4     177\\n10    152\\n11    145\\n3     122\\n19    117\\n20    106\\n5      97\\n13     94\\n6      77\\n2      75\\n21     55\\n15     42\\n17     35\\n1      35\\n14     28\\n9      27\\n23     22\\n22     15\\nName: count, dtype: int64'\n\n\n\"Index([15, 17, 1, 14, 9, 23, 22], dtype='int64', name='cluster_COTAN')\"\n\n\n'cluster_monocle - cluster_monocle\\n1    1913\\n2    1195\\n3     298\\nName: count, dtype: int64'\n\n\n\"Index([], dtype='int64', name='cluster_monocle')\"\n\n\n'cluster_scanpy - cluster_scanpy\\n3     323\\n1     315\\n2     309\\n4     286\\n7     268\\n6     261\\n8     236\\n5     233\\n9     200\\n10    182\\n11    158\\n12    144\\n13    141\\n14    105\\n15     91\\n16     77\\n17     76\\n18      1\\nName: count, dtype: int64'\n\n\n\"Index([18], dtype='int64', name='cluster_scanpy')\"\n\n\n'cluster_scvi-tools - cluster_scvi-tools\\n1     635\\n2     467\\n3     421\\n4     390\\n5     364\\n6     283\\n7     277\\n8     149\\n9     146\\n10    101\\n11     92\\n12     80\\nName: count, dtype: int64'\n\n\n\"Index([], dtype='int64', name='cluster_scvi-tools')\"\n\n\n'cluster_seurat - cluster_seurat\\n1     879\\n3     581\\n2     504\\n4     408\\n5     273\\n6     260\\n7     153\\n8     144\\n9     129\\n10     74\\nName: count, dtype: int64'\n\n\n\"Index([], dtype='int64', name='cluster_seurat')\"\n\n\n\n# load and concat celltypist labels\ncelltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\ncelltypist_df.index = celltypist_df.index.str[:-2]\ncelltypist_df = labels_df.merge(celltypist_df, how='inner', on='cell')\ncelltypist_df.rename(columns={\"cluster.ids\": f\"cluster_celltypist\"}, inplace=True)\ncelltypist_mapping_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_mapping.csv', index_col=0)\n#print(\"celltypist_df size\")\n#print(celltypist_df.shape)\n\ncelltypist_df = drop_small_clusters(df = celltypist_df, min_size = min_size_cluster)\n\n# load and concat protein surface labels\nantibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\nantibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\nantibody_df.rename(columns={\"cluster.ids\": f\"cluster_antibody\"}, inplace=True)\nantibody_mapping_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_mapping.csv', index_col=1, encoding='latin1')\n    #print(\"antibody_df size\")\n    #print(antibody_df.shape)\n\nantibody_df = drop_small_clusters(df = antibody_df, min_size = min_size_cluster )\n\n\ndef drop_small_clusters(df, min_size):\n    for col in df.columns:\n        # Count the number of occurrences of each cluster\n        cluster_counts = df[col].value_counts()\n        #display(f'{col} - {cluster_counts}')\n        # Find clusters that are smaller than the minimum size\n        small_clusters = cluster_counts[cluster_counts &lt; min_size].index\n        #display(f'{small_clusters}')\n        # Drop rows corresponding to these clusters\n        df = df[~df[col].isin(small_clusters)]\n    return df\n\n\ndef compute_scores(dir, dataset, labels_df, labels_matched, ground_truth_labels):\n    scores = {}\n    scores['NMI'] = {}\n    scores['ARI'] = {}\n    scores['homogeneity'] = {}\n    scores['completeness'] = {}\n    scores['fowlkes_mallows'] = {}\n    scores['precision'] = {}\n    scores['recall'] = {}\n    \n    for tool in TOOLS:\n        scores['NMI'][tool] = normalized_mutual_info_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'], average_method='arithmetic')\n        scores['ARI'][tool] = adjusted_rand_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        scores['homogeneity'][tool] = homogeneity_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        scores['completeness'][tool] = completeness_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        scores['fowlkes_mallows'][tool] = fowlkes_mallows_score(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        sc = pair_confusion_matrix(labels_pred=labels_df['cluster_'+tool], labels_true=labels_df[f'cluster_{ground_truth_labels}'])\n        TP = sc[1,1]\n        FP = sc[0,1]\n        FN = sc[1,0]\n        P_score = TP/(TP+FP)\n        scores['precision'][tool] = P_score\n        scores['recall'][tool] = TP/(TP+FN)\n        \n        \n        \n        \n    scores_df = pd.DataFrame(scores)\n    scores_df.to_csv(f'{dir}{dataset}/scores_{labels_matched}_{ground_truth_labels}.csv')\n    scores_df.to_latex(f'{dir}{dataset}/scores_{labels_matched}_{ground_truth_labels}.tex')\n    display(scores_df)\n\n\ndef print_scores(dataset,tuning):\n    \n    \n    # concat tools labels\n    labels_df = pd.read_csv(f'{DIR}{dataset}/COTAN/{tuning}/clustering_labels.csv', index_col=0)\n    labels_df.rename(columns={\"cluster\": \"cluster_COTAN\"}, inplace=True)\n    #print(\"labels_df size\")\n    #print(labels_df.shape)\n    for tool in [t for t in TOOLS if t != 'COTAN']:\n        tool_labels_df = pd.read_csv(f'{DIR}{dataset}/{tool}/{tuning}/clustering_labels.csv', index_col=0)\n        labels_df = labels_df.merge(tool_labels_df, how='inner', on='cell')\n        labels_df.rename(columns={\"cluster\": f\"cluster_{tool}\"}, inplace=True)\n    #    print(\"labels_df size\"+tool)\n    #    print(labels_df.shape)\n\n    labels_df = drop_small_clusters(df = labels_df,min_size = min_size_cluster)\n    \n    # load and concat celltypist labels\n    celltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\n    celltypist_df.index = celltypist_df.index.str[:-2]\n    celltypist_df = labels_df.merge(celltypist_df, how='inner', on='cell')\n    celltypist_df.rename(columns={\"cluster.ids\": f\"cluster_celltypist\"}, inplace=True)\n    celltypist_mapping_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_mapping.csv', index_col=0)\n    #print(\"celltypist_df size\")\n    #print(celltypist_df.shape)\n\n    celltypist_df = drop_small_clusters(df = celltypist_df, min_size = min_size_cluster)\n    \n    # load and concat protein surface labels\n    antibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\n    antibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\n    antibody_df.rename(columns={\"cluster.ids\": f\"cluster_antibody\"}, inplace=True)\n    antibody_mapping_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_mapping.csv', index_col=1, encoding='latin1')\n    #print(\"antibody_df size\")\n    #print(antibody_df.shape)\n\n    antibody_df = drop_small_clusters(df = antibody_df, min_size = min_size_cluster )\n\n    # read dataset\n    adata = sc.read_10x_mtx(\n        f'{DIR}{dataset}/filtered/10X/',\n        var_names='gene_symbols',\n        cache=False\n    )\n    # keep only labelled cells\n    adata.var_names_make_unique()\n    if tuning=='celltypist':\n        subset_cells = adata.obs_names.isin(celltypist_df.index)\n        adata = adata[subset_cells, :]\n    elif tuning=='antibody':\n        subset_cells = adata.obs_names.isin(antibody_df.index)\n        adata = adata[subset_cells, :]\n    else:\n        subset_cells = adata.obs_names.isin(labels_df.index)\n        adata = adata[subset_cells, :]\n\n    mito_genes = adata.var_names.str.startswith('MT-')\n    # for each cell compute fraction of counts in mito genes vs. all genes\n    # the `.A1` is only necessary as X is sparse (to transform to a dense array after summing)\n    adata.obs['percent_mito'] = np.sum(adata[:, mito_genes].X, axis=1).A1 / np.sum(adata.X, axis=1).A1\n    # add the total counts per cell as observations-annotation to adata\n    adata.obs['n_counts'] = adata.X.sum(axis=1).A1\n\n    sc.pp.normalize_total(adata, target_sum=1e4)\n    sc.pp.log1p(adata)\n    sc.pp.highly_variable_genes(adata, min_mean=0.00125, max_mean=3, min_disp=0.5)\n    adata.raw = adata\n    adata = adata[:, adata.var.highly_variable]\n    #sc.pp.regress_out(adata, ['n_counts', 'percent_mito'])\n    sc.pp.scale(adata, max_value=10)\n    sc.tl.pca(adata, svd_solver='arpack',n_comps=20)\n    pca_matrix = adata.obsm['X_pca']\n    scaler = StandardScaler()\n    scaled_pca_matrix = scaler.fit_transform(pca_matrix)\n\n    #Custers number\n    \n    df = {}\n    for tool in TOOLS:\n        df[tool] = labels_df[f'cluster_{tool}'].unique().shape[0]\n    df_size = pd.DataFrame(df, index=[0])\n    display(f'{dataset} - number of clusters')\n    display(df_size)\n\n    # compute silhouette, Calinski_Harabasz and davies_bouldin scores with scaled PCA    \n    silhouette = {}\n    Calinski_Harabasz = {}\n    davies_bouldin = {}\n    for tool in TOOLS:\n        \n        if tuning=='celltypist':\n            # Convert scaled_pca_matrix to DataFrame to filter by index\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            # Filter PCA matrix based on celltypist_df index\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[celltypist_df.index]\n            # Convert back to numpy array for compatibility with metrics\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_matrix, celltypist_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_matrix, celltypist_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_matrix, celltypist_df[f'cluster_{tool}'])\n            \n            silhouette['celltypist'] = silhouette_score(scaled_pca_matrix, celltypist_df[f'cluster_celltypist'])\n            Calinski_Harabasz['celltypist'] = calinski_harabasz_score(scaled_pca_matrix, celltypist_df[f'cluster_celltypist'])\n            davies_bouldin['celltypist'] = davies_bouldin_score(scaled_pca_matrix, celltypist_df[f'cluster_celltypist'])\n        elif tuning=='antibody':\n            # Repeat similar steps for antibody_df\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[antibody_df.index]\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_matrix, antibody_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_matrix, antibody_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_matrix, antibody_df[f'cluster_{tool}'])\n            \n            silhouette['antibody'] = silhouette_score(scaled_pca_matrix, antibody_df[f'cluster_antibody'])\n            Calinski_Harabasz['antibody'] = calinski_harabasz_score(scaled_pca_matrix, antibody_df[f'cluster_antibody'])\n            davies_bouldin['antibody'] = davies_bouldin_score(scaled_pca_matrix, antibody_df[f'cluster_antibody'])\n\n        else:\n            silhouette[tool] = silhouette_score(scaled_pca_matrix, labels_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_matrix, labels_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_matrix, labels_df[f'cluster_{tool}'])\n        \n        \n    silhouette_df = pd.DataFrame(silhouette, index=[0])\n    silhouette_df.to_csv(f'{DIR}{dataset}/{tuning}_silhouette.csv')\n    silhouette_df.to_latex(f'{DIR}{dataset}/{tuning}_silhouette.tex')\n    display(f'{dataset} - Silhuette (higher is better)')\n    display(silhouette_df)\n\n    Calinski_Harabasz_df = pd.DataFrame(Calinski_Harabasz, index=[0])\n    Calinski_Harabasz_df.to_csv(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz.csv')\n    Calinski_Harabasz_df.to_latex(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz.tex')\n    display(f'{dataset} - Calinski_Harabasz (higher is better)')\n    display(Calinski_Harabasz_df)\n\n    davies_bouldin_df = pd.DataFrame(davies_bouldin, index=[0])\n    davies_bouldin_df.to_csv(f'{DIR}{dataset}/{tuning}_davies_bouldin.csv')\n    davies_bouldin_df.to_latex(f'{DIR}{dataset}/{tuning}_davies_bouldin.tex')\n    display(f'{dataset} - davies_bouldin (lower is better)')\n    display(davies_bouldin_df)\n\n    # compute silhouette, Calinski_Harabasz and davies_bouldin scores with cellTypist probability\n    celltypist_prob_df = pd.read_csv(f'{DIR}{dataset}/celltypist/Immune_All_Low_probability_matrix.csv', index_col=0)\n    #labels_df = pd.read_csv(f'{DIR}{dataset}/COTAN/{tuning}/clustering_labels.csv', index_col=0)\n    celltypist_prob_df.index = celltypist_prob_df.index.str[:-2]\n    #subset_cells = celltypist_prob_df.index.isin(labels_df.index)\n    #celltypist_prob_df = celltypist_prob_df[subset_cells]\n\n    if tuning=='celltypist':\n        subset_cells = celltypist_prob_df.index.isin(celltypist_df.index)\n        celltypist_prob_df = celltypist_prob_df[subset_cells]\n    elif tuning=='antibody':\n        subset_cells = celltypist_prob_df.index.isin(antibody_df.index)\n        celltypist_prob_df = celltypist_prob_df[subset_cells]\n    else:\n        subset_cells = celltypist_prob_df.index.isin(labels_df.index)\n        celltypist_prob_df = celltypist_prob_df[subset_cells]\n    \n    \n    pca = PCA(n_components=20,svd_solver='arpack')\n    pca_data = pca.fit_transform(celltypist_prob_df)\n    df_prob = pd.DataFrame(pca_data)\n    df_prob.index = celltypist_prob_df.index\n    scaler = StandardScaler()\n    scaled_pca_data = pd.DataFrame(scaler.fit_transform(df_prob))\n    scaled_pca_data.index = celltypist_prob_df.index\n    \n    silhouette = {}\n    Calinski_Harabasz = {}\n    davies_bouldin = {}\n    for tool in TOOLS:\n        \n        if tuning=='celltypist':\n            # Convert scaled_pca_matrix to DataFrame to filter by index\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            # Filter PCA matrix based on celltypist_df index\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[celltypist_df.index]\n            # Convert back to numpy array for compatibility with metrics\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_data, celltypist_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_data, celltypist_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_data, celltypist_df[f'cluster_{tool}'])\n            \n            silhouette['celltypist'] = silhouette_score(scaled_pca_data, celltypist_df[f'cluster_celltypist'])\n            Calinski_Harabasz['celltypist'] = calinski_harabasz_score(scaled_pca_data, celltypist_df[f'cluster_celltypist'])\n            davies_bouldin['celltypist'] = davies_bouldin_score(scaled_pca_data, celltypist_df[f'cluster_celltypist'])\n        elif tuning=='antibody':\n            # Repeat similar steps for antibody_df\n            #scaled_pca_matrix_df = pd.DataFrame(scaled_pca_matrix, index=adata.obs_names)\n            #scaled_pca_matrix_filtered = scaled_pca_matrix_df.loc[antibody_df.index]\n            #scaled_pca_matrix = scaled_pca_matrix_filtered.values\n            silhouette[tool] = silhouette_score(scaled_pca_data, antibody_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_data, antibody_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_data, antibody_df[f'cluster_{tool}'])\n            \n            silhouette['antibody'] = silhouette_score(scaled_pca_data, antibody_df[f'cluster_antibody'])\n            Calinski_Harabasz['antibody'] = calinski_harabasz_score(scaled_pca_data, antibody_df[f'cluster_antibody'])\n            davies_bouldin['antibody'] = davies_bouldin_score(scaled_pca_data, antibody_df[f'cluster_antibody'])\n\n        else:\n            silhouette[tool] = silhouette_score(scaled_pca_data, labels_df[f'cluster_{tool}'])\n            Calinski_Harabasz[tool] =  calinski_harabasz_score(scaled_pca_data, labels_df[f'cluster_{tool}'])\n            davies_bouldin[tool] = davies_bouldin_score(scaled_pca_data, labels_df[f'cluster_{tool}'])\n        \n    silhouette_df = pd.DataFrame(silhouette, index=[0])\n    silhouette_df.to_csv(f'{DIR}{dataset}/{tuning}_silhouette_fromProb.csv')\n    silhouette_df.to_latex(f'{DIR}{dataset}/{tuning}_silhouette_fromProb.tex')\n    display(f'{dataset} - Silhuette from Prob. (higher is better)')\n    display(silhouette_df)\n\n    Calinski_Harabasz_df = pd.DataFrame(Calinski_Harabasz, index=[0])\n    Calinski_Harabasz_df.to_csv(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz_fromProb.csv')\n    Calinski_Harabasz_df.to_latex(f'{DIR}{dataset}/{tuning}_Calinski_Harabasz_fromProb.tex')\n    display(f'{dataset} - Calinski_Harabasz from Prob. (higher is better)')\n    display(Calinski_Harabasz_df)\n\n    davies_bouldin_df = pd.DataFrame(davies_bouldin, index=[0])\n    davies_bouldin_df.to_csv(f'{DIR}{dataset}/{tuning}_davies_bouldin_fromProb.csv')\n    davies_bouldin_df.to_latex(f'{DIR}{dataset}/{tuning}_davies_bouldin_fromProb.tex')\n    display(f'{dataset} - davies_bouldin  from Prob. (lower is better)')\n    display(davies_bouldin_df)\n\n    display(f'{dataset} - matching {tuning} labels' if tuning != 'default' else f'{dataset} - default labels')\n\n    # compute scores comparing each tool labels with celltypist labels\n    if tuning == 'celltypist' or tuning == 'default':\n        compute_scores(DIR, dataset, celltypist_df, tuning, 'celltypist')\n        labels = []\n        labels_titles = []\n        for tool in TOOLS:\n            labels.append(celltypist_df[f'cluster_{tool}'].to_list())\n            labels_titles.append(tool)\n        labels.append(celltypist_df[f'cluster_celltypist'].map(celltypist_mapping_df['go'].to_dict()).to_list())\n        labels_titles.append('celltypist')\n        title = f'{dataset} - matching {tuning} labels' if tuning != 'default' else f'{dataset} - default labels'\n        sankey_plot(labels=labels, labels_titles=labels_titles, title=title, path=f'{DIR}{dataset}/{tuning}_celltypist.html')\n    \n    # compute scores comparing each tool labels with protein labels\n    if tuning == 'antibody' or tuning == 'default':\n        compute_scores(DIR, dataset, antibody_df, tuning, 'antibody')\n        labels = []\n        labels_titles = []\n        for tool in TOOLS:\n            labels.append(antibody_df[f'cluster_{tool}'].to_list())\n            labels_titles.append(tool)\n        labels.append(antibody_df[f'cluster_antibody'].map(antibody_mapping_df['go'].to_dict()).to_list())\n        labels_titles.append('antibody')\n        title = f'{dataset} - matching {tuning} labels' if tuning != 'default' else f'{dataset} - default labels'\n        sankey_plot(labels=labels, labels_titles=labels_titles, title=title, path=f'{DIR}{dataset}/{tuning}_antibody.html')\n\n\ndef print_clustering_data(dataset,tuning):\n    # concat tools labels\n    labels_df = pd.read_csv(f'{DIR}{dataset}/COTAN/{tuning}/clustering_labels.csv', index_col=0)\n    labels_df.rename(columns={\"cluster\": \"cluster_COTAN\"}, inplace=True)\n    display(f'Initial COTAN cluster number:')\n    display(labels_df.cluster_COTAN.unique().shape[0])\n    #print(\"labels_df size\")\n    #print(labels_df.shape)\n    for tool in [t for t in TOOLS if t != 'COTAN']:\n        tool_labels_df = pd.read_csv(f'{DIR}{dataset}/{tool}/{tuning}/clustering_labels.csv', index_col=0)\n        display(f'Initial {tool} cluster number:')\n        display(labels_df[labels_df.columns[-1]].unique().shape[0])\n        labels_df = labels_df.merge(tool_labels_df, how='inner', on='cell')\n        labels_df.rename(columns={\"cluster\": f\"cluster_{tool}\"}, inplace=True)\n\n    \n    labels_df = drop_small_clusters(df = labels_df,min_size = min_size_cluster)\n    #    print(\"labels_df size\"+tool)\n    #    print(labels_df.shape)\n    \n    if tuning == 'celltypist' or tuning == 'default':\n    # load and concat celltypist labels\n        celltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\n        celltypist_df.index = celltypist_df.index.str[:-2]\n        celltypist_df = labels_df.merge(celltypist_df, how='inner', on='cell')\n        celltypist_df.rename(columns={\"cluster.ids\": f\"cluster_celltypist\"}, inplace=True)\n        celltypist_mapping_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_mapping.csv', index_col=0)\n\n        celltypist_df = drop_small_clusters(df = celltypist_df, min_size = min_size_cluster)\n        \n        #print(\"celltypist_df size\")\n        #print(celltypist_df.shape)\n        labels_cluster_celltypist = np.unique(celltypist_df[\"cluster_celltypist\"])\n        for tool in TOOLS:\n            labels_cluster_tool = np.unique(celltypist_df[f'cluster_{tool}'])\n            cm =contingency_matrix(celltypist_df[\"cluster_celltypist\"], celltypist_df[f'cluster_{tool}'])\n            cm = pd.DataFrame(cm,index=labels_cluster_celltypist,columns=labels_cluster_tool)\n            display(f'{dataset} - contingency_matrix (rows: cellTypist - cols: {tool})')\n            display(cm)\n\n    if tuning == 'antibody' or tuning == 'default':\n        #load and concat protein surface labels\n        antibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\n        display(\"Initial antibody cell/cluster table:\")\n        display(antibody_df[\"cluster.ids\"].value_counts())\n        antibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\n        antibody_df.rename(columns={\"cluster.ids\": f\"cluster_antibody\"}, inplace=True)\n        \n        antibody_df = drop_small_clusters(df = antibody_df, min_size = min_size_cluster )\n        \n        antibody_mapping_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_mapping.csv', index_col=1, encoding='latin1')\n        labels_cluster_antybody = np.unique(antibody_df[\"cluster_antibody\"])\n        for tool in TOOLS:\n            labels_cluster_tool = np.unique(antibody_df[f'cluster_{tool}'])\n            cm =contingency_matrix(antibody_df[\"cluster_antibody\"], antibody_df[f'cluster_{tool}'])\n            cm = pd.DataFrame(cm,index=labels_cluster_antybody,columns=labels_cluster_tool)\n            display(f'{dataset} - contingency_matrix (rows: antibody - cols: {tool})')\n            display(cm)"
  },
  {
    "objectID": "clustering_comparison.html#data-summary-information",
    "href": "clustering_comparison.html#data-summary-information",
    "title": "Clustering Comparision",
    "section": "Data summary information",
    "text": "Data summary information\n\nDefault parameters\n\nprint_clustering_data(tuning = 'default',dataset=\"PBMC1\")\n\n'Initial COTAN cluster number:'\n\n\n23\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n3\n\n\n'Initial scvi-tools cluster number:'\n\n\n18\n\n\n'Initial seurat cluster number:'\n\n\n13\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\n1\n8\n970\n1\n\n\n2\n943\n0\n0\n\n\n3\n47\n0\n0\n\n\n4\n0\n78\n0\n\n\n5\n309\n0\n0\n\n\n6\n0\n0\n142\n\n\n7\n82\n0\n0\n\n\n8\n278\n0\n1\n\n\n9\n81\n0\n0\n\n\n10\n0\n171\n0\n\n\n11\n70\n0\n0\n\n\n12\n240\n0\n0\n\n\n13\n0\n28\n0\n\n\n14\n0\n0\n155\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n0\n0\n246\n0\n267\n0\n263\n0\n200\n0\n1\n0\n2\n0\n0\n0\n0\n0\n\n\n2\n88\n321\n0\n281\n1\n0\n0\n241\n0\n1\n0\n1\n0\n1\n0\n8\n0\n0\n\n\n3\n45\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n76\n0\n\n\n5\n250\n5\n0\n0\n0\n0\n0\n2\n0\n0\n0\n52\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n138\n0\n0\n0\n0\n0\n\n\n7\n8\n0\n0\n0\n0\n0\n0\n0\n0\n19\n0\n37\n0\n18\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n263\n0\n0\n0\n16\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n2\n2\n0\n5\n0\n0\n0\n5\n0\n0\n0\n0\n0\n1\n0\n66\n0\n0\n\n\n10\n0\n0\n75\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n91\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n5\n0\n0\n0\n65\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n6\n0\n0\n0\n0\n0\n0\n4\n0\n82\n0\n59\n0\n86\n0\n3\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n154\n0\n1\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n1\n659\n0\n0\n0\n289\n0\n1\n0\n0\n30\n0\n0\n0\n\n\n2\n0\n485\n48\n402\n0\n2\n0\n0\n0\n0\n0\n6\n0\n\n\n3\n0\n1\n41\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n6\n0\n0\n0\n0\n72\n0\n0\n0\n\n\n5\n0\n5\n288\n12\n0\n4\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n1\n2\n139\n0\n0\n0\n0\n\n\n7\n0\n0\n58\n0\n0\n23\n1\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n279\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n4\n0\n2\n0\n2\n0\n0\n0\n0\n0\n73\n0\n\n\n10\n1\n0\n0\n0\n78\n0\n0\n0\n0\n0\n92\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n67\n3\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n1\n48\n1\n0\n189\n0\n0\n0\n0\n0\n1\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n\n\n14\n0\n0\n0\n0\n0\n1\n0\n147\n7\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n0\n0\n616\n361\n1\n0\n0\n0\n1\n0\n0\n\n\n2\n798\n145\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n1\n46\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n4\n0\n0\n0\n0\n0\n74\n0\n\n\n5\n0\n309\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n142\n0\n0\n0\n\n\n7\n0\n55\n0\n0\n0\n27\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n274\n5\n0\n0\n0\n0\n0\n\n\n9\n78\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n43\n0\n0\n0\n0\n128\n0\n0\n\n\n11\n0\n0\n0\n0\n5\n65\n0\n0\n0\n0\n0\n\n\n12\n7\n69\n0\n0\n0\n164\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n27\n\n\n14\n0\n0\n0\n0\n0\n0\n153\n2\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n\n1\n35\n0\n0\n175\n97\n75\n389\n207\n0\n0\n...\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n20\n24\n56\n29\n0\n0\n0\n0\n3\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n1\n9\n1\n0\n0\n0\n6\n7\n21\n\n\n4\n0\n73\n0\n0\n0\n0\n0\n5\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n7\n8\n290\n3\n0\n0\n0\n0\n0\n1\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n56\n0\n25\n1\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n3\n1\n0\n4\n115\n104\n47\n5\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n10\n0\n1\n122\n0\n0\n2\n3\n42\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n67\n0\n2\n1\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n5\n50\n1\n175\n0\n0\n1\n0\n0\n\n\n13\n0\n1\n0\n0\n0\n0\n0\n0\n27\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n152\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n14 rows × 23 columns\n\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n7     1338\n8      876\n3      748\n4      341\n9      331\n5      211\n1      202\n6      131\n2       62\n10      51\n12      16\nName: count, dtype: int64\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\n1\n161\n0\n0\n\n\n2\n0\n43\n3\n\n\n3\n600\n0\n0\n\n\n4\n262\n1\n0\n\n\n5\n158\n0\n0\n\n\n6\n1\n86\n0\n\n\n7\n10\n1115\n0\n\n\n8\n812\n1\n1\n\n\n9\n1\n0\n294\n\n\n10\n44\n0\n0\n\n\n12\n10\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n7\n6\n0\n4\n0\n0\n0\n9\n0\n23\n0\n7\n0\n32\n0\n73\n0\n0\n\n\n2\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n2\n0\n3\n0\n38\n0\n0\n0\n\n\n3\n366\n33\n0\n5\n0\n0\n0\n28\n0\n43\n0\n122\n0\n3\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n1\n249\n0\n0\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n9\n0\n0\n0\n0\n0\n0\n2\n0\n64\n0\n15\n0\n68\n0\n0\n0\n0\n\n\n6\n1\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n56\n26\n\n\n7\n1\n0\n319\n0\n267\n0\n267\n1\n198\n0\n0\n0\n0\n0\n52\n0\n19\n1\n\n\n8\n18\n288\n0\n277\n0\n1\n0\n214\n0\n3\n1\n5\n0\n2\n0\n4\n0\n1\n\n\n9\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n156\n0\n137\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n7\n0\n0\n0\n36\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n1\n0\n6\n12\n5\n0\n62\n0\n0\n0\n0\n0\n76\n0\n\n\n2\n2\n0\n0\n0\n3\n0\n0\n1\n1\n0\n39\n0\n0\n\n\n3\n0\n49\n441\n66\n0\n44\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n1\n0\n0\n0\n0\n0\n262\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n2\n12\n1\n0\n141\n0\n0\n0\n0\n0\n2\n0\n\n\n6\n0\n1\n0\n0\n0\n3\n0\n0\n0\n56\n1\n0\n26\n\n\n7\n655\n3\n0\n0\n368\n0\n1\n0\n0\n45\n52\n0\n1\n\n\n8\n0\n438\n17\n349\n0\n4\n3\n0\n0\n0\n0\n2\n1\n\n\n9\n0\n0\n0\n0\n0\n0\n3\n148\n144\n0\n0\n0\n0\n\n\n10\n0\n0\n1\n0\n0\n37\n6\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n93\n17\n0\n0\n0\n51\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1\n4\n0\n0\n1\n1\n39\n0\n0\n\n\n3\n23\n540\n0\n0\n0\n37\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n1\n0\n260\n2\n0\n0\n0\n0\n0\n\n\n5\n1\n28\n0\n0\n0\n129\n0\n0\n0\n0\n0\n\n\n6\n3\n1\n0\n1\n0\n0\n0\n0\n1\n56\n25\n\n\n7\n2\n1\n611\n402\n1\n0\n0\n0\n89\n18\n1\n\n\n8\n766\n41\n0\n0\n1\n4\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n0\n2\n0\n151\n142\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n8\n36\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n8\n2\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n2\n10\n0\n54\n0\n0\n1\n0\n0\n\n\n2\n1\n1\n38\n0\n0\n1\n1\n2\n0\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n26\n23\n417\n25\n39\n0\n0\n6\n10\n22\n\n\n4\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n1\n113\n99\n45\n4\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n1\n20\n0\n135\n0\n0\n0\n0\n0\n\n\n6\n0\n56\n1\n1\n0\n0\n0\n1\n25\n0\n...\n1\n1\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n7\n33\n17\n83\n175\n96\n76\n389\n251\n1\n0\n...\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n...\n1\n12\n14\n9\n4\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n150\n...\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n38\n0\n3\n2\n1\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n2\n1\n0\n1\n2\n4\n0\n0\n0\n\n\n\n\n11 rows × 23 columns\n\n\n\n\nprint_clustering_data(tuning = 'default',dataset=\"PBMC2\")\n\n'Initial COTAN cluster number:'\n\n\n31\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n2\n\n\n'Initial scvi-tools cluster number:'\n\n\n18\n\n\n'Initial seurat cluster number:'\n\n\n20\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n1\n230\n1\n\n\n2\n427\n0\n\n\n3\n2139\n3\n\n\n4\n700\n7\n\n\n5\n316\n0\n\n\n6\n0\n93\n\n\n7\n0\n567\n\n\n8\n674\n0\n\n\n9\n0\n186\n\n\n10\n52\n0\n\n\n11\n0\n228\n\n\n12\n0\n204\n\n\n13\n0\n48\n\n\n14\n0\n14\n\n\n15\n80\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n0\n0\n0\n2\n0\n0\n1\n22\n1\n2\n5\n50\n0\n148\n0\n0\n0\n0\n\n\n2\n0\n91\n0\n273\n0\n0\n0\n3\n2\n0\n56\n1\n0\n1\n0\n0\n0\n0\n\n\n3\n942\n508\n21\n183\n0\n0\n0\n21\n295\n2\n100\n42\n0\n26\n1\n0\n0\n1\n\n\n4\n0\n0\n0\n1\n0\n463\n8\n2\n0\n230\n0\n0\n0\n2\n1\n0\n0\n0\n\n\n5\n0\n0\n0\n2\n0\n0\n0\n266\n0\n0\n42\n0\n0\n6\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n88\n0\n0\n\n\n7\n0\n0\n0\n0\n466\n0\n0\n0\n0\n0\n0\n0\n15\n0\n86\n0\n0\n0\n\n\n8\n2\n1\n558\n0\n0\n0\n0\n3\n0\n0\n0\n110\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n174\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n50\n2\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n228\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n204\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n\n\n15\n0\n25\n0\n46\n0\n0\n0\n1\n2\n1\n2\n2\n0\n1\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n222\n1\n2\n0\n0\n4\n1\n1\n0\n0\n0\n0\n0\n0\n\n\n2\n331\n4\n1\n0\n0\n0\n7\n10\n53\n0\n0\n1\n0\n10\n4\n0\n6\n0\n0\n0\n\n\n3\n391\n733\n2\n1\n19\n1\n41\n304\n158\n185\n0\n2\n43\n90\n75\n0\n71\n0\n0\n26\n\n\n4\n1\n0\n675\n1\n0\n8\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n19\n0\n0\n\n\n5\n7\n0\n1\n0\n0\n0\n11\n9\n66\n0\n0\n151\n71\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n78\n0\n0\n3\n0\n\n\n7\n0\n0\n0\n564\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n2\n0\n1\n561\n0\n103\n1\n0\n2\n0\n1\n3\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n175\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n2\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n44\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n228\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n204\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n58\n0\n1\n0\n0\n0\n5\n5\n1\n5\n0\n0\n1\n3\n0\n0\n1\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n\n1\n0\n4\n6\n0\n0\n0\n219\n0\n1\n0\n0\n1\n0\n0\n\n\n2\n0\n400\n23\n0\n0\n0\n1\n0\n3\n0\n0\n0\n0\n0\n\n\n3\n1151\n352\n550\n0\n2\n15\n69\n1\n0\n0\n0\n2\n0\n0\n\n\n4\n0\n0\n2\n635\n0\n0\n3\n7\n0\n0\n1\n59\n0\n0\n\n\n5\n0\n42\n0\n0\n0\n0\n7\n0\n267\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n82\n0\n\n\n7\n0\n0\n0\n0\n567\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n8\n4\n2\n0\n0\n541\n119\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n14\n0\n0\n0\n0\n172\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n49\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n83\n0\n0\n145\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n201\n1\n0\n2\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14\n0\n0\n\n\n15\n0\n0\n77\n0\n0\n0\n2\n0\n0\n0\n0\n1\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n1\n25\n54\n3\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n1\n0\n2\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n2\n0\n0\n0\n1172\n14\n56\n7\n10\n3\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n4\n56\n141\n383\n115\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n2\n1\n0\n2\n2\n\n\n5\n0\n0\n0\n0\n0\n0\n1\n1\n4\n270\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n...\n36\n111\n211\n150\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n6\n562\n2\n78\n17\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n1\n10\n0\n0\n0\n0\n0\n0\n1\n\n\n10\n51\n0\n0\n1\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n...\n0\n0\n0\n0\n0\n1\n0\n141\n72\n13\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n...\n0\n0\n0\n0\n0\n8\n47\n2\n50\n96\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n48\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n10\n0\n0\n0\n3\n\n\n15\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n15 rows × 31 columns\n\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n4     1510\n11    1130\n8      695\n12     570\n6      424\n13     275\n5      197\n2      150\n10     122\n3       84\n7       76\nName: count, dtype: int64\n\n\n'PBMC2 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n\n\n\n\n2\n0\n145\n\n\n3\n60\n19\n\n\n4\n1480\n5\n\n\n5\n196\n0\n\n\n6\n416\n1\n\n\n7\n68\n5\n\n\n8\n680\n3\n\n\n10\n0\n115\n\n\n11\n1115\n7\n\n\n12\n566\n2\n\n\n13\n0\n262\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n16\n\n\n\n\n2\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n141\n0\n0\n\n\n3\n0\n1\n1\n0\n0\n3\n0\n0\n0\n54\n0\n0\n18\n2\n0\n\n\n4\n89\n588\n0\n478\n0\n0\n0\n56\n63\n0\n194\n10\n0\n3\n4\n\n\n5\n7\n1\n14\n2\n0\n0\n0\n118\n2\n2\n4\n23\n0\n23\n0\n\n\n6\n0\n2\n9\n13\n0\n0\n1\n128\n1\n0\n3\n124\n0\n136\n0\n\n\n7\n1\n3\n27\n3\n0\n0\n0\n6\n1\n0\n1\n23\n0\n3\n5\n\n\n8\n0\n0\n0\n0\n0\n459\n2\n0\n0\n220\n0\n0\n2\n0\n0\n\n\n10\n0\n0\n0\n0\n106\n0\n0\n0\n0\n0\n0\n0\n3\n0\n6\n\n\n11\n843\n26\n5\n5\n0\n0\n5\n4\n229\n0\n1\n2\n0\n0\n2\n\n\n12\n2\n0\n522\n0\n0\n0\n2\n1\n1\n2\n0\n21\n0\n17\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n262\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n20\n\n\n\n\n2\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n142\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n55\n0\n1\n0\n0\n1\n0\n0\n18\n0\n0\n0\n0\n0\n0\n4\n0\n\n\n4\n758\n143\n0\n0\n0\n0\n30\n125\n259\n51\n0\n5\n4\n54\n26\n4\n23\n0\n3\n\n\n5\n4\n8\n1\n0\n5\n0\n27\n4\n6\n0\n0\n36\n105\n0\n0\n0\n0\n0\n0\n\n\n6\n4\n0\n0\n0\n17\n0\n270\n2\n9\n0\n0\n112\n3\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n1\n0\n1\n31\n0\n27\n2\n1\n1\n0\n5\n0\n0\n0\n4\n0\n0\n0\n\n\n8\n0\n0\n622\n0\n0\n2\n0\n0\n0\n0\n2\n0\n1\n0\n0\n0\n0\n56\n0\n\n\n10\n0\n0\n0\n107\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n4\n0\n0\n0\n\n\n11\n14\n581\n0\n0\n5\n5\n2\n191\n5\n138\n0\n0\n1\n50\n51\n2\n54\n0\n23\n\n\n12\n0\n2\n1\n0\n520\n2\n34\n1\n0\n1\n0\n0\n6\n0\n0\n0\n1\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n262\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n2\n0\n0\n0\n0\n6\n0\n0\n0\n0\n139\n0\n0\n0\n\n\n3\n0\n0\n1\n9\n1\n1\n1\n0\n0\n18\n0\n48\n0\n\n\n4\n65\n756\n607\n0\n0\n0\n10\n0\n42\n0\n0\n1\n4\n\n\n5\n6\n6\n2\n0\n0\n12\n65\n0\n104\n0\n0\n1\n0\n\n\n6\n0\n22\n3\n0\n0\n7\n267\n0\n118\n0\n0\n0\n0\n\n\n7\n2\n7\n5\n0\n0\n21\n30\n0\n3\n0\n0\n0\n5\n\n\n8\n0\n0\n0\n627\n0\n0\n0\n2\n0\n2\n0\n52\n0\n\n\n10\n0\n0\n0\n0\n109\n0\n0\n0\n0\n3\n0\n0\n3\n\n\n11\n1073\n4\n35\n0\n0\n1\n1\n4\n1\n0\n1\n0\n2\n\n\n12\n9\n0\n0\n0\n0\n512\n44\n1\n0\n0\n1\n1\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n159\n1\n0\n102\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n19\n20\n21\n23\n24\n25\n28\n29\n30\n31\n\n\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n4\n136\n0\n1\n4\n0\n0\n0\n0\n0\n\n\n3\n49\n0\n4\n4\n0\n1\n0\n0\n0\n0\n...\n17\n1\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n76\n0\n1\n5\n6\n44\n...\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n0\n9\n10\n37\n3\n4\n105\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n11\n11\n81\n64\n120\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n1\n31\n0\n14\n1\n4\n...\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n50\n140\n378\n112\n0\n0\n0\n0\n0\n0\n...\n2\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n3\n5\n26\n59\n22\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n1081\n1\n0\n0\n0\n1\n...\n0\n0\n2\n0\n0\n0\n1\n1\n2\n1\n\n\n12\n1\n0\n0\n0\n6\n520\n11\n9\n9\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n...\n0\n0\n0\n0\n0\n0\n31\n102\n59\n69\n\n\n\n\n11 rows × 26 columns\n\n\n\n\nprint_clustering_data(tuning = 'default',dataset=\"PBMC3\")\n\n'Initial COTAN cluster number:'\n\n\n57\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n3\n\n\n'Initial scvi-tools cluster number:'\n\n\n22\n\n\n'Initial seurat cluster number:'\n\n\n17\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\n1\n3021\n0\n0\n\n\n2\n1\n1471\n0\n\n\n3\n6\n1\n655\n\n\n4\n1100\n0\n0\n\n\n5\n1183\n26\n33\n\n\n6\n0\n156\n0\n\n\n7\n1112\n1\n0\n\n\n8\n484\n0\n0\n\n\n9\n0\n0\n396\n\n\n10\n0\n408\n0\n\n\n11\n430\n0\n0\n\n\n13\n233\n0\n0\n\n\n14\n111\n0\n0\n\n\n15\n4\n16\n0\n\n\n16\n0\n11\n0\n\n\n18\n0\n57\n0\n\n\n19\n0\n12\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n\n1\n1401\n0\n153\n0\n0\n29\n26\n534\n121\n429\n...\n1\n0\n100\n0\n0\n0\n0\n0\n28\n0\n\n\n2\n0\n0\n0\n0\n816\n0\n0\n0\n0\n0\n...\n0\n2\n0\n227\n0\n5\n0\n35\n0\n0\n\n\n3\n0\n0\n0\n543\n0\n0\n0\n0\n5\n0\n...\n0\n0\n0\n0\n111\n0\n0\n2\n0\n0\n\n\n4\n26\n0\n0\n0\n0\n806\n12\n5\n29\n6\n...\n0\n0\n155\n0\n0\n0\n0\n0\n1\n0\n\n\n5\n0\n961\n0\n0\n0\n0\n3\n0\n0\n0\n...\n216\n0\n0\n29\n33\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n147\n0\n0\n0\n0\n\n\n7\n0\n0\n683\n0\n0\n0\n7\n128\n236\n15\n...\n0\n0\n6\n1\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n423\n0\n32\n0\n...\n4\n0\n6\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n395\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n90\n0\n0\n0\n0\n0\n...\n0\n311\n0\n1\n0\n1\n0\n1\n0\n0\n\n\n11\n0\n2\n0\n0\n0\n0\n281\n2\n54\n0\n...\n4\n0\n42\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n12\n0\n116\n0\n0\n0\n1\n52\n9\n11\n...\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n5\n1\n0\n0\n0\n5\n0\n3\n0\n...\n97\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n57\n0\n0\n0\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n\n\n\n\n17 rows × 22 columns\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n1\n740\n1603\n2\n1\n1\n40\n86\n23\n248\n1\n197\n79\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1460\n0\n1\n0\n0\n0\n0\n3\n0\n0\n8\n0\n0\n0\n0\n\n\n3\n0\n0\n4\n2\n655\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n6\n11\n0\n1\n1\n912\n162\n2\n1\n0\n4\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n29\n1165\n31\n0\n7\n1\n0\n0\n0\n0\n0\n8\n0\n1\n0\n\n\n6\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n146\n0\n0\n0\n0\n\n\n7\n883\n14\n1\n0\n0\n1\n25\n29\n80\n0\n70\n10\n0\n0\n0\n0\n0\n\n\n8\n24\n0\n0\n6\n0\n1\n5\n313\n0\n0\n0\n135\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n396\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n97\n0\n0\n0\n0\n0\n0\n311\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n10\n0\n0\n2\n0\n2\n408\n2\n0\n0\n1\n4\n0\n1\n0\n0\n0\n\n\n13\n174\n26\n0\n0\n0\n0\n3\n0\n25\n0\n5\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n1\n19\n0\n0\n1\n0\n0\n0\n0\n0\n0\n90\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n\n\n18\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n55\n0\n0\n\n\n19\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n1740\n415\n0\n0\n681\n20\n162\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1013\n0\n0\n0\n0\n0\n0\n0\n0\n227\n0\n229\n3\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n2\n535\n0\n2\n0\n1\n2\n0\n0\n120\n0\n0\n\n\n4\n16\n6\n0\n0\n3\n886\n188\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n5\n0\n1\n4\n1043\n0\n0\n2\n1\n1\n0\n0\n24\n136\n0\n0\n30\n0\n0\n\n\n6\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n149\n0\n0\n0\n\n\n7\n0\n980\n0\n0\n108\n0\n18\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n18\n0\n3\n0\n0\n8\n0\n454\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n57\n0\n336\n0\n0\n0\n0\n0\n3\n0\n0\n\n\n10\n0\n0\n84\n0\n0\n0\n0\n0\n0\n0\n319\n1\n0\n4\n0\n0\n0\n0\n\n\n11\n0\n14\n0\n0\n0\n2\n411\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n13\n5\n0\n0\n208\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n109\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n52\n0\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n\n1\n8\n131\n1674\n5\n9\n2\n47\n40\n87\n291\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n1\n0\n0\n0\n0\n0\n1\n1\n0\n...\n32\n25\n94\n108\n268\n104\n2\n7\n15\n0\n\n\n4\n40\n52\n10\n428\n380\n0\n0\n2\n7\n5\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n...\n0\n3\n2\n0\n0\n25\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n4\n4\n384\n571\n53\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n0\n0\n16\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n1\n0\n0\n0\n34\n1\n217\n142\n1\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n1\n3\n0\n0\n1\n0\n0\n0\n4\n11\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n2\n5\n0\n0\n137\n69\n4\n1\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n16\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n52\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n1\n1\n0\n0\n0\n0\n0\n0\n8\n0\n\n\n\n\n17 rows × 57 columns\n\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n9     2220\n10    1635\n7     1271\n13    1067\n5     1010\n12     909\n6      744\n2      271\n4      214\n14     168\n3      149\n23     133\n22      71\nName: count, dtype: int64\n\n\n'PBMC3 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\n2\n2\n264\n0\n\n\n3\n132\n12\n3\n\n\n4\n209\n2\n1\n\n\n5\n993\n11\n1\n\n\n6\n730\n0\n0\n\n\n7\n4\n1223\n0\n\n\n9\n2201\n9\n1\n\n\n10\n1614\n8\n3\n\n\n12\n902\n2\n1\n\n\n13\n2\n41\n1002\n\n\n14\n140\n20\n1\n\n\n22\n69\n0\n0\n\n\n23\n130\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n20\n21\n\n\n\n\n2\n0\n1\n0\n0\n17\n0\n0\n0\n0\n0\n0\n0\n1\n223\n0\n24\n0\n0\n0\n0\n\n\n3\n0\n14\n2\n0\n0\n1\n5\n0\n3\n0\n0\n1\n106\n12\n0\n0\n3\n0\n0\n0\n\n\n4\n4\n0\n5\n0\n0\n50\n25\n10\n28\n15\n0\n13\n1\n0\n57\n0\n1\n2\n0\n1\n\n\n5\n0\n911\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n80\n10\n0\n1\n1\n0\n0\n0\n\n\n6\n1\n0\n8\n0\n0\n9\n422\n11\n75\n1\n0\n48\n3\n0\n151\n1\n0\n0\n0\n0\n\n\n7\n0\n0\n1\n0\n735\n0\n0\n1\n0\n0\n275\n0\n0\n20\n0\n167\n0\n28\n0\n0\n\n\n9\n92\n0\n808\n1\n0\n1\n26\n593\n323\n196\n0\n136\n0\n3\n19\n1\n0\n5\n0\n7\n\n\n10\n1252\n2\n4\n0\n0\n15\n3\n18\n4\n205\n0\n82\n3\n1\n5\n3\n4\n4\n0\n20\n\n\n12\n25\n1\n0\n0\n1\n737\n32\n0\n8\n2\n0\n52\n5\n0\n40\n1\n1\n0\n0\n0\n\n\n13\n0\n0\n0\n873\n1\n0\n1\n0\n1\n0\n1\n1\n0\n6\n0\n1\n128\n2\n30\n0\n\n\n14\n0\n17\n0\n0\n0\n0\n3\n0\n2\n1\n0\n0\n116\n20\n0\n1\n1\n0\n0\n0\n\n\n22\n10\n0\n9\n0\n0\n0\n1\n18\n6\n19\n0\n4\n0\n0\n1\n0\n0\n0\n0\n1\n\n\n23\n0\n0\n90\n0\n0\n0\n0\n18\n1\n2\n0\n19\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n\n2\n0\n0\n41\n2\n0\n0\n0\n0\n0\n223\n0\n0\n0\n0\n\n\n3\n3\n0\n1\n48\n2\n0\n6\n1\n0\n12\n0\n0\n0\n74\n\n\n4\n18\n8\n1\n0\n2\n76\n80\n18\n0\n0\n7\n0\n2\n0\n\n\n5\n0\n0\n1\n979\n1\n0\n0\n0\n0\n10\n0\n0\n0\n14\n\n\n6\n14\n1\n1\n1\n0\n23\n457\n221\n0\n0\n6\n3\n0\n3\n\n\n7\n2\n0\n1181\n0\n0\n0\n0\n0\n0\n18\n0\n0\n26\n0\n\n\n9\n1524\n275\n1\n0\n2\n1\n26\n47\n171\n3\n134\n22\n5\n0\n\n\n10\n52\n1281\n1\n6\n4\n13\n4\n2\n149\n2\n101\n4\n6\n0\n\n\n12\n0\n5\n2\n4\n1\n816\n64\n5\n2\n0\n1\n5\n0\n0\n\n\n13\n0\n0\n31\n1\n994\n0\n1\n1\n8\n7\n0\n0\n2\n0\n\n\n14\n0\n0\n1\n129\n1\n0\n0\n3\n0\n20\n0\n0\n0\n7\n\n\n22\n39\n14\n0\n0\n0\n0\n0\n4\n4\n0\n6\n2\n0\n0\n\n\n23\n111\n2\n0\n0\n0\n0\n0\n0\n13\n0\n4\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n\n2\n0\n0\n18\n1\n0\n0\n0\n0\n0\n0\n226\n20\n1\n0\n0\n0\n\n\n3\n0\n3\n0\n25\n0\n1\n1\n0\n2\n0\n12\n0\n101\n0\n0\n2\n\n\n4\n11\n28\n0\n0\n12\n48\n97\n0\n12\n0\n0\n0\n1\n0\n2\n1\n\n\n5\n0\n0\n0\n979\n0\n0\n0\n0\n0\n0\n10\n1\n14\n0\n0\n1\n\n\n6\n1\n22\n0\n0\n6\n16\n461\n0\n221\n0\n0\n1\n2\n0\n0\n0\n\n\n7\n0\n2\n873\n0\n0\n0\n0\n0\n0\n0\n22\n139\n0\n164\n27\n0\n\n\n9\n129\n1302\n0\n0\n716\n0\n31\n1\n23\n0\n3\n1\n0\n0\n5\n0\n\n\n10\n1543\n8\n1\n2\n46\n3\n6\n0\n2\n0\n0\n3\n3\n0\n4\n4\n\n\n12\n6\n0\n1\n0\n3\n816\n69\n0\n4\n0\n0\n1\n4\n0\n0\n1\n\n\n13\n0\n0\n1\n1\n0\n0\n0\n549\n1\n327\n7\n30\n0\n1\n2\n126\n\n\n14\n0\n1\n0\n14\n1\n0\n0\n0\n2\n0\n20\n1\n121\n0\n0\n1\n\n\n22\n12\n19\n0\n0\n34\n0\n3\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n23\n0\n4\n0\n0\n126\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n1\n0\n0\n0\n1\n3\n...\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n4\n1\n5\n14\n46\n8\n1\n4\n10\n16\n11\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n6\n2\n5\n2\n7\n2\n1\n0\n14\n9\n6\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n...\n255\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n25\n135\n0\n0\n28\n69\n384\n639\n293\n...\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n10\n2\n89\n1461\n2\n1\n0\n19\n6\n2\n1\n...\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n\n\n12\n33\n47\n1\n373\n368\n0\n0\n0\n1\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n13\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n...\n0\n36\n26\n90\n98\n276\n104\n212\n144\n14\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n22\n0\n0\n18\n0\n0\n1\n3\n5\n6\n3\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n23\n0\n0\n0\n0\n0\n108\n14\n4\n0\n3\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n13 rows × 54 columns\n\n\n\n\nprint_clustering_data(tuning = 'default',dataset=\"PBMC4\")\n\n'Initial COTAN cluster number:'\n\n\n34\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n3\n\n\n'Initial scvi-tools cluster number:'\n\n\n22\n\n\n'Initial seurat cluster number:'\n\n\n16\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\n1\n407\n0\n0\n\n\n2\n11\n0\n797\n\n\n3\n1330\n1\n0\n\n\n4\n108\n0\n0\n\n\n5\n9\n2178\n13\n\n\n6\n308\n0\n0\n\n\n7\n77\n0\n0\n\n\n8\n538\n0\n0\n\n\n9\n358\n1\n0\n\n\n10\n0\n307\n0\n\n\n11\n1\n1\n222\n\n\n12\n0\n28\n0\n\n\n13\n8\n3\n2\n\n\n14\n106\n0\n0\n\n\n15\n0\n92\n1\n\n\n16\n0\n59\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n\n1\n10\n0\n0\n0\n0\n0\n0\n384\n1\n0\n...\n0\n6\n0\n0\n0\n1\n5\n0\n0\n0\n\n\n2\n0\n673\n0\n0\n0\n0\n0\n0\n1\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n34\n\n\n3\n300\n0\n0\n0\n496\n385\n0\n1\n0\n0\n...\n136\n10\n3\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n6\n10\n0\n...\n0\n7\n0\n0\n0\n0\n85\n0\n0\n0\n\n\n5\n1\n0\n596\n456\n0\n0\n427\n0\n0\n281\n...\n0\n0\n0\n169\n76\n145\n0\n48\n0\n0\n\n\n6\n7\n0\n0\n0\n4\n3\n0\n0\n0\n0\n...\n8\n99\n187\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n3\n0\n0\n0\n0\n0\n0\n1\n0\n0\n...\n0\n67\n0\n0\n0\n0\n6\n0\n0\n0\n\n\n8\n462\n0\n0\n0\n8\n46\n0\n1\n0\n0\n...\n19\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n5\n348\n0\n...\n1\n0\n0\n0\n0\n0\n5\n0\n0\n0\n\n\n10\n0\n0\n0\n74\n0\n0\n1\n0\n0\n2\n...\n0\n0\n0\n10\n2\n1\n0\n1\n0\n0\n\n\n11\n0\n46\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n1\n0\n0\n0\n0\n5\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n28\n0\n0\n\n\n13\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n42\n0\n0\n0\n1\n13\n0\n1\n0\n0\n...\n47\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n...\n0\n0\n0\n2\n88\n2\n0\n0\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n59\n0\n\n\n\n\n16 rows × 22 columns\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n\n1\n0\n0\n4\n1\n0\n0\n1\n0\n315\n0\n0\n0\n86\n0\n0\n0\n\n\n2\n800\n0\n2\n1\n0\n0\n2\n0\n1\n0\n1\n0\n1\n0\n0\n0\n\n\n3\n0\n939\n357\n2\n0\n0\n20\n0\n1\n0\n0\n0\n0\n0\n0\n12\n\n\n4\n0\n0\n0\n0\n0\n0\n105\n2\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n5\n4\n0\n1\n805\n746\n413\n0\n4\n2\n1\n167\n15\n1\n41\n0\n0\n\n\n6\n0\n8\n8\n0\n0\n0\n291\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n3\n0\n0\n0\n67\n1\n6\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n31\n483\n0\n0\n0\n3\n0\n6\n0\n0\n0\n0\n0\n0\n15\n\n\n9\n0\n0\n1\n2\n0\n0\n0\n355\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n10\n0\n0\n0\n14\n0\n94\n1\n0\n0\n194\n4\n0\n0\n0\n0\n0\n\n\n11\n217\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n0\n0\n\n\n13\n0\n1\n1\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n5\n0\n\n\n14\n1\n9\n89\n0\n0\n0\n4\n0\n1\n0\n0\n0\n0\n0\n0\n2\n\n\n15\n0\n0\n0\n2\n0\n3\n0\n0\n0\n0\n1\n87\n0\n0\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n58\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n1\n5\n0\n0\n0\n0\n0\n398\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n632\n0\n1\n0\n122\n1\n0\n0\n0\n0\n0\n0\n0\n52\n0\n\n\n3\n356\n854\n0\n0\n0\n0\n0\n0\n0\n2\n116\n0\n3\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n1\n0\n107\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n780\n723\n0\n447\n2\n0\n2\n0\n1\n1\n0\n136\n28\n35\n0\n0\n43\n\n\n6\n31\n15\n0\n0\n0\n0\n0\n0\n0\n68\n5\n0\n189\n0\n0\n0\n0\n0\n0\n\n\n7\n3\n0\n0\n0\n0\n0\n3\n0\n0\n69\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n525\n0\n0\n0\n0\n0\n1\n0\n0\n2\n10\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n3\n354\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n7\n0\n86\n0\n0\n0\n0\n0\n213\n0\n1\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n1\n0\n0\n0\n223\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n0\n0\n0\n\n\n13\n10\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n\n\n14\n4\n0\n0\n0\n0\n0\n0\n0\n0\n1\n101\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n90\n0\n0\n0\n1\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n0\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n3\n1\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n1\n0\n0\n0\n41\n4\n958\n5\n321\n1\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n\n\n5\n40\n131\n59\n247\n199\n293\n724\n448\n1\n27\n...\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n4\n0\n7\n202\n26\n69\n\n\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n2\n0\n0\n0\n2\n66\n\n\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n7\n0\n528\n2\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n55\n36\n118\n147\n0\n1\n0\n0\n1\n0\n\n\n10\n0\n1\n65\n18\n0\n2\n6\n0\n215\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n...\n8\n0\n0\n0\n0\n0\n1\n0\n1\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n30\n63\n1\n0\n11\n1\n\n\n15\n1\n0\n0\n1\n0\n0\n1\n0\n0\n90\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n16 rows × 34 columns\n\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n3     2280\n1     1367\n10    1018\n9      488\n2      351\n14     348\n4      242\n5      224\n24     194\n26      64\n22      43\n12      41\nName: count, dtype: int64\n\n\n'PBMC4 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\n1\n1341\n4\n0\n\n\n2\n334\n3\n0\n\n\n3\n8\n2153\n0\n\n\n4\n241\n0\n0\n\n\n5\n16\n195\n0\n\n\n9\n473\n1\n0\n\n\n10\n12\n39\n931\n\n\n12\n38\n0\n0\n\n\n14\n343\n1\n0\n\n\n22\n42\n0\n0\n\n\n24\n192\n0\n0\n\n\n26\n63\n0\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n12\n13\n14\n15\n16\n17\n18\n19\n20\n22\n\n\n\n\n1\n744\n0\n0\n0\n195\n247\n0\n7\n1\n0\n...\n0\n139\n6\n0\n0\n3\n1\n2\n0\n0\n\n\n2\n10\n0\n0\n0\n0\n0\n0\n4\n317\n0\n...\n0\n0\n0\n0\n0\n3\n0\n3\n0\n0\n\n\n3\n1\n0\n573\n514\n1\n0\n405\n0\n0\n273\n...\n29\n2\n0\n0\n178\n26\n118\n0\n41\n0\n\n\n4\n3\n0\n0\n0\n3\n2\n0\n1\n2\n0\n...\n0\n8\n30\n174\n0\n0\n0\n18\n0\n0\n\n\n5\n0\n0\n1\n0\n0\n0\n1\n0\n14\n0\n...\n178\n0\n0\n0\n0\n3\n11\n2\n1\n0\n\n\n9\n10\n0\n0\n0\n1\n3\n0\n283\n0\n0\n...\n0\n2\n130\n8\n0\n1\n0\n36\n0\n0\n\n\n10\n1\n657\n1\n0\n0\n0\n1\n0\n5\n1\n...\n1\n0\n0\n0\n0\n40\n0\n0\n3\n37\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n2\n3\n0\n...\n0\n0\n2\n0\n0\n0\n0\n31\n0\n0\n\n\n14\n10\n0\n0\n0\n205\n105\n0\n0\n0\n0\n...\n0\n23\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n22\n6\n0\n0\n0\n2\n2\n0\n2\n0\n0\n...\n0\n0\n24\n6\n0\n0\n0\n0\n0\n0\n\n\n24\n9\n0\n0\n0\n97\n75\n0\n0\n1\n0\n...\n0\n9\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n26\n27\n0\n0\n0\n1\n12\n0\n1\n0\n0\n...\n0\n22\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n12 rows × 21 columns\n\n\n\n'PBMC4 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n14\n16\n\n\n\n\n1\n0\n454\n839\n0\n1\n1\n8\n1\n12\n0\n0\n2\n0\n27\n\n\n2\n0\n1\n4\n1\n0\n0\n0\n328\n0\n0\n0\n3\n0\n0\n\n\n3\n0\n2\n0\n719\n730\n476\n1\n0\n2\n15\n168\n14\n34\n0\n\n\n4\n0\n4\n2\n0\n0\n0\n230\n3\n2\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n10\n1\n7\n0\n19\n0\n170\n0\n3\n1\n0\n\n\n9\n0\n2\n8\n0\n0\n0\n175\n0\n288\n0\n0\n1\n0\n0\n\n\n10\n921\n0\n3\n36\n4\n1\n0\n5\n0\n2\n8\n0\n2\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n38\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n324\n17\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n2\n\n\n22\n0\n3\n4\n0\n0\n0\n27\n0\n8\n0\n0\n0\n0\n0\n\n\n24\n0\n185\n4\n0\n0\n0\n2\n1\n0\n0\n0\n0\n0\n0\n\n\n26\n1\n4\n58\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n18\n19\n\n\n\n\n1\n852\n323\n0\n0\n0\n0\n9\n1\n0\n5\n151\n0\n0\n1\n3\n0\n0\n0\n\n\n2\n9\n0\n0\n0\n0\n0\n2\n323\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n\n\n3\n4\n1\n750\n693\n0\n519\n1\n0\n0\n0\n1\n25\n0\n112\n26\n29\n0\n0\n\n\n4\n1\n11\n0\n0\n0\n0\n1\n2\n0\n46\n2\n0\n178\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n1\n2\n0\n2\n1\n15\n0\n0\n0\n177\n0\n9\n3\n1\n0\n0\n\n\n9\n28\n5\n0\n0\n0\n0\n285\n0\n0\n140\n9\n0\n6\n0\n1\n0\n0\n0\n\n\n10\n1\n0\n3\n3\n598\n0\n0\n4\n304\n0\n0\n1\n0\n0\n0\n2\n29\n37\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n1\n0\n36\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n10\n326\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n1\n0\n1\n0\n0\n0\n\n\n22\n12\n11\n0\n0\n0\n0\n4\n0\n0\n9\n0\n0\n6\n0\n0\n0\n0\n0\n\n\n24\n3\n186\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n\n\n26\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n60\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n3\n...\n0\n0\n1\n0\n60\n15\n431\n0\n819\n4\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n...\n56\n29\n102\n142\n0\n0\n0\n0\n4\n0\n\n\n3\n0\n109\n119\n254\n195\n292\n687\n427\n26\n25\n...\n0\n0\n0\n0\n0\n0\n2\n0\n2\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n1\n0\n1\n0\n1\n0\n4\n187\n2\n26\n\n\n5\n0\n9\n0\n0\n0\n1\n2\n1\n178\n3\n...\n0\n4\n10\n1\n0\n0\n0\n0\n1\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n...\n0\n0\n0\n0\n5\n1\n3\n9\n27\n102\n\n\n10\n33\n1\n1\n1\n1\n0\n4\n2\n1\n0\n...\n1\n1\n1\n2\n0\n0\n1\n0\n1\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n...\n0\n0\n0\n0\n0\n1\n332\n1\n9\n0\n\n\n22\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n8\n9\n11\n8\n\n\n24\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n1\n0\n0\n0\n186\n1\n4\n0\n\n\n26\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n6\n51\n1\n0\n5\n0\n\n\n\n\n12 rows × 31 columns\n\n\n\n\n\nAgainst cellTypist cluster number\n\nprint_clustering_data(tuning = 'celltypist',dataset=\"PBMC1\")\n\n'Initial COTAN cluster number:'\n\n\n18\n\n\n'Initial monocle cluster number:'\n\n\n18\n\n\n'Initial scanpy cluster number:'\n\n\n18\n\n\n'Initial scvi-tools cluster number:'\n\n\n17\n\n\n'Initial seurat cluster number:'\n\n\n20\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n0\n1\n3\n1\n273\n0\n0\n0\n237\n227\n147\n0\n6\n6\n0\n77\n1\n0\n\n\n2\n66\n0\n0\n0\n0\n230\n228\n218\n0\n0\n0\n145\n25\n0\n31\n0\n0\n0\n\n\n3\n3\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n36\n0\n6\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n73\n0\n\n\n5\n200\n0\n0\n7\n0\n1\n0\n0\n0\n0\n0\n1\n65\n0\n35\n0\n0\n0\n\n\n6\n0\n142\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n36\n0\n0\n40\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n\n\n8\n0\n1\n267\n10\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n9\n2\n0\n0\n0\n0\n22\n15\n20\n0\n0\n0\n21\n0\n0\n1\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n1\n0\n0\n0\n0\n2\n37\n0\n0\n131\n0\n0\n0\n0\n\n\n11\n0\n0\n21\n49\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n27\n0\n0\n179\n0\n3\n2\n1\n0\n0\n0\n4\n14\n0\n10\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n\n\n14\n0\n155\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n1\n0\n0\n369\n243\n292\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n74\n0\n\n\n2\n474\n89\n0\n0\n0\n258\n0\n2\n0\n0\n0\n111\n0\n8\n0\n1\n0\n\n\n3\n0\n45\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n76\n0\n0\n\n\n5\n2\n260\n0\n0\n0\n2\n0\n42\n0\n0\n0\n3\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n138\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n8\n0\n0\n0\n0\n0\n55\n19\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n263\n0\n16\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n5\n2\n0\n0\n0\n5\n0\n1\n0\n0\n0\n2\n0\n66\n0\n0\n0\n\n\n10\n0\n0\n0\n78\n2\n0\n0\n0\n0\n0\n0\n0\n91\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n5\n0\n65\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n11\n0\n0\n0\n6\n0\n143\n78\n0\n0\n0\n0\n2\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n154\n1\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n\n1\n1\n353\n261\n1\n2\n0\n1\n183\n0\n4\n0\n152\n0\n1\n19\n1\n0\n0\n0\n0\n\n\n2\n43\n0\n0\n278\n0\n227\n187\n0\n180\n0\n0\n0\n0\n0\n0\n0\n9\n16\n0\n3\n\n\n3\n4\n0\n0\n9\n1\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n31\n0\n0\n\n\n4\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n73\n0\n0\n0\n0\n0\n\n\n5\n279\n0\n0\n11\n4\n9\n2\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n142\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n55\n0\n0\n0\n26\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n1\n0\n0\n0\n0\n152\n1\n0\n0\n125\n0\n0\n0\n0\n0\n0\n\n\n9\n1\n0\n0\n1\n1\n3\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n72\n0\n0\n2\n\n\n10\n0\n0\n86\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n81\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n65\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n45\n0\n0\n1\n173\n1\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n17\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n145\n0\n0\n0\n0\n0\n0\n1\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n\n1\n0\n0\n351\n267\n0\n229\n0\n0\n0\n0\n...\n0\n3\n0\n1\n88\n0\n0\n40\n0\n0\n\n\n2\n423\n119\n0\n0\n238\n0\n154\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n7\n0\n1\n0\n\n\n3\n1\n15\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n31\n0\n\n\n4\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n74\n0\n0\n0\n0\n\n\n5\n0\n258\n0\n0\n0\n0\n1\n0\n1\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n142\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n4\n0\n0\n0\n0\n0\n0\n13\n0\n...\n0\n0\n12\n1\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n0\n151\n0\n0\n...\n0\n0\n5\n123\n0\n0\n0\n0\n0\n0\n\n\n9\n10\n2\n0\n0\n11\n0\n11\n0\n1\n0\n...\n0\n0\n0\n0\n0\n0\n46\n0\n0\n0\n\n\n10\n0\n0\n0\n38\n0\n0\n0\n0\n0\n0\n...\n0\n130\n0\n0\n3\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n...\n0\n0\n66\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n1\n3\n0\n0\n4\n0\n0\n0\n138\n0\n...\n0\n0\n44\n0\n0\n0\n2\n0\n1\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n1\n0\n0\n0\n27\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n153\n...\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n14 rows × 21 columns\n\n\n\n'PBMC1 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n35\n0\n0\n272\n464\n207\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n800\n31\n24\n85\n3\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n22\n10\n7\n0\n0\n0\n6\n\n\n4\n0\n73\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n9\n293\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n142\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n56\n0\n25\n1\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n1\n5\n4\n115\n104\n47\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n77\n0\n0\n0\n1\n0\n0\n0\n\n\n10\n0\n1\n122\n0\n5\n42\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n67\n0\n2\n1\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n4\n5\n51\n0\n175\n0\n0\n1\n\n\n13\n0\n1\n0\n0\n0\n0\n27\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n152\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nprint_clustering_data(tuning = 'celltypist',dataset=\"PBMC2\")\n\n'Initial COTAN cluster number:'\n\n\n17\n\n\n'Initial monocle cluster number:'\n\n\n17\n\n\n'Initial scanpy cluster number:'\n\n\n18\n\n\n'Initial scvi-tools cluster number:'\n\n\n20\n\n\n'Initial seurat cluster number:'\n\n\n19\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n1\n0\n0\n1\n0\n5\n0\n55\n0\n0\n12\n38\n6\n90\n1\n0\n0\n22\n\n\n2\n0\n0\n0\n0\n0\n279\n0\n6\n22\n0\n53\n22\n24\n1\n19\n0\n0\n1\n\n\n3\n0\n1\n332\n1\n407\n130\n338\n27\n297\n36\n202\n95\n99\n38\n132\n0\n0\n7\n\n\n4\n577\n1\n0\n6\n0\n0\n0\n2\n0\n0\n0\n2\n2\n42\n0\n0\n0\n75\n\n\n5\n1\n0\n0\n0\n0\n15\n0\n258\n0\n0\n9\n9\n2\n13\n0\n0\n0\n9\n\n\n6\n0\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n77\n0\n\n\n7\n0\n558\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n142\n0\n32\n4\n69\n4\n11\n292\n24\n59\n4\n2\n31\n0\n0\n0\n\n\n9\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n173\n0\n0\n\n\n10\n43\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n5\n0\n0\n0\n3\n\n\n11\n0\n0\n0\n228\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n204\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14\n0\n\n\n15\n0\n0\n0\n0\n0\n4\n0\n1\n3\n0\n0\n0\n66\n3\n3\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n\n1\n0\n0\n0\n0\n0\n1\n0\n2\n1\n0\n15\n2\n57\n5\n0\n148\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n131\n200\n35\n2\n2\n0\n1\n55\n0\n1\n0\n0\n0\n0\n\n\n3\n21\n575\n490\n0\n0\n0\n230\n107\n248\n286\n10\n2\n48\n98\n0\n26\n0\n0\n0\n1\n\n\n4\n0\n0\n0\n0\n471\n8\n0\n1\n0\n0\n2\n222\n0\n0\n0\n2\n1\n0\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n253\n0\n3\n52\n0\n6\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n88\n0\n0\n\n\n7\n0\n0\n0\n464\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n88\n0\n0\n0\n\n\n8\n558\n2\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n112\n1\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n174\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n50\n0\n2\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n228\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n204\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n\n\n14\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n\n\n15\n0\n0\n0\n0\n0\n0\n10\n44\n17\n1\n1\n1\n2\n3\n0\n1\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n0\n0\n0\n0\n1\n0\n217\n0\n0\n0\n7\n0\n3\n0\n3\n0\n0\n0\n\n\n2\n348\n2\n0\n0\n0\n4\n7\n0\n2\n3\n60\n0\n1\n0\n0\n0\n0\n0\n\n\n3\n469\n4\n1\n15\n1\n412\n69\n356\n324\n322\n165\n0\n4\n0\n0\n0\n0\n0\n\n\n4\n1\n667\n1\n0\n8\n0\n6\n0\n0\n0\n0\n0\n0\n0\n1\n23\n0\n0\n\n\n5\n10\n2\n0\n0\n0\n0\n7\n0\n1\n0\n65\n0\n159\n0\n72\n0\n0\n0\n\n\n6\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n80\n0\n0\n4\n0\n\n\n7\n0\n0\n556\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n\n\n8\n1\n0\n1\n561\n0\n2\n99\n1\n2\n2\n5\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n173\n0\n0\n0\n0\n0\n0\n\n\n10\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n47\n0\n0\n\n\n11\n0\n0\n0\n0\n228\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n204\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14\n\n\n15\n61\n0\n0\n0\n0\n3\n2\n1\n1\n3\n9\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n\n1\n2\n0\n0\n0\n0\n0\n0\n0\n7\n1\n0\n1\n41\n178\n0\n0\n1\n0\n0\n0\n\n\n2\n389\n0\n0\n0\n0\n0\n0\n1\n10\n3\n0\n23\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n259\n0\n578\n568\n15\n0\n1\n290\n188\n0\n2\n169\n62\n8\n0\n0\n2\n0\n0\n0\n\n\n4\n0\n635\n0\n0\n0\n0\n7\n0\n2\n0\n0\n0\n0\n3\n0\n1\n59\n0\n0\n0\n\n\n5\n8\n0\n0\n0\n0\n0\n0\n0\n1\n268\n0\n32\n1\n6\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n82\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n305\n0\n0\n0\n0\n253\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n1\n0\n8\n0\n541\n0\n0\n0\n1\n0\n0\n3\n119\n1\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n6\n0\n0\n0\n172\n0\n0\n0\n0\n0\n\n\n10\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n50\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n83\n0\n0\n0\n0\n0\n0\n0\n0\n145\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n201\n0\n0\n1\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14\n\n\n15\n1\n0\n0\n0\n0\n0\n0\n0\n76\n0\n0\n0\n0\n2\n0\n0\n1\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC2 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n1\n0\n0\n0\n3\n4\n220\n3\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n416\n9\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n2\n1186\n847\n31\n72\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n4\n639\n56\n0\n0\n2\n3\n0\n0\n0\n0\n0\n0\n0\n0\n1\n5\n1\n\n\n5\n0\n0\n0\n39\n0\n7\n270\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n86\n0\n7\n0\n0\n0\n0\n0\n\n\n7\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n81\n300\n174\n0\n0\n2\n0\n\n\n8\n0\n0\n568\n9\n1\n96\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n154\n24\n0\n0\n8\n0\n0\n0\n0\n0\n\n\n10\n1\n51\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n145\n69\n14\n\n\n12\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n22\n180\n\n\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48\n0\n0\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n1\n\n\n15\n0\n1\n0\n6\n72\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nprint_clustering_data(tuning = 'celltypist',dataset=\"PBMC3\")\n\n'Initial COTAN cluster number:'\n\n\n23\n\n\n'Initial monocle cluster number:'\n\n\n23\n\n\n'Initial scanpy cluster number:'\n\n\n17\n\n\n'Initial scvi-tools cluster number:'\n\n\n18\n\n\n'Initial seurat cluster number:'\n\n\n20\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n1\n860\n0\n0\n0\n38\n559\n313\n338\n231\n324\n158\n0\n195\n0\n0\n5\n0\n\n\n2\n0\n1041\n0\n0\n0\n0\n1\n0\n0\n0\n0\n390\n0\n2\n7\n0\n31\n\n\n3\n0\n0\n0\n654\n0\n0\n2\n2\n1\n0\n0\n0\n1\n0\n0\n0\n2\n\n\n4\n400\n0\n0\n0\n12\n309\n29\n47\n12\n157\n78\n0\n56\n0\n0\n0\n0\n\n\n5\n0\n22\n1036\n33\n22\n0\n0\n0\n0\n0\n3\n2\n1\n0\n2\n121\n0\n\n\n6\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n144\n0\n0\n\n\n7\n0\n0\n0\n0\n134\n1\n247\n305\n248\n0\n135\n1\n42\n0\n0\n0\n0\n\n\n8\n0\n0\n3\n0\n435\n0\n3\n7\n0\n0\n12\n0\n20\n0\n0\n4\n0\n\n\n9\n0\n0\n0\n396\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n0\n73\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n328\n2\n0\n1\n\n\n11\n0\n0\n8\n0\n277\n2\n21\n26\n1\n0\n47\n0\n46\n0\n0\n2\n0\n\n\n13\n11\n0\n0\n0\n0\n8\n157\n9\n19\n1\n7\n0\n21\n0\n0\n0\n0\n\n\n14\n0\n0\n79\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n19\n0\n\n\n15\n1\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n16\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n57\n0\n0\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n1670\n0\n0\n212\n0\n32\n234\n621\n23\n228\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n2\n0\n1228\n0\n0\n0\n0\n0\n0\n0\n0\n2\n202\n0\n0\n5\n0\n35\n0\n\n\n3\n0\n0\n0\n0\n543\n0\n5\n0\n0\n1\n0\n0\n0\n111\n0\n0\n2\n0\n\n\n4\n29\n0\n0\n0\n0\n811\n192\n5\n4\n59\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n1028\n0\n0\n0\n0\n0\n7\n0\n0\n29\n145\n33\n0\n0\n0\n0\n\n\n6\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n149\n0\n0\n0\n\n\n7\n1\n0\n0\n702\n0\n0\n230\n99\n7\n73\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n3\n0\n0\n0\n47\n0\n433\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n395\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n10\n0\n94\n0\n0\n0\n0\n0\n0\n0\n0\n311\n1\n0\n0\n1\n0\n1\n0\n\n\n11\n0\n0\n2\n0\n0\n0\n116\n0\n290\n21\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n13\n16\n0\n0\n44\n0\n0\n10\n55\n1\n107\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n11\n0\n0\n0\n4\n0\n5\n1\n0\n0\n90\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n57\n0\n0\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n1\n2\n657\n1415\n2\n2\n43\n614\n91\n5\n0\n64\n0\n14\n49\n0\n0\n32\n31\n0\n\n\n2\n1463\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n8\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n4\n0\n1\n0\n654\n0\n2\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n6\n13\n1\n0\n856\n4\n168\n0\n0\n0\n0\n0\n52\n0\n0\n0\n0\n0\n\n\n5\n29\n0\n0\n1172\n32\n0\n0\n2\n0\n0\n1\n0\n0\n0\n5\n0\n0\n0\n1\n\n\n6\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n147\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n1\n827\n5\n0\n0\n1\n187\n35\n22\n0\n0\n0\n24\n8\n0\n0\n1\n2\n0\n\n\n8\n0\n30\n0\n2\n0\n1\n3\n12\n305\n0\n131\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n396\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n83\n0\n0\n0\n0\n0\n0\n0\n0\n324\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n15\n0\n2\n1\n3\n1\n399\n3\n0\n5\n0\n0\n0\n1\n0\n0\n0\n0\n\n\n13\n0\n49\n21\n0\n0\n0\n22\n6\n0\n0\n0\n0\n131\n2\n0\n0\n2\n0\n0\n\n\n14\n0\n0\n0\n31\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n80\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n52\n0\n0\n0\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n1744\n412\n0\n0\n681\n20\n161\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1011\n0\n0\n0\n0\n0\n0\n0\n0\n227\n0\n231\n3\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n2\n535\n0\n2\n0\n1\n2\n0\n0\n120\n0\n0\n\n\n4\n16\n6\n0\n0\n3\n886\n188\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n5\n0\n1\n4\n1043\n0\n0\n2\n1\n1\n0\n0\n24\n136\n0\n0\n30\n0\n0\n\n\n6\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n149\n0\n0\n0\n\n\n7\n0\n995\n0\n0\n93\n0\n18\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n18\n0\n3\n0\n0\n8\n0\n454\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n57\n0\n336\n0\n0\n0\n0\n0\n3\n0\n0\n\n\n10\n0\n0\n89\n0\n0\n0\n0\n0\n0\n0\n314\n1\n0\n4\n0\n0\n0\n0\n\n\n11\n0\n14\n0\n0\n0\n2\n411\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n13\n8\n0\n0\n205\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n109\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n52\n0\n\n\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n\n\n\n\n\n\n\n'PBMC3 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n\n1\n1822\n80\n633\n127\n291\n53\n12\n0\n0\n3\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1\n0\n0\n0\n0\n1\n1\n0\n...\n68\n517\n404\n324\n0\n0\n0\n1\n0\n0\n\n\n3\n1\n0\n2\n2\n0\n2\n0\n0\n0\n0\n...\n0\n0\n0\n0\n9\n136\n387\n108\n15\n0\n\n\n4\n482\n430\n156\n9\n5\n17\n1\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n1\n0\n138\n2\n28\n281\n755\n...\n0\n1\n0\n0\n0\n25\n5\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n5\n1\n4\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n87\n955\n53\n11\n7\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n1\n16\n1\n8\n454\n0\n3\n1\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n359\n2\n34\n0\n1\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n82\n31\n91\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n5\n1\n86\n4\n11\n29\n255\n0\n24\n15\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\n7\n0\n210\n5\n1\n10\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n0\n0\n1\n0\n10\n0\n0\n100\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n3\n0\n0\n1\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n16\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n52\n\n\n19\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n...\n0\n0\n0\n0\n0\n1\n1\n0\n8\n0\n\n\n\n\n17 rows × 23 columns\n\n\n\n\nprint_clustering_data(tuning = 'celltypist',dataset=\"PBMC4\")\n\n'Initial COTAN cluster number:'\n\n\n15\n\n\n'Initial monocle cluster number:'\n\n\n21\n\n\n'Initial scanpy cluster number:'\n\n\n16\n\n\n'Initial scvi-tools cluster number:'\n\n\n18\n\n\n'Initial seurat cluster number:'\n\n\n18\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n\n1\n0\n0\n9\n0\n0\n0\n0\n12\n0\n381\n1\n0\n0\n0\n0\n0\n\n\n2\n755\n2\n1\n0\n0\n0\n0\n2\n0\n3\n3\n0\n0\n0\n0\n41\n\n\n3\n0\n705\n149\n0\n0\n0\n379\n0\n3\n0\n92\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n1\n0\n0\n0\n0\n97\n0\n8\n1\n0\n0\n0\n0\n0\n\n\n5\n5\n2\n2\n647\n637\n405\n0\n1\n419\n3\n2\n3\n34\n0\n29\n0\n\n\n6\n0\n196\n83\n0\n0\n0\n19\n1\n0\n0\n9\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n51\n0\n0\n0\n0\n9\n0\n15\n2\n0\n0\n0\n0\n0\n\n\n8\n0\n2\n417\n0\n0\n0\n77\n0\n0\n5\n37\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n351\n1\n3\n4\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n2\n3\n76\n0\n0\n5\n0\n0\n219\n2\n0\n0\n0\n\n\n11\n220\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n2\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n0\n\n\n13\n1\n2\n2\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n4\n0\n0\n\n\n14\n0\n4\n4\n0\n0\n0\n1\n0\n0\n0\n97\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n11\n5\n0\n0\n0\n1\n0\n0\n1\n72\n3\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n0\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n0\n10\n0\n0\n0\n0\n381\n5\n1\n0\n0\n0\n0\n1\n5\n0\n0\n0\n\n\n2\n0\n0\n0\n672\n0\n0\n0\n0\n1\n134\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n346\n0\n0\n508\n386\n1\n10\n0\n0\n0\n0\n0\n0\n0\n77\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n6\n7\n10\n0\n0\n0\n0\n0\n84\n0\n0\n0\n\n\n5\n924\n1\n818\n0\n0\n0\n0\n0\n0\n0\n1\n181\n77\n140\n0\n0\n47\n0\n\n\n6\n0\n7\n0\n0\n5\n2\n0\n286\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n\n\n7\n0\n3\n0\n0\n0\n0\n1\n67\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n\n\n8\n0\n483\n0\n0\n8\n43\n1\n2\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n9\n0\n1\n0\n0\n0\n0\n5\n0\n348\n0\n0\n0\n0\n0\n5\n0\n0\n0\n\n\n10\n74\n0\n2\n0\n0\n0\n0\n0\n0\n0\n216\n10\n2\n2\n0\n0\n1\n0\n\n\n11\n0\n0\n0\n46\n0\n0\n0\n0\n0\n177\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n0\n\n\n13\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n0\n68\n0\n0\n1\n22\n1\n2\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n\n\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n89\n2\n0\n0\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n\n1\n3\n0\n0\n0\n0\n0\n0\n0\n311\n0\n0\n1\n0\n0\n86\n2\n0\n0\n\n\n2\n1\n1\n0\n0\n686\n0\n1\n1\n10\n0\n104\n2\n0\n0\n0\n1\n0\n0\n\n\n3\n438\n838\n1\n0\n0\n0\n0\n21\n0\n0\n0\n0\n30\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n7\n1\n0\n0\n0\n99\n0\n0\n0\n0\n0\n0\n\n\n5\n1\n1\n772\n696\n2\n506\n15\n0\n0\n65\n2\n1\n0\n23\n2\n83\n0\n20\n\n\n6\n10\n8\n0\n0\n0\n0\n0\n287\n1\n0\n0\n1\n1\n0\n0\n0\n0\n0\n\n\n7\n5\n0\n0\n0\n0\n0\n0\n33\n5\n0\n0\n34\n0\n0\n0\n0\n0\n0\n\n\n8\n507\n15\n0\n0\n0\n0\n1\n3\n2\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n358\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n13\n1\n0\n27\n0\n0\n0\n265\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n11\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n219\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n\n\n13\n6\n0\n0\n0\n0\n0\n0\n6\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n14\n16\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n81\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n2\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n89\n0\n0\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n57\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n1\n5\n0\n0\n0\n0\n0\n394\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n631\n0\n1\n0\n122\n1\n0\n0\n0\n0\n0\n0\n0\n52\n0\n\n\n3\n361\n841\n0\n0\n0\n0\n0\n0\n0\n2\n121\n0\n3\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n1\n0\n106\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n770\n728\n0\n445\n2\n0\n2\n0\n1\n1\n0\n133\n27\n35\n0\n0\n43\n\n\n6\n31\n15\n0\n0\n0\n0\n0\n0\n0\n68\n5\n0\n189\n0\n0\n0\n0\n0\n0\n\n\n7\n3\n0\n0\n0\n0\n0\n3\n0\n0\n69\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n8\n525\n0\n0\n0\n0\n0\n1\n0\n0\n2\n10\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n3\n354\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n7\n0\n86\n0\n0\n0\n0\n0\n213\n0\n1\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n1\n0\n0\n0\n223\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n0\n0\n0\n\n\n13\n10\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n\n\n14\n4\n0\n0\n0\n0\n0\n0\n0\n0\n1\n101\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n90\n0\n0\n0\n1\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n0\n0\n\n\n\n\n\n\n\n'PBMC4 - contingency_matrix (rows: cellTypist - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n4\n0\n1\n398\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n47\n344\n413\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n366\n961\n1\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n3\n0\n104\n0\n0\n0\n0\n0\n0\n\n\n5\n129\n719\n530\n739\n66\n1\n1\n0\n0\n2\n0\n1\n1\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n99\n209\n0\n0\n0\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n0\n70\n0\n3\n4\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n0\n530\n7\n0\n1\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n2\n0\n356\n1\n0\n0\n0\n0\n0\n\n\n10\n1\n6\n83\n2\n0\n215\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24\n199\n1\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n\n\n13\n0\n0\n0\n0\n1\n0\n1\n1\n8\n0\n1\n1\n0\n0\n0\n\n\n14\n0\n0\n0\n0\n0\n0\n105\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n15\n0\n1\n1\n0\n91\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n0\n\n\n\n\n\n\n\n\n\nAgainst antibody cluster number\n\nprint_clustering_data(tuning = 'antibody',dataset=\"PBMC1\")\n\n'Initial COTAN cluster number:'\n\n\n13\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n9\n\n\n'Initial scvi-tools cluster number:'\n\n\n11\n\n\n'Initial seurat cluster number:'\n\n\n10\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n7     1338\n8      876\n3      748\n4      341\n9      331\n5      211\n1      202\n6      131\n2       62\n10      51\n12      16\nName: count, dtype: int64\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n1\n94\n0\n17\n50\n0\n0\n0\n0\n0\n\n\n2\n0\n4\n0\n0\n3\n0\n38\n1\n0\n\n\n3\n35\n0\n500\n65\n0\n0\n0\n0\n0\n\n\n4\n0\n1\n0\n262\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n29\n127\n0\n0\n0\n0\n0\n\n\n6\n0\n1\n0\n0\n0\n1\n1\n58\n26\n\n\n7\n2\n731\n0\n4\n0\n275\n95\n17\n1\n\n\n8\n776\n0\n30\n6\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n1\n294\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n44\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n22\n0\n7\n60\n0\n0\n0\n0\n0\n0\n72\n\n\n2\n0\n0\n0\n0\n5\n0\n2\n1\n0\n38\n0\n\n\n3\n67\n0\n408\n125\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n1\n0\n13\n0\n249\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n10\n146\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n3\n0\n1\n0\n0\n0\n0\n0\n82\n1\n0\n\n\n7\n2\n702\n1\n0\n348\n0\n0\n0\n20\n52\n0\n\n\n8\n780\n0\n21\n6\n0\n1\n1\n0\n1\n0\n4\n\n\n9\n0\n0\n0\n1\n0\n1\n156\n137\n0\n0\n0\n\n\n10\n0\n0\n0\n37\n0\n7\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n28\n0\n0\n22\n0\n1\n36\n0\n74\n0\n\n\n2\n0\n3\n42\n0\n1\n0\n0\n0\n0\n0\n\n\n3\n123\n0\n0\n434\n0\n0\n43\n0\n0\n0\n\n\n4\n0\n1\n0\n0\n0\n259\n3\n0\n0\n0\n\n\n5\n0\n0\n0\n17\n0\n0\n138\n0\n3\n0\n\n\n6\n0\n1\n1\n0\n0\n0\n0\n56\n3\n26\n\n\n7\n1\n644\n451\n0\n0\n1\n0\n27\n0\n1\n\n\n8\n786\n0\n0\n19\n1\n2\n3\n0\n2\n1\n\n\n9\n0\n0\n0\n0\n294\n1\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n1\n0\n9\n34\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n93\n14\n0\n0\n0\n54\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1\n4\n0\n0\n1\n1\n39\n0\n0\n\n\n3\n22\n536\n0\n0\n0\n42\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n1\n0\n261\n1\n0\n0\n0\n0\n0\n\n\n5\n1\n18\n0\n0\n0\n139\n0\n0\n0\n0\n0\n\n\n6\n3\n1\n0\n1\n0\n0\n0\n0\n1\n56\n25\n\n\n7\n2\n1\n524\n488\n2\n0\n0\n0\n89\n18\n1\n\n\n8\n766\n40\n0\n0\n1\n5\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n0\n2\n0\n151\n142\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n8\n36\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n8\n2\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n54\n1\n2\n94\n10\n\n\n2\n1\n1\n38\n0\n4\n0\n1\n1\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n39\n6\n55\n58\n442\n\n\n4\n1\n0\n0\n0\n0\n0\n0\n0\n1\n257\n4\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n135\n0\n1\n2\n20\n\n\n6\n0\n56\n1\n1\n1\n25\n0\n0\n0\n0\n1\n1\n1\n\n\n7\n33\n17\n83\n271\n716\n1\n0\n0\n0\n1\n1\n2\n0\n\n\n8\n0\n0\n0\n0\n0\n1\n1\n0\n4\n0\n12\n773\n23\n\n\n9\n0\n0\n0\n0\n0\n0\n150\n143\n0\n2\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n38\n5\n1\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n1\n6\n2\n0\n1\n\n\n\n\n\n\n\n\nprint_clustering_data(tuning = 'antibody',dataset=\"PBMC1\")\n\n'Initial COTAN cluster number:'\n\n\n13\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n9\n\n\n'Initial scvi-tools cluster number:'\n\n\n11\n\n\n'Initial seurat cluster number:'\n\n\n10\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n7     1338\n8      876\n3      748\n4      341\n9      331\n5      211\n1      202\n6      131\n2       62\n10      51\n12      16\nName: count, dtype: int64\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n1\n94\n0\n17\n50\n0\n0\n0\n0\n0\n\n\n2\n0\n4\n0\n0\n3\n0\n38\n1\n0\n\n\n3\n35\n0\n500\n65\n0\n0\n0\n0\n0\n\n\n4\n0\n1\n0\n262\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n29\n127\n0\n0\n0\n0\n0\n\n\n6\n0\n1\n0\n0\n0\n1\n1\n58\n26\n\n\n7\n2\n731\n0\n4\n0\n275\n95\n17\n1\n\n\n8\n776\n0\n30\n6\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n1\n294\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n44\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n22\n0\n7\n60\n0\n0\n0\n0\n0\n0\n72\n\n\n2\n0\n0\n0\n0\n5\n0\n2\n1\n0\n38\n0\n\n\n3\n67\n0\n408\n125\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n1\n0\n13\n0\n249\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n10\n146\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n3\n0\n1\n0\n0\n0\n0\n0\n82\n1\n0\n\n\n7\n2\n702\n1\n0\n348\n0\n0\n0\n20\n52\n0\n\n\n8\n780\n0\n21\n6\n0\n1\n1\n0\n1\n0\n4\n\n\n9\n0\n0\n0\n1\n0\n1\n156\n137\n0\n0\n0\n\n\n10\n0\n0\n0\n37\n0\n7\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n28\n0\n0\n22\n0\n1\n36\n0\n74\n0\n\n\n2\n0\n3\n42\n0\n1\n0\n0\n0\n0\n0\n\n\n3\n123\n0\n0\n434\n0\n0\n43\n0\n0\n0\n\n\n4\n0\n1\n0\n0\n0\n259\n3\n0\n0\n0\n\n\n5\n0\n0\n0\n17\n0\n0\n138\n0\n3\n0\n\n\n6\n0\n1\n1\n0\n0\n0\n0\n56\n3\n26\n\n\n7\n1\n644\n451\n0\n0\n1\n0\n27\n0\n1\n\n\n8\n786\n0\n0\n19\n1\n2\n3\n0\n2\n1\n\n\n9\n0\n0\n0\n0\n294\n1\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n1\n0\n9\n34\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n93\n14\n0\n0\n0\n54\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1\n4\n0\n0\n1\n1\n39\n0\n0\n\n\n3\n22\n536\n0\n0\n0\n42\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n1\n0\n261\n1\n0\n0\n0\n0\n0\n\n\n5\n1\n18\n0\n0\n0\n139\n0\n0\n0\n0\n0\n\n\n6\n3\n1\n0\n1\n0\n0\n0\n0\n1\n56\n25\n\n\n7\n2\n1\n524\n488\n2\n0\n0\n0\n89\n18\n1\n\n\n8\n766\n40\n0\n0\n1\n5\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n0\n2\n0\n151\n142\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n8\n36\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n8\n2\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n54\n1\n2\n94\n10\n\n\n2\n1\n1\n38\n0\n4\n0\n1\n1\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n39\n6\n55\n58\n442\n\n\n4\n1\n0\n0\n0\n0\n0\n0\n0\n1\n257\n4\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n135\n0\n1\n2\n20\n\n\n6\n0\n56\n1\n1\n1\n25\n0\n0\n0\n0\n1\n1\n1\n\n\n7\n33\n17\n83\n271\n716\n1\n0\n0\n0\n1\n1\n2\n0\n\n\n8\n0\n0\n0\n0\n0\n1\n1\n0\n4\n0\n12\n773\n23\n\n\n9\n0\n0\n0\n0\n0\n0\n150\n143\n0\n2\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n38\n5\n1\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n1\n6\n2\n0\n1\n\n\n\n\n\n\n\n\nprint_clustering_data(tuning = 'antibody',dataset=\"PBMC1\")\n\n'Initial COTAN cluster number:'\n\n\n13\n\n\n'Initial monocle cluster number:'\n\n\n1\n\n\n'Initial scanpy cluster number:'\n\n\n9\n\n\n'Initial scvi-tools cluster number:'\n\n\n11\n\n\n'Initial seurat cluster number:'\n\n\n10\n\n\n'Initial antibody cell/cluster table:'\n\n\ncluster.ids\n7     1338\n8      876\n3      748\n4      341\n9      331\n5      211\n1      202\n6      131\n2       62\n10      51\n12      16\nName: count, dtype: int64\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: monocle)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n1\n94\n0\n17\n50\n0\n0\n0\n0\n0\n\n\n2\n0\n4\n0\n0\n3\n0\n38\n1\n0\n\n\n3\n35\n0\n500\n65\n0\n0\n0\n0\n0\n\n\n4\n0\n1\n0\n262\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n29\n127\n0\n0\n0\n0\n0\n\n\n6\n0\n1\n0\n0\n0\n1\n1\n58\n26\n\n\n7\n2\n731\n0\n4\n0\n275\n95\n17\n1\n\n\n8\n776\n0\n30\n6\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n1\n294\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n44\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scanpy)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n22\n0\n7\n60\n0\n0\n0\n0\n0\n0\n72\n\n\n2\n0\n0\n0\n0\n5\n0\n2\n1\n0\n38\n0\n\n\n3\n67\n0\n408\n125\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n1\n0\n13\n0\n249\n0\n0\n0\n0\n0\n\n\n5\n2\n0\n10\n146\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n3\n0\n1\n0\n0\n0\n0\n0\n82\n1\n0\n\n\n7\n2\n702\n1\n0\n348\n0\n0\n0\n20\n52\n0\n\n\n8\n780\n0\n21\n6\n0\n1\n1\n0\n1\n0\n4\n\n\n9\n0\n0\n0\n1\n0\n1\n156\n137\n0\n0\n0\n\n\n10\n0\n0\n0\n37\n0\n7\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: scvi-tools)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n28\n0\n0\n22\n0\n1\n36\n0\n74\n0\n\n\n2\n0\n3\n42\n0\n1\n0\n0\n0\n0\n0\n\n\n3\n123\n0\n0\n434\n0\n0\n43\n0\n0\n0\n\n\n4\n0\n1\n0\n0\n0\n259\n3\n0\n0\n0\n\n\n5\n0\n0\n0\n17\n0\n0\n138\n0\n3\n0\n\n\n6\n0\n1\n1\n0\n0\n0\n0\n56\n3\n26\n\n\n7\n1\n644\n451\n0\n0\n1\n0\n27\n0\n1\n\n\n8\n786\n0\n0\n19\n1\n2\n3\n0\n2\n1\n\n\n9\n0\n0\n0\n0\n294\n1\n0\n0\n0\n0\n\n\n10\n0\n0\n0\n1\n0\n9\n34\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: seurat)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n1\n93\n14\n0\n0\n0\n54\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n1\n4\n0\n0\n1\n1\n39\n0\n0\n\n\n3\n22\n536\n0\n0\n0\n42\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n1\n0\n261\n1\n0\n0\n0\n0\n0\n\n\n5\n1\n18\n0\n0\n0\n139\n0\n0\n0\n0\n0\n\n\n6\n3\n1\n0\n1\n0\n0\n0\n0\n1\n56\n25\n\n\n7\n2\n1\n524\n488\n2\n0\n0\n0\n89\n18\n1\n\n\n8\n766\n40\n0\n0\n1\n5\n1\n0\n0\n0\n1\n\n\n9\n0\n0\n0\n0\n2\n0\n151\n142\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n8\n36\n0\n0\n0\n0\n0\n\n\n12\n0\n0\n0\n0\n8\n2\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n'PBMC1 - contingency_matrix (rows: antibody - cols: COTAN)'\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n54\n1\n2\n94\n10\n\n\n2\n1\n1\n38\n0\n4\n0\n1\n1\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n39\n6\n55\n58\n442\n\n\n4\n1\n0\n0\n0\n0\n0\n0\n0\n1\n257\n4\n0\n0\n\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n135\n0\n1\n2\n20\n\n\n6\n0\n56\n1\n1\n1\n25\n0\n0\n0\n0\n1\n1\n1\n\n\n7\n33\n17\n83\n271\n716\n1\n0\n0\n0\n1\n1\n2\n0\n\n\n8\n0\n0\n0\n0\n0\n1\n1\n0\n4\n0\n12\n773\n23\n\n\n9\n0\n0\n0\n0\n0\n0\n150\n143\n0\n2\n0\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n0\n38\n5\n1\n0\n0\n\n\n12\n0\n0\n0\n0\n0\n0\n0\n0\n1\n6\n2\n0\n1"
  },
  {
    "objectID": "clustering_comparison.html#default-parameters-1",
    "href": "clustering_comparison.html#default-parameters-1",
    "title": "Clustering Comparision",
    "section": "Default parameters",
    "text": "Default parameters\n\nprint_scores(tuning = 'default',dataset=\"PBMC1\")\n\n'PBMC1 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3\n18\n13\n11\n23\n\n\n\n\n\n\n\n'PBMC1 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.106025\n0.062012\n0.087622\n0.168956\n0.1122\n\n\n\n\n\n\n\n'PBMC1 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n194.710746\n159.568549\n193.151278\n235.185139\n166.209735\n\n\n\n\n\n\n\n'PBMC1 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.046493\n2.534291\n2.547137\n1.695538\n2.199121\n\n\n\n\n\n\n\n'PBMC1 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.182454\n-0.006178\n0.148873\n0.235918\n0.139282\n\n\n\n\n\n\n\n'PBMC1 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n187.272904\n160.02968\n199.227613\n213.845901\n133.985915\n\n\n\n\n\n\n\n'PBMC1 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.582264\n2.79635\n2.842419\n1.973727\n3.407326\n\n\n\n\n\n\n\n'PBMC1 - default labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.580616\n0.385715\n0.412315\n0.981082\n0.603445\n0.367190\n0.991712\n\n\nscanpy\n0.722333\n0.405339\n0.828504\n0.640283\n0.509402\n0.791080\n0.328020\n\n\nscvi-tools\n0.777869\n0.600555\n0.813260\n0.745430\n0.667316\n0.813991\n0.547070\n\n\nseurat\n0.795611\n0.651612\n0.787916\n0.803458\n0.707763\n0.751355\n0.666699\n\n\nCOTAN\n0.747622\n0.582668\n0.839063\n0.674153\n0.655776\n0.845150\n0.508836\n\n\n\n\n\n\n\n\n                                                \n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.622344\n0.439255\n0.458549\n0.968180\n0.645589\n0.421345\n0.989178\n\n\nscanpy\n0.662480\n0.389320\n0.814398\n0.558329\n0.511739\n0.851844\n0.307424\n\n\nscvi-tools\n0.718265\n0.557951\n0.800919\n0.651075\n0.643426\n0.842101\n0.491625\n\n\nseurat\n0.747924\n0.647338\n0.787235\n0.712353\n0.712527\n0.810669\n0.626267\n\n\nCOTAN\n0.684979\n0.529470\n0.823524\n0.586337\n0.623261\n0.862630\n0.450315\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'default',dataset=\"PBMC2\")\n\n'PBMC2 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2\n18\n20\n14\n31\n\n\n\n\n\n\n\n'PBMC2 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.237524\n0.077322\n0.018324\n0.134064\n0.112282\n\n\n\n\n\n\n\n'PBMC2 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n298.25227\n270.502074\n223.039427\n367.295749\n222.980901\n\n\n\n\n\n\n\n'PBMC2 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.89379\n2.581588\n3.703433\n1.958013\n2.8615\n\n\n\n\n\n\n\n'PBMC2 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.283181\n0.1987\n0.064022\n0.358299\n0.19162\n\n\n\n\n\n\n\n'PBMC2 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n284.036162\n259.900464\n223.875031\n377.870193\n213.170805\n\n\n\n\n\n\n\n'PBMC2 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.514194\n2.322847\n5.400931\n1.992412\n4.535166\n\n\n\n\n\n\n\n'PBMC2 - default labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.393439\n0.206935\n0.246216\n0.978567\n0.521545\n0.273004\n0.996358\n\n\nscanpy\n0.719426\n0.457389\n0.805848\n0.649745\n0.557061\n0.815952\n0.380312\n\n\nscvi-tools\n0.699891\n0.424655\n0.787025\n0.630128\n0.525155\n0.763216\n0.361349\n\n\nseurat\n0.776310\n0.562412\n0.820809\n0.736387\n0.640230\n0.816710\n0.501886\n\n\nCOTAN\n0.724561\n0.492226\n0.862550\n0.624634\n0.593654\n0.891369\n0.395375\n\n\n\n\n\n\n\n\n                                                \n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.266290\n0.092131\n0.156254\n0.900271\n0.459354\n0.212893\n0.991137\n\n\nscanpy\n0.693344\n0.526719\n0.779700\n0.624210\n0.610277\n0.815918\n0.456465\n\n\nscvi-tools\n0.661538\n0.488989\n0.757752\n0.587004\n0.576896\n0.781492\n0.425864\n\n\nseurat\n0.757858\n0.683647\n0.801432\n0.718778\n0.738063\n0.851801\n0.639512\n\n\nCOTAN\n0.693767\n0.569696\n0.814741\n0.604074\n0.647577\n0.850076\n0.493316\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'default',dataset=\"PBMC3\")\n\n'PBMC3 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3\n22\n17\n18\n57\n\n\n\n\n\n\n\n'PBMC3 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.173831\n0.017764\n0.066172\n0.12701\n0.043145\n\n\n\n\n\n\n\n'PBMC3 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n565.456442\n389.223708\n568.006153\n568.200931\n269.332151\n\n\n\n\n\n\n\n'PBMC3 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.238128\n3.245809\n2.168128\n2.441035\n2.894026\n\n\n\n\n\n\n\n'PBMC3 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.214085\n0.065185\n0.226855\n0.282982\n-0.001861\n\n\n\n\n\n\n\n'PBMC3 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n531.480656\n382.798915\n537.03678\n586.377699\n255.33551\n\n\n\n\n\n\n\n'PBMC3 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.634444\n3.87979\n2.321242\n2.318734\n4.285919\n\n\n\n\n\n\n\n'PBMC3 - default labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.501257\n0.233289\n0.339140\n0.960303\n0.500276\n0.252654\n0.990586\n\n\nscanpy\n0.685942\n0.462727\n0.765047\n0.621663\n0.541439\n0.751303\n0.390196\n\n\nscvi-tools\n0.738810\n0.579719\n0.758792\n0.719853\n0.635430\n0.710503\n0.568289\n\n\nseurat\n0.771188\n0.585275\n0.823308\n0.725274\n0.644396\n0.790547\n0.525264\n\n\nCOTAN\n0.684907\n0.420422\n0.880300\n0.560498\n0.531259\n0.917456\n0.307629\n\n\n\n\n\n\n\n\n                                                \n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.473374\n0.197340\n0.318745\n0.919383\n0.474384\n0.228968\n0.982845\n\n\nscanpy\n0.678005\n0.546455\n0.758365\n0.613045\n0.613385\n0.808137\n0.465567\n\n\nscvi-tools\n0.725083\n0.668897\n0.739961\n0.710792\n0.711791\n0.755603\n0.670519\n\n\nseurat\n0.752260\n0.669108\n0.800562\n0.709455\n0.714356\n0.824890\n0.618633\n\n\nCOTAN\n0.642410\n0.427885\n0.825485\n0.525799\n0.523267\n0.834295\n0.328191\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'default',dataset=\"PBMC4\")\n\n'PBMC4 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3\n22\n16\n19\n34\n\n\n\n\n\n\n\n'PBMC4 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.081399\n0.063742\n0.075337\n0.12954\n0.120257\n\n\n\n\n\n\n\n'PBMC4 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n364.985136\n267.681245\n341.396665\n364.393784\n285.369852\n\n\n\n\n\n\n\n'PBMC4 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.354088\n2.496024\n2.226\n2.224448\n2.372892\n\n\n\n\n\n\n\n'PBMC4 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.193766\n0.025023\n0.077663\n0.187532\n0.062563\n\n\n\n\n\n\n\n'PBMC4 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n353.871309\n254.540593\n284.048471\n347.979408\n270.2767\n\n\n\n\n\n\n\n'PBMC4 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.775993\n3.467425\n2.808762\n2.299231\n3.452692\n\n\n\n\n\n\n\n'PBMC4 - default labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.617025\n0.470070\n0.453383\n0.965513\n0.647279\n0.425154\n0.985455\n\n\nscanpy\n0.701228\n0.380357\n0.819943\n0.612541\n0.487560\n0.777350\n0.305802\n\n\nscvi-tools\n0.739299\n0.504966\n0.788229\n0.696088\n0.584900\n0.745208\n0.459077\n\n\nseurat\n0.760207\n0.494746\n0.847372\n0.689301\n0.583823\n0.820228\n0.415555\n\n\nCOTAN\n0.726404\n0.422436\n0.881515\n0.617712\n0.528853\n0.837081\n0.334120\n\n\n\n\n\n\n\n\n                                                \n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.639609\n0.527106\n0.485153\n0.938343\n0.690625\n0.486090\n0.981225\n\n\nscanpy\n0.645222\n0.369607\n0.792297\n0.544201\n0.492852\n0.824066\n0.294762\n\n\nscvi-tools\n0.701912\n0.483655\n0.772259\n0.643310\n0.578775\n0.767482\n0.436467\n\n\nseurat\n0.693570\n0.445739\n0.804501\n0.609523\n0.551688\n0.803926\n0.378591\n\n\nCOTAN\n0.644162\n0.338121\n0.813229\n0.533293\n0.457870\n0.743146\n0.282105"
  },
  {
    "objectID": "clustering_comparison.html#matching-celltypist-clusters-number",
    "href": "clustering_comparison.html#matching-celltypist-clusters-number",
    "title": "Clustering Comparision",
    "section": "Matching cellTypist clusters number",
    "text": "Matching cellTypist clusters number\n\nprint_scores(tuning = 'celltypist',dataset=\"PBMC1\")\n\n'PBMC1 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n18\n17\n20\n21\n18\n\n\n\n\n\n\n\n'PBMC1 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.018958\n0.099632\n0.064412\n0.073234\n0.097248\n0.119959\n\n\n\n\n\n\n\n'PBMC1 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n130.295857\n189.243925\n161.219024\n164.798269\n187.055701\n181.752646\n\n\n\n\n\n\n\n'PBMC1 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.822402\n1.766278\n2.822667\n2.83544\n2.107907\n2.206314\n\n\n\n\n\n\n\n'PBMC1 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n-0.045945\n0.425583\n0.035198\n-0.003457\n0.038689\n0.17801\n\n\n\n\n\n\n\n'PBMC1 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n105.849177\n258.209764\n166.895151\n148.432443\n163.330165\n155.720126\n\n\n\n\n\n\n\n'PBMC1 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n5.911548\n1.299157\n4.052006\n4.249784\n3.73374\n2.738509\n\n\n\n\n\n\n\n'PBMC1 - matching celltypist labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.658735\n0.341968\n0.759474\n0.581592\n0.448922\n0.715120\n0.281815\n\n\nscanpy\n0.736780\n0.460617\n0.825488\n0.665288\n0.554390\n0.798681\n0.384820\n\n\nscvi-tools\n0.700899\n0.375385\n0.811930\n0.616582\n0.480324\n0.750160\n0.307549\n\n\nseurat\n0.730959\n0.423158\n0.851564\n0.640279\n0.527781\n0.824168\n0.337980\n\n\nCOTAN\n0.760567\n0.614586\n0.823060\n0.706893\n0.680190\n0.835363\n0.553840\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'celltypist',dataset=\"PBMC2\")\n\n'PBMC2 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n18\n20\n18\n20\n17\n\n\n\n\n\n\n\n'PBMC2 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n-0.027381\n0.142246\n0.03787\n0.039284\n0.074705\n0.129948\n\n\n\n\n\n\n\n'PBMC2 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n172.476071\n369.182347\n250.226682\n275.332265\n313.66872\n297.21664\n\n\n\n\n\n\n\n'PBMC2 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.456318\n1.519571\n2.755944\n3.916041\n2.073804\n2.590932\n\n\n\n\n\n\n\n'PBMC2 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.016222\n0.428361\n0.111552\n0.14981\n0.180354\n0.269737\n\n\n\n\n\n\n\n'PBMC2 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n166.040634\n405.143887\n239.361751\n274.501619\n315.911839\n295.576497\n\n\n\n\n\n\n\n'PBMC2 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.973793\n1.205375\n3.43661\n3.947089\n2.428992\n2.216364\n\n\n\n\n\n\n\n'PBMC2 - matching celltypist labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.605793\n0.310821\n0.700581\n0.533598\n0.424516\n0.695894\n0.258968\n\n\nscanpy\n0.699382\n0.378427\n0.812919\n0.613673\n0.493978\n0.814699\n0.299515\n\n\nscvi-tools\n0.709756\n0.399001\n0.791766\n0.643141\n0.501208\n0.730913\n0.343692\n\n\nseurat\n0.737794\n0.418471\n0.850711\n0.651340\n0.528956\n0.837754\n0.333981\n\n\nCOTAN\n0.731121\n0.473101\n0.747806\n0.715164\n0.563052\n0.591871\n0.535636\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'celltypist',dataset=\"PBMC3\")\n\n'PBMC3 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n17\n18\n19\n18\n23\n\n\n\n\n\n\n\n'PBMC3 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n-0.023054\n0.150798\n0.055521\n0.018785\n0.131058\n0.057865\n\n\n\n\n\n\n\n'PBMC3 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n297.808015\n700.217364\n456.227491\n496.1459\n574.480162\n400.155157\n\n\n\n\n\n\n\n'PBMC3 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.985684\n1.442211\n2.995741\n2.362272\n2.426385\n2.598886\n\n\n\n\n\n\n\n'PBMC3 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n-0.029642\n0.377306\n0.25164\n0.174206\n0.275693\n0.088576\n\n\n\n\n\n\n\n'PBMC3 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n262.360318\n739.44889\n472.946903\n516.505211\n586.79879\n354.586581\n\n\n\n\n\n\n\n'PBMC3 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n11.904188\n1.372576\n2.656352\n2.572155\n2.308715\n2.895497\n\n\n\n\n\n\n\n'PBMC3 - matching celltypist labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.593633\n0.350472\n0.645190\n0.549707\n0.432543\n0.575952\n0.324842\n\n\nscanpy\n0.712471\n0.545890\n0.759378\n0.671021\n0.609493\n0.757648\n0.490309\n\n\nscvi-tools\n0.734566\n0.564923\n0.767509\n0.704334\n0.623340\n0.727403\n0.534165\n\n\nseurat\n0.771725\n0.587107\n0.823703\n0.725918\n0.645977\n0.791597\n0.527144\n\n\nCOTAN\n0.670438\n0.459746\n0.737597\n0.614488\n0.530538\n0.653153\n0.430941\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'celltypist',dataset=\"PBMC4\")\n\n'PBMC4 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n16\n18\n18\n19\n15\n\n\n\n\n\n\n\n'PBMC4 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.039137\n0.094551\n0.065347\n0.129055\n0.131231\n0.099607\n\n\n\n\n\n\n\n'PBMC4 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n295.870856\n361.837214\n295.550588\n369.578328\n361.987263\n327.83418\n\n\n\n\n\n\n\n'PBMC4 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.558795\n1.645136\n2.486482\n1.950227\n2.225131\n2.847014\n\n\n\n\n\n\n\n'PBMC4 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.046714\n0.42606\n0.093135\n0.170808\n0.186825\n0.062989\n\n\n\n\n\n\n\n'PBMC4 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n248.702625\n497.518258\n282.658631\n374.867341\n347.797347\n303.69576\n\n\n\n\n\n\n\n'PBMC4 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\ncelltypist\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.291098\n1.09626\n3.338571\n2.073425\n2.297124\n2.483086\n\n\n\n\n\n\n\n'PBMC4 - matching celltypist labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.686023\n0.421456\n0.747151\n0.634141\n0.512790\n0.699270\n0.376040\n\n\nscanpy\n0.730083\n0.473671\n0.809851\n0.664619\n0.562408\n0.777976\n0.406571\n\n\nscvi-tools\n0.752863\n0.501079\n0.830838\n0.688268\n0.587423\n0.808372\n0.426864\n\n\nseurat\n0.759689\n0.493258\n0.846652\n0.688926\n0.582261\n0.817627\n0.414649\n\n\nCOTAN\n0.724775\n0.450018\n0.766000\n0.687761\n0.534712\n0.666348\n0.429080"
  },
  {
    "objectID": "clustering_comparison.html#matching-antibody-clusters-number",
    "href": "clustering_comparison.html#matching-antibody-clusters-number",
    "title": "Clustering Comparision",
    "section": "Matching antibody clusters number",
    "text": "Matching antibody clusters number\n\nprint_scores(tuning = 'antibody',dataset=\"PBMC1\")\n\n'PBMC1 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n9\n11\n10\n11\n13\n\n\n\n\n\n\n\n'PBMC1 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.123097\n0.069567\n0.097602\n0.094258\n0.171754\n0.157886\n\n\n\n\n\n\n\n'PBMC1 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n203.253687\n131.570445\n193.550388\n189.978034\n237.429051\n201.498385\n\n\n\n\n\n\n\n'PBMC1 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.027098\n2.515129\n1.886001\n1.890236\n1.677632\n1.976209\n\n\n\n\n\n\n\n'PBMC1 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.101586\n0.245087\n0.297043\n0.261342\n0.218776\n0.162724\n\n\n\n\n\n\n\n'PBMC1 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n184.932102\n137.566711\n202.80892\n206.264825\n214.61793\n186.472326\n\n\n\n\n\n\n\n'PBMC1 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n2.395779\n2.16692\n1.863548\n1.700282\n1.947515\n2.059359\n\n\n\n\n\n\n\n'PBMC1 - matching antibody labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.724319\n0.641765\n0.727281\n0.721381\n0.707943\n0.753325\n0.665295\n\n\nscanpy\n0.746106\n0.652841\n0.792721\n0.704669\n0.717629\n0.829289\n0.621003\n\n\nscvi-tools\n0.757587\n0.658079\n0.782127\n0.734540\n0.721084\n0.800236\n0.649760\n\n\nseurat\n0.749425\n0.642110\n0.790860\n0.712116\n0.708375\n0.813318\n0.616972\n\n\nCOTAN\n0.721299\n0.633200\n0.772738\n0.676282\n0.700712\n0.798916\n0.614579\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'antibody',dataset=\"PBMC2\")\n\n'PBMC2 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n11\n9\n11\n12\n11\n\n\n\n\n\n\n\n'PBMC2 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n-0.037233\n0.053999\n0.047735\n-0.01373\n0.107504\n0.078974\n\n\n\n\n\n\n\n'PBMC2 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n183.966932\n197.645911\n256.298442\n177.876897\n291.531393\n203.655796\n\n\n\n\n\n\n\n'PBMC2 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.431006\n2.999071\n2.597576\n5.123237\n1.843028\n3.072363\n\n\n\n\n\n\n\n'PBMC2 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.037684\n0.242566\n0.260903\n0.074589\n0.359083\n0.234126\n\n\n\n\n\n\n\n'PBMC2 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n187.161715\n197.483785\n259.897112\n187.848746\n297.046578\n208.763542\n\n\n\n\n\n\n\n'PBMC2 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n6.262231\n2.570934\n2.234808\n4.149191\n1.494746\n2.238186\n\n\n\n\n\n\n\n'PBMC2 - matching antibody labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.592156\n0.458950\n0.611387\n0.574098\n0.545023\n0.612345\n0.485102\n\n\nscanpy\n0.749075\n0.650770\n0.757603\n0.740737\n0.708423\n0.779752\n0.643619\n\n\nscvi-tools\n0.674668\n0.578230\n0.709325\n0.643240\n0.647236\n0.750492\n0.558185\n\n\nseurat\n0.762283\n0.762523\n0.779418\n0.745886\n0.802406\n0.838975\n0.767431\n\n\nCOTAN\n0.738004\n0.674191\n0.688420\n0.795286\n0.744862\n0.649628\n0.854057\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'antibody',dataset=\"PBMC3\")\n\n'PBMC3 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n12\n14\n13\n14\n12\n\n\n\n\n\n\n\n'PBMC3 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n-0.040176\n0.037871\n0.034398\n0.001717\n0.076119\n0.066886\n\n\n\n\n\n\n\n'PBMC3 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n303.562678\n309.45087\n332.440157\n368.948628\n434.276887\n338.97586\n\n\n\n\n\n\n\n'PBMC3 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.604809\n3.04294\n3.434343\n3.282334\n2.612535\n3.274719\n\n\n\n\n\n\n\n'PBMC3 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.074904\n0.205664\n0.23307\n0.17138\n0.305558\n0.220006\n\n\n\n\n\n\n\n'PBMC3 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n298.489075\n331.435612\n382.997054\n438.502899\n489.196185\n393.696152\n\n\n\n\n\n\n\n'PBMC3 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n12.995929\n2.780055\n2.882473\n4.362136\n1.884472\n2.454523\n\n\n\n\n\n\n\n'PBMC3 - matching antibody labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.644484\n0.537094\n0.639574\n0.649469\n0.598577\n0.600917\n0.596245\n\n\nscanpy\n0.729603\n0.683244\n0.752370\n0.708173\n0.724410\n0.784386\n0.669020\n\n\nscvi-tools\n0.726492\n0.670063\n0.728625\n0.724372\n0.713239\n0.729596\n0.697249\n\n\nseurat\n0.764843\n0.698339\n0.799673\n0.732920\n0.738860\n0.829783\n0.657901\n\n\nCOTAN\n0.691237\n0.607331\n0.643954\n0.746015\n0.676860\n0.575699\n0.795798\n\n\n\n\n\n\n\n\n                                                \n\n\n\nprint_scores(tuning = 'antibody',dataset=\"PBMC4\")\n\n'PBMC4 - number of clusters'\n\n\n\n\n\n\n\n\n\nmonocle\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n12\n11\n10\n13\n10\n\n\n\n\n\n\n\n'PBMC4 - Silhuette (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.002385\n-0.036094\n0.050455\n0.05113\n0.077562\n0.045683\n\n\n\n\n\n\n\n'PBMC4 - Calinski_Harabasz (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n235.482647\n197.341814\n270.202541\n343.073339\n320.138454\n229.318527\n\n\n\n\n\n\n\n'PBMC4 - davies_bouldin (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.083971\n4.423945\n2.822422\n2.12666\n2.473315\n3.226592\n\n\n\n\n\n\n\n'PBMC4 - Silhuette from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n0.049133\n0.172283\n0.157433\n0.088787\n0.040314\n0.088272\n\n\n\n\n\n\n\n'PBMC4 - Calinski_Harabasz from Prob. (higher is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n200.437686\n236.062289\n249.06549\n280.961153\n300.480476\n200.115128\n\n\n\n\n\n\n\n'PBMC4 - davies_bouldin  from Prob. (lower is better)'\n\n\n\n\n\n\n\n\n\nmonocle\nantibody\nscanpy\nscvi-tools\nseurat\nCOTAN\n\n\n\n\n0\n3.494187\n3.01011\n2.595129\n2.489428\n2.124028\n2.931601\n\n\n\n\n\n\n\n'PBMC4 - matching antibody labels'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nhomogeneity\ncompleteness\nfowlkes_mallows\nprecision\nrecall\n\n\n\n\nmonocle\n0.644898\n0.463759\n0.695399\n0.601235\n0.559620\n0.723970\n0.432579\n\n\nscanpy\n0.722095\n0.587951\n0.761954\n0.686198\n0.664451\n0.799173\n0.552440\n\n\nscvi-tools\n0.733942\n0.592083\n0.764983\n0.705322\n0.667996\n0.803599\n0.555275\n\n\nseurat\n0.723924\n0.571960\n0.786070\n0.670884\n0.652635\n0.815198\n0.522489\n\n\nCOTAN\n0.677301\n0.519220\n0.678168\n0.676436\n0.606874\n0.658843\n0.559005"
  },
  {
    "objectID": "clustering_comparison.html#check-celltypist-vs-antibody",
    "href": "clustering_comparison.html#check-celltypist-vs-antibody",
    "title": "Clustering Comparision",
    "section": "Check cellTypist vs Antibody",
    "text": "Check cellTypist vs Antibody\n\ndef compute_clustering_scores(output_dir, dataset):#celltypist_df, antibody_df,\n    # Merge the dataframes on the common 'cell' column\n    #cotan_df = pd.read_csv(f'{DIR}{dataset}/COTAN/antibody/clustering_labels.csv', index_col=0)\n    #display(\"Cotan clusters objetc dimension \",cotan_df.shape)\n    #display(\"----------------------------------------\")\n\n    celltypist_df = pd.read_csv(f'{DIR}{dataset}/celltypist/celltypist_labels.csv', index_col=0)\n    celltypist_df.index = celltypist_df.index.str[:-2]\n    antibody_df = pd.read_csv(f'{DIR}{dataset}/antibody_annotation/antibody_labels_postproc.csv', index_col=0)\n    #antibody_df = labels_df.merge(antibody_df, how='inner', on='cell')\n    #all_in_antibody = celltypist_df.index.isin(antibody_df.index).all()\n    #all_in_celltypist = antibody_df.index.isin(celltypist_df.index).all()\n\n    #display(\"All celltypist indices in antibody: \",all_in_antibody, celltypist_df.index.isin(antibody_df.index).sum(),celltypist_df.shape)\n    #display(\"All antibody indices in cellTypist:\", all_in_celltypist)\n\n    #display(\"----------------------------------------\")\n    \n    merged_df = celltypist_df.merge(antibody_df, how='inner',left_index=True, right_index=True)# on='cell')\n\n    merged_df.columns = ['cluster_celltypist','cluster_antibody']\n    \n    # Initialize scores dictionary\n    scores = {\n        'NMI': normalized_mutual_info_score(merged_df['cluster_celltypist'], merged_df['cluster_antibody'], average_method='arithmetic'),\n        'ARI': adjusted_rand_score(merged_df['cluster_celltypist'], merged_df['cluster_antibody']),\n        'Homogeneity': homogeneity_score(merged_df['cluster_celltypist'], merged_df['cluster_antibody']),\n        'Completeness': completeness_score(merged_df['cluster_celltypist'], merged_df['cluster_antibody']),\n        'Fowlkes_Mallows': fowlkes_mallows_score(merged_df['cluster_celltypist'], merged_df['cluster_antibody'])\n    }\n    \n    # Convert scores to DataFrame\n    scores_df = pd.DataFrame([scores])\n    \n    # Save scores to CSV and LaTeX\n    #scores_df.to_csv(f'{output_dir}{dataset}/clustering_comparison_scores.csv')\n    #scores_df.to_latex(f'{output_dir}{dataset}/clustering_comparison_scores.tex')\n    \n    # Display scores DataFrame\n    display(scores_df)\n\n\n\nfor dataset in DATASET_NAMES:\n    #display('------------------------------')\n    display(f'{dataset} - Clustering Comparison between CellTypist and Antibody')\n\n    # Assuming celltypist_df and antibody_df are defined elsewhere and available here\n    compute_clustering_scores(DIR, dataset)\n\n'PBMC1 - Clustering Comparison between CellTypist and Antibody'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nHomogeneity\nCompleteness\nFowlkes_Mallows\n\n\n\n\n0\n0.752326\n0.731095\n0.708308\n0.802178\n0.78126\n\n\n\n\n\n\n\n'PBMC2 - Clustering Comparison between CellTypist and Antibody'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nHomogeneity\nCompleteness\nFowlkes_Mallows\n\n\n\n\n0\n0.659259\n0.481537\n0.667725\n0.651004\n0.585734\n\n\n\n\n\n\n\n'PBMC3 - Clustering Comparison between CellTypist and Antibody'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nHomogeneity\nCompleteness\nFowlkes_Mallows\n\n\n\n\n0\n0.693433\n0.555502\n0.693429\n0.693436\n0.618105\n\n\n\n\n\n\n\n'PBMC4 - Clustering Comparison between CellTypist and Antibody'\n\n\n\n\n\n\n\n\n\nNMI\nARI\nHomogeneity\nCompleteness\nFowlkes_Mallows\n\n\n\n\n0\n0.751294\n0.7252\n0.728817\n0.775201\n0.776972"
  },
  {
    "objectID": "clustering_comparison.html#summary",
    "href": "clustering_comparison.html#summary",
    "title": "Clustering Comparision",
    "section": "Summary",
    "text": "Summary\n\nExternal measures\n\ndef load_scores(tuning, dataset):\n    scores = pd.read_csv(f'{DIR}{dataset}/scores_{tuning}.csv')\n    scores = scores.rename(columns={\"Unnamed: 0\": \"tool\"})\n    scores['tuning'] = tuning\n    return scores\n\n\ndatasets = ['PBMC1', 'PBMC2', 'PBMC3', 'PBMC4']\ntunings = ['default_celltypist', 'default_antibody', 'celltypist_celltypist', 'antibody_antibody']\n\nscores_list = []\n\n# Concatenate all scores into one DataFrame\nfor dataset in datasets:\n    for tuning in tunings:\n        scores = load_scores(tuning, dataset)\n        scores['dataset'] = dataset\n        scores_list.append(scores)\n\nall_scores = pd.concat(scores_list)\n\n# Prepare data for plotting\nall_scores_melted = all_scores.melt(id_vars=['tool', 'tuning', 'dataset'], var_name='score', value_name='value')\n\nsns.set_context(\"talk\") \n# Define custom colors\ncustom_palette = { \n    \"seurat\": \"#4575B4\",\n    \"monocle\": \"#DAABE9\",\n    \"scanpy\": \"#7F9B5C\",\n    \"COTAN\": \"#F73604\",\n    \"scvi-tools\": \"#B6A18F\"\n}\n\ng = sns.FacetGrid(all_scores_melted, row='score', col='tuning', sharey=False, height=4, aspect=1.3)\ng.map(sns.pointplot, 'tool', 'value', palette=custom_palette,capsize=0.2, errwidth=2)\n\n# Set titles and labels\ng.set_titles(col_template=\"{col_name}\", row_template=\"{row_name}\")\ng.set_axis_labels(\"Tool\", \"Score Value\")\nplt.subplots_adjust(top=1.4)\n#g.fig.suptitle('Comparison of Clustering Tools by Various Scores and Conditions')\n# Rotate x-axis labels\nfor ax in g.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\ng.savefig(f\"{DIR}ClusteringToolsComparison{min_size_cluster}.pdf\")\nplt.show()\n\n\n\n\n\n\nInternal measures\n\n# Load your data (assuming you have CSV files for the scores)\ndef load_scores(tuning, dataset, score_type):\n    file_path = f'{DIR}{dataset}/{tuning}_{score_type}.csv'\n    print(f\"Loading {file_path}\")\n    scores = pd.read_csv(file_path, header=0)  # Read the CSV file without an index column\n    scores_melted = scores.melt(var_name='tool', value_name='value')\n    scores_melted['tuning'] = tuning\n    scores_melted['dataset'] = dataset\n    scores_melted['score_type'] = score_type\n    return scores_melted\n\n\n\ndatasets = ['PBMC1', 'PBMC2', 'PBMC3', 'PBMC4']\ntunings = ['default', 'celltypist', 'antibody']\nscore_types = ['silhouette', 'davies_bouldin','Calinski_Harabasz','silhouette_fromProb', 'davies_bouldin_fromProb','Calinski_Harabasz_fromProb']\nscores_list = []\n\n# Concatenate all scores into one DataFrame\nfor dataset in datasets:\n    for tuning in tunings:\n        for score_type in score_types:\n            scores = load_scores(tuning, dataset, score_type)\n            scores_list.append(scores)\n\nall_scores = pd.concat(scores_list)\n\n# Debug: Check the loaded data\nprint(all_scores.head())\n\n# Define custom colors\ncustom_palette = {\n    \"seurat\": \"#4575B4\",\n    \"monocle\": \"#DAABE9\",\n    \"scanpy\": \"#7F9B5C\",\n    \"COTAN\": \"#F73604\",\n    \"scvi-tools\": \"#B6A18F\"\n}\n\n# Filter for silhouette and davies_bouldin scores\nsilhouette_scores = all_scores[all_scores['score_type'] == 'silhouette']\ndavies_bouldin_scores = all_scores[all_scores['score_type'] == 'davies_bouldin']\nCalinski_Harabasz_scores = all_scores[all_scores['score_type'] == 'Calinski_Harabasz']\nsilhouette_scores_fromProb = all_scores[all_scores['score_type'] == 'silhouette_fromProb']\ndavies_bouldin_scores_fromProb = all_scores[all_scores['score_type'] == 'davies_bouldin_fromProb']\nCalinski_Harabasz_scores_fromProb = all_scores[all_scores['score_type'] == 'Calinski_Harabasz_fromProb']\n\n# Plot Silhouette scores\ng1 = sns.FacetGrid(silhouette_scores, col='tuning', sharey=False, height=4, aspect=1.8)\ng1.map(sns.pointplot, 'tool', 'value', palette=custom_palette, order=[ \"monocle\", \"scanpy\", \"scvi-tools\",\"seurat\",\"COTAN\"],capsize=0.2, errwidth=2)\ng1.set_titles(col_template=\"{col_name}\")\ng1.set_axis_labels(\"Tool\", \"Silhouette Score\")\ng1.fig.suptitle('Silhouette Scores by Tool and Tuning Condition', y=1.25)\nplt.subplots_adjust(top=0.85)\n# Rotate x-axis labels\nfor ax in g1.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\n# Plot Davies-Bouldin scores\ng2 = sns.FacetGrid(davies_bouldin_scores, col='tuning', sharey=False, height=4, aspect=1.8)\ng2.map(sns.pointplot, 'tool', 'value', palette=custom_palette, order=[\"monocle\", \"scanpy\",  \"scvi-tools\",\"seurat\",\"COTAN\"],capsize=0.2, errwidth=2)\ng2.set_titles(col_template=\"{col_name}\")\ng2.set_axis_labels(\"Tool\", \"Davies-Bouldin Score\")\ng2.fig.suptitle('Davies-Bouldin Scores by Tool and Tuning Condition', y=1.85)\nplt.subplots_adjust(top=1.5)\n# Rotate x-axis labels\nfor ax in g2.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\n# Plot Calinski_Harabasz scores\ng3 = sns.FacetGrid(Calinski_Harabasz_scores, col='tuning', sharey=False, height=4, aspect=1.8)\ng3.map(sns.pointplot, 'tool', 'value', palette=custom_palette, order=[\"monocle\", \"scanpy\",  \"scvi-tools\",\"seurat\",\"COTAN\"],capsize=0.2, errwidth=2)\ng3.set_titles(col_template=\"{col_name}\")\ng3.set_axis_labels(\"Tool\", \"Calinski_Harabasz Score\")\ng3.fig.suptitle('Calinski Harabasz Scores by Tool and Tuning Condition', y=1.85)\nplt.subplots_adjust(top=1.5)\n# Rotate x-axis labels\nfor ax in g3.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\n\n# Plot Silhouette scores\ng4 = sns.FacetGrid(silhouette_scores_fromProb, col='tuning', sharey=False, height=4, aspect=1.8)\ng4.map(sns.pointplot, 'tool', 'value', palette=custom_palette, order=[ \"monocle\", \"scanpy\", \"scvi-tools\",\"seurat\",\"COTAN\"],capsize=0.2, errwidth=2)\ng4.set_titles(col_template=\"{col_name}\")\ng4.set_axis_labels(\"Tool\", \"Silhouette Score\")\ng4.fig.suptitle('Silhouette Scores From Prob. by Tool and Tuning Condition', y=1.25)\nplt.subplots_adjust(top=0.85)\n# Rotate x-axis labels\nfor ax in g4.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\n# Plot Davies-Bouldin scores\ng5 = sns.FacetGrid(davies_bouldin_scores_fromProb, col='tuning', sharey=False, height=4, aspect=1.8)\ng5.map(sns.pointplot, 'tool', 'value', palette=custom_palette, order=[\"monocle\", \"scanpy\",  \"scvi-tools\",\"seurat\",\"COTAN\"],capsize=0.2, errwidth=2)\ng5.set_titles(col_template=\"{col_name}\")\ng5.set_axis_labels(\"Tool\", \"Davies-Bouldin Score\")\ng5.fig.suptitle('Davies-Bouldin Scores From Prob. by Tool and Tuning Condition', y=1.85)\nplt.subplots_adjust(top=1.5)\n# Rotate x-axis labels\nfor ax in g5.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\n# Plot Calinski_Harabasz scores\ng6 = sns.FacetGrid(Calinski_Harabasz_scores_fromProb, col='tuning', sharey=False, height=4, aspect=1.8)\ng6.map(sns.pointplot, 'tool', 'value', palette=custom_palette, order=[\"monocle\", \"scanpy\",  \"scvi-tools\",\"seurat\",\"COTAN\"],capsize=0.2, errwidth=2)\ng6.set_titles(col_template=\"{col_name}\")\ng6.set_axis_labels(\"Tool\", \"Calinski_Harabasz Score\")\ng6.fig.suptitle('Calinski Harabasz Scores From Prob. by Tool and Tuning Condition', y=1.85)\nplt.subplots_adjust(top=1.5)\n# Rotate x-axis labels\nfor ax in g6.axes.flatten():\n    plt.setp(ax.get_xticklabels(), rotation=45)\n\n\ng1.savefig(f\"{DIR}Silhouette{min_size_cluster}.pdf\")\ng2.savefig(f\"{DIR}Calinski_Harabasz{min_size_cluster}.pdf\")\ng3.savefig(f\"{DIR}Davies_Bouldin{min_size_cluster}.pdf\")\n\ng4.savefig(f\"{DIR}SilhouetteFromProb{min_size_cluster}.pdf\")\ng5.savefig(f\"{DIR}Calinski_HarabaszFromProb{min_size_cluster}.pdf\")\ng6.savefig(f\"{DIR}Davies_BouldinFromProb{min_size_cluster}.pdf\")\n\nplt.show()\n\nLoading Data/PBMC1/default_silhouette.csv\nLoading Data/PBMC1/default_davies_bouldin.csv\nLoading Data/PBMC1/default_Calinski_Harabasz.csv\nLoading Data/PBMC1/default_silhouette_fromProb.csv\nLoading Data/PBMC1/default_davies_bouldin_fromProb.csv\nLoading Data/PBMC1/default_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC1/celltypist_silhouette.csv\nLoading Data/PBMC1/celltypist_davies_bouldin.csv\nLoading Data/PBMC1/celltypist_Calinski_Harabasz.csv\nLoading Data/PBMC1/celltypist_silhouette_fromProb.csv\nLoading Data/PBMC1/celltypist_davies_bouldin_fromProb.csv\nLoading Data/PBMC1/celltypist_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC1/antibody_silhouette.csv\nLoading Data/PBMC1/antibody_davies_bouldin.csv\nLoading Data/PBMC1/antibody_Calinski_Harabasz.csv\nLoading Data/PBMC1/antibody_silhouette_fromProb.csv\nLoading Data/PBMC1/antibody_davies_bouldin_fromProb.csv\nLoading Data/PBMC1/antibody_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC2/default_silhouette.csv\nLoading Data/PBMC2/default_davies_bouldin.csv\nLoading Data/PBMC2/default_Calinski_Harabasz.csv\nLoading Data/PBMC2/default_silhouette_fromProb.csv\nLoading Data/PBMC2/default_davies_bouldin_fromProb.csv\nLoading Data/PBMC2/default_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC2/celltypist_silhouette.csv\nLoading Data/PBMC2/celltypist_davies_bouldin.csv\nLoading Data/PBMC2/celltypist_Calinski_Harabasz.csv\nLoading Data/PBMC2/celltypist_silhouette_fromProb.csv\nLoading Data/PBMC2/celltypist_davies_bouldin_fromProb.csv\nLoading Data/PBMC2/celltypist_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC2/antibody_silhouette.csv\nLoading Data/PBMC2/antibody_davies_bouldin.csv\nLoading Data/PBMC2/antibody_Calinski_Harabasz.csv\nLoading Data/PBMC2/antibody_silhouette_fromProb.csv\nLoading Data/PBMC2/antibody_davies_bouldin_fromProb.csv\nLoading Data/PBMC2/antibody_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC3/default_silhouette.csv\nLoading Data/PBMC3/default_davies_bouldin.csv\nLoading Data/PBMC3/default_Calinski_Harabasz.csv\nLoading Data/PBMC3/default_silhouette_fromProb.csv\nLoading Data/PBMC3/default_davies_bouldin_fromProb.csv\nLoading Data/PBMC3/default_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC3/celltypist_silhouette.csv\nLoading Data/PBMC3/celltypist_davies_bouldin.csv\nLoading Data/PBMC3/celltypist_Calinski_Harabasz.csv\nLoading Data/PBMC3/celltypist_silhouette_fromProb.csv\nLoading Data/PBMC3/celltypist_davies_bouldin_fromProb.csv\nLoading Data/PBMC3/celltypist_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC3/antibody_silhouette.csv\nLoading Data/PBMC3/antibody_davies_bouldin.csv\nLoading Data/PBMC3/antibody_Calinski_Harabasz.csv\nLoading Data/PBMC3/antibody_silhouette_fromProb.csv\nLoading Data/PBMC3/antibody_davies_bouldin_fromProb.csv\nLoading Data/PBMC3/antibody_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC4/default_silhouette.csv\nLoading Data/PBMC4/default_davies_bouldin.csv\nLoading Data/PBMC4/default_Calinski_Harabasz.csv\nLoading Data/PBMC4/default_silhouette_fromProb.csv\nLoading Data/PBMC4/default_davies_bouldin_fromProb.csv\nLoading Data/PBMC4/default_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC4/celltypist_silhouette.csv\nLoading Data/PBMC4/celltypist_davies_bouldin.csv\nLoading Data/PBMC4/celltypist_Calinski_Harabasz.csv\nLoading Data/PBMC4/celltypist_silhouette_fromProb.csv\nLoading Data/PBMC4/celltypist_davies_bouldin_fromProb.csv\nLoading Data/PBMC4/celltypist_Calinski_Harabasz_fromProb.csv\nLoading Data/PBMC4/antibody_silhouette.csv\nLoading Data/PBMC4/antibody_davies_bouldin.csv\nLoading Data/PBMC4/antibody_Calinski_Harabasz.csv\nLoading Data/PBMC4/antibody_silhouette_fromProb.csv\nLoading Data/PBMC4/antibody_davies_bouldin_fromProb.csv\nLoading Data/PBMC4/antibody_Calinski_Harabasz_fromProb.csv\n         tool     value   tuning dataset  score_type\n0  Unnamed: 0  0.000000  default   PBMC1  silhouette\n1     monocle  0.106025  default   PBMC1  silhouette\n2      scanpy  0.062012  default   PBMC1  silhouette\n3  scvi-tools  0.087622  default   PBMC1  silhouette\n4      seurat  0.168956  default   PBMC1  silhouette"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COTAN V2.0 Datasets analysis",
    "section": "",
    "text": "Number\nData-set name\nTissue\nOrganism\nInitial cell number\nOriginal paper\nDatabase code\nCell number after cleaning\nsc Method\nLabelled/Surface proteins\n\n\n\n\n1\nE14.5 Mouse Cortex Loo 2019\nBrain\nmm\n11069\n📖\nGSE123335\n10864\nDrop-seq\nNO\n\n\n2\nE13.5 Mouse Cortex Yuzwa 2017\nBrain\nmm\n1137\n📖\nGSE107122\n1112\nDrop-seq\nNO\n\n\n3\nE17.5 Mouse Cortex Yuzwa 2017\nBrain\nmm\n880\n📖\nGSE107122\n874\nDrop-seq\nNO\n\n\n4\nE13.5 Forebrain La Manno 2021\nBrain\nmm\n5376\n📖\nPRJNA637987\n4981\n10X\nYes\n\n\n5\nE15.0 Forebrain La Manno 2021\nBrain\nmm\n8987\n📖\nPRJNA637987\n8562\n10X\nYes\n\n\n6\nE17.5 Forebrain La Manno 2021\nBrain\nmm\n2611\n📖\nPRJNA637987\n2467\n10X\nYes\n\n\n7\nCD14+\nPBMC\nH.s.\n2612\n📖\nSRP073767\n2434\n10X\nNO\n\n\n8\nPBMC1\nPBMC\nH.s.\n5 527\n\n10X website\n3610\n10X\nyes\n\n\n9\nPBMC2\nPBMC\nH.s.\n6574\n\n10X website\n5975\n10X\nyes\n\n\n10\nPBMC3\nPBMC\nH.s.\n11715\n\n10X website\n10944\n10X\nyes\n\n\n11\nPBMC4\nPBMC\nH.s.\n8258\n\n10X website\n6966\n10X\nyes"
  },
  {
    "objectID": "index.html#schematic-data-sets-information",
    "href": "index.html#schematic-data-sets-information",
    "title": "COTAN V2.0 Datasets analysis",
    "section": "",
    "text": "Number\nData-set name\nTissue\nOrganism\nInitial cell number\nOriginal paper\nDatabase code\nCell number after cleaning\nsc Method\nLabelled/Surface proteins\n\n\n\n\n1\nE14.5 Mouse Cortex Loo 2019\nBrain\nmm\n11069\n📖\nGSE123335\n10864\nDrop-seq\nNO\n\n\n2\nE13.5 Mouse Cortex Yuzwa 2017\nBrain\nmm\n1137\n📖\nGSE107122\n1112\nDrop-seq\nNO\n\n\n3\nE17.5 Mouse Cortex Yuzwa 2017\nBrain\nmm\n880\n📖\nGSE107122\n874\nDrop-seq\nNO\n\n\n4\nE13.5 Forebrain La Manno 2021\nBrain\nmm\n5376\n📖\nPRJNA637987\n4981\n10X\nYes\n\n\n5\nE15.0 Forebrain La Manno 2021\nBrain\nmm\n8987\n📖\nPRJNA637987\n8562\n10X\nYes\n\n\n6\nE17.5 Forebrain La Manno 2021\nBrain\nmm\n2611\n📖\nPRJNA637987\n2467\n10X\nYes\n\n\n7\nCD14+\nPBMC\nH.s.\n2612\n📖\nSRP073767\n2434\n10X\nNO\n\n\n8\nPBMC1\nPBMC\nH.s.\n5 527\n\n10X website\n3610\n10X\nyes\n\n\n9\nPBMC2\nPBMC\nH.s.\n6574\n\n10X website\n5975\n10X\nyes\n\n\n10\nPBMC3\nPBMC\nH.s.\n11715\n\n10X website\n10944\n10X\nyes\n\n\n11\nPBMC4\nPBMC\nH.s.\n8258\n\n10X website\n6966\n10X\nyes"
  },
  {
    "objectID": "geneExpressionAnalysisUniformClusters.html",
    "href": "geneExpressionAnalysisUniformClusters.html",
    "title": "Explorative analysis of gene expression",
    "section": "",
    "text": "#library(COTAN)\n#options(parallelly.fork.enable = TRUE)\n#library(Seurat)\n#library(monocle3)\n#library(reticulate)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(dplyr)\n\ndirOut &lt;- \"Results/GeneExpressionExploration/\"\nif (!exists(dirOut)) {\n  dir.create(dirOut)\n}\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/SingleClusterRawData/\"\n\n\ndf &lt;- NA\nfor (dataSetName in list.files(dataSetDir)) {\n  print(dataSetName)\n  name &lt;- str_split(dataSetName,pattern = \"_\", simplify = T)[1]\n  cluster.name &lt;- str_split(name,pattern = \"e\", simplify = T)[1]\n  time.point &lt;- paste0(\"E\",str_split(name,pattern = \"e\", simplify = T)[2])\n  dataSet &lt;- readRDS(paste0(dataSetDir,dataSetName))\n  print(dim(dataSet))\n  message(dim(dataSet))\n  df.temp &lt;- as.data.frame(list(\"RowSums\"=rowSums(dataSet)))\n  df.temp$N.cells &lt;- dim(dataSet)[2]\n  df.temp$genes &lt;- rownames(df.temp)\n  df.temp$log10_exp &lt;- log10((df.temp$RowSums+1)/df.temp$N.cells)\n  df.temp$cluster &lt;- cluster.name\n  df.temp$time.point &lt;- time.point\n  \n  df &lt;- rbind(df,df.temp)\n  \n}\n\n[1] \"Cl184e13.5_ForebrainDorsalRawData.RDS\"\nNULL\n[1] \"Cl187e13.5_ForebrainDorsalRawData.RDS\"\n[1] 13972   334\n[1] \"Cl428e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   318\n[1] \"Cl432e13.5_ForebrainDorsalRawData.RDS\"\n[1] 13972   536\n[1] \"Cl432e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   586\n[1] \"Cl434e13.5_ForebrainDorsalRawData.RDS\"\n[1] 13972   326\n[1] \"Cl434e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   273\n[1] \"Cl437e13.5_ForebrainDorsalRawData.RDS\"\n[1] 13972   259\n[1] \"Cl437e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   258\n[1] \"Cl505e17.5_ForebrainDorsalRawData.RDS\"\n[1] 13971   203\n[1] \"Cl508e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   397\n[1] \"Cl509e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   402\n[1] \"Cl510e13.5_ForebrainDorsalRawData.RDS\"\n[1] 13972   248\n[1] \"Cl510e15.0_ForebrainDorsalRawData.RDS\"\n[1] 13857   402\n[1] \"Cl516e17.5_ForebrainDorsalRawData.RDS\"\n[1] 13971   297\n\n df &lt;- df[2:nrow(df),]\n\ndf$cl_time &lt;- paste0(df$cluster,\"_\",df$time.point)\n\n\nd_bg &lt;- df[,-5] \n\nggplot(df[df$time.point == \"E13.5\",], \n       aes(x = log10_exp, fill = cluster)) +\n  geom_histogram(data = d_bg, \n                 fill = \"grey\", alpha = .8,binwidth = 0.1/6) +\n  geom_histogram(colour = \"black\",binwidth = 0.1) +\n  facet_wrap(~ cluster) + ylim(0,2500)+\n  guides(fill = FALSE) +  # to remove the legend\n  theme_bw()  \n\n\n\n\n\nggplot(df[df$time.point == \"E15.0\",], \n       aes(x = log10_exp, fill = cluster)) +\n  geom_histogram(data = d_bg, \n                 fill = \"grey\", alpha = .8,binwidth = 0.1/6) +\n  geom_histogram(colour = \"black\",binwidth = 0.1) +\n  facet_wrap(~ cluster) + ylim(0,2500)+\n  guides(fill = FALSE) +  # to remove the legend\n  theme_bw()  \n\n\n\n\n\nggplot(df[df$time.point == \"E17.5\",], \n       aes(x = log10_exp, fill = cluster)) +\n  geom_histogram(data = d_bg, \n                 fill = \"grey\", alpha = .8,binwidth = 0.1/6) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ cluster) +ylim(0,2500)+\n  guides(fill = FALSE) +  # to remove the legend\n  theme_bw()  \n\n\n\n\n\nvenn &lt;- list(\"Cl184\" = df[df$log10_exp &gt; -1 & df$time.point == \"E13.5\" & df$cluster == \"Cl184\",]$genes,\n             \"Cl187\" = df[df$log10_exp &gt; -1 & df$time.point == \"E13.5\" & df$cluster == \"Cl187\",]$genes,\n             \"Cl432\" = df[df$log10_exp &gt; -1 & df$time.point == \"E13.5\" & df$cluster == \"Cl432\",]$genes,\n             \"Cl434\" = df[df$log10_exp &gt; -1 & df$time.point == \"E13.5\" & df$cluster == \"Cl434\",]$genes,\n             \"Cl437\" = df[df$log10_exp &gt; -1 & df$time.point == \"E13.5\" & df$cluster == \"Cl437\",]$genes,\n             \"Cl510\" = df[df$log10_exp &gt; -1 & df$time.point == \"E13.5\" & df$cluster == \"Cl510\",]$genes)\nlibrary(ggVennDiagram)\n\nggVennDiagram(\n  venn,\n  #fill_color = c(\"#0073C2FF\", \"#EFC000FF\", \"#868686FF\",\"#009E73\",\"#993E83\",\"#007310FF\"),\n  stroke_size = 0.5, set_name_size = 4\n  )+ scale_fill_distiller(palette = \"RdBu\")\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggVennDiagram_1.5.0 Matrix_1.6-3        dplyr_1.1.2        \n[4] stringr_1.5.0       ggplot2_3.4.2      \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3        cli_3.6.1          knitr_1.43         rlang_1.1.1       \n [5] xfun_0.39          stringi_1.8.1      generics_0.1.3     jsonlite_1.8.7    \n [9] labeling_0.4.2     glue_1.6.2         colorspace_2.1-0   htmltools_0.5.7   \n[13] scales_1.3.0       fansi_1.0.4        rmarkdown_2.24     grid_4.3.2        \n[17] evaluate_0.21      munsell_0.5.0      tibble_3.2.1       fastmap_1.1.1     \n[21] yaml_2.3.7         lifecycle_1.0.3    compiler_4.3.2     RColorBrewer_1.1-3\n[25] htmlwidgets_1.6.2  pkgconfig_2.0.3    rstudioapi_0.15.0  farver_2.1.1      \n[29] lattice_0.22-5     digest_0.6.33      R6_2.5.1           tidyselect_1.2.0  \n[33] utf8_1.2.3         pillar_1.9.0       magrittr_2.0.3     withr_2.5.0       \n[37] tools_4.3.2        gtable_0.3.3"
  },
  {
    "objectID": "geneCoexAnalysisE17.5MouseBrain.html",
    "href": "geneCoexAnalysisE17.5MouseBrain.html",
    "title": "Gene Correlation Analysis E17.5 Mouse Brain",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortexFromLoom/e17.5_ForebrainDorsal.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E17.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE17.5MouseBrain.html#prologue",
    "href": "geneCoexAnalysisE17.5MouseBrain.html#prologue",
    "title": "Gene Correlation Analysis E17.5 Mouse Brain",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortexFromLoom/e17.5_ForebrainDorsal.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E17.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE17.5MouseBrain.html#cotan",
    "href": "geneCoexAnalysisE17.5MouseBrain.html#cotan",
    "title": "Gene Correlation Analysis E17.5 Mouse Brain",
    "section": "COTAN",
    "text": "COTAN\n\nint.genes &lt;-getGenes(obj)\n\n\ncoexMat.big &lt;- getGenesCoex(obj)#[int.genes,int.genes]\n\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDI_DF &lt;- calculateGDI(obj)\nGDI_DF$geneType &lt;- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType &lt;- cat\n}\n\nGDI_DF$GDI_centered &lt;- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n\n         sum.raw.norm      GDI  exp.cells geneType GDI_centered\nNes          5.354860 2.677591  7.6611269     NPGs   2.12164684\nVim          7.975351 3.653910 23.7130118     NPGs   4.21500654\nSox2         5.379522 3.446151  6.6477503     NPGs   3.76954465\nSox1         4.826847 2.321489  3.8913660     NPGs   1.35811585\nNotch1       5.491804 3.644973  8.1070126     NPGs   4.19584566\nHes1         5.241888 3.715489  4.4183218     NPGs   4.34704054\nHes5         6.367234 3.706690  6.9720308     NPGs   4.32817408\nPax6         6.445184 3.410841 15.2006486     NPGs   3.69383388\nMap2         8.945220 2.919301 87.3530604     PNGs   2.63990577\nTubb3       10.669909 3.802683 93.9602756     PNGs   4.53399718\nNeurod1      4.512176 1.570675  3.2833401     PNGs  -0.25172970\nNefm         5.320286 2.010487  6.2829347     PNGs   0.69128553\nNefl         5.592561 2.179108  5.2695582     PNGs   1.05283171\nDcx          8.048568 2.850882 60.6404540     PNGs   2.49320624\nTbr1         6.829413 1.953272 23.6724767     PNGs   0.56860885\nCalm1        9.893664 1.604866 97.6489664       hk  -0.17841926\nCox6b1       9.028070 2.184997 90.8796109       hk   1.06545895\nPpia         9.189622 2.372214 90.7580057       hk   1.46687705\nRpl18        9.554798 2.279009 96.3518443       hk   1.26703311\nCox7c        9.114185 2.170535 91.9740576       hk   1.03444998\nErh          7.929830 2.390307 62.5050669       hk   1.50567107\nH3f3a        9.697620 2.349951 96.3518443       hk   1.41914319\nTaf1         6.206264 1.475777 16.9436563       hk  -0.45520422\nTaf2         5.648276 1.342082 10.2959060       hk  -0.74186428\nGapdh        8.621629 2.367727 80.5026348       hk   1.45725765\nActb        10.484376 1.292044 99.6351844       hk  -0.84915323\nGolph3       5.947435 1.643738 13.8629915       hk  -0.09507358\nZfr          7.359818 1.675085 43.6157276       hk  -0.02786120\nSub1         8.434336 2.419785 75.3952169       hk   1.56887719\nTars         5.930970 1.571117 13.5387110       hk  -0.25078126\nAmacr        4.339515 1.454028  2.9995946       hk  -0.50183660\nReln         6.723819 2.232753  4.7020673   layers   1.16785364\nLhx5         4.079754 2.579243  1.3376571   layers   1.91077584\nCux1         7.968038 2.190834 50.0202675   layers   1.07797409\nSatb2        9.062287 3.390857 57.7219295   layers   3.65098593\nTle1         6.594351 1.618541 21.7673287   layers  -0.14909808\nMef2c        9.071730 3.175241 51.6011350   layers   3.18867667\nRorb         6.282362 1.926899 13.1333604   layers   0.51206224\nSox5         8.049776 2.285548 43.4130523   layers   1.28105506\nBcl11b       7.109492 2.116159 21.4835833   layers   0.91786051\nFezf2        6.506386 2.096344 18.1597081   layers   0.87537638\nFoxp2        6.557695 2.455294 14.4304824   layers   1.64501202\nNtf3         6.051423 2.225961  6.9314957   layers   1.15329231\nRasgrf2      4.096064 1.795794  2.0267531   layers   0.23095491\nNA                 NA       NA         NA     &lt;NA&gt;           NA\nCux2         7.067401 2.518402 26.4288610   layers   1.78032434\nSlc17a6      6.228895 2.065176 14.4304824   layers   0.80854728\nSema3c       7.553723 2.676192 31.6984191   layers   2.11864837\nThsd7a       5.951856 1.810789  9.6068099   layers   0.26310666\nSulf2        4.348066 1.725374  2.3915687   layers   0.07996546\nKcnk2        7.512577 1.895654 41.7511147   layers   0.44506877\nGrik3        5.173332 1.974505  4.4993920   layers   0.61413535\nEtv1         5.383398 2.639083  5.8775841   layers   2.03908090\nTle4         5.664300 1.881239  8.4718281   layers   0.41416114\nTmem200a     5.235004 2.081666  6.3234698   layers   0.84390268\nGlra2        6.076633 2.094562 11.2687475   layers   0.87155349\nEtv1.1       5.383398 2.639083  5.8775841   layers   2.03908090\nHtr1f        3.780477 1.777503  1.2160519   layers   0.19173786\nSulf1        2.631257 1.128008  0.3648156   layers  -1.20086709\nNA.1               NA       NA         NA     &lt;NA&gt;           NA\nSyt6         4.757520 1.609693  2.6347791   layers  -0.16807098\n\n\n\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)"
  },
  {
    "objectID": "geneCoexAnalysisE17.5MouseBrain.html#seurat-correlation",
    "href": "geneCoexAnalysisE17.5MouseBrain.html#seurat-correlation",
    "title": "Gene Correlation Analysis E17.5 Mouse Brain",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance &lt;- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n\n\ncorr.pval.list &lt;- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   7121123  380.4   11454522  611.8   11454522  611.8\nVcells 766000052 5844.2 1271129210 9698.0 1191235271 9088.5\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nSeurat SC Transform\n\nsrat &lt;-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data &lt;- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data &lt;-seurat.data[rowSums(seurat.data) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   8850105  472.7   16721112   893.1   13569547   724.7\nVcells 721897666 5507.7 1757477180 13408.5 1525429261 11638.2\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE17.5MouseBrain.html#monocle",
    "href": "geneCoexAnalysisE17.5MouseBrain.html#monocle",
    "title": "Gene Correlation Analysis E17.5 Mouse Brain",
    "section": "Monocle",
    "text": "Monocle\n\nlibrary(monocle3)\n\n\ncds &lt;- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds &lt;- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts &lt;- normalized_counts(cds)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;- normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle &lt;- corr.pval.list$p_values\nmonocle.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9961818  532.1   16721112   893.1   16721112   893.1\nVcells 795023729 6065.6 1757477180 13408.5 1757464389 13408.4\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE17.5MouseBrain.html#scanpy",
    "href": "geneCoexAnalysisE17.5MouseBrain.html#scanpy",
    "title": "Gene Correlation Analysis E17.5 Mouse Brain",
    "section": "ScanPy",
    "text": "ScanPy\n\nlibrary(reticulate)\n\ndirOutScP &lt;- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts &lt;- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts &lt;- t(normalized_counts)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;-normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp &lt;- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy &lt;- corr.pval.list$p_values\nScanPy.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9985106  533.3   16721112   893.1   16721112   893.1\nVcells 829560962 6329.1 1757477180 13408.5 1757476100 13408.5\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-06 13:29:24 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3"
  },
  {
    "objectID": "geneCoexAnalysisE13.5Yuzwa.html",
    "href": "geneCoexAnalysisE13.5Yuzwa.html",
    "title": "Gene Correlation Analysis E13.5 for Mouse Cortex",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/Yuzwa_MouseCortex/CorticalCells_GSM2861511_E135.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E13.5\"\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE13.5Yuzwa.html#prologue",
    "href": "geneCoexAnalysisE13.5Yuzwa.html#prologue",
    "title": "Gene Correlation Analysis E13.5 for Mouse Cortex",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/Yuzwa_MouseCortex/CorticalCells_GSM2861511_E135.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E13.5\"\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE13.5Yuzwa.html#cotan",
    "href": "geneCoexAnalysisE13.5Yuzwa.html#cotan",
    "title": "Gene Correlation Analysis E13.5 for Mouse Cortex",
    "section": "COTAN",
    "text": "COTAN\n\nint.genes &lt;-getGenes(obj)\n\n\ncoexMat.big &lt;- getGenesCoex(obj)#[int.genes,int.genes]\n\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDI_DF &lt;- calculateGDI(obj)\nGDI_DF$geneType &lt;- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType &lt;- cat\n}\n\nGDI_DF$GDI_centered &lt;- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n\n         sum.raw.norm      GDI  exp.cells geneType GDI_centered\nNes          6.408692 2.647419 23.1115108     NPGs  4.418329327\nVim          7.312324 2.551967 41.3669065     NPGs  4.083250142\nSox2         6.185654 2.911622 19.1546763     NPGs  5.345792150\nSox1         3.559135 1.880001  2.7877698     NPGs  1.724370053\nNotch1       4.800041 2.166044  7.4640288     NPGs  2.728500194\nHes1         4.886836 2.553616  7.9136691     NPGs  4.089038941\nHes5         5.693747 2.751355 11.5107914     NPGs  4.783186933\nPax6         5.993715 2.670699 17.7158273     NPGs  4.500049648\nMap2         7.442345 2.359424 59.3525180     PNGs  3.407343330\nTubb3        8.588602 2.719463 79.4964029     PNGs  4.671233319\nNeurod1      6.711720 2.015698 26.1690647     PNGs  2.200723866\nNefm         4.837197 1.791972  8.4532374     PNGs  1.415351634\nNefl         3.221387 1.405750  1.8884892     PNGs  0.059550935\nDcx          7.327976 2.605916 53.6870504     PNGs  4.272634438\nTbr1         6.713621 2.557574 37.1402878     PNGs  4.102935005\nCalm1        8.848612 1.258354 93.7949640       hk -0.457871717\nCox6b1       7.730664 1.403952 77.6079137       hk  0.053235962\nPpia         5.880634 1.517396 24.1007194       hk  0.451472872\nRpl18        7.242657 1.440153 61.6906475       hk  0.180318242\nCox7c        6.139111 1.409634 31.8345324       hk  0.073183680\nErh          4.868970 1.538559 10.9712230       hk  0.525765263\nH3f3a        7.360796 1.375840 68.1654676       hk -0.045447274\nTaf1         5.871166 1.296737 20.7733813       hk -0.323130578\nTaf2         5.310284 1.282004 13.4892086       hk -0.374852844\nGapdh        3.206206 1.449379  2.3381295       hk  0.212705058\nActb         9.921265 0.894289 99.1906475       hk -1.735893435\nGolph3       5.007818 1.281697 10.1618705       hk -0.375928017\nZfr          6.490652 1.446589 35.9712230       hk  0.202909958\nSub1         7.383003 1.618534 62.5899281       hk  0.806510422\nTars         5.450030 1.285601 16.0071942       hk -0.362225062\nAmacr        3.191098 1.096773  1.5287770       hk -1.025089118\nReln         3.726806 1.242825  2.1582734   layers -0.512384761\nNA                 NA       NA         NA     &lt;NA&gt;           NA\nCux1         5.933575 1.939433 20.8633094   layers  1.933000923\nSatb2        5.368174 1.665243 12.6798561   layers  0.970477743\nTle1         4.897234 1.760796  9.8021583   layers  1.305910297\nMef2c        6.152818 2.759922 21.0431655   layers  4.813259827\nRorb         4.875888 1.660140  8.3633094   layers  0.952565229\nSox5         7.276191 2.404274 47.9316547   layers  3.564787044\nBcl11b       7.571149 2.656745 54.0467626   layers  4.451065776\nFezf2        6.718361 2.297884 36.1510791   layers  3.191312576\nFoxp2        4.357485 1.350679  4.9460432   layers -0.133772145\nNtf3         2.147161 1.266745  0.8093525   layers -0.428416587\nNA.1               NA       NA         NA     &lt;NA&gt;           NA\nPvrl3        4.546763 1.600616  6.8345324   layers  0.743609475\nCux2         4.718140 1.538965  6.7446043   layers  0.527188512\nSlc17a6      5.699010 1.917841 14.0287770   layers  1.857203373\nSema3c       4.866232 1.435579  7.1942446   layers  0.164262095\nThsd7a       3.836608 1.257654  1.7086331   layers -0.460330847\nSulf2        2.671440 1.498034  1.6187050   layers  0.383504826\nKcnk2        4.495542 1.271818  6.1151079   layers -0.410607221\nGrik3        4.020369 1.928627  3.8669065   layers  1.895067663\nEtv1         3.735043 1.388003  2.5179856   layers -0.002748532\nTle4         5.288375 1.877388 10.9712230   layers  1.715197034\nTmem200a     2.905427 1.228125  1.5287770   layers -0.563988740\nGlra2        4.296262 2.230806  6.3848921   layers  2.955840432\nEtv1.1       3.735043 1.388003  2.5179856   layers -0.002748532\nNA.2               NA       NA         NA     &lt;NA&gt;           NA\nSulf1        1.254408 1.057413  0.3597122   layers -1.163260269\nNA.3               NA       NA         NA     &lt;NA&gt;           NA\nSyt6         4.757203 2.197045  7.5539568   layers  2.837327266\n\n\n\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)"
  },
  {
    "objectID": "geneCoexAnalysisE13.5Yuzwa.html#seurat-correlation",
    "href": "geneCoexAnalysisE13.5Yuzwa.html#seurat-correlation",
    "title": "Gene Correlation Analysis E13.5 for Mouse Cortex",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance &lt;- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n\n\ncorr.pval.list &lt;- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells   7108938  379.7   11454455  611.8  11454455  611.8\nVcells 595844235 4546.0  957583000 7305.8 957583000 7305.8\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nSeurat SC Transform\n\nsrat &lt;-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data &lt;- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data &lt;-seurat.data[rowSums(seurat.data) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   8837923  472.0   16667718  890.2   13557124  724.1\nVcells 520365727 3970.1 1189358788 9074.1 1099004564 8384.8\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE13.5Yuzwa.html#monocle",
    "href": "geneCoexAnalysisE13.5Yuzwa.html#monocle",
    "title": "Gene Correlation Analysis E13.5 for Mouse Cortex",
    "section": "Monocle",
    "text": "Monocle\n\nlibrary(monocle3)\n\n\ncds &lt;- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds &lt;- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts &lt;- normalized_counts(cds)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;- normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle &lt;- corr.pval.list$p_values\nmonocle.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   9949636  531.4   16667718  890.2   16667718  890.2\nVcells 610053653 4654.4 1301028864 9926.1 1301028864 9926.1\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE13.5Yuzwa.html#scanpy",
    "href": "geneCoexAnalysisE13.5Yuzwa.html#scanpy",
    "title": "Gene Correlation Analysis E13.5 for Mouse Cortex",
    "section": "ScanPy",
    "text": "ScanPy\n\nlibrary(reticulate)\n\ndirOutScP &lt;- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts &lt;- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts &lt;- t(normalized_counts)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;-normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp &lt;- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy &lt;- corr.pval.list$p_values\nScanPy.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9973487  532.7   16667718   890.2   16667718   890.2\nVcells 582421870 4443.6 1366198826 10423.3 1366198826 10423.3\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-06 12:11:56 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html",
    "href": "geneCoexAnalysisDataset1.html",
    "title": "Gene Correlation Analysis E14.5 Mouse Cortex",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortex/MouseCortex_E14.5.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E14.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#prologue",
    "href": "geneCoexAnalysisDataset1.html#prologue",
    "title": "Gene Correlation Analysis E14.5 Mouse Cortex",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortex/MouseCortex_E14.5.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E14.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#cotan",
    "href": "geneCoexAnalysisDataset1.html#cotan",
    "title": "Gene Correlation Analysis E14.5 Mouse Cortex",
    "section": "COTAN",
    "text": "COTAN\n\nint.genes &lt;-getGenes(obj)\n\n\ncoexMat.big &lt;- getGenesCoex(obj)\n\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDI_DF &lt;- calculateGDI(obj)\nGDI_DF$geneType &lt;- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType &lt;- cat\n}\n\nGDI_DF$GDI_centered &lt;- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n\n         sum.raw.norm      GDI  exp.cells geneType GDI_centered\nNes          8.839957 4.678500 27.7337997     NPGs   3.63695691\nVim         10.246463 4.534465 51.0309278     NPGs   3.42694609\nSox2         9.124228 4.566666 31.4709131     NPGs   3.47389659\nSox1         7.368458 3.455731  9.5636966     NPGs   1.85409012\nNotch1       7.469284 4.355698 11.6623711     NPGs   3.16629269\nHes1         7.698079 4.634264 10.5946244     NPGs   3.57245806\nHes5         9.405265 4.812530 22.7908689     NPGs   3.83238101\nPax6         8.144613 4.367938 17.3877025     NPGs   3.18413945\nMap2        10.172685 3.768818 72.7172312     PNGs   2.31058907\nTubb3       11.537925 4.586213 88.3836524     PNGs   3.50239807\nNeurod1      8.881391 3.388955 22.9657585     PNGs   1.75672703\nNefm         8.288330 3.346732 17.5441826     PNGs   1.69516332\nNefl         7.678477 3.544436  8.6340206     PNGs   1.98342736\nDcx         10.120356 4.821636 66.9090574     PNGs   3.84565720\nTbr1         8.472723 3.926272 24.1715758     PNGs   2.54016525\nCalm1       11.491577 1.857652 96.5114138       hk  -0.47600225\nCox6b1      10.398257 1.992891 84.6833579       hk  -0.27881530\nPpia         7.666735 2.386108 17.4797496       hk   0.29451755\nRpl18        9.176712 2.575898 51.5187776       hk   0.57124278\nCox7c        8.439961 1.902976 31.8206922       hk  -0.40991709\nErh          6.593118 2.307720  6.5721649       hk   0.18022355\nH3f3a        9.388420 1.886267 58.1093520       hk  -0.43428010\nTaf1         8.315368 2.138643 26.8869661       hk  -0.06630076\nTaf2         8.017975 1.861938 21.1432253       hk  -0.46975224\nGapdh        5.018736 1.853094  1.5648012       hk  -0.48264772\nActb        12.609181 1.492016 99.6778351       hk  -1.00911996\nGolph3       7.150183 1.851371 10.8891753       hk  -0.48515921\nZfr          9.269238 2.273001 50.7916053       hk   0.12960056\nSub1        10.018254 2.583820 74.7238586       hk   0.58279347\nTars         8.056910 2.487556 22.8645066       hk   0.44243393\nAmacr        5.492910 1.714319  2.2551546       hk  -0.68499008\nReln         7.095360 3.011725  4.5563328   layers   1.20670295\nLhx5         6.037778 2.901306  2.0434462   layers   1.04570542\nCux1         8.597262 3.026589 31.3512518   layers   1.22837610\nSatb2        7.603191 3.121471 11.0916789   layers   1.36671855\nTle1         7.891909 2.322600 17.8111193   layers   0.20191897\nMef2c        8.776162 4.057560 23.6377025   layers   2.73159053\nRorb         6.523092 1.943768  4.6023564   layers  -0.35043950\nSox5         9.301863 3.584350 38.2639912   layers   2.04162343\nBcl11b       9.860621 4.189936 53.4057437   layers   2.92460213\nFezf2        8.804060 3.630239 28.8751841   layers   2.10853283\nFoxp2        7.474618 2.254280  8.4867452   layers   0.10230519\nNtf3         4.673267 2.314479  0.8560383   layers   0.19007802\nNA                 NA       NA         NA     &lt;NA&gt;           NA\nPvrl3        7.255727 3.417288 10.6866716   layers   1.79803751\nCux2         7.652690 3.088322 11.2573638   layers   1.31838644\nSlc17a6      7.901396 2.998305 14.0648012   layers   1.18713575\nSema3c       7.222013 2.481806  7.6307069   layers   0.43405122\nThsd7a       7.472372 3.054089  8.0449190   layers   1.26847311\nSulf2        6.491056 2.379550  4.6759941   layers   0.28495572\nKcnk2        7.151877 1.901258  9.0390280   layers  -0.41242163\nGrik3        6.673233 2.781234  5.3019146   layers   0.87063375\nEtv1         6.743118 2.264998  4.8232695   layers   0.11793173\nTle4         7.880978 2.635418 15.0405007   layers   0.65802538\nTmem200a     6.188517 2.926026  3.8751841   layers   1.08174899\nGlra2        7.057638 3.858495  8.1369661   layers   2.44134235\nEtv1.1       6.743118 2.264998  4.8232695   layers   0.11793173\nNA.1               NA       NA         NA     &lt;NA&gt;           NA\nSulf1        5.465717 2.461515  1.0125184   layers   0.40446505\nNA.2               NA       NA         NA     &lt;NA&gt;           NA\nSyt6         7.555334 3.052113  8.8457290   layers   1.26559064\n\n\n\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#seurat-correlation",
    "href": "geneCoexAnalysisDataset1.html#seurat-correlation",
    "title": "Gene Correlation Analysis E14.5 Mouse Cortex",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance &lt;- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n\n\ncorr.pval.list &lt;- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   7120021  380.3   11454531   611.8   11454531   611.8\nVcells 940272073 7173.8 1885882011 14388.2 1571501676 11989.7\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nSeurat SC Transform\n\nsrat &lt;-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data &lt;- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data &lt;-seurat.data[rowSums(seurat.data) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n             used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    8854790  472.9   16718127   892.9   12172573   650.1\nVcells 1002434648 7648.0 2263138413 17266.4 1885879002 14388.2\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#monocle",
    "href": "geneCoexAnalysisDataset1.html#monocle",
    "title": "Gene Correlation Analysis E14.5 Mouse Cortex",
    "section": "Monocle",
    "text": "Monocle\n\nlibrary(monocle3)\n\n\ncds &lt;- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds &lt;- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts &lt;- normalized_counts(cds)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;- normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle &lt;- corr.pval.list$p_values\nmonocle.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n             used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    9966472  532.3   16718127   892.9   16718127   892.9\nVcells 1006589306 7679.7 2358214745 17991.8 2358214745 17991.8\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisDataset1.html#scanpy",
    "href": "geneCoexAnalysisDataset1.html#scanpy",
    "title": "Gene Correlation Analysis E14.5 Mouse Cortex",
    "section": "ScanPy",
    "text": "ScanPy\n\nlibrary(reticulate)\n\ndirOutScP &lt;- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts &lt;- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts &lt;- t(normalized_counts)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;-normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp &lt;- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy &lt;- corr.pval.list$p_values\nScanPy.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n             used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells    9990389  533.6   16718127   892.9   16718127   892.9\nVcells 1104918338 8429.9 2358214745 17991.8 2358214745 17991.8\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-08 19:37:36 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3"
  },
  {
    "objectID": "cd14_clusterizations_comparisons.html",
    "href": "cd14_clusterizations_comparisons.html",
    "title": "CD14+ clusterizations comparisons with CellTypist",
    "section": "",
    "text": "#library(SingleCellExperiment)\n#library(DuoClustering2018)\n#library(tidyr)\nlibrary(rlang)\nlibrary(ggplot2)\nlibrary(ggsankey) # remotes::install_github(\"davidsjoberg/ggsankey\")\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(assertthat)\nlibrary(COTAN)\nlibrary(caret)\ntheme_set(theme_bw())\nlibrary(stringr)\nlibrary(nnet)\n#devtools::load_all(\"~/dev/COTAN/COTAN/\")\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Results/Clusterization/\"\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"CD14_Monocytes_ClusterizationsComparisons.log\"))\n\n\ncd14Obj &lt;- readRDS(file = file.path(\"Data/CD14Cleaned/\", \"CD14_Monocytes.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(cd14Obj, datasetTags()[[\"cond\"]])\n\nsampleCondition\n\n[1] \"CD14_Monocytes\"\n\ngetClusterizations(cd14Obj)\n\n[1] \"split\"           \"merge\"           \"majority-voting\"\n\nmetaC &lt;- getMetadataCells(cd14Obj)\n\n\nsplitClusters &lt;- getClusters(cd14Obj, \"split\")\nmergedClusters &lt;- getClusters(cd14Obj, \"merge\")\n\n\nlabelsDF &lt;- read.csv(file.path(\"Data/CD14Cleaned/\", \"CD14Cleaned_Immune_All_Low_predicted_labels.csv\"), header = TRUE)\nlabelsDF &lt;- column_to_rownames(labelsDF, var = \"X\")\nrownames(labelsDF) &lt;- gsub(\"[.]\", \"-\", rownames(labelsDF))\n\ncells_to_keep &lt;- rownames(labelsDF)[rownames(labelsDF) %in% getCells(cd14Obj)]\nassert_that(identical(cells_to_keep, getCells(cd14Obj)))\n\nmajorityVotingClusters &lt;- labelsDF[cells_to_keep, \"majority_voting\"]\nnames(majorityVotingClusters) &lt;- cells_to_keep\n\nmajorityVotingCoexDF &lt;- DEAOnClusters(cd14Obj,clName =\"majority-voting\",clusters =   majorityVotingClusters)\n\ncd14Obj &lt;- addClusterization(cd14Obj, clName = \"majority-voting\",\n                             clusters = majorityVotingClusters,\n                             coexDF = majorityVotingCoexDF)\n\nSave the COTAN object\n\nsaveRDS(cd14Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nnlevels(splitClusters)\nhead(sort(table(splitClusters), decreasing = TRUE), 10L)\n\nnlevels(mergedClusters)\nhead(sort(table(mergedClusters), decreasing = TRUE), 10L)\n\nnlevels(majorityVotingClusters)\nhead(sort(table(majorityVotingClusters), decreasing = TRUE), 10L)\n\n\nsplitClustersDF &lt;- as.data.frame(splitClusters)\nsplitClustersDF[[\"cell\"]] &lt;- rownames(splitClustersDF)\ncolnames(splitClustersDF)[[1]] &lt;- \"COTAN.split.cluster\"\nsplitClustersDF &lt;- splitClustersDF[order(splitClustersDF[[\"COTAN.split.cluster\"]]), ]\n\nmergedClustersDF &lt;- as.data.frame(mergedClusters)\nmergedClustersDF[[\"cell\"]] &lt;- rownames(mergedClustersDF)\ncolnames(mergedClustersDF)[[1]] &lt;- \"COTAN.merged.cluster\"\nmergedClustersDF &lt;- mergedClustersDF[order(mergedClustersDF[[\"COTAN.merged.cluster\"]]), ]\n\nmajorityVotingClustersDF &lt;- as.data.frame(majorityVotingClusters)\nmajorityVotingClustersDF[[\"cell\"]] &lt;- rownames(majorityVotingClustersDF)\ncolnames(majorityVotingClustersDF)[[1]] &lt;- \"majority.voting.cluster\"\nmajorityVotingClustersDF &lt;- majorityVotingClustersDF[order(majorityVotingClustersDF[[\"majority.voting.cluster\"]]), ]\n\n\nmjvt_split.table &lt;- merge.data.frame(x = majorityVotingClustersDF, y = splitClustersDF,\n                                         by = \"cell\", all.x = TRUE, all.y = TRUE)\n\ntable(mjvt_split.table[,c(2L, 3L)])\n\n                       COTAN.split.cluster\nmajority.voting.cluster   1   2   3   4   5\n    Classical monocytes 877   3 637 837  48\n    NK cells              1  25   0   0   0\n    pDC                   0  10   0   0   0\n\n\n\nmjvt_split.table2 &lt;- mjvt_split.table %&gt;% make_long(majority.voting.cluster, COTAN.split.cluster)\n\nggplot(mjvt_split.table2,\n       aes(x = x,\n           next_x = next_x,\n           node = node,\n           next_node = next_node,\n           fill = factor(node),\n           label = node)) +\n  geom_sankey(flow.alpha = 0.75, node.color = 1) +\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\") +\n  scale_fill_viridis_d(option = \"A\", alpha = 0.95) +\n  theme_sankey(base_size = 16) +\n  theme(legend.position = \"none\")\n\n\n\n\n\nmjvt_merged.table &lt;- merge.data.frame(x = majorityVotingClustersDF, y = mergedClustersDF,\n                                         by = \"cell\", all.x = TRUE, all.y = TRUE)\n\ntable(mjvt_merged.table[,c(2L, 3L)])\n\n                       COTAN.merged.cluster\nmajority.voting.cluster    1    2    3\n    Classical monocytes 1522  877    3\n    NK cells               0    1   25\n    pDC                    0    0   10\n\n\n\nmjvt_merged.table2 &lt;- mjvt_merged.table %&gt;% make_long(majority.voting.cluster, COTAN.merged.cluster)\n\nggplot(mjvt_merged.table2,\n       aes(x = x,\n           next_x = next_x,\n           node = node,\n           next_node = next_node,\n           fill = factor(node),\n           label = node)) +\n  geom_sankey(flow.alpha = 0.75, node.color = 1) +\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\") +\n  scale_fill_viridis_d(option = \"A\", alpha = 0.95) +\n  theme_sankey(base_size = 16) +\n  theme(legend.position = \"none\")\n\n\n\n\n\nmarkersCD14 &lt;- findClustersMarkers(cd14Obj,n = 100,clName = \"merge\",method = \"BH\")\nwrite.csv(markersCD14,file = \"Data/CD14Cleaned/ClusterMarkerGenes.csv\")\nhead(markersCD14)\n\n  CL     Gene      Score      adjPVal         DEA IsMarker  logFoldCh\n1  1 HLA-DQA1 -0.3398915 2.603676e-59 -0.15274999        0 -0.5470222\n2  1 HLA-DQA2 -0.2899185 7.002901e-43 -0.12223685        0 -0.4804835\n3  1 HLA-DPA1 -0.2808830 2.589504e-40 -0.13090249        0 -0.4370669\n4  1  HLA-DRA -0.2499997 1.042557e-31 -0.10296185        0 -0.3654458\n5  1 HLA-DPB1 -0.2225778 5.652934e-25 -0.09887797        0 -0.3375752\n6  1     YBX1 -0.2095002 5.042102e-22 -0.08080263        0 -0.3784618\n\n\n\ncd14GDI &lt;- calculateGDI(cd14Obj)\n\nsubsetGDI &lt;- cd14GDI[cd14GDI$sum.raw.norm &gt; 7,]\ntop.GDI.genes &lt;- rownames(subsetGDI[order(subsetGDI$GDI,decreasing = T),])[1:50]\n\nGDIPlot(cd14Obj,genes = \"\",GDIIn = cd14GDI)\n\n\n\n\n\ndata &lt;- getNormalizedData(cd14Obj)\n\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cd14Obj,clName = \"merge\")[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                    RPL22   LAPTM5 ATP6V0B      RPL5      MCL1      CTSS\nAAACATACCACTAG-1 9.485384 9.485384       0  0.000000  0.000000  0.000000\nAAACATACGTTCAG-1 0.000000 0.000000       0  0.000000 10.114628  0.000000\nAAACATTGCTTCGC-1 0.000000 0.000000       0  0.000000  0.000000  0.000000\nAAACATTGGGCAAG-1 9.322304 0.000000       0  8.629246  9.727739  0.000000\nAAACGGCTACGGAG-1 0.000000 0.000000       0 10.582413  9.483852 10.870089\nAAACGGCTAGTCAC-1 0.000000 9.124915       0  9.124915  0.000000  9.818008\n                   S100A10   S100A11    S100A9    S100A8    S100A6   S100A4\nAAACATACCACTAG-1  9.485384  0.000000  9.485384  9.485384  9.485384 11.56476\nAAACATACGTTCAG-1  0.000000 10.114628 11.906354 11.367363 10.807755 11.36736\nAAACATTGCTTCGC-1  9.414354 10.512912 11.493724 11.812175 11.206045 11.71687\nAAACATTGGGCAAG-1 10.238541  9.322304 10.826311 11.519449 10.420856 11.33713\nAAACGGCTACGGAG-1 10.176961  0.000000 12.191831 11.881678 10.176961 11.56323\nAAACGGCTAGTCAC-1  0.000000 10.511128 12.120544 11.763871 10.916584 11.20426\n                     VAMP8     COX5B   NBEAL1 EEF1B2     ARPC2     RPL15\nAAACATACCACTAG-1 10.583946  0.000000 9.485384      0 10.178493 11.094761\nAAACATACGTTCAG-1 10.114628  0.000000 0.000000      0  0.000000  9.421522\nAAACATTGCTTCGC-1  9.414354  0.000000 9.414354      0  9.414354  9.414354\nAAACATTGGGCAAG-1  9.727739  8.629246 9.322304      0  8.629246 11.113989\nAAACGGCTACGGAG-1 10.176961 10.176961 0.000000      0  9.483852 10.582413\nAAACGGCTAGTCAC-1  9.818008  9.818008 9.124915      0  9.818008 10.916584\n                      RPSA      GPX1     RPL29    SERP1      BTF3      CD14\nAAACATACCACTAG-1  0.000000  9.485384  0.000000 0.000000  0.000000 10.178493\nAAACATACGTTCAG-1  9.421522  9.421522  0.000000 0.000000 10.114628 10.520080\nAAACATTGCTTCGC-1  0.000000  9.414354 10.512912 0.000000  0.000000  0.000000\nAAACATTGGGCAAG-1 10.931670 10.420856 10.015406 9.322304  0.000000  0.000000\nAAACGGCTACGGAG-1  0.000000 11.429697  9.483852 0.000000  0.000000  9.483852\nAAACGGCTAGTCAC-1  0.000000 10.223455  9.124915 9.124915  9.124915  0.000000\n                    DUSP1   HIGD2A  PRELID1     HLA-E      AIF1    CLIC1\nAAACATACCACTAG-1 0.000000 9.485384 0.000000  0.000000  9.485384 10.58395\nAAACATACGTTCAG-1 9.421522 0.000000 0.000000  0.000000  9.421522  0.00000\nAAACATTGCTTCGC-1 9.414354 9.414354 0.000000  0.000000 11.206045  0.00000\nAAACATTGGGCAAG-1 9.322304 9.322304 9.727739  8.629246  9.727739  0.00000\nAAACGGCTACGGAG-1 0.000000 0.000000 0.000000  0.000000  0.000000  0.00000\nAAACGGCTAGTCAC-1 9.124915 0.000000 9.124915 10.511128  9.818008  0.00000\n                   HLA-DRA  HLA-DRB5  HLA-DRB1 HLA-DQA1  HLA-DQB1  HLA-DMA\nAAACATACCACTAG-1 10.583946 10.871621 11.883210        0 10.178493 0.000000\nAAACATACGTTCAG-1  9.421522  0.000000  9.421522        0  0.000000 0.000000\nAAACATTGCTTCGC-1  0.000000 10.107460 10.512912        0  0.000000 9.414354\nAAACATTGGGCAAG-1 10.575003 10.015406 10.575003        0  9.727739 0.000000\nAAACGGCTACGGAG-1  0.000000  9.483852  9.483852        0  0.000000 0.000000\nAAACGGCTAGTCAC-1 10.223455  0.000000  9.818008        0  9.124915 0.000000\n                 HLA-DPA1  HLA-DPB1    RPS10    SF3B5  RNASET2      RAC1\nAAACATACCACTAG-1 9.485384  9.485384 0.000000 0.000000 0.000000 10.178493\nAAACATACGTTCAG-1 0.000000  0.000000 9.421522 0.000000 0.000000  0.000000\nAAACATTGCTTCGC-1 0.000000  9.414354 0.000000 0.000000 0.000000  9.414354\nAAACATTGGGCAAG-1 0.000000 11.113989 9.727739 9.727739 8.629246  0.000000\nAAACGGCTACGGAG-1 0.000000  0.000000 0.000000 0.000000 9.483852  0.000000\nAAACGGCTAGTCAC-1 0.000000  0.000000 9.124915 0.000000 0.000000  9.124915\n                     TOMM7     PPIA CHCHD2    ARPC1B TMEM176B   SLC25A6 TIMP1\nAAACATACCACTAG-1  9.485384 0.000000      0  9.485384 0.000000 10.178493     0\nAAACATACGTTCAG-1 10.114628 9.421522      0 10.114628 0.000000 10.114628     0\nAAACATTGCTTCGC-1 10.107460 0.000000      0  0.000000 9.414354 10.512912     0\nAAACATTGGGCAAG-1  8.629246 0.000000      0  8.629246 0.000000  8.629246     0\nAAACGGCTACGGAG-1  0.000000 0.000000      0 10.176961 9.483852  0.000000     0\nAAACGGCTAGTCAC-1  0.000000 0.000000      0  9.818008 9.124915  9.124915     0\n                      CFP     CEBPD   PABPC1     EDF1      KLF6       VIM\nAAACATACCACTAG-1  0.00000  0.000000 0.000000 9.485384 10.178493 10.178493\nAAACATACGTTCAG-1 10.11463  0.000000 0.000000 0.000000 10.114628  9.421522\nAAACATTGCTTCGC-1  0.00000  9.414354 0.000000 0.000000  9.414354  0.000000\nAAACATTGGGCAAG-1 10.70853  8.629246 0.000000 9.322304 10.015406  9.727739\nAAACGGCTACGGAG-1  0.00000 11.093229 0.000000 0.000000 10.176961  0.000000\nAAACGGCTAGTCAC-1  0.00000 10.223455 9.818008 0.000000  0.000000  9.818008\n                     SRGN   TALDO1     LSP1   MS4A6A    NEAT1    ATP5L     TPI1\nAAACATACCACTAG-1 9.485384 0.000000 9.485384 9.485384 0.000000 0.000000 0.000000\nAAACATACGTTCAG-1 0.000000 9.421522 0.000000 0.000000 9.421522 0.000000 0.000000\nAAACATTGCTTCGC-1 0.000000 0.000000 0.000000 0.000000 9.414354 9.414354 0.000000\nAAACATTGGGCAAG-1 8.629246 0.000000 9.727739 0.000000 9.322304 0.000000 8.629246\nAAACGGCTACGGAG-1 9.483852 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000\nAAACGGCTAGTCAC-1 9.124915 9.124915 0.000000 9.818008 0.000000 0.000000 0.000000\n                  ARHGDIB     CD63      NACA LINC00936     ARPC3   ATP5EP2\nAAACATACCACTAG-1 0.000000 0.000000  0.000000  0.000000 10.178493  0.000000\nAAACATACGTTCAG-1 0.000000 9.421522  9.421522 10.114628  0.000000  9.421522\nAAACATTGCTTCGC-1 9.414354 0.000000  0.000000  0.000000  9.414354 10.512912\nAAACATTGGGCAAG-1 8.629246 8.629246  9.727739  8.629246  0.000000  8.629246\nAAACGGCTACGGAG-1 0.000000 0.000000 10.176961  9.483852  9.483852  0.000000\nAAACGGCTAGTCAC-1 9.124915 9.124915  0.000000  0.000000  9.818008  9.124915\n                     TPT1    PSME1     PSME2   NFKBIA   RPL36AL     NPC2\nAAACATACCACTAG-1 0.000000 0.000000 10.178493 0.000000  0.000000 9.485384\nAAACATACGTTCAG-1 9.421522 9.421522  0.000000 0.000000  9.421522 0.000000\nAAACATTGCTTCGC-1 9.414354 0.000000  0.000000 0.000000  0.000000 0.000000\nAAACATTGGGCAAG-1 0.000000 8.629246  9.322304 9.322304  9.322304 0.000000\nAAACGGCTACGGAG-1 0.000000 0.000000  9.483852 0.000000 10.176961 0.000000\nAAACGGCTAGTCAC-1 9.818008 0.000000  9.818008 9.124915  9.124915 9.818008\n                    CRIP1    ANXA2     RPL4    TCEB2   CORO1A    PYCARD\nAAACATACCACTAG-1  0.00000 0.000000 10.58395 0.000000 9.485384 10.871621\nAAACATACGTTCAG-1  0.00000 9.421522 10.11463 9.421522 0.000000  0.000000\nAAACATTGCTTCGC-1  0.00000 0.000000  0.00000 0.000000 9.414354  9.414354\nAAACATTGGGCAAG-1 10.42086 9.322304  0.00000 0.000000 8.629246  9.727739\nAAACGGCTACGGAG-1  0.00000 9.483852  0.00000 0.000000 0.000000 10.176961\nAAACGGCTAGTCAC-1  0.00000 0.000000  0.00000 0.000000 9.124915  9.818008\n                    COTL1     APRT   GABARAP    EIF4A1 UBB     RPL23 GRN\nAAACATACCACTAG-1 0.000000 0.000000  9.485384  0.000000   0  0.000000   0\nAAACATACGTTCAG-1 0.000000 0.000000  9.421522  0.000000   0  9.421522   0\nAAACATTGCTTCGC-1 0.000000 0.000000  0.000000 10.107460   0  9.414354   0\nAAACATTGGGCAAG-1 0.000000 8.629246  8.629246  9.322304   0 10.015406   0\nAAACGGCTACGGAG-1 0.000000 0.000000 10.176961  0.000000   0  0.000000   0\nAAACGGCTAGTCAC-1 9.124915 0.000000  9.124915  0.000000   0  0.000000   0\n                     RPL38    ACTG1    SCAND1    PSMA7     RPS21       CFD\nAAACATACCACTAG-1  0.000000 0.000000  9.485384  0.00000  0.000000  9.485384\nAAACATACGTTCAG-1 10.114628 0.000000  0.000000  0.00000  9.421522  0.000000\nAAACATTGCTTCGC-1  0.000000 0.000000  0.000000 10.51291 10.107460 10.512912\nAAACATTGGGCAAG-1  8.629246 9.322304  0.000000 10.01541  8.629246  0.000000\nAAACGGCTACGGAG-1  0.000000 0.000000 10.176961  0.00000  9.483852  0.000000\nAAACGGCTAGTCAC-1  0.000000 9.124915  9.818008 10.22345  9.818008  9.124915\n                     GPX4     ATP5D  UQCR11.1  NDUFA11 C19orf43     JUNB\nAAACATACCACTAG-1 11.88321  0.000000  0.000000 0.000000 9.485384 0.000000\nAAACATACGTTCAG-1  0.00000  0.000000 10.114628 9.421522 0.000000 0.000000\nAAACATTGCTTCGC-1  0.00000  0.000000  0.000000 0.000000 0.000000 9.414354\nAAACATTGGGCAAG-1  0.00000  8.629246  9.727739 9.322304 8.629246 0.000000\nAAACGGCTACGGAG-1  0.00000 10.176961  0.000000 9.483852 0.000000 0.000000\nAAACGGCTAGTCAC-1  0.00000  0.000000  0.000000 9.818008 0.000000 0.000000\n                      IER2     PGLS      JUND   NDUFA13     FXYD5   COX6B1\nAAACATACCACTAG-1  0.000000 0.000000  9.485384  0.000000  0.000000 9.485384\nAAACATACGTTCAG-1 11.030895 0.000000  0.000000 10.114628  0.000000 9.421522\nAAACATTGCTTCGC-1  9.414354 0.000000  9.414354 10.107460 10.107460 0.000000\nAAACATTGGGCAAG-1  0.000000 8.629246  8.629246  0.000000  9.322304 8.629246\nAAACGGCTACGGAG-1  0.000000 0.000000 10.176961  9.483852  0.000000 9.483852\nAAACGGCTAGTCAC-1 11.427402 0.000000  9.124915  9.124915  0.000000 9.818008\n                     HCST    TYROBP      GMFG    ZFP36    BLVRB     FOSB\nAAACATACCACTAG-1 0.000000 10.178493  0.000000 0.000000 0.000000 0.000000\nAAACATACGTTCAG-1 0.000000 10.807755 10.114628 0.000000 0.000000 9.421522\nAAACATTGCTTCGC-1 0.000000 10.800587  9.414354 0.000000 0.000000 9.414354\nAAACATTGGGCAAG-1 8.629246 10.575003  9.322304 0.000000 9.322304 0.000000\nAAACGGCTACGGAG-1 0.000000  9.483852  0.000000 0.000000 9.483852 0.000000\nAAACGGCTAGTCAC-1 0.000000 11.522711  9.124915 9.818008 9.124915 9.818008\n                     AP2S1   GLTSCR2      EMP3     FCGRT      RPS5    LGALS2\nAAACATACCACTAG-1  0.000000  9.485384  9.485384  0.000000  9.485384 10.178493\nAAACATACGTTCAG-1  0.000000  9.421522  0.000000  0.000000  0.000000  0.000000\nAAACATTGCTTCGC-1  0.000000  0.000000  9.414354  0.000000 10.107460  0.000000\nAAACATTGGGCAAG-1  8.629246  0.000000 10.826311  0.000000 10.015406  9.727739\nAAACGGCTACGGAG-1 10.176961  0.000000 10.870089 10.176961 10.176961  0.000000\nAAACGGCTAGTCAC-1  0.000000 10.223455  0.000000  9.124915  0.000000  0.000000\n                   MT-ND2  MT-ATP6   MT-ND4   MT-CYB COTAN_Cl.code\nAAACATACCACTAG-1 0.000000 0.000000 9.485384 0.000000             1\nAAACATACGTTCAG-1 0.000000 9.421522 0.000000 9.421522             1\nAAACATTGCTTCGC-1 0.000000 9.414354 0.000000 9.414354             1\nAAACATTGGGCAAG-1 8.629246 9.727739 0.000000 8.629246             2\nAAACGGCTACGGAG-1 0.000000 0.000000 0.000000 9.483852             1\nAAACGGCTAGTCAC-1 9.124915 9.124915 0.000000 0.000000             1\n\n\n\ntrain.data$COTAN_Cl.code &lt;- as.factor(train.data$COTAN_Cl.code)\ntest.data$COTAN_Cl.code &lt;- as.factor(test.data$COTAN_Cl.code)\n# Fit the model\n#model &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 75))\nmodel &lt;- multinom(COTAN_Cl.code ~ ., data = train.data, maxit = 500)\n\n# weights:  369 (244 variable)\ninitial  value 2143.392575 \niter  10 value 761.340646\niter  20 value 746.268326\niter  30 value 720.679315\niter  40 value 579.207155\niter  50 value 545.792232\niter  60 value 539.711792\niter  70 value 526.902032\niter  80 value 506.380523\niter  90 value 485.108188\niter 100 value 480.679083\niter 110 value 476.395523\niter 120 value 462.778421\niter 130 value 457.035815\niter 140 value 455.285417\niter 150 value 449.873877\niter 160 value 446.861152\niter 170 value 444.452737\niter 180 value 439.972413\niter 190 value 437.990151\niter 200 value 437.057149\niter 210 value 436.908590\niter 220 value 436.792687\niter 230 value 436.667356\niter 240 value 436.372853\niter 250 value 435.784259\niter 260 value 435.132550\niter 270 value 434.964836\niter 280 value 434.951070\niter 290 value 434.949618\niter 300 value 434.949374\nfinal  value 434.949335 \nconverged\n\nprobabilities &lt;- predict(model, newdata = test.data, type = \"probs\")\n\n# Find the class with the highest probability for each case\npredicted.classes &lt;- apply(probabilities, 1, which.max)\n\n# Adjust predicted classes to match your factor levels\nlevels &lt;- levels(train.data$COTAN_Cl.code)\npredicted.classes &lt;- levels[predicted.classes]\n\n# Calculate model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\n#result.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\nprint(accuracy)\n\n[1] 0.8521561\n\n\nNumber of cells in each CT clusters\n\ntable(getClusterizationData(cd14Obj,clName = \"merge\")[[1]])\n\n\n   1    2    3 \n1522  878   38 \n\n\nSo the logistic regression accuracy for COTAN three clusters is quite good.\n\n\n\nCluster 1 top enriched genes. In red enriched Reactome Pathways innate immune system genes.\n\n\n\n\n\ncluster 2 - 100 top enriched genes. In red Antigen processing and presentation of exogenous peptide antigen via MHC class II genes, in violet Regulation of leukocyte cell-cell adhesion (GO Biological Process) and in green Adaptive Immune System\n\n\n\n\n\nCluster 3 - 100 top enriched genes. In violet Cytokine Signaling in Immune system and in red Immunoregulatory interactions between a Lymphoid and a non-Lymphoid cell enriched genes for Reatome Pathways.\n\n\nThe cells in cluster 1 seem to be classical CD14 monocytes since they express CD14 while depleted in MHC class II proteins complex which is enriched in cell cluster 2 that seems intermediate monocytes.\nCluster 3 does not seem to be a monocyte cluster. Using enrichr website it is enriched in Plasmacytoid Dendritic cell marker genes.\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] nnet_7.3-19        stringr_1.5.1      caret_6.0-94       lattice_0.22-6    \n [5] COTAN_2.5.4        assertthat_0.2.1   zeallot_0.1.0      tibble_3.2.1      \n [9] ggsankey_0.0.99999 ggplot2_3.5.1      rlang_1.1.3       \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.0            \n  [3] later_1.3.2               polyclip_1.10-6          \n  [5] hardhat_1.3.1             pROC_1.18.5              \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.4           doParallel_1.0.17        \n [11] globals_0.16.3            MASS_7.3-60.2            \n [13] dendextend_1.17.1         magrittr_2.0.3           \n [15] plotly_4.10.4             rmarkdown_2.27           \n [17] yaml_2.3.8                httpuv_1.6.15            \n [19] Seurat_5.1.0              sctransform_0.4.1        \n [21] spam_2.10-0               askpass_1.2.0            \n [23] sp_2.1-4                  spatstat.sparse_3.0-3    \n [25] reticulate_1.37.0         cowplot_1.1.3            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] lubridate_1.9.3           abind_1.4-5              \n [31] zlibbioc_1.50.0           Rtsne_0.17               \n [33] purrr_1.0.2               BiocGenerics_0.50.0      \n [35] ipred_0.9-14              lava_1.8.0               \n [37] circlize_0.4.16           IRanges_2.38.0           \n [39] S4Vectors_0.42.0          ggrepel_0.9.5            \n [41] irlba_2.3.5.1             listenv_0.9.1            \n [43] spatstat.utils_3.0-4      umap_0.2.10.0            \n [45] goftest_1.2-3             RSpectra_0.16-1          \n [47] spatstat.random_3.2-3     dqrng_0.4.0              \n [49] fitdistrplus_1.1-11       parallelly_1.37.1        \n [51] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [53] codetools_0.2-20          DelayedArray_0.30.1      \n [55] tidyselect_1.2.1          shape_1.4.6.1            \n [57] farver_2.1.2              ScaledMatrix_1.12.0      \n [59] viridis_0.6.5             matrixStats_1.3.0        \n [61] stats4_4.4.0              spatstat.explore_3.2-7   \n [63] jsonlite_1.8.8            GetoptLong_1.0.5         \n [65] progressr_0.14.0          ggridges_0.5.6           \n [67] survival_3.6-4            iterators_1.0.14         \n [69] foreach_1.5.2             tools_4.4.0              \n [71] ica_1.0-3                 Rcpp_1.0.12              \n [73] glue_1.7.0                prodlim_2023.08.28       \n [75] gridExtra_2.3             SparseArray_1.4.5        \n [77] xfun_0.44                 MatrixGenerics_1.16.0    \n [79] ggthemes_5.1.0            dplyr_1.1.4              \n [81] withr_3.0.0               fastmap_1.2.0            \n [83] fansi_1.0.6               openssl_2.2.0            \n [85] digest_0.6.35             rsvd_1.0.5               \n [87] timechange_0.3.0          parallelDist_0.2.6       \n [89] R6_2.5.1                  mime_0.12                \n [91] colorspace_2.1-0          scattermore_1.2          \n [93] tensor_1.5                spatstat.data_3.0-4      \n [95] utf8_1.2.4                tidyr_1.3.1              \n [97] generics_0.1.3            data.table_1.15.4        \n [99] recipes_1.0.10            class_7.3-22             \n[101] httr_1.4.7                htmlwidgets_1.6.4        \n[103] S4Arrays_1.4.1            ModelMetrics_1.2.2.2     \n[105] uwot_0.2.2                pkgconfig_2.0.3          \n[107] gtable_0.3.5              timeDate_4032.109        \n[109] ComplexHeatmap_2.20.0     lmtest_0.9-40            \n[111] XVector_0.44.0            htmltools_0.5.8.1        \n[113] dotCall64_1.1-1           clue_0.3-65              \n[115] SeuratObject_5.0.2        scales_1.3.0             \n[117] png_0.1-8                 gower_1.0.1              \n[119] knitr_1.47                rstudioapi_0.16.0        \n[121] reshape2_1.4.4            rjson_0.2.21             \n[123] nlme_3.1-164              zoo_1.8-12               \n[125] GlobalOptions_0.1.2       KernSmooth_2.23-24       \n[127] parallel_4.4.0            miniUI_0.1.1.1           \n[129] RcppZiggurat_0.1.6        pillar_1.9.0             \n[131] grid_4.4.0                vctrs_0.6.5              \n[133] RANN_2.6.1                promises_1.3.0           \n[135] BiocSingular_1.20.0       beachmat_2.20.0          \n[137] xtable_1.8-4              cluster_2.1.6            \n[139] evaluate_0.23             cli_3.6.2                \n[141] compiler_4.4.0            crayon_1.5.2             \n[143] future.apply_1.11.2       labeling_0.4.3           \n[145] plyr_1.8.9                stringi_1.8.4            \n[147] viridisLite_0.4.2         deldir_2.0-4             \n[149] BiocParallel_1.38.0       munsell_0.5.1            \n[151] lazyeval_0.2.2            spatstat.geom_3.2-9      \n[153] PCAtools_2.16.0           Matrix_1.7-0             \n[155] RcppHNSW_0.6.0            patchwork_1.2.0          \n[157] sparseMatrixStats_1.16.0  future_1.33.2            \n[159] shiny_1.8.1.1             ROCR_1.0-11              \n[161] Rfast_2.1.0               igraph_2.0.3             \n[163] RcppParallel_5.1.7"
  },
  {
    "objectID": "SubsettingDataSensitivityEvaluation.html",
    "href": "SubsettingDataSensitivityEvaluation.html",
    "title": "Subsetting data for sensitivity evaluation",
    "section": "",
    "text": "Import data\n\nlibrary(COTAN)\nobjE15 &lt;- readRDS(\"Data/MouseCortexFromLoom/e15.0_ForebrainDorsal.cotan.RDS\")\n\nCell types distribution across the dataset\n\ntable(objE15@metaCells$Class)\n\n\n                 Bad cells                      Blood \n                         7                          1 \n            Choroid plexus                 Fibroblast \n                         1                         71 \n                 Glioblast                     Immune \n                        91                         31 \n                Mesenchyme                 Neuroblast \n                         1                       2536 \n                    Neuron Olfactory ensheathing cell \n                      4801                          1 \n           Oligodendrocyte               Pineal gland \n                         1                          5 \n               Radial glia                   Vascular \n                       966                         49 \n\n\n\ntable(objE15@metaCells[objE15@metaCells$Class %in% c(\"Neuron\",\"Neuroblast\",\"Radial glia\"),]$Class,\n      objE15@metaCells[objE15@metaCells$Class %in% c(\"Neuron\",\"Neuroblast\",\"Radial glia\"),]$Subclass)\n\n             \n              Cajal-Retzius Cortical hem Cortical or hippocampal glutamatergic\n  Neuroblast              9            0                                     0\n  Neuron                145            0                                  3969\n  Radial glia             0           17                                     0\n             \n              Diencephalic roof plate Diencephalon Dorsal diencephalon\n  Neuroblast                        0            0                   0\n  Neuron                            0            0                   0\n  Radial glia                       5            4                   1\n             \n              Dorsal forebrain Dorsal midbrain glutamatergic Forebrain\n  Neuroblast                 0                             0         7\n  Neuron                     0                             1         0\n  Radial glia              909                             0        26\n             \n              Forebrain GABAergic Forebrain glutamatergic\n  Neuroblast                   59                     917\n  Neuron                      610                      15\n  Radial glia                   0                       0\n             \n              Hindbrain glutamatergic Hindbrain glycinergic Hypothalamus\n  Neuroblast                        0                     0            0\n  Neuron                            2                     2            8\n  Radial glia                       0                     0            0\n             \n              Hypothalamus glutamatergic Midbrain Mixed region\n  Neuroblast                           0        0            0\n  Neuron                               2        0            1\n  Radial glia                          0        1            2\n             \n              Mixed region and neurotransmitter Mixed region GABAergic\n  Neuroblast                                  0                      0\n  Neuron                                      4                     21\n  Radial glia                                 0                      0\n             \n              Mixed region glutamatergic Neuronal intermediate progenitor\n  Neuroblast                           8                             1534\n  Neuron                               5                                0\n  Radial glia                          0                                0\n             \n              Undefined\n  Neuroblast          2\n  Neuron             16\n  Radial glia         1\n\n\n\nneuron.CajalRCells &lt;- rownames(objE15@metaCells[objE15@metaCells$Class == \"Neuron\" & objE15@metaCells$Subclass == \"Cajal-Retzius\",])\nlength(neuron.CajalRCells)\n\n[1] 145\n\n\n\nneuron.CajalRCells &lt;- automaticCOTANObjectCreation(raw = getRawData(objE15)[,neuron.CajalRCells],\n  GEO = getMetadataDataset(e15)[1,2],\n  cores = 13,\n  saveObj = TRUE,\n  outDir = \"Data/MouseCortexFromLoom/\",\n  sequencingMethod = getMetadataDataset(e15)[2,2],\n  sampleCondition = \"E15.0_CajalRCells\"\n)\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\")\n)\n\nneuron.CajalRCells &lt;- readRDS(\"Data/MouseCortexFromLoom/E15.0_CajalRCells.cotan.RDS\")\n\nGDIPlot(neuron.CajalRCells,genes = genesList)"
  },
  {
    "objectID": "PBMC4_filtering.html",
    "href": "PBMC4_filtering.html",
    "title": "Filtering of PBMC4 using COTAN",
    "section": "",
    "text": "Library import\n\nlibrary(dplyr)\nlibrary(COTAN)\nlibrary(Seurat)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(DropletUtils)\n\nSettings\n\ndatasetName = 'PBMC4'\ndatasetFolder = './Data/'\n\ninDir  = paste(datasetFolder, datasetName, '/raw/10X/', sep='')\noutDir = paste(datasetFolder, datasetName, '/filtered/', sep='')\ndir10X = paste(outDir, '10X/', sep='')\n\nif (!dir.exists(outDir)) {\n  dir.create(outDir, recursive = TRUE, showWarnings = FALSE)\n}\n\nsetLoggingLevel(2)\nsetLoggingFile(paste(outDir, \"logfile.log\", sep=\"\"))\noptions(parallelly.fork.enable = TRUE)\n\nData loading\n\ndataset = Read10X(data.dir = inDir, strip.suffix = TRUE)\ndataset = dataset[[1]]\nsampleCond &lt;- datasetName\nPBMC4 &lt;- COTAN(raw = dataset)\nPBMC4 &lt;- initializeMetaDataset(\n  PBMC4,\n  GEO = paste(\"10X \", datasetName, sep=\"\"),\n  sequencingMethod = \"10X\",\n  sampleCond = sampleCond\n)\n\nInspect cells’ sizes\n\ncellSizePlot(PBMC4)\n\n\n\n\nDrop cells with too many reads as they are probably doublets\n\ncellsSizeThr &lt;- 20000\nPBMC4 &lt;- addElementToMetaDataset(PBMC4, \"Cells size threshold\", cellsSizeThr)\n\ncellsToRem &lt;- getCells(PBMC4)[getCellsSize(PBMC4) &gt; cellsSizeThr]\nPBMC4 &lt;- dropGenesCells(PBMC4, cells = cellsToRem)\n\ncellSizePlot(PBMC4, splitPattern = \"-\", numCol = 2)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(PBMC4, splitPattern = \"-\", numCol = 2)\n\n\n\n\nDrop cells with too high genes expression as they are probably doublets\n\ngeneSizeThr &lt;- 3500\nPBMC4 &lt;- addElementToMetaDataset(PBMC4, \"Num genes threshold\", geneSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(PBMC4)\ncellsToRem &lt;- names(numExprGenes)[numExprGenes &gt; geneSizeThr]\nPBMC4 &lt;- dropGenesCells(PBMC4, cells = cellsToRem)\n\ngenesSizePlot(PBMC4, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCheck number of mithocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^[Mm][Tt]-\"\ngetGenes(PBMC4)[grep(mitGenesPattern, getGenes(PBMC4))]\n\n [1] \"MT-ND1\"  \"MT-ND2\"  \"MT-CO1\"  \"MT-CO2\"  \"MT-ATP8\" \"MT-ATP6\" \"MT-CO3\" \n [8] \"MT-ND3\"  \"MT-ND4L\" \"MT-ND4\"  \"MT-ND5\"  \"MT-ND6\"  \"MT-CYB\" \n\n\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC4, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nWe drop cells with a too high percentage of mitocondrial genes (are likely dead)\n\nmitPercThr &lt;- 10\nPBMC4 &lt;- addElementToMetaDataset(PBMC4, \"Mitoc. perc. threshold\", mitPercThr)\n\ncellsToRem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nPBMC4 &lt;- dropGenesCells(PBMC4, cells = cellsToRem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC4, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nCheck number of ribosomial genes expressed in each cell\n\nribGenesPattern &lt;- \"^RP[SL]\\\\d+\"\ngetGenes(PBMC4)[grep(ribGenesPattern, getGenes(PBMC4))]\n\n  [1] \"RPL22\"          \"RPL11\"          \"RPS6KA1\"        \"RPS8\"          \n  [5] \"RPL5\"           \"RPS27\"          \"RPS6KC1\"        \"RPS7\"          \n  [9] \"RPS27A\"         \"RPL31\"          \"RPL37A\"         \"RPL32\"         \n [13] \"RPL15\"          \"RPL14\"          \"RPL29\"          \"RPL24\"         \n [17] \"RPL22L1\"        \"RPL39L\"         \"RPL35A\"         \"RPL9\"          \n [21] \"RPL34-AS1\"      \"RPL34\"          \"RPS3A\"          \"RPL37\"         \n [25] \"RPS23\"          \"RPS14\"          \"RPL26L1\"        \"RPS18\"         \n [29] \"RPS10-NUDT3\"    \"RPS10\"          \"RPL10A\"         \"RPL7L1\"        \n [33] \"RPS12\"          \"RPS6KA2\"        \"RPS6KA2-AS1\"    \"RPS6KA3\"       \n [37] \"RPS4X\"          \"RPS6KA6\"        \"RPL36A\"         \"RPL36A-HNRNPH2\"\n [41] \"RPL39\"          \"RPL10\"          \"RPS20\"          \"RPL7\"          \n [45] \"RPL30\"          \"RPL8\"           \"RPS6\"           \"RPL35\"         \n [49] \"RPL12\"          \"RPL7A\"          \"RPL27A\"         \"RPS13\"         \n [53] \"RPS6KA4\"        \"RPS6KB2\"        \"RPS6KB2-AS1\"    \"RPS3\"          \n [57] \"RPS25\"          \"RPS24\"          \"RPS26\"          \"RPL41\"         \n [61] \"RPL6\"           \"RPL21\"          \"RPL10L\"         \"RPS29\"         \n [65] \"RPL36AL\"        \"RPS6KL1\"        \"RPS6KA5\"        \"RPS27L\"        \n [69] \"RPL4\"           \"RPS17\"          \"RPL3L\"          \"RPS2\"          \n [73] \"RPS15A\"         \"RPL13\"          \"RPL26\"          \"RPL23A\"        \n [77] \"RPL23\"          \"RPL19\"          \"RPL27\"          \"RPS6KB1\"       \n [81] \"RPL38\"          \"RPL17-C18orf32\" \"RPL17\"          \"RPS21\"         \n [85] \"RPS15\"          \"RPL36\"          \"RPS28\"          \"RPL18A\"        \n [89] \"RPS16\"          \"RPS19\"          \"RPL18\"          \"RPL13A\"        \n [93] \"RPS11\"          \"RPS9\"           \"RPL28\"          \"RPS5\"          \n [97] \"RPS4Y1\"         \"RPS4Y2\"         \"RPL3\"           \"RPS19BP1\"      \n\n\n\nc(ribPlot, ribSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC4, genePrefix = ribGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(ribPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(PBMC4, splitPattern = \"-\", numCol = 2)\n\n\n\n\n\ngenesSizePlot(PBMC4, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCleaning, round 1\n\nPBMC4 &lt;- clean(PBMC4)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC4)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nPBMC4 &lt;- addElementToMetaDataset(PBMC4, \"Num drop B group\", 0)\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)  \n\n\n\n\n\nyset=0.16\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(PBMC4)), \"n\" = seq_along(getNu(PBMC4)))\nPBMC4 &lt;- addElementToMetaDataset(PBMC4, \"Threshold low UDE cells:\", yset)\ncellsToRem &lt;-rownames(nuDf)[nuDf[[\"nu\"]] &lt; yset]\nPBMC4 &lt;- dropGenesCells(PBMC4, cells = cellsToRem)\n\nCleaning, round 2\n\nPBMC4 &lt;- clean(PBMC4)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC4)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(pcaCellsData)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\n\nplot(cellSizePlot(PBMC4, splitPattern = \"-\", numCol = 2))\n\n\n\n\n\nplot(genesSizePlot(PBMC4, splitPattern = \"-\", numCol = 2))\n\n\n\n\nSave the filtered dataset\n\nif (!dir.exists(dir10X)) {\n  write10xCounts(dir10X, getRawData(PBMC4))\n}\n\n\nsaveRDS(PBMC4, file = paste0(outDir, sampleCond, \".cotan.RDS\"))\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] DropletUtils_1.20.0         SingleCellExperiment_1.22.0\n [3] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] BiocGenerics_0.46.0         MatrixGenerics_1.12.3      \n[11] matrixStats_1.2.0           zeallot_0.1.0              \n[13] ggplot2_3.4.2               tibble_3.2.1               \n[15] Seurat_5.0.0                SeuratObject_5.0.0         \n[17] sp_2.1-1                    COTAN_2.3.0                \n[19] dplyr_1.1.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] R.oo_1.25.0               polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] edgeR_3.42.4              doParallel_1.0.17        \n [11] globals_0.16.2            lattice_0.22-5           \n [13] MASS_7.3-60               dendextend_1.17.1        \n [15] magrittr_2.0.3            limma_3.56.2             \n [17] plotly_4.10.2             rmarkdown_2.24           \n [19] yaml_2.3.7                httpuv_1.6.11            \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] reticulate_1.34.0         cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.16                R.utils_2.12.2           \n [33] purrr_1.0.1               RCurl_1.98-1.12          \n [35] circlize_0.4.15           GenomeInfoDbData_1.2.10  \n [37] ggrepel_0.9.3             irlba_2.3.5.1            \n [39] listenv_0.9.0             spatstat.utils_3.0-3     \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       scuttle_1.10.2           \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              ScaledMatrix_1.8.1       \n [57] viridis_0.6.4             spatstat.explore_3.2-1   \n [59] jsonlite_1.8.7            GetoptLong_1.0.5         \n [61] ellipsis_0.3.2            progressr_0.14.0         \n [63] ggridges_0.5.4            survival_3.5-7           \n [65] iterators_1.0.14          foreach_1.5.2            \n [67] tools_4.3.2               ica_1.0-3                \n [69] Rcpp_1.0.11               glue_1.6.2               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.0.0            HDF5Array_1.28.1         \n [75] withr_2.5.0               fastmap_1.1.1            \n [77] rhdf5filters_1.12.1       fansi_1.0.4              \n [79] openssl_2.1.0             digest_0.6.33            \n [81] rsvd_1.0.5                parallelDist_0.2.6       \n [83] R6_2.5.1                  mime_0.12                \n [85] colorspace_2.1-0          scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] R.methodsS3_1.8.2         utf8_1.2.3               \n [91] tidyr_1.3.0               generics_0.1.3           \n [93] data.table_1.14.8         httr_1.4.6               \n [95] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [97] uwot_0.1.16               pkgconfig_2.0.3          \n [99] gtable_0.3.3              ComplexHeatmap_2.16.0    \n[101] lmtest_0.9-40             XVector_0.40.0           \n[103] htmltools_0.5.7           dotCall64_1.1-0          \n[105] clue_0.3-64               scales_1.3.0             \n[107] png_0.1-8                 knitr_1.43               \n[109] rstudioapi_0.15.0         reshape2_1.4.4           \n[111] rjson_0.2.21              nlme_3.1-163             \n[113] rhdf5_2.44.0              zoo_1.8-12               \n[115] GlobalOptions_0.1.2       stringr_1.5.0            \n[117] KernSmooth_2.23-22        parallel_4.3.2           \n[119] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[121] pillar_1.9.0              grid_4.3.2               \n[123] vctrs_0.6.3               RANN_2.6.1               \n[125] promises_1.2.0.1          BiocSingular_1.16.0      \n[127] beachmat_2.16.0           xtable_1.8-4             \n[129] cluster_2.1.6             evaluate_0.21            \n[131] locfit_1.5-9.8            cli_3.6.1                \n[133] compiler_4.3.2            rlang_1.1.1              \n[135] crayon_1.5.2              future.apply_1.11.0      \n[137] labeling_0.4.2            plyr_1.8.8               \n[139] stringi_1.8.1             viridisLite_0.4.2        \n[141] deldir_2.0-2              BiocParallel_1.34.2      \n[143] assertthat_0.2.1          munsell_0.5.0            \n[145] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[147] PCAtools_2.14.0           Matrix_1.6-3             \n[149] RcppHNSW_0.5.0            patchwork_1.1.2          \n[151] sparseMatrixStats_1.12.2  future_1.33.0            \n[153] Rhdf5lib_1.22.0           shiny_1.8.0              \n[155] ROCR_1.0-11               Rfast_2.1.0              \n[157] igraph_1.6.0              RcppParallel_5.1.7"
  },
  {
    "objectID": "PBMC2_filtering.html",
    "href": "PBMC2_filtering.html",
    "title": "Filtering of PBMC2 using COTAN",
    "section": "",
    "text": "Library import\n\nlibrary(dplyr)\nlibrary(COTAN)\nlibrary(Seurat)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(DropletUtils)\n\nSettings\n\ndatasetName = 'PBMC2'\ndatasetFolder = './Data/'\n\ninDir  = paste(datasetFolder, datasetName, '/raw/10X/', sep='')\noutDir = paste(datasetFolder, datasetName, '/filtered/', sep='')\ndir10X = paste(outDir, '10X/', sep='')\n\nif (!dir.exists(outDir)) {\n  dir.create(outDir, recursive = TRUE, showWarnings = FALSE)\n}\n\nsetLoggingLevel(2)\nsetLoggingFile(paste(outDir, \"logfile.log\", sep=\"\"))\noptions(parallelly.fork.enable = TRUE)\n\nData loading\n\ndataset = Read10X(data.dir = inDir, strip.suffix = TRUE)\ndataset = dataset[[1]]\nsampleCond &lt;- datasetName\nPBMC2 &lt;- COTAN(raw = dataset)\nPBMC2 &lt;- initializeMetaDataset(\n  PBMC2,\n  GEO = paste(\"10X \", datasetName, sep=\"\"),\n  sequencingMethod = \"10X\",\n  sampleCond = sampleCond\n)\n\nInspect cells’ sizes\n\ncellSizePlot(PBMC2)\n\n\n\n\nDrop cells with too many reads as they are probably doublets\n\ncellsSizeThr &lt;- 20000\nPBMC2 &lt;- addElementToMetaDataset(PBMC2, \"Cells size threshold\", cellsSizeThr)\n\ncellsToRem &lt;- getCells(PBMC2)[getCellsSize(PBMC2) &gt; cellsSizeThr]\nPBMC2 &lt;- dropGenesCells(PBMC2, cells = cellsToRem)\n\ncellSizePlot(PBMC2, splitPattern = \"-\", numCol = 2)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(PBMC2, splitPattern = \"-\", numCol = 2)\n\n\n\n\nDrop cells with too high genes expression as they are probably doublets\n\ngeneSizeThr &lt;- 3500\nPBMC2 &lt;- addElementToMetaDataset(PBMC2, \"Num genes threshold\", geneSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(PBMC2)\ncellsToRem &lt;- names(numExprGenes)[numExprGenes &gt; geneSizeThr]\nPBMC2 &lt;- dropGenesCells(PBMC2, cells = cellsToRem)\n\ngenesSizePlot(PBMC2, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCheck number of mithocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^[Mm][Tt]-\"\ngetGenes(PBMC2)[grep(mitGenesPattern, getGenes(PBMC2))]\n\n [1] \"MT-ND1\"  \"MT-ND2\"  \"MT-CO1\"  \"MT-CO2\"  \"MT-ATP8\" \"MT-ATP6\" \"MT-CO3\" \n [8] \"MT-ND3\"  \"MT-ND4L\" \"MT-ND4\"  \"MT-ND5\"  \"MT-ND6\"  \"MT-CYB\" \n\n\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC2, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nWe drop cells with a too high percentage of mitocondrial genes (are likely dead)\n\nmitPercThr &lt;- 10\nPBMC2 &lt;- addElementToMetaDataset(PBMC2, \"Mitoc. perc. threshold\", mitPercThr)\n\ncellsToRem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nPBMC2 &lt;- dropGenesCells(PBMC2, cells = cellsToRem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC2, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nCheck number of ribosomial genes expressed in each cell\n\nribGenesPattern &lt;- \"^RP[SL]\\\\d+\"\ngetGenes(PBMC2)[grep(ribGenesPattern, getGenes(PBMC2))]\n\n [1] \"RPL22\"       \"RPL11\"       \"RPS6KA1\"     \"RPS8\"        \"RPL5\"       \n [6] \"RPS27\"       \"RPS6KC1\"     \"RPS7\"        \"RPS27A\"      \"RPL31\"      \n[11] \"RPL37A\"      \"RPL32\"       \"RPL15\"       \"RPL14\"       \"RPL29\"      \n[16] \"RPL24\"       \"RPL22L1\"     \"RPL39L\"      \"RPL35A\"      \"RPL9\"       \n[21] \"RPL34-AS1\"   \"RPL34\"       \"RPS3A\"       \"RPL37\"       \"RPS23\"      \n[26] \"RPS14\"       \"RPL26L1\"     \"RPS18\"       \"RPS10-NUDT3\" \"RPS10\"      \n[31] \"RPL10A\"      \"RPL7L1\"      \"RPS12\"       \"RPS6KA2\"     \"RPS6KA2-IT1\"\n[36] \"RPS6KA2-AS1\" \"RPS20\"       \"RPL7\"        \"RPL30\"       \"RPL8\"       \n[41] \"RPS6\"        \"RPL35\"       \"RPL12\"       \"RPL7A\"       \"RPS24\"      \n[46] \"RPL27A\"      \"RPS13\"       \"RPS6KA4\"     \"RPS6KB2\"     \"RPS6KB2-AS1\"\n[51] \"RPS3\"        \"RPS25\"       \"RPS26\"       \"RPL41\"       \"RPL6\"       \n[56] \"RPL21\"       \"RPL10L\"      \"RPS29\"       \"RPL36AL\"     \"RPS6KL1\"    \n[61] \"RPS6KA5\"     \"RPS27L\"      \"RPL4\"        \"RPS17\"       \"RPL3L\"      \n[66] \"RPS2\"        \"RPS15A\"      \"RPL13\"       \"RPL26\"       \"RPL23A\"     \n[71] \"RPL23\"       \"RPL19\"       \"RPL27\"       \"RPS6KB1\"     \"RPL38\"      \n[76] \"RPL17\"       \"RPS15\"       \"RPL36\"       \"RPS28\"       \"RPL18A\"     \n[81] \"RPS16\"       \"RPS19\"       \"RPL18\"       \"RPL13A\"      \"RPS11\"      \n[86] \"RPS9\"        \"RPL28\"       \"RPS5\"        \"RPS21\"       \"RPL3\"       \n[91] \"RPS19BP1\"    \"RPS6KA3\"     \"RPS4X\"       \"RPS6KA6\"     \"RPL36A\"     \n[96] \"RPL39\"       \"RPL10\"       \"RPS4Y1\"      \"RPS4Y2\"     \n\n\n\nc(ribPlot, ribSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC2, genePrefix = ribGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(ribPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(PBMC2, splitPattern = \"-\", numCol = 2)\n\n\n\n\n\ngenesSizePlot(PBMC2, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCleaning, round 1\n\nPBMC2 &lt;- clean(PBMC2)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC2)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nPBMC2 &lt;- addElementToMetaDataset(PBMC2, \"Num drop B group\", 0)\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)  \n\n\n\n\n\nyset=0.16\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(PBMC2)), \"n\" = seq_along(getNu(PBMC2)))\nPBMC2 &lt;- addElementToMetaDataset(PBMC2, \"Threshold low UDE cells:\", yset)\ncellsToRem &lt;-rownames(nuDf)[nuDf[[\"nu\"]] &lt; yset]\nPBMC2 &lt;- dropGenesCells(PBMC2, cells = cellsToRem)\n\nCleaning, round 2\n\nPBMC2 &lt;- clean(PBMC2)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC2)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(pcaCellsData)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\n\nplot(cellSizePlot(PBMC2, splitPattern = \"-\", numCol = 2))\n\n\n\n\n\nplot(genesSizePlot(PBMC2, splitPattern = \"-\", numCol = 2))\n\n\n\n\nSave the filtered dataset\n\nif (!dir.exists(dir10X)) {\n  write10xCounts(dir10X, getRawData(PBMC2))\n}\n\n\nsaveRDS(PBMC2, file = paste0(outDir, sampleCond, \".cotan.RDS\"))\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] DropletUtils_1.20.0         SingleCellExperiment_1.22.0\n [3] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] BiocGenerics_0.46.0         MatrixGenerics_1.12.3      \n[11] matrixStats_1.2.0           zeallot_0.1.0              \n[13] ggplot2_3.4.2               tibble_3.2.1               \n[15] Seurat_5.0.0                SeuratObject_5.0.0         \n[17] sp_2.1-1                    COTAN_2.3.0                \n[19] dplyr_1.1.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] R.oo_1.25.0               polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] edgeR_3.42.4              doParallel_1.0.17        \n [11] globals_0.16.2            lattice_0.22-5           \n [13] MASS_7.3-60               dendextend_1.17.1        \n [15] magrittr_2.0.3            limma_3.56.2             \n [17] plotly_4.10.2             rmarkdown_2.24           \n [19] yaml_2.3.7                httpuv_1.6.11            \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] reticulate_1.34.0         cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.16                R.utils_2.12.2           \n [33] purrr_1.0.1               RCurl_1.98-1.12          \n [35] circlize_0.4.15           GenomeInfoDbData_1.2.10  \n [37] ggrepel_0.9.3             irlba_2.3.5.1            \n [39] listenv_0.9.0             spatstat.utils_3.0-3     \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       scuttle_1.10.2           \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              ScaledMatrix_1.8.1       \n [57] viridis_0.6.4             spatstat.explore_3.2-1   \n [59] jsonlite_1.8.7            GetoptLong_1.0.5         \n [61] ellipsis_0.3.2            progressr_0.14.0         \n [63] ggridges_0.5.4            survival_3.5-7           \n [65] iterators_1.0.14          foreach_1.5.2            \n [67] tools_4.3.2               ica_1.0-3                \n [69] Rcpp_1.0.11               glue_1.6.2               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.0.0            HDF5Array_1.28.1         \n [75] withr_2.5.0               fastmap_1.1.1            \n [77] rhdf5filters_1.12.1       fansi_1.0.4              \n [79] openssl_2.1.0             digest_0.6.33            \n [81] rsvd_1.0.5                parallelDist_0.2.6       \n [83] R6_2.5.1                  mime_0.12                \n [85] colorspace_2.1-0          scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] R.methodsS3_1.8.2         utf8_1.2.3               \n [91] tidyr_1.3.0               generics_0.1.3           \n [93] data.table_1.14.8         httr_1.4.6               \n [95] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [97] uwot_0.1.16               pkgconfig_2.0.3          \n [99] gtable_0.3.3              ComplexHeatmap_2.16.0    \n[101] lmtest_0.9-40             XVector_0.40.0           \n[103] htmltools_0.5.7           dotCall64_1.1-0          \n[105] clue_0.3-64               scales_1.3.0             \n[107] png_0.1-8                 knitr_1.43               \n[109] rstudioapi_0.15.0         reshape2_1.4.4           \n[111] rjson_0.2.21              nlme_3.1-163             \n[113] rhdf5_2.44.0              zoo_1.8-12               \n[115] GlobalOptions_0.1.2       stringr_1.5.0            \n[117] KernSmooth_2.23-22        parallel_4.3.2           \n[119] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[121] pillar_1.9.0              grid_4.3.2               \n[123] vctrs_0.6.3               RANN_2.6.1               \n[125] promises_1.2.0.1          BiocSingular_1.16.0      \n[127] beachmat_2.16.0           xtable_1.8-4             \n[129] cluster_2.1.6             evaluate_0.21            \n[131] locfit_1.5-9.8            cli_3.6.1                \n[133] compiler_4.3.2            rlang_1.1.1              \n[135] crayon_1.5.2              future.apply_1.11.0      \n[137] labeling_0.4.2            plyr_1.8.8               \n[139] stringi_1.8.1             viridisLite_0.4.2        \n[141] deldir_2.0-2              BiocParallel_1.34.2      \n[143] assertthat_0.2.1          munsell_0.5.0            \n[145] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[147] PCAtools_2.14.0           Matrix_1.6-3             \n[149] RcppHNSW_0.5.0            patchwork_1.1.2          \n[151] sparseMatrixStats_1.12.2  future_1.33.0            \n[153] Rhdf5lib_1.22.0           shiny_1.8.0              \n[155] ROCR_1.0-11               Rfast_2.1.0              \n[157] igraph_1.6.0              RcppParallel_5.1.7"
  },
  {
    "objectID": "OriginalClustersDistanceEvaluation.html",
    "href": "OriginalClustersDistanceEvaluation.html",
    "title": "Original Clusters Distance Evaluation",
    "section": "",
    "text": "library(COTAN)\nlibrary(stringr)\nlibrary(tidyverse)"
  },
  {
    "objectID": "OriginalClustersDistanceEvaluation.html#extract-the-row-matrix-for-each-cluster",
    "href": "OriginalClustersDistanceEvaluation.html#extract-the-row-matrix-for-each-cluster",
    "title": "Original Clusters Distance Evaluation",
    "section": "Extract the row matrix for each cluster",
    "text": "Extract the row matrix for each cluster\nThis is done on the La Manno Mouse Brain dataset (2021)\n\nE13.5\n\nE13.5Clusters.code &lt;- c(432,187,434,184,437,510)\n\nfb135Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e13.5_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(fb135Obj, datasetTags()[[\"cond\"]])\n\nfor (cl in E13.5Clusters.code) {\n  cells &lt;- names(getClusters(fb135Obj, \n      clName = \"original.clusters\")[getClusters(fb135Obj, \n                          clName = \"original.clusters\") == cl])\n\nCLRawData &lt;- getRawData(fb135Obj)[,cells]\n\nsaveRDS(CLRawData,file = paste0(\"Data/MouseCortexFromLoom/SingleClusterRawData/Cl\",cl,sampleCondition,\"RawData.RDS\"))  \n}\n\n\n\nE15.0\n\nE15.0Clusters.code &lt;- c(432,509,510,508,428,434,437)\n\nfb150Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\nfor (cl in E15.0Clusters.code) {\n  cells &lt;- names(getClusters(fb150Obj, \n      clName = \"original.clusters\")[getClusters(fb150Obj, \n                          clName = \"original.clusters\") == cl])\n\nCLRawData &lt;- getRawData(fb150Obj)[,cells]\n\nsaveRDS(CLRawData,file = paste0(\"Data/MouseCortexFromLoom/SingleClusterRawData/Cl\",cl,sampleCondition,\"RawData.RDS\"))  \n}\n\n\n\nE17.5\n\nE17.5Clusters.code &lt;- c(516,505)\n\nfb175Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"E17.5_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])\n\nfor (cl in E17.5Clusters.code) {\n  cells &lt;- names(getClusters(fb175Obj, \n      clName = \"original.clusters\")[getClusters(fb175Obj, \n                          clName = \"original.clusters\") == cl])\n\nCLRawData &lt;- getRawData(fb175Obj)[,cells]\n\nsaveRDS(CLRawData,file = paste0(\"Data/MouseCortexFromLoom/SingleClusterRawData/Cl\",cl,sampleCondition,\"RawData.RDS\"))  \n}"
  },
  {
    "objectID": "OriginalClustersDistanceEvaluation.html#defining-the-two-distances",
    "href": "OriginalClustersDistanceEvaluation.html#defining-the-two-distances",
    "title": "Original Clusters Distance Evaluation",
    "section": "Defining the two distances",
    "text": "Defining the two distances\nTo roughly determine the cluster distances we decided to test two simple Euclidean distances:\n\nover the mean of the 0/1 raw matrix\nover the \\(1-e^{-\\lambda}\\) where \\(\\lambda\\) is the average expression for the genes.\n\n\nClFiles &lt;- list.files(\"Data/MouseCortexFromLoom/SingleClusterRawData/\")\n\ntot.Df.ZeroOne &lt;- NA\ntot.Df.Lambda &lt;- NA\nfor(Fl in ClFiles) {\n  print(Fl)\n  cl &lt;- str_split(Fl,pattern = \"_\",simplify = T)[1]\n  data &lt;- readRDS(paste0(\"Data/MouseCortexFromLoom/SingleClusterRawData/\",\n                         Fl))\n  \n  obj &lt;- COTAN(data)\n  \n  ZeroOne &lt;- rowMeans(as.matrix(getZeroOneProj(obj)))\n  tot.Df.ZeroOne &lt;- merge(tot.Df.ZeroOne,ZeroOne,by = 0,all = T)\n  tot.Df.ZeroOne[is.na(tot.Df.ZeroOne)] &lt;- 0\n  colnames(tot.Df.ZeroOne)[ncol(tot.Df.ZeroOne)] &lt;- cl\n  tot.Df.ZeroOne &lt;- column_to_rownames(tot.Df.ZeroOne,var = \"Row.names\")\n  \n  obj &lt;- estimateLambdaLinear(obj)\n  Lambda &lt;- getLambda(obj)\n  tot.Df.Lambda &lt;- merge(tot.Df.Lambda,1-exp(-Lambda),by = 0, all = T)\n  tot.Df.Lambda[is.na(tot.Df.Lambda)] &lt;- 0\n  colnames(tot.Df.Lambda)[ncol(tot.Df.Lambda)] &lt;- cl\n  tot.Df.Lambda &lt;- column_to_rownames(tot.Df.Lambda,var = \"Row.names\")\n  \n}\ntot.Df.Lambda &lt;- tot.Df.Lambda[,2:ncol(tot.Df.Lambda)]\ntot.Df.ZeroOne &lt;- tot.Df.ZeroOne[,2:ncol(tot.Df.ZeroOne)]\n\ntot.Df.Lambda &lt;- tot.Df.Lambda[2:nrow(tot.Df.Lambda),]\ntot.Df.ZeroOne &lt;- tot.Df.ZeroOne[2:nrow(tot.Df.Lambda),]\n\n\nhead(tot.Df.Lambda)\nhead(tot.Df.ZeroOne)\n\n\nsaveRDS(tot.Df.Lambda, \"Data/MouseCortexFromLoom/ClustersDistances/Tot.Df.Lambda.RDS\")\nsaveRDS(tot.Df.ZeroOne, \"Data/MouseCortexFromLoom/ClustersDistances/Tot.Df.ZeroOne.RDS\")\n\n\nlibrary(ComplexHeatmap)\ndistance.df.Lambda &lt;- as.matrix(dist(t(tot.Df.Lambda),diag = T,upper = T))\n\nHeatmapLambda &lt;-  Heatmap(distance.df.Lambda,\n        name = \"Lambda\\ndistance\", \n        cell_fun = function(j, i, x, y, width, height, fill) \n        {\n          grid.text(sprintf(\"%.1f\", distance.df.Lambda[i, j]), x, y, gp = gpar(fontsize = 10))\n        },\n        show_row_dend = F, \n        show_row_names = F)\n\npdf(\"Results/ClustersDistances/HeatmapLambda.pdf\",width = 6,height = 5)\nplot(HeatmapLambda)\ndev.off()\n\npng \n  2 \n\nplot(HeatmapLambda)\n\n\n\n\n\ndistance.df.ZeroOne &lt;- as.matrix(dist(t(tot.Df.ZeroOne),diag = T,upper = T))\n\nHeatmapZeorOne &lt;- Heatmap(distance.df.ZeroOne,\n        name = \"ZeroOne\\ndistance\", \n        cell_fun = function(j, i, x, y, width, height, fill) \n        {\n          grid.text(sprintf(\"%.1f\", distance.df.ZeroOne[i, j]), x, y, gp = gpar(fontsize = 10))\n        },\n        show_row_dend = F, \n        show_row_names = F)\n\npdf(\"Results/ClustersDistances/HeatmapZeorOne.pdf\",width = 6,height = 5)\nplot(HeatmapZeorOne)\ndev.off()\n\npng \n  2 \n\nplot(HeatmapZeorOne)\n\n\n\n\nThe distances are very similar with the Zero One a little lower as values…\n\ndistance.df.Lambda.Plot &lt;- rownames_to_column(as.data.frame(distance.df.Lambda),\n                                              var = \"Cl.1\")\ndistance.df.Lambda.Plot &lt;-pivot_longer(distance.df.Lambda.Plot,\n                                       cols = !Cl.1,\n                                       names_to = \"Cl.2\", \n                                       values_to = \"Lambda.Dist\")\n\ndistance.df.ZeroOne.Plot &lt;- rownames_to_column(as.data.frame(distance.df.ZeroOne),\n                                              var = \"Cl.1\")\ndistance.df.ZeroOne.Plot &lt;-pivot_longer(distance.df.ZeroOne.Plot,\n                                       cols = !Cl.1,\n                                       names_to = \"Cl.2\", \n                                       values_to = \"ZeroOne.Dist\")\n\ndistance.df.Tot &lt;- merge(distance.df.ZeroOne.Plot,distance.df.Lambda.Plot,by= c(\"Cl.1\",\"Cl.2\"),all=T)\n\nggplot(as.data.frame(distance.df.Tot),aes(x=ZeroOne.Dist, y=Lambda.Dist))+geom_point()\n\n\n\n\nSo for what we are using it is the same.\nThe key information is that we can define couple of, in one case, triplets of very near clusters:\n\nCl510e13.5 and Cl510e15.0\nCl516e17.5 and Cl505e17.5\nCl509e15.0 and Cl508e15.0 which are also similar to Cl432e13.5 and Cl432e15.0\nCl432e13.5 and Cl432e15.0\nCl437e13.5 and Cl437e15.0\nCl428e15.0, Cl434e15.0 and Cl434e13.5\n\nBased on these distances we can consider three thresholds (with number of cluster pair):\n\nless than 7 (first quartile)\n\nsum(distance.df.ZeroOne &lt; 7.1 & distance.df.ZeroOne &gt; 0)/2\n\n[1] 19\n\n\nbetween 9 and 11 (around median)\n\nsum(distance.df.ZeroOne &gt; 9 & distance.df.ZeroOne &lt; 11)/2\n\n[1] 20\n\n\nmore than 13 (3rd quartile)\n\nsum(distance.df.ZeroOne &gt; 13)/2\n\n[1] 32\n\n\n\n\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ComplexHeatmap_2.20.0 lubridate_1.9.3       forcats_1.0.0        \n [4] dplyr_1.1.4           purrr_1.0.2           readr_2.1.5          \n [7] tidyr_1.3.1           tibble_3.2.1          ggplot2_3.5.1        \n[10] tidyverse_2.0.0       stringr_1.5.1         COTAN_2.5.2          \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.0            \n  [3] later_1.3.2               polyclip_1.10-6          \n  [5] fastDummies_1.7.3         lifecycle_1.0.4          \n  [7] doParallel_1.0.17         globals_0.16.3           \n  [9] lattice_0.22-6            MASS_7.3-60.2            \n [11] dendextend_1.17.1         magrittr_2.0.3           \n [13] plotly_4.10.4             rmarkdown_2.27           \n [15] yaml_2.3.8                httpuv_1.6.15            \n [17] Seurat_5.1.0              sctransform_0.4.1        \n [19] spam_2.10-0               askpass_1.2.0            \n [21] sp_2.1-4                  spatstat.sparse_3.0-3    \n [23] reticulate_1.37.0         cowplot_1.1.3            \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] abind_1.4-5               zlibbioc_1.50.0          \n [29] Rtsne_0.17                BiocGenerics_0.50.0      \n [31] circlize_0.4.16           IRanges_2.38.0           \n [33] S4Vectors_0.42.0          ggrepel_0.9.5            \n [35] irlba_2.3.5.1             listenv_0.9.1            \n [37] spatstat.utils_3.0-4      umap_0.2.10.0            \n [39] goftest_1.2-3             RSpectra_0.16-1          \n [41] spatstat.random_3.2-3     dqrng_0.4.0              \n [43] fitdistrplus_1.1-11       parallelly_1.37.1        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] tidyselect_1.2.1          shape_1.4.6.1            \n [51] farver_2.1.2              ScaledMatrix_1.12.0      \n [53] viridis_0.6.5             matrixStats_1.3.0        \n [55] stats4_4.4.0              spatstat.explore_3.2-7   \n [57] jsonlite_1.8.8            GetoptLong_1.0.5         \n [59] progressr_0.14.0          ggridges_0.5.6           \n [61] survival_3.6-4            iterators_1.0.14         \n [63] foreach_1.5.2             tools_4.4.0              \n [65] ica_1.0-3                 Rcpp_1.0.12              \n [67] glue_1.7.0                gridExtra_2.3            \n [69] SparseArray_1.4.5         xfun_0.44                \n [71] MatrixGenerics_1.16.0     ggthemes_5.1.0           \n [73] withr_3.0.0               fastmap_1.2.0            \n [75] fansi_1.0.6               openssl_2.2.0            \n [77] digest_0.6.35             rsvd_1.0.5               \n [79] timechange_0.3.0          parallelDist_0.2.6       \n [81] R6_2.5.1                  mime_0.12                \n [83] colorspace_2.1-0          Cairo_1.6-2              \n [85] scattermore_1.2           tensor_1.5               \n [87] spatstat.data_3.0-4       utf8_1.2.4               \n [89] generics_0.1.3            data.table_1.15.4        \n [91] httr_1.4.7                htmlwidgets_1.6.4        \n [93] S4Arrays_1.4.1            uwot_0.2.2               \n [95] pkgconfig_2.0.3           gtable_0.3.5             \n [97] lmtest_0.9-40             XVector_0.44.0           \n [99] htmltools_0.5.8.1         dotCall64_1.1-1          \n[101] clue_0.3-65               SeuratObject_5.0.2       \n[103] scales_1.3.0              png_0.1-8                \n[105] knitr_1.46                rstudioapi_0.16.0        \n[107] tzdb_0.4.0                reshape2_1.4.4           \n[109] rjson_0.2.21              nlme_3.1-164             \n[111] zoo_1.8-12                GlobalOptions_0.1.2      \n[113] KernSmooth_2.23-24        parallel_4.4.0           \n[115] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[117] pillar_1.9.0              vctrs_0.6.5              \n[119] RANN_2.6.1                promises_1.3.0           \n[121] BiocSingular_1.20.0       beachmat_2.20.0          \n[123] xtable_1.8-4              cluster_2.1.6            \n[125] evaluate_0.23             zeallot_0.1.0            \n[127] cli_3.6.2                 compiler_4.4.0           \n[129] rlang_1.1.3               crayon_1.5.2             \n[131] future.apply_1.11.2       labeling_0.4.3           \n[133] plyr_1.8.9                stringi_1.8.4            \n[135] viridisLite_0.4.2         deldir_2.0-4             \n[137] BiocParallel_1.38.0       assertthat_0.2.1         \n[139] munsell_0.5.1             lazyeval_0.2.2           \n[141] spatstat.geom_3.2-9       PCAtools_2.16.0          \n[143] Matrix_1.7-0              RcppHNSW_0.6.0           \n[145] hms_1.1.3                 patchwork_1.2.0          \n[147] sparseMatrixStats_1.16.0  future_1.33.2            \n[149] shiny_1.8.1.1             ROCR_1.0-11              \n[151] Rfast_2.1.0               igraph_2.0.3             \n[153] RcppParallel_5.1.7"
  },
  {
    "objectID": "Mouse_Cortex_E14.5.html",
    "href": "Mouse_Cortex_E14.5.html",
    "title": "E14.5 Mouse Cortex Loo 2019",
    "section": "",
    "text": "options(parallelly.fork.enable = TRUE)\nlibrary(COTAN)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(factoextra)\nlibrary(Rtsne)\nlibrary(qpdf)\nlibrary(stringr)\ne14_dge = read.table(\"../COTAN_small_paper/data/MouseCortex/E14_combined_matrix.txt.gz\",header=T,sep=\"\\t\",row.names=1)\n\nprint(dim(e14_dge))\n\n[1] 21313 11069\noutDir &lt;- \"Data/MouseCortex/\"\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"Dataset.log\"))\ncond &lt;- \"MouseCortex_E14.5\"\nobj &lt;- COTAN(raw = e14_dge)\nobj &lt;- initializeMetaDataset(obj,\n                             GEO = \"GSE123335\",\n                             sequencingMethod = \"Drop_seq\",\n                             sampleCondition = cond)\nrm(e14_dge)\nECDPlot(obj, yCut = 400L)\ncellSizePlot(obj,splitPattern = \"_\",numCol = 1)\ngenesSizePlot(obj,splitPattern = \"_\",numCol = 1)\nmit &lt;- mitochondrialPercentagePlot(obj, genePrefix = \"^mt-\",splitPattern = \"_\",numCol = 1)\nmit[[\"plot\"]]\nTo drop cells by cell library size:\ncells_to_rem &lt;- getCells(obj)[getCellsSize(obj) &gt; 15000]\nobj &lt;- dropGenesCells(obj, cells = cells_to_rem)\ncellSizePlot(obj,splitPattern = \"_\",numCol = 1)\ngenesSizePlot(obj,splitPattern = \"_\",numCol = 1)\nTo drop cells by mitochondrial percentage:\nto_rem &lt;- mit[[\"sizes\"]][[\"mit.percentage\"]] &gt; 7.5\ncells_to_rem &lt;- rownames(mit[[\"sizes\"]])[to_rem]\nobj &lt;- dropGenesCells(obj, cells = cells_to_rem)\n\nmit &lt;- mitochondrialPercentagePlot(obj, genePrefix = \"^mt-\",splitPattern = \"_\",numCol = 1)\n\nmit[[\"plot\"]]\ncellSizePlot(obj,splitPattern = \"_\",numCol = 1)\nobj &lt;- clean(obj)\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoom) %&lt;-% cleanPlots(obj)\n\npcaCellsPlot\ngenesPlot\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\nobj &lt;- dropGenesCells(obj, cells = cells_to_rem)\nobj &lt;- clean(obj)\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoom) %&lt;-% cleanPlots(obj)\n\npcaCellsPlot\ngenesPlot\nplot(nuPlot)\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(obj)), \"n\" = seq_along(getNu(obj)))\nyset &lt;- 0.18 # the threshold to remove low UDE cells\nplot.ude &lt;- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 3000) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = yset, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 1000L, y = 0.25,\n                     label = paste0(\"to remove cells with nu &lt; \", yset),\n                     color = \"darkred\", size = 4.5)\n\nplot.ude\nobj &lt;- addElementToMetaDataset(obj, \"Threshold low UDE cells:\", yset)\n\ncells_to_rem &lt;- rownames(nuDf)[nuDf[[\"nu\"]] &lt; yset]\nobj &lt;- dropGenesCells(obj, cells = cells_to_rem)\nobj &lt;- clean(obj)\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoom) %&lt;-% cleanPlots(obj)\n\npcaCellsPlot\ngenesPlot\nUDEPlot\nnuPlot\nUDEPlot$data$Sample &lt;- str_split(rownames(UDEPlot$data),pattern = \"_\",simplify = T)[,1]\n\nggplot(UDEPlot$data, aes(PC1,PC2,color = Sample)) + geom_point(size = 0.5, alpha=0.7)\nggplot(UDEPlot$data, aes(PC2,PC3,color = Sample)) + geom_point(size = 0.5, alpha=0.7)\nggplot(UDEPlot$data, aes(PC2,PC5,color = Sample)) + geom_point(size = 0.5, alpha=0.7)\nggplot(UDEPlot$data, aes(PC2,PC5,color = groups)) + geom_point(size = 0.5, alpha=0.7)"
  },
  {
    "objectID": "Mouse_Cortex_E14.5.html#cotan-analysis",
    "href": "Mouse_Cortex_E14.5.html#cotan-analysis",
    "title": "E14.5 Mouse Cortex Loo 2019",
    "section": "COTAN analysis",
    "text": "COTAN analysis\nIn this part, all the contingency tables are computed and used to get the statistics.\n\nobj &lt;- estimateDispersionBisection(obj, cores = 15L)\n\nCOEX evaluation and storing\n\nobj &lt;- calculateCoex(obj)\n\n\n# saving the structure\nsaveRDS(obj, file = file.path(outDir, paste0(cond, \".cotan.RDS\")))\n\n\nobj &lt;- readRDS(file = file.path(outDir, paste0(cond, \".cotan.RDS\")))\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.5.0     qpdf_1.3.2        Rtsne_0.17        factoextra_1.0.7 \n[5] ggplot2_3.5.0     data.table_1.15.0 zeallot_0.1.0     COTAN_2.5.0      \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               tibble_3.2.1             \n  [5] polyclip_1.10-4           fastDummies_1.7.3        \n  [7] lifecycle_1.0.3           doParallel_1.0.17        \n  [9] globals_0.16.2            lattice_0.22-5           \n [11] MASS_7.3-60               dendextend_1.17.1        \n [13] magrittr_2.0.3            plotly_4.10.2            \n [15] rmarkdown_2.24            yaml_2.3.7               \n [17] httpuv_1.6.11             Seurat_5.0.0             \n [19] sctransform_0.4.1         spam_2.10-0              \n [21] askpass_1.2.0             sp_2.1-1                 \n [23] spatstat.sparse_3.0-2     reticulate_1.36.1        \n [25] cowplot_1.1.1             pbapply_1.7-2            \n [27] RColorBrewer_1.1-3        abind_1.4-5              \n [29] purrr_1.0.1               BiocGenerics_0.46.0      \n [31] circlize_0.4.15           IRanges_2.34.1           \n [33] S4Vectors_0.38.1          ggrepel_0.9.5            \n [35] irlba_2.3.5.1             listenv_0.9.0            \n [37] spatstat.utils_3.0-3      umap_0.2.10.0            \n [39] goftest_1.2-3             RSpectra_0.16-1          \n [41] spatstat.random_3.2-1     dqrng_0.3.0              \n [43] fitdistrplus_1.1-11       parallelly_1.37.1        \n [45] DelayedMatrixStats_1.22.5 leiden_0.4.3             \n [47] codetools_0.2-19          DelayedArray_0.26.7      \n [49] tidyselect_1.2.0          shape_1.4.6              \n [51] farver_2.1.1              ScaledMatrix_1.8.1       \n [53] viridis_0.6.4             matrixStats_1.2.0        \n [55] stats4_4.3.2              spatstat.explore_3.2-1   \n [57] jsonlite_1.8.7            GetoptLong_1.0.5         \n [59] ellipsis_0.3.2            progressr_0.14.0         \n [61] ggridges_0.5.4            survival_3.5-8           \n [63] iterators_1.0.14          foreach_1.5.2            \n [65] tools_4.3.2               ica_1.0-3                \n [67] Rcpp_1.0.11               glue_1.7.0               \n [69] gridExtra_2.3             xfun_0.39                \n [71] MatrixGenerics_1.12.3     ggthemes_5.1.0           \n [73] dplyr_1.1.2               withr_3.0.0              \n [75] fastmap_1.1.1             fansi_1.0.4              \n [77] openssl_2.1.0             digest_0.6.33            \n [79] rsvd_1.0.5                parallelDist_0.2.6       \n [81] R6_2.5.1                  mime_0.12                \n [83] colorspace_2.1-0          scattermore_1.2          \n [85] tensor_1.5                spatstat.data_3.0-1      \n [87] utf8_1.2.3                tidyr_1.3.0              \n [89] generics_0.1.3            httr_1.4.6               \n [91] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [93] uwot_0.1.16               pkgconfig_2.0.3          \n [95] gtable_0.3.3              ComplexHeatmap_2.16.0    \n [97] lmtest_0.9-40             htmltools_0.5.8          \n [99] dotCall64_1.1-0           clue_0.3-64              \n[101] SeuratObject_5.0.0        scales_1.3.0             \n[103] png_0.1-8                 knitr_1.43               \n[105] rstudioapi_0.15.0         reshape2_1.4.4           \n[107] rjson_0.2.21              nlme_3.1-163             \n[109] zoo_1.8-12                GlobalOptions_0.1.2      \n[111] KernSmooth_2.23-22        parallel_4.3.2           \n[113] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[115] pillar_1.9.0              grid_4.3.2               \n[117] vctrs_0.6.3               RANN_2.6.1               \n[119] promises_1.2.0.1          BiocSingular_1.16.0      \n[121] beachmat_2.16.0           xtable_1.8-4             \n[123] cluster_2.1.6             evaluate_0.21            \n[125] cli_3.6.1                 compiler_4.3.2           \n[127] rlang_1.1.1               crayon_1.5.2             \n[129] future.apply_1.11.0       labeling_0.4.2           \n[131] plyr_1.8.8                stringi_1.8.1            \n[133] viridisLite_0.4.2         deldir_2.0-2             \n[135] BiocParallel_1.34.2       assertthat_0.2.1         \n[137] munsell_0.5.0             lazyeval_0.2.2           \n[139] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[141] Matrix_1.6-3              RcppHNSW_0.6.0           \n[143] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[145] future_1.33.0             shiny_1.8.0              \n[147] ROCR_1.0-11               Rfast_2.1.0              \n[149] igraph_2.0.3              RcppParallel_5.1.7"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html",
    "href": "GDI_Increment_From_Mixing.html",
    "title": "GDI Increment From Mixing",
    "section": "",
    "text": "library(assertthat)\nlibrary(rlang)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(parallelDist)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(ggh4x)\nlibrary(gridExtra)\n\n#options(parallelly.fork.enable = TRUE)\n\ninDir &lt;- file.path(\"Results\")\n\n#setLoggingLevel(2)\n#setLoggingFile(file.path(inDir, \"MixingClustersGDI_ForebrainDorsal.log\"))\n\noutDir &lt;- file.path(inDir, \"GDI_Sensitivity\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html#preamble",
    "href": "GDI_Increment_From_Mixing.html#preamble",
    "title": "GDI Increment From Mixing",
    "section": "",
    "text": "library(assertthat)\nlibrary(rlang)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(parallelDist)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(ggh4x)\nlibrary(gridExtra)\n\n#options(parallelly.fork.enable = TRUE)\n\ninDir &lt;- file.path(\"Results\")\n\n#setLoggingLevel(2)\n#setLoggingFile(file.path(inDir, \"MixingClustersGDI_ForebrainDorsal.log\"))\n\noutDir &lt;- file.path(inDir, \"GDI_Sensitivity\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html#load-calculated-data-for-analysis",
    "href": "GDI_Increment_From_Mixing.html#load-calculated-data-for-analysis",
    "title": "GDI Increment From Mixing",
    "section": "Load calculated data for analysis",
    "text": "Load calculated data for analysis\n\nresMix05 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_05%_Mixing.RDS\")))\nresMix10 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_10%_Mixing.RDS\")))\nresMix20 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_20%_Mixing.RDS\")))\nresMix40 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_40%_Mixing.RDS\")))\nresMix80 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_80%_Mixing.RDS\")))\n\n# create an aligned baseline\nresMix00 &lt;- resMix05\nresMix00[[\"MixingFraction\"]] &lt;- 0.0\nresMix00[[\"GDI\"]] &lt;- resMix00[[\"GDI\"]] - resMix00[[\"GDIIncrement\"]]\nresMix00[[\"GDIIncrement\"]] &lt;- 0.0"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html#recall-cluster-distance-and-add-it-to-the-results",
    "href": "GDI_Increment_From_Mixing.html#recall-cluster-distance-and-add-it-to-the-results",
    "title": "GDI Increment From Mixing",
    "section": "Recall cluster distance and add it to the results",
    "text": "Recall cluster distance and add it to the results\n\nzeroOneAvg &lt;- readRDS(file.path(outDir, \"allZeroOne.RDS\"))\ndistZeroOne &lt;- as.matrix(parDist(t(zeroOneAvg), method = \"hellinger\", diag = TRUE, upper = TRUE))^2\n\ndistZeroOneLong &lt;- rownames_to_column(as.data.frame(distZeroOne), var = \"MainCluster\")\ndistZeroOneLong &lt;-pivot_longer(distZeroOneLong,\n                               cols = !MainCluster,\n                               names_to = \"OtherCluster\", \n                               values_to = \"Distance\")\n\ndistZeroOneLong &lt;- as.data.frame(distZeroOneLong[distZeroOneLong[[\"Distance\"]] != 0.0, ])\n\nassert_that(identical(distZeroOneLong[, 1:2], resMix20[, 1:2]))\n\n[1] TRUE\n\nperm &lt;- order(distZeroOneLong[[\"Distance\"]])\n\n\n# Scatter plot of the effective increment at 40% mixing [Y]\n# against estimated distance [X]\ndistDF &lt;- cbind(distZeroOneLong[, \"Distance\", drop = FALSE],\n                sqrt(distZeroOneLong[, \"Distance\", drop = FALSE]))\ncolnames(distDF) &lt;- c(\"Distance\", \"DistanceSqrt\")\n\nD2IPlot &lt;- ggplot(cbind(resMix40, distDF),\n                  aes(x=Distance, y=GDIIncrement)) +\n             geom_point() +\n             geom_smooth(method=lm, formula = y ~ x)+\n             ylab(\"Top GDI percentile Increment\") \n           # +  xlim(0, 1.5) + ylim(0, 1.5) + coord_fixed()\n\nplot(D2IPlot)"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html#merge-all-data-and-plot-it-using-the-distance-as-discriminant",
    "href": "GDI_Increment_From_Mixing.html#merge-all-data-and-plot-it-using-the-distance-as-discriminant",
    "title": "GDI Increment From Mixing",
    "section": "Merge all data and plot it using the distance as discriminant",
    "text": "Merge all data and plot it using the distance as discriminant\n\nallRes &lt;- rbind(resMix05[perm, ], resMix10[perm, ], resMix20[perm, ], resMix40[perm, ], resMix80[perm, ])\nallRes &lt;- cbind(allRes, \"Distance\" = rep(distZeroOneLong[[\"Distance\"]][perm], 5))\nrownames(allRes) &lt;- NULL\nallRes &lt;- cbind(allRes, \"ClusterPair\" = rep.int(c(1:210),5))\n\n\nallResWithBase &lt;- cbind(resMix00[perm, ], \"Distance\" = distZeroOneLong[[\"Distance\"]][perm])\nrownames(allResWithBase) &lt;- NULL\nallResWithBase &lt;- cbind(allResWithBase, \"ClusterPair\" = c(1:210))\nallResWithBase &lt;- rbind(allResWithBase, allRes)\n\nassert_that(identical(allRes[, 4], allResWithBase[211:1260, 4]))\n\n[1] TRUE\n\n\n\ndim(allRes)\n\n[1] 1050    7\n\n\n\nIScPlot &lt;- ggplot(allRes, aes(x=MixingFraction, y=GDIIncrement, color=Distance,)) +\n  geom_point() +\n  scale_color_continuous(type = \"viridis\") +\n  scale_x_log10()+\n             ylab(\"Top GDI percentile Increment\") \n\nplot(IScPlot)\n\n\n\nGScPlot &lt;- ggplot(allResWithBase, aes(x=MixingFraction, y=GDI, color=Distance,)) +\n  geom_point() +\n  scale_color_continuous(type = \"viridis\")+\n             ylab(\"Top GDI percentile\") \n\nplot(GScPlot)\n\n\n\n\n\nreOrder &lt;- function(df, numBlocks) {\n  blockLength &lt;- nrow(df) / numBlocks\n  permut &lt;- rep(1:blockLength, each = numBlocks) +\n              rep(seq(0, nrow(df) - 1, by = blockLength), times = numBlocks)\n  return(df[permut, ])\n}\n\nallRes2 &lt;- reOrder(allRes, 5)\nallResWithBase2 &lt;- reOrder(allResWithBase, 6)\n\n\nrng &lt;- c(1,210)\n#rng &lt;- c(1,42)\n#rng &lt;- c(43,84)\n#rng &lt;- c(85,126)\n#rng &lt;- c(127,168)\n#rng &lt;- c(169,210)\n\nILinesPLot &lt;- ggplot(allRes2[allRes2[[\"ClusterPair\"]] %between% rng, ],\n                     aes(x = MixingFraction, y = GDIIncrement,\n                         color = (ClusterPair - 1) %/% 35 + 0.5)) + \n  geom_path(aes(group = ClusterPair)) +\n  theme(legend.position = \"none\") +\n  #scale_x_log10() + \n  scale_colour_stepsn(colours = hcl.colors(6, palette = \"Dark 2\")[6:1])+\n             ylab(\"Top GDI percentile Increment\") \n\nplot(ILinesPLot)\n\n\n\nGLinesPLot &lt;- ggplot(allResWithBase2[allResWithBase2[[\"ClusterPair\"]] %between% rng, ],\n                     aes(x = MixingFraction, y = GDI,\n                         color = (ClusterPair - 1) %/% 35 + 0.5)) + \n  geom_path(aes(group = ClusterPair)) +\n  theme(legend.position = \"none\") +\n  #scale_x_log10() + \n  scale_colour_stepsn(colours = hcl.colors(6, palette = \"Dark 2\")[6:1]) +\n             ylab(\"Top GDI percentile\") \n#  geom_line(data = data.frame(cbind(MixingFraction = c(0,0.8), GDI = c(1.4,1.4))),\n#            aes(x = MixingFraction, y = GDI))\n\n\nplot(GLinesPLot)\n\n\n\n\n\nmg &lt;- function(mixings) {\n  res &lt;- mixings\n  res[res !=0 ] &lt;- ceiling(log2(round(res[res !=0 ] * 40)))\n  return(res)\n}\n\nrng &lt;- c(1,35)\n#rng &lt;- c(43,84)\n#rng &lt;- c(85,126)\n#rng &lt;- c(127,168)\n#rng &lt;- c(169,210)\n\nallRes$Group &lt;- factor((allRes$ClusterPair - 1) %/% 35 + 1)\nlevels(allRes$Group) &lt;- paste0(\"Distance bin \",c(1:6))\n\nallRes$discreteMixing &lt;- factor(mg(allRes$MixingFraction))\nlevels(allRes$discreteMixing) &lt;- c(\"5%\",\"10%\",\"20%\",\"40%\",\"80%\")\n\ndesign &lt;- \"\n  ABC\n  DEF\n  DEF\n\"\n\nfirst.part &lt;- c(\"Distance bin 1\", \"Distance bin 2\", \"Distance bin 3\")\nsecond.part &lt;-c(\"Distance bin 4\", \"Distance bin 5\", \"Distance bin 6\") \n\nIBoxPlotA &lt;- ggplot(allRes[allRes$Group %in% first.part,], aes(x=discreteMixing, \n                       y=GDIIncrement, \n                       fill=Group,\n                       group = discreteMixing)) +\n  geom_boxplot()+\n  geom_jitter(width=0.25, alpha=0.5) +\n  scale_fill_manual(values = c(\"#0B5345\",\"#117A65\",\"#16A085\")) +\n  facet_grid2(cols = vars(Group))+\n  theme_light()+\n  theme(legend.position = \"none\",axis.title.x=element_blank(),\n        axis.title.y =element_blank()) #+\n             #ylab(\"Top GDI percentile Increment\") \n\nIBoxPlotB &lt;- ggplot(allRes[allRes$Group %in% second.part,], aes(x=discreteMixing, \n                       y=GDIIncrement, \n                       fill=Group,\n                       group = discreteMixing)) +\n  geom_boxplot()+\n  geom_jitter(width=0.25, alpha=0.5) +\n  scale_fill_manual(values = c(\"#1ABC9C\",\"#48C9B0\",\"#A3E4D7\")) +\n  facet_grid2(cols = vars(Group))+\n  theme_light()+\n  theme(legend.position = \"none\",axis.title.x=element_blank(),\n        axis.title.y =element_blank()) \n\nfinal.plot1 &lt;- grid.arrange(IBoxPlotA,IBoxPlotB,ncol = 2, nrow = 3,\n             layout_matrix = rbind(c(1,1), c(2,2), c(2,2)))\n\n\n\npdf(\"Results/GDI_Sensitivity/GDI_increment.pdf\",width = 7, height = 7)\nplot(final.plot1)\ndev.off()\n\npng \n  2 \n\nplot(final.plot1)\n\n\n\nallResWithBase$Group &lt;- factor((allResWithBase$ClusterPair - 1) %/% 35 + 1)\nlevels(allResWithBase$Group) &lt;- paste0(\"Distance bin \",c(1:6))\n\n\nallResWithBase$discreteMixing &lt;- factor(mg(allResWithBase$MixingFraction))\nlevels(allResWithBase$discreteMixing) &lt;- c(\"0%\",\"5%\",\"10%\",\"20%\",\"40%\",\"80%\")\n\n\nGBoxPlotA &lt;- ggplot(allResWithBase[allResWithBase$Group %in% first.part,], aes(x=discreteMixing, y=GDI, fill=Group,\n                              group = discreteMixing))+\n  geom_boxplot()+\n  geom_jitter(width=0.25, alpha=0.5) +\n  scale_fill_manual(values = c(\"#0B5345\",\"#117A65\",\"#16A085\")) +\n  facet_grid2(cols = vars(Group))+\n  theme_light()+\n  theme(legend.position = \"none\",axis.title.x=element_blank(),\n        axis.title.y =element_blank()) #+\n             #ylab(\"Top GDI percentile Increment\") \n\nGBoxPlotB &lt;- ggplot(allResWithBase[allResWithBase$Group %in% second.part,], aes(x=discreteMixing, y=GDI, fill=Group,\n                              group = discreteMixing)) +\n  geom_boxplot()+\n  geom_jitter(width=0.25, alpha=0.5) +\n  scale_fill_manual(values = c(\"#1ABC9C\",\"#48C9B0\",\"#A3E4D7\")) +\n  facet_grid2(cols = vars(Group))+\n  theme_light()+\n  theme(legend.position = \"none\",axis.title.x=element_blank(),\n        axis.title.y =element_blank()) \n\nfinal.plot2 &lt;- grid.arrange(GBoxPlotA,GBoxPlotB,ncol = 2, nrow = 5,\n             layout_matrix = rbind(c(1,1),c(1,1),c(2,2), c(2,2), c(2,2)))\n\n\n\npdf(\"Results/GDI_Sensitivity/GDI_TopPercentile.pdf\",width = 7, height = 7 )\nplot(final.plot2)\ndev.off()\n\npng \n  2 \n\nplot(final.plot2)"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html#load-calculated-data-about-multi-clusters-cases-for-analysis",
    "href": "GDI_Increment_From_Mixing.html#load-calculated-data-about-multi-clusters-cases-for-analysis",
    "title": "GDI Increment From Mixing",
    "section": "Load calculated data about multi clusters cases for analysis",
    "text": "Load calculated data about multi clusters cases for analysis\n\nresMix20_2 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_20%_Mixing_from_Pairs.RDS\")))\n\ndim(resMix20_2)\n\n[1] 150   8\n\n\n\nhead(resMix20_2)\n\n  MainCluster OtherCluster1 MixingFraction1 OtherCluster2 MixingFraction2\n1   E13.5:432     E13.5:187      0.14179104     E15.0:428      0.05970149\n2   E13.5:432     E13.5:184      0.08208955     E15.0:509      0.11940299\n3   E13.5:432     E13.5:437      0.05970149     E15.0:509      0.14365672\n4   E13.5:432     E15.0:428      0.13432836     E17.5:516      0.06716418\n5   E13.5:432     E15.0:432      0.09514925     E17.5:505      0.10820896\n6   E13.5:432     E13.5:184      0.11380597     E17.5:516      0.08768657\n       GDI GDIIncrement PredictedGDIIncrement\n1 2.807473   1.32277530            1.10291265\n2 1.850392   0.36569464            0.35314603\n3 1.574105   0.08940718            0.12012178\n4 1.620614   0.13591610            0.17472537\n5 1.520910   0.03621287            0.05547557\n6 1.956113   0.47141577            0.52537039"
  },
  {
    "objectID": "GDI_Increment_From_Mixing.html#compare-estimated-vs-real-gdi-increment",
    "href": "GDI_Increment_From_Mixing.html#compare-estimated-vs-real-gdi-increment",
    "title": "GDI Increment From Mixing",
    "section": "Compare estimated vs real GDI increment",
    "text": "Compare estimated vs real GDI increment\n\n# Scatter plot of the effective increment [Y] against estimated increment [X]\npg &lt;- ggplot(resMix20_2, aes(x=PredictedGDIIncrement, y=GDIIncrement)) +\n  geom_point() +\n  geom_smooth(method=lm, formula = y ~ x + 0) +\n  coord_fixed() +\n  xlim(0, 1.5) + ylim(0, 1.5)+\n             ylab(\"Top GDI percentile Increment\") \n  #scale_x_log10() + scale_y_log10() \n\npdf(\"Results/GDI_Sensitivity/Estimated_VS_RealGDIincrement.pdf\",width = 7, height = 7 )\nplot(pg)\ndev.off()\n\npng \n  2 \n\nplot(pg)\n\n\n\n\nThe plot shows that having the 20% extraneous cells in the mixture coming from multiple clusters does not affect significantly the sensitivity of the GDI to score cluster uniformity.\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] gridExtra_2.3      ggh4x_0.2.8        lubridate_1.9.3    forcats_1.0.0     \n [5] stringr_1.5.1      dplyr_1.1.4        purrr_1.0.2        readr_2.1.5       \n [9] tibble_3.2.1       tidyverse_2.0.0    tidyr_1.3.1        parallelDist_0.2.6\n[13] data.table_1.15.4  zeallot_0.1.0      ggplot2_3.5.1      scales_1.3.0      \n[17] rlang_1.1.3        assertthat_0.2.1  \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4         generics_0.1.3     lattice_0.22-6     stringi_1.8.4     \n [5] hms_1.1.3          digest_0.6.35      magrittr_2.0.3     evaluate_0.23     \n [9] grid_4.4.0         timechange_0.3.0   fastmap_1.2.0      Matrix_1.7-0      \n[13] jsonlite_1.8.8     mgcv_1.9-1         fansi_1.0.6        viridisLite_0.4.2 \n[17] cli_3.6.2          splines_4.4.0      munsell_0.5.1      withr_3.0.0       \n[21] yaml_2.3.8         tools_4.4.0        tzdb_0.4.0         colorspace_2.1-0  \n[25] vctrs_0.6.5        R6_2.5.1           lifecycle_1.0.4    htmlwidgets_1.6.4 \n[29] pkgconfig_2.0.3    RcppParallel_5.1.7 pillar_1.9.0       gtable_0.3.5      \n[33] glue_1.7.0         Rcpp_1.0.12        xfun_0.44          tidyselect_1.2.1  \n[37] rstudioapi_0.16.0  knitr_1.46         farver_2.1.2       nlme_3.1-164      \n[41] htmltools_0.5.8.1  labeling_0.4.3     rmarkdown_2.27     compiler_4.4.0"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "",
    "text": "library(assertthat)\nlibrary(rlang)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(COTAN)\nlibrary(parallelDist)\nlibrary(tibble)\nlibrary(tidyr)\n\noptions(parallelly.fork.enable = TRUE)\n\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\n\noutDir &lt;- file.path(\"Results/GDI_Sensitivity\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"MixingClustersGDI_ForebrainDorsal.log\"))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#preamble",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#preamble",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "",
    "text": "library(assertthat)\nlibrary(rlang)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(COTAN)\nlibrary(parallelDist)\nlibrary(tibble)\nlibrary(tidyr)\n\noptions(parallelly.fork.enable = TRUE)\n\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\n\noutDir &lt;- file.path(\"Results/GDI_Sensitivity\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"MixingClustersGDI_ForebrainDorsal.log\"))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#loading-all-cotan-objects",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#loading-all-cotan-objects",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Loading all COTAN Objects",
    "text": "Loading all COTAN Objects\n\nfb135Obj &lt;- readRDS(file = file.path(inDir, \"e13.5_ForebrainDorsal.cotan.RDS\"))\ngetMetadataElement(fb135Obj, datasetTags()[[\"cond\"]])\n\nfb150Obj &lt;- readRDS(file = file.path(inDir, \"e15.0_ForebrainDorsal.cotan.RDS\"))\ngetMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\n\nfb175Obj &lt;- readRDS(file = file.path(inDir, \"e17.5_ForebrainDorsal.cotan.RDS\"))\ngetMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#relevant-clusters-lists",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#relevant-clusters-lists",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Relevant clusters lists",
    "text": "Relevant clusters lists"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#merge-clusters-from-different-datasets",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#merge-clusters-from-different-datasets",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Merge clusters from different datasets",
    "text": "Merge clusters from different datasets\n\nallGenes &lt;- union(union(getGenes(fb135Obj), getGenes(fb150Obj)), getGenes(fb175Obj))\n\n# This function completes the raw data so that the genes list\n# matches the `allGenes` above\nfillGenes &lt;- function(m, prefixName) {\n  # find the missing genes in the given matrix m\n  missingGenes &lt;- !(allGenes %in% rownames(m))\n  # create a matrix with the right sizes for the missing genes\n  # and set their values all to zero\n  fillM &lt;- matrix(0, nrow = sum(missingGenes), ncol = ncol(m))\n  rownames(fillM) &lt;- allGenes[missingGenes]\n  # append the new matrix to the original and reorder the rows\n  # to match overall genes order\n  retM &lt;- rbind(m, fillM)\n  retM &lt;- retM[allGenes, ]\n  # assign unique identifiers to the columns, so that one can discriminate\n  # the source even after merging with other matrices\n  colnames(retM) &lt;- paste0(prefixName, \"_\", colnames(retM))\n  return(retM)\n}"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#create-all-raw-data-for-each-cluster-compatible-with-the-full-genes-list",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#create-all-raw-data-for-each-cluster-compatible-with-the-full-genes-list",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Create all raw data for each cluster compatible with the full genes’ list",
    "text": "Create all raw data for each cluster compatible with the full genes’ list\n\nallClustersRawData &lt;- list()\nfor (dsName in names(selected)) {\n  clList &lt;- toClustersList(getClusters(objSelector(dsName),\n                                       clName = \"original.clusters\"))\n  for (clName in selected[[dsName]]) {\n    fullName &lt;- paste0(dsName, \":\", clName)\n    fullRawData &lt;- fillGenes(getRawData(objSelector(dsName))[, clList[[clName]]],\n                             fullName)\n    allClustersRawData &lt;- append(allClustersRawData, list(fullRawData))\n    names(allClustersRawData)[length(allClustersRawData)] &lt;- fullName\n  }\n}\n\nassert_that(identical(rownames(allClustersRawData[[1]]), allGenes))\n\n# delete the COTAN objects\nrm(fb135Obj, fb150Obj, fb175Obj)"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#collect-size-and-gdi-for-all-selected-clusters-baseline-data",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#collect-size-and-gdi-for-all-selected-clusters-baseline-data",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Collect size and GDI for all selected clusters (baseline data)",
    "text": "Collect size and GDI for all selected clusters (baseline data)\n\nclDataFB135 &lt;- readRDS(file.path(inDir, \"e13.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\nclDataFB150 &lt;- readRDS(file.path(inDir, \"e15.0_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\nclDataFB175 &lt;- readRDS(file.path(inDir, \"e17.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n\ndf1 &lt;- clDataFB135[selected[[\"E13.5\"]], c(\"size\", \"X1stPercentile\"), drop = FALSE]\nrownames(df1) &lt;- paste0(\"E13.5:\", rownames(df1))\n\ndf2 &lt;- clDataFB150[selected[[\"E15.0\"]], c(\"size\", \"X1stPercentile\"), drop = FALSE]\nrownames(df2) &lt;- paste0(\"E15.0:\", rownames(df2))\n\ndf3 &lt;- clDataFB175[selected[[\"E17.5\"]], c(\"size\", \"X1stPercentile\"), drop = FALSE]\nrownames(df3) &lt;- paste0(\"E17.5:\", rownames(df3))\n\nbaselineGDI &lt;- rbind(df1, df2, df3)\ncolnames(baselineGDI) &lt;- c(\"size\", \"GDI\")\n\nrm(clDataFB135, clDataFB150, clDataFB175)\nrm(df1, df2, df3)\n\nsaveRDS(baselineGDI,\n        file = file.path(outDir, \"ForebrainDorsal_ClusterizationMixing_BaselineGDI.RDS\"))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#load-baseline-data",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#load-baseline-data",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Load baseline data",
    "text": "Load baseline data\n\nbaselineGDI &lt;- readRDS(file.path(outDir, \"ForebrainDorsal_ClusterizationMixing_BaselineGDI.RDS\"))\n\n# check good alignment of data\nassert_that(identical(rownames(baselineGDI), names(allClustersRawData)))\nassert_that(identical(baselineGDI[, \"size\"],\n                      vapply(allClustersRawData, ncol,\n                             FUN.VALUE = integer(1L), USE.NAMES = FALSE)))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#calculate-the-gdi-of-the-mixtures-of-clusters",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#calculate-the-gdi-of-the-mixtures-of-clusters",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Calculate the GDI of the mixtures of clusters",
    "text": "Calculate the GDI of the mixtures of clusters\n\nThis is to be run once per wanted mixing-fraction\n\n# small run\n# \nset.seed(137)\n\nmixingFraction &lt;- 0.80\nmixingStr &lt;- str_pad(scales::label_percent()(mixingFraction), 3, pad = \"0\")\n\nresults &lt;- data.frame()\n\nfor (mainName in rownames(baselineGDI)) {\n  mainSize &lt;- baselineGDI[mainName, \"size\"]\n  mainGDI  &lt;- baselineGDI[mainName, \"GDI\"]\n\n  for (clName in rownames(baselineGDI)) {\n    if (clName == mainName) next\n\n    logThis(paste(\"Mixing\", mainName, \"with extra\",\n                  mixingStr, \"cells from\", clName), logLevel = 1)\n\n    clSize &lt;- baselineGDI[clName, \"size\"]\n    actuallyMixedCells &lt;- min(ceiling(mixingFraction * mainSize), clSize)\n    actualFraction &lt;- actuallyMixedCells / mainSize\n    sampleRawData &lt;- allClustersRawData[[clName]][, sample(clSize, actuallyMixedCells)]\n    mergedRawData &lt;- cbind(allClustersRawData[[mainName]], sampleRawData)\n    rm(sampleRawData)\n\n    # Calculate the merged COEX\n    cond &lt;- paste0(mainName, \"|\", mixingStr, \"|\", clName)\n    mergedObj &lt;- automaticCOTANObjectCreation(raw = mergedRawData,\n                                              GEO = \"MergedClusters\",\n                                              sequencingMethod = \"10X\",\n                                              sampleCondition = cond,\n                                              calcCoex = TRUE, cores = 10L,\n                                              saveObj = FALSE, outDir = outDir)\n    rm(mergedRawData)\n\n    # Extract the GDI quantile\n    mergedGDIData &lt;- calculateGDI(mergedObj)\n    rm(mergedObj)\n\n    gdi &lt;- mergedGDIData[[\"GDI\"]]\n    names(gdi) &lt;- rownames(mergedGDIData)\n    rm(mergedGDIData)\n\n    gdi &lt;- sort(gdi, decreasing = TRUE)\n    lastPercentile &lt;- quantile(gdi, probs = 0.99)\n    rm(gdi)\n\n    results &lt;- rbind(results,\n                     data.frame(\"MainCluster\" = mainName, \"OtherCluster\" = clName,\n                                \"MixingFraction\" = actualFraction, \"GDI\" = lastPercentile,\n                                \"GDIIncrement\" = lastPercentile - mainGDI))\n\n    logThis(paste(\"Mixing\", mainName, \"with\", clName,\n                  \"accomplished with GDI\", lastPercentile), logLevel = 1)\n  }\n}\n\nrownames(results) &lt;- NULL\n\nsaveRDS(results, file.path(outDir, paste0(\"GDI_with_\", mixingStr, \"_Mixing.RDS\")))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#load-calculated-data-for-analysis",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#load-calculated-data-for-analysis",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Load calculated data for analysis",
    "text": "Load calculated data for analysis"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#merge-all-results-and-calculate-the-fitting-regression-for-each-cluster-pair",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#merge-all-results-and-calculate-the-fitting-regression-for-each-cluster-pair",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Merge all results and calculate the fitting regression for each cluster pair",
    "text": "Merge all results and calculate the fitting regression for each cluster pair"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#recall-cluster-distance-and-add-it-to-the-results",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#recall-cluster-distance-and-add-it-to-the-results",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Recall cluster distance and add it to the results",
    "text": "Recall cluster distance and add it to the results\n\n#zeroOneAvg &lt;- readRDS(file.path(inDir, \"ClustersDistances\", \"allZeroOne.RDS\"))\nzeroOneAvg &lt;- readRDS(file.path(outDir, \"distanceZeroOne.RDS\"))\ndistZeroOne &lt;- as.matrix(parDist(t(zeroOneAvg), method = \"hellinger\", diag = TRUE, upper = TRUE))^2\n\ndistZeroOneLong &lt;- rownames_to_column(as.data.frame(distZeroOne), var = \"MainCluster\")\ndistZeroOneLong &lt;-pivot_longer(distZeroOneLong,\n                               cols = !MainCluster,\n                               names_to = \"OtherCluster\", \n                               values_to = \"Distance\")\n\ndistZeroOneLong &lt;- as.data.frame(distZeroOneLong[distZeroOneLong[[\"Distance\"]] != 0.0, ])\n\n#assert_that(identical(distZeroOneLong[, 1:2], resMix20[, 1:2]))\n\nperm &lt;- order(distZeroOneLong[[\"Distance\"]])\n\n\n# Scatter plot of the effective increment [Y] against estimated increment [X]\ndistDF &lt;- cbind(distZeroOneLong[, \"Distance\", drop = FALSE],\n                sqrt(distZeroOneLong[, \"Distance\", drop = FALSE]))\ncolnames(distDF) &lt;- c(\"Distance\", \"DistanceSqrt\")\n\nD2IPlot &lt;- ggplot(cbind(resMix40, distDF),\n                  aes(x=Distance, y=GDIIncrement)) +\n             geom_point() +\n             geom_smooth(method=lm, formula = y ~ x) \n           # +  xlim(0, 1.5) + ylim(0, 1.5) + coord_fixed()\n\nplot(D2IPlot)"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#merge-all-data-and-plot-it-using-a-priory-squared-distance-as-discriminant",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#merge-all-data-and-plot-it-using-a-priory-squared-distance-as-discriminant",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Merge all data and plot it using a-priory (squared) distance as discriminant",
    "text": "Merge all data and plot it using a-priory (squared) distance as discriminant\n\nallRes &lt;- rbind(resMix05[perm, ], resMix10[perm, ], resMix20[perm, ], resMix40[perm, ], resMix80[perm, ])\nrownames(allRes) &lt;- NULL\nallRes &lt;- cbind(allRes, \"ClusterPair\" = rep.int(c(1:210),5))\nallRes &lt;- cbind(allRes, \"Distance\" = rep(distZeroOneLong[[\"Distance\"]][perm], 5))\n\n\nmg &lt;- function(mixing) { ceiling(log2(round(mixing*40))) }\nIScPlot &lt;- ggplot(allRes, aes(x=mg(MixingFraction), y=GDIIncrement, color=Distance,\n                              group = mg(MixingFraction))) +\n#  geom_point() +\n  geom_boxplot()\n#  scale_color_continuous(type = \"viridis\") +\n# geom_point(aes(size=log10(GDIIncrement+10))) +\n#  scale_x_log10()\n\nplot(IScPlot)\n\n\n\n\n\nperm2 &lt;- rep(1:210, each = 5) + rep(seq(1, 5 * 210, by = 210), times = 5) - 1\nallRes2 &lt;- allRes[perm2, ]\n# c(1,44) - c(84,127) - c(167,210)\nILinesPLot &lt;- ggplot(allRes2[allRes2[[\"ClusterPair\"]] %between% c(1,210), ],\n                     aes(x = MixingFraction, y = GDIIncrement,\n                         color = (ClusterPair - 1) %/% 42 + 0.5)) + \n  geom_path(aes(group = ClusterPair)) +\n  theme(legend.position = \"none\") +\n  #scale_x_log10() + \n  scale_colour_stepsn(colours = hcl.colors(5, palette = \"Dark 2\")[5:1])\n\n\nplot(ILinesPLot)"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#calculate-the-gdi-of-the-mixtures-of-three-clusters",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#calculate-the-gdi-of-the-mixtures-of-three-clusters",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Calculate the GDI of the mixtures of three clusters",
    "text": "Calculate the GDI of the mixtures of three clusters\n\nthe total mixture is 20%\n\n# small run\n# \nset.seed(137)\n\nnumPairsPerCluster &lt;- 10\n\nmixingFraction &lt;- 0.20\n\nresults &lt;- data.frame()\n\nfor (mainName in rownames(baselineGDI)) {\n  mainSize &lt;- baselineGDI[mainName, \"size\"]\n  mainGDI  &lt;- baselineGDI[mainName, \"GDI\"]\n\n  executedPairs &lt;- NULL\n  \n  for (i in c(1:numPairsPerCluster)) {\n    repeat {\n      clPair &lt;- rownames(baselineGDI)[sample(nrow(baselineGDI), 2)]\n      clPair &lt;- clPair[order(clPair)]\n      clPairName &lt;- paste0(clPair[[1L]], \":\", clPair[[2L]])\n      if (!(mainName %in% clPair) && !(clPairName %in% executedPairs)) break\n    }\n\n    logThis(paste(\"Mixing\", mainName, \"with extra 20% cells from\",\n                  clPair[[1L]], \"and\", clPair[[2L]]), logLevel = 1)\n\n    mixingFraction1 &lt;- runif(1L, 0.25 * mixingFraction, 0.75 * mixingFraction)\n    mixingFraction2 &lt;- mixingFraction - mixingFraction1\n    \n    clSize1 &lt;- baselineGDI[clPair[[1L]], \"size\"]\n    clSize2 &lt;- baselineGDI[clPair[[2L]], \"size\"]\n    actuallyMixedCells1 &lt;- min(ceiling(mixingFraction1 * mainSize), clSize1)\n    actuallyMixedCells2 &lt;- min(ceiling(mixingFraction2 * mainSize), clSize2)\n    actualFraction1 &lt;- actuallyMixedCells1 / mainSize\n    actualFraction2 &lt;- actuallyMixedCells2 / mainSize\n    sampleRawData1 &lt;- allClustersRawData[[clPair[[1L]]]][, sample(clSize1, actuallyMixedCells1)]\n    sampleRawData2 &lt;- allClustersRawData[[clPair[[2L]]]][, sample(clSize2, actuallyMixedCells2)]\n    mergedRawData &lt;- cbind(allClustersRawData[[mainName]], sampleRawData1, sampleRawData2)\n    rm(sampleRawData1, sampleRawData2)\n\n    # Calculate the merged COEX\n    cond &lt;- paste0(mainName, \"|20%|\", clPairName)\n    mergedObj &lt;- automaticCOTANObjectCreation(raw = mergedRawData,\n                                              GEO = \"MergedClusters\",\n                                              sequencingMethod = \"10X\",\n                                              sampleCondition = cond,\n                                              calcCoex = TRUE, cores = 10L,\n                                              saveObj = FALSE, outDir = outDir)\n    rm(mergedRawData)\n\n    # Extract the GDI quantile\n    mergedGDIData &lt;- calculateGDI(mergedObj)\n    rm(mergedObj)\n\n    gdi &lt;- mergedGDIData[[\"GDI\"]]\n    names(gdi) &lt;- rownames(mergedGDIData)\n    rm(mergedGDIData)\n\n    gdi &lt;- sort(gdi, decreasing = TRUE)\n    lastPercentile &lt;- quantile(gdi, probs = 0.99)\n    rm(gdi)\n\n    results &lt;- rbind(results,\n                     data.frame(\"MainCluster\" = mainName,\n                                \"OtherCluster1\" = clPair[[1L]],\n                                \"MixingFraction1\" = actualFraction1,\n                                \"OtherCluster2\" = clPair[[2L]],\n                                \"MixingFraction2\" = actualFraction2,\n                                \"GDI\" = lastPercentile,\n                                \"GDIIncrement\" = lastPercentile - mainGDI))\n\n    logThis(paste(\"Mixing\", mainName, \"with\", clPairName,\n                  \"accomplished with GDI\", lastPercentile), logLevel = 1)\n  }\n}\n\nrownames(results) &lt;- NULL\n\nsaveRDS(results, file.path(outDir, paste0(\"GDI_with_20%_Mixing_from_Pairs.RDS\")))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#estimate-predicted-gdi-increment-using-resultts-from-two-clusters-mixings",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#estimate-predicted-gdi-increment-using-resultts-from-two-clusters-mixings",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Estimate predicted GDI increment using resultts from two-clusters mixings",
    "text": "Estimate predicted GDI increment using resultts from two-clusters mixings\n\nThe estimates assume GDI increment proportional to mixture\n\nresMix20_2 &lt;- readRDS(file.path(outDir, paste0(\"GDI_with_20%_Mixing_from_Pairs.RDS\")))\n\nresMix20_2 &lt;- cbind(resMix20_2, NA)\ncolnames(resMix20_2)[ncol(resMix20_2)] &lt;- \"PredictedGDIIncrement\"\n\nfor (r in c(1:nrow(resMix20_2))) {\n  mainName &lt;- resMix20_2[r, \"MainCluster\"]\n  \n  mainMatch20 &lt;- resMix20[resMix20[, \"MainCluster\"] == mainName, ]\n\n  pos1 &lt;- which(mainMatch20[, \"OtherCluster\"] == resMix20_2[r, \"OtherCluster1\"])\n  pos2 &lt;- which(mainMatch20[, \"OtherCluster\"] == resMix20_2[r, \"OtherCluster2\"])\n  \n  GDIIncr1 &lt;- mainMatch20[pos1, \"GDIIncrement\"]\n  GDIIncr2 &lt;- mainMatch20[pos2, \"GDIIncrement\"]\n\n  w1 &lt;- resMix20_2[r, \"MixingFraction1\"] / mainMatch20[pos1, \"MixingFraction\"]\n  w2 &lt;- resMix20_2[r, \"MixingFraction2\"] / mainMatch20[pos2, \"MixingFraction\"]\n  \n  predictedGDIIncr &lt;- (w1 * GDIIncr1 + w2 * GDIIncr2)\n\n  resMix20_2[r, \"PredictedGDIIncrement\"] &lt;- predictedGDIIncr\n}\n\nsaveRDS(resMix20_2, file.path(outDir, paste0(\"GDI_with_20%_Mixing_from_Pairs.RDS\")))"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#load-calculated-data-for-analysis-1",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#load-calculated-data-for-analysis-1",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Load calculated data for analysis",
    "text": "Load calculated data for analysis"
  },
  {
    "objectID": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#compare-estimated-vs-real-gdi-increment",
    "href": "ForebrainDorsal_MixingUniformClusters_ToEstimateGDISensitivity.html#compare-estimated-vs-real-gdi-increment",
    "title": "Mixing Uniform Clusters To Estimate GDI Sensitivity",
    "section": "Compare estimated vs real GDI increment",
    "text": "Compare estimated vs real GDI increment\n\n# Scatter plot of the effective increment [Y] against estimated increment [X]\npg &lt;- ggplot(resMix20_2, aes(x=PredictedGDIIncrement, y=GDIIncrement)) +\n  geom_point() +\n  geom_smooth(method=lm, formula = y ~ x + 0) +\n  coord_fixed() +\n  xlim(0, 1.5) + ylim(0, 1.5)\n  #scale_x_log10() + scale_y_log10() \n\nplot(pg)\n\n\n\n\nThe plot shows that having the 20% extraneous cells in the mixture coming from multiple clusters does not affect significantly the sensitivity of the GDI to score cluster uniformity.\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] tidyr_1.3.0        tibble_3.2.1       parallelDist_0.2.6 COTAN_2.3.0       \n [5] data.table_1.14.8  zeallot_0.1.0      ggplot2_3.4.2      scales_1.3.0      \n [9] rlang_1.1.1        assertthat_0.2.1  \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               polyclip_1.10-4          \n  [5] fastDummies_1.7.3         lifecycle_1.0.3          \n  [7] doParallel_1.0.17         globals_0.16.2           \n  [9] lattice_0.22-5            MASS_7.3-60              \n [11] dendextend_1.17.1         magrittr_2.0.3           \n [13] plotly_4.10.2             rmarkdown_2.24           \n [15] yaml_2.3.7                httpuv_1.6.11            \n [17] Seurat_5.0.0              sctransform_0.4.1        \n [19] spam_2.10-0               askpass_1.2.0            \n [21] sp_2.1-1                  spatstat.sparse_3.0-2    \n [23] reticulate_1.34.0         cowplot_1.1.1            \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] abind_1.4-5               Rtsne_0.16               \n [29] purrr_1.0.1               BiocGenerics_0.46.0      \n [31] circlize_0.4.15           IRanges_2.34.1           \n [33] S4Vectors_0.38.1          ggrepel_0.9.3            \n [35] irlba_2.3.5.1             listenv_0.9.0            \n [37] spatstat.utils_3.0-3      umap_0.2.10.0            \n [39] goftest_1.2-3             RSpectra_0.16-1          \n [41] spatstat.random_3.2-1     dqrng_0.3.0              \n [43] fitdistrplus_1.1-11       parallelly_1.36.0        \n [45] DelayedMatrixStats_1.22.5 leiden_0.4.3             \n [47] codetools_0.2-19          DelayedArray_0.26.7      \n [49] tidyselect_1.2.0          shape_1.4.6              \n [51] farver_2.1.1              ScaledMatrix_1.8.1       \n [53] viridis_0.6.4             matrixStats_1.2.0        \n [55] stats4_4.3.2              spatstat.explore_3.2-1   \n [57] jsonlite_1.8.7            GetoptLong_1.0.5         \n [59] ellipsis_0.3.2            progressr_0.14.0         \n [61] ggridges_0.5.4            survival_3.5-7           \n [63] iterators_1.0.14          foreach_1.5.2            \n [65] tools_4.3.2               ica_1.0-3                \n [67] Rcpp_1.0.11               glue_1.6.2               \n [69] gridExtra_2.3             xfun_0.39                \n [71] mgcv_1.9-1                MatrixGenerics_1.12.3    \n [73] ggthemes_5.0.0            dplyr_1.1.2              \n [75] withr_2.5.0               fastmap_1.1.1            \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] R6_2.5.1                  mime_0.12                \n [83] colorspace_2.1-0          scattermore_1.2          \n [85] tensor_1.5                spatstat.data_3.0-1      \n [87] utf8_1.2.3                generics_0.1.3           \n [89] httr_1.4.6                htmlwidgets_1.6.2        \n [91] S4Arrays_1.2.0            uwot_0.1.16              \n [93] pkgconfig_2.0.3           gtable_0.3.3             \n [95] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n [97] htmltools_0.5.7           dotCall64_1.1-0          \n [99] clue_0.3-64               SeuratObject_5.0.0       \n[101] png_0.1-8                 knitr_1.43               \n[103] rstudioapi_0.15.0         reshape2_1.4.4           \n[105] rjson_0.2.21              nlme_3.1-163             \n[107] zoo_1.8-12                GlobalOptions_0.1.2      \n[109] stringr_1.5.0             KernSmooth_2.23-22       \n[111] parallel_4.3.2            miniUI_0.1.1.1           \n[113] RcppZiggurat_0.1.6        pillar_1.9.0             \n[115] grid_4.3.2                vctrs_0.6.3              \n[117] RANN_2.6.1                promises_1.2.0.1         \n[119] BiocSingular_1.16.0       beachmat_2.16.0          \n[121] xtable_1.8-4              cluster_2.1.6            \n[123] evaluate_0.21             cli_3.6.1                \n[125] compiler_4.3.2            crayon_1.5.2             \n[127] future.apply_1.11.0       labeling_0.4.2           \n[129] plyr_1.8.8                stringi_1.8.1            \n[131] viridisLite_0.4.2         deldir_2.0-2             \n[133] BiocParallel_1.34.2       munsell_0.5.0            \n[135] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[137] PCAtools_2.14.0           Matrix_1.6-3             \n[139] RcppHNSW_0.5.0            patchwork_1.1.2          \n[141] sparseMatrixStats_1.12.2  future_1.33.0            \n[143] shiny_1.8.0               ROCR_1.0-11              \n[145] Rfast_2.1.0               igraph_1.6.0             \n[147] RcppParallel_5.1.7"
  },
  {
    "objectID": "ForebrainDorsal_E150-analysis.html",
    "href": "ForebrainDorsal_E150-analysis.html",
    "title": "Forebrain Dorsal E15.0 Data-set Anaysis",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Data/MouseCortexFromLoom/\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"ForebrainDorsal_E150-analysis.log\"))"
  },
  {
    "objectID": "ForebrainDorsal_E150-analysis.html#cleaning",
    "href": "ForebrainDorsal_E150-analysis.html#cleaning",
    "title": "Forebrain Dorsal E15.0 Data-set Anaysis",
    "section": "Cleaning",
    "text": "Cleaning\nRead the already created COTAN object\n\nfb150Obj &lt;- readRDS(\"Data/MouseCortexFromLoom/SourceData/e15.0_ForebrainDorsal.cotan.RDS\")\nsampleCondition &lt;- getMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\nsampleCondition\n\n[1] \"e15.0_ForebrainDorsal\"\n\n\nInspect cells’ sizes\n\ncellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\ncellsSizeThr &lt;- 10000\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem &lt;- getCells(fb150Obj)[getCellsSize(fb150Obj) &gt; cellsSizeThr]\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\ncellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nDrop cells with too low genes expession as they are probably dead\n\ngenesSizeLowThr &lt;- 700\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Num genes low threshold\", genesSizeLowThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(fb150Obj)\ncells_to_rem &lt;- names(numExprGenes)[numExprGenes &lt; genesSizeLowThr]\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\ngenesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nCheck number of mitocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^mt.\"\ngetGenes(fb150Obj)[grep(mitGenesPattern, getGenes(fb150Obj))]\n\n[1] \"mt.Co1\"  \"mt.Nd4\"  \"mt.Nd5\"  \"mt.Nd1\"  \"mt.Nd2\"  \"mt.Atp6\"\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(fb150Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr &lt;- 1.0\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(fb150Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n\n\n\ngenesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\n\nClean: round 1\n\nfb150Obj &lt;- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 0)\n\nB group contains highly diverse cells: drop them!\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\n\n\nClean: round 2\n\nfb150Obj &lt;- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 1)\n\nB group contains one cell with high diversity in the higher components\n\nplot(pcaCellsData)\n\n\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\n\n\nClean: round 3\n\nfb150Obj &lt;- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 2)\n\nB group contains one cell with high diversity in the higher components\n\nplot(pcaCellsData)\n\n\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\n\n\nClean: round 4\n\nfb150Obj &lt;- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 3)\n\nB group contains few cell with high diversity\n\nplot(pcaCellsData)\n\n\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb150Obj &lt;- dropGenesCells(fb150Obj, cells = cells_to_rem)\n\n\n\nClean: round 5\n\nfb150Obj &lt;- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb150Obj &lt;- addElementToMetaDataset(fb150Obj, \"Num drop B group\", 4)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nlowUDEThr &lt;- 0.4 # the threshold to remove low UDE cells\n\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(fb150Obj)), \"n\" = seq_along(getNu(fb150Obj)))\nUDEPlot_zoomed &lt;- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 400L) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = lowUDEThr, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 200L, y = 0.25,\n                     label = paste0(\"to remove cells with nu &lt; \", lowUDEThr),\n                     color = \"darkred\", size = 4.5)\n\nplot(UDEPlot_zoomed)\n\n\n\n\nFinal cleaning to check all is OK\n\nfb150Obj &lt;- clean(fb150Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb150Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(cellSizePlot(fb150Obj, splitPattern = \":\", numCol = 1))\n\n\n\nplot(genesSizePlot(fb150Obj, splitPattern = \":\", numCol = 1))\n\n\n\n\nCalculate genes’ COEX\n\nSys.time()\n\nfb150Obj &lt;- proceedToCoex(fb150Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\nSys.time()\n\nSave the COTAN object\n\nsaveRDS(fb150Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nfb150Obj &lt;- readRDS(file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))"
  },
  {
    "objectID": "ForebrainDorsal_E150-analysis.html#gdi",
    "href": "ForebrainDorsal_E150-analysis.html#gdi",
    "title": "Forebrain Dorsal E15.0 Data-set Anaysis",
    "section": "GDI",
    "text": "GDI\n\ngdiData &lt;- calculateGDI(fb150Obj)\n\ngenesToLabel &lt;- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\n [1] \"Myt1l\"   \"Aldoc\"   \"Rbfox1\"  \"Gas1\"    \"Zfp36l1\" \"Mapt\"    \"Ank3\"   \n [8] \"Stmn3\"   \"Tubb3\"   \"Pclaf\"  \n\ngdiPlot &lt;- GDIPlot(fb150Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n\n\n\n\n\nsplitClusters &lt;- cellsUniformClustering(fb150Obj, GDIThreshold = 1.4, cores = 13,\n                                        saveObj = TRUE, outDir = outDir)\n\nc(splitCoexDF, splitPValueDF) %&lt;-% DEAOnClusters(fb150Obj, clusters = splitClusters)\n\nfb150Obj &lt;- addClusterization(fb150Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\ntable(splitClusters)"
  },
  {
    "objectID": "ForebrainDorsal_E150-analysis.html#consistent-transcript-cohorts-clustering",
    "href": "ForebrainDorsal_E150-analysis.html#consistent-transcript-cohorts-clustering",
    "title": "Forebrain Dorsal E15.0 Data-set Anaysis",
    "section": "Consistent Transcript Cohorts (clustering)",
    "text": "Consistent Transcript Cohorts (clustering)\n\nc(mergedClusters, mergedCoexDF, mergedPValueDF) %&lt;-%\n  mergeUniformCellsClusters(fb150Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\nfb150Obj &lt;- addClusterization(fb150Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\ntable(mergedClusters)\n\n\n\nSys.time()\n\n[1] \"2023-11-17 12:57:25 CET\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.3.0   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3        rstudioapi_0.15.0        \n  [3] jsonlite_1.8.7            shape_1.4.6              \n  [5] umap_0.2.10.0             magrittr_2.0.3           \n  [7] spatstat.utils_3.0-3      farver_2.1.1             \n  [9] rmarkdown_2.24            GlobalOptions_0.1.2      \n [11] vctrs_0.6.3               ROCR_1.0-11              \n [13] spatstat.explore_3.2-1    DelayedMatrixStats_1.22.5\n [15] askpass_1.2.0             htmltools_0.5.5          \n [17] S4Arrays_1.2.0            sctransform_0.4.1        \n [19] parallelly_1.36.0         KernSmooth_2.23-22       \n [21] htmlwidgets_1.6.2         ica_1.0-3                \n [23] plyr_1.8.8                plotly_4.10.2            \n [25] zoo_1.8-12                igraph_1.5.1             \n [27] mime_0.12                 lifecycle_1.0.3          \n [29] iterators_1.0.14          pkgconfig_2.0.3          \n [31] rsvd_1.0.5                Matrix_1.6-2             \n [33] R6_2.5.1                  fastmap_1.1.1            \n [35] MatrixGenerics_1.12.3     fitdistrplus_1.1-11      \n [37] future_1.33.0             shiny_1.7.5              \n [39] clue_0.3-64               digest_0.6.33            \n [41] colorspace_2.1-0          patchwork_1.1.2          \n [43] S4Vectors_0.38.1          tensor_1.5               \n [45] Seurat_5.0.0              dqrng_0.3.0              \n [47] RSpectra_0.16-1           irlba_2.3.5.1            \n [49] beachmat_2.16.0           labeling_0.4.2           \n [51] PCAtools_2.14.0           progressr_0.14.0         \n [53] RcppZiggurat_0.1.6        spatstat.sparse_3.0-2    \n [55] fansi_1.0.4               polyclip_1.10-4          \n [57] httr_1.4.6                abind_1.4-5              \n [59] compiler_4.3.2            withr_2.5.0              \n [61] doParallel_1.0.17         BiocParallel_1.34.2      \n [63] viridis_0.6.4             fastDummies_1.7.3        \n [65] dendextend_1.17.1         MASS_7.3-60              \n [67] openssl_2.1.0             DelayedArray_0.26.7      \n [69] rjson_0.2.21              tools_4.3.2              \n [71] lmtest_0.9-40             httpuv_1.6.11            \n [73] future.apply_1.11.0       goftest_1.2-3            \n [75] glue_1.6.2                nlme_3.1-163             \n [77] promises_1.2.0.1          grid_4.3.2               \n [79] Rtsne_0.16                cluster_2.1.4            \n [81] reshape2_1.4.4            generics_0.1.3           \n [83] spatstat.data_3.0-1       gtable_0.3.3             \n [85] tidyr_1.3.0               data.table_1.14.8        \n [87] BiocSingular_1.16.0       ScaledMatrix_1.8.1       \n [89] sp_2.1-1                  utf8_1.2.3               \n [91] spatstat.geom_3.2-4       BiocGenerics_0.46.0      \n [93] RcppAnnoy_0.0.21          ggrepel_0.9.3            \n [95] RANN_2.6.1                foreach_1.5.2            \n [97] pillar_1.9.0              stringr_1.5.0            \n [99] spam_2.10-0               RcppHNSW_0.5.0           \n[101] later_1.3.1               circlize_0.4.15          \n[103] splines_4.3.2             dplyr_1.1.2              \n[105] lattice_0.22-5            deldir_1.0-9             \n[107] survival_3.5-7            tidyselect_1.2.0         \n[109] ComplexHeatmap_2.16.0     miniUI_0.1.1.1           \n[111] pbapply_1.7-2             knitr_1.43               \n[113] gridExtra_2.3             IRanges_2.34.1           \n[115] scattermore_1.2           stats4_4.3.2             \n[117] xfun_0.39                 matrixStats_1.1.0        \n[119] stringi_1.8.1             lazyeval_0.2.2           \n[121] yaml_2.3.7                evaluate_0.21            \n[123] codetools_0.2-19          cli_3.6.1                \n[125] uwot_0.1.16               RcppParallel_5.1.7       \n[127] xtable_1.8-4              reticulate_1.34.0        \n[129] munsell_0.5.0             Rcpp_1.0.11              \n[131] spatstat.random_3.2-1     globals_0.16.2           \n[133] png_0.1-8                 parallel_4.3.2           \n[135] Rfast_2.1.0               ellipsis_0.3.2           \n[137] assertthat_0.2.1          dotCall64_1.1-0          \n[139] parallelDist_0.2.6        sparseMatrixStats_1.12.2 \n[141] listenv_0.9.0             ggthemes_4.2.4           \n[143] viridisLite_0.4.2         scales_1.2.1             \n[145] ggridges_0.5.4            SeuratObject_5.0.0       \n[147] leiden_0.4.3              purrr_1.0.1              \n[149] crayon_1.5.2              GetoptLong_1.0.5         \n[151] rlang_1.1.1               cowplot_1.1.1"
  },
  {
    "objectID": "FindUniformOrigCluster.html",
    "href": "FindUniformOrigCluster.html",
    "title": "Find uniform given cluster in Forebrain Dorsal E15.0",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"./e15.0_FD_CheckClustersUniformity\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"FindUniformGivenClustersInForebrainDorsal_E150.log\"))\n\nRelevant genes lists\n\ngenesList &lt;- list(\n  \"NPGs\"   = c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"   = c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"     = c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n               \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n               \"Tars\", \"Amacr\"),\n  \"layers\" = c(\"Reln\", \"Lhx5\", \"Cux1\", \"Satb2\", \"Tle1\", \"Mef2c\", \"Rorb\",\n               \"Sox5\", \"Bcl11b\", \"Fezf2\", \"Foxp2\")\n)\n\nThis is a version of the function checkClusterUniformity() adapted to be used in this markdown document\n\nclusterIsUniform &lt;- function(objCOTAN, cluster, cells, GDIThreshold = 1.4) {\n\n  cores &lt;- 14L\n  \n  cellsToDrop &lt;- getCells(objCOTAN)[!getCells(objCOTAN) %in% cells]\n\n  objCOTAN &lt;- dropGenesCells(objCOTAN, cells = cellsToDrop)\n\n  objCOTAN &lt;- proceedToCoex(objCOTAN, cores = cores, saveObj = FALSE)\n  gc()\n\n  GDIData &lt;- calculateGDI(objCOTAN)\n\n  gdi &lt;- GDIData[[\"GDI\"]]\n  names(gdi) &lt;- rownames(GDIData)\n  gdi &lt;- sort(gdi, decreasing = TRUE)\n  \n  # Plot GDI\n  genesToRemark = list(\"Top 10 GDI genes\" = names(gdi)[1L:5L])\n  genesToRemark &lt;- append(genesToRemark, genesList)\n  plot &lt;- GDIPlot(objCOTAN, GDIIn = GDIData,\n                  GDIThreshold = GDIThreshold,\n                  genes = genesToRemark,\n                  condition = paste0(\"e15.0 cluster \", cluster))\n\n  rm(objCOTAN)\n  rm(GDIData)\n  gc()\n\n  # A cluster is deemed uniform if the number of genes\n  # with [GDI &gt; GDIThreshold] is not more than 1%\n  \n  highGDIRatio &lt;- sum(gdi &gt;= GDIThreshold) / length(gdi)\n  \n  lastPercentile &lt;- quantile(gdi, probs = 0.99)\n  \n  isUniform &lt;- highGDIRatio &lt;= 0.01\n\n  plot(plot)\n  \n  print(paste0(\"The cluster '\", cluster, \"' is \",\n               (if(isUniform) {\"\"} else {\"not \"}), \"uniform\"))\n  print(paste0(\"The percentage of genes with GDI above \", GDIThreshold, \" is: \",\n               round(highGDIRatio * 100.0, digits = 2), \"%\"))\n  print(paste0(\"The last percentile (99%) of the GDI values is: \",\n               round(lastPercentile, digits = 4)))\n  \n  return(list(\"isUniform\" = isUniform, \"highGDIRatio\" = highGDIRatio,\n              \"lastPercentile\" = lastPercentile, \"GDIPlot\" = plot))\n}\n\n\nfb150ObjRaw &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/SourceData/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\n\nfb150Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\n\nAlign to cleaned cells’ list\n\nmetaC &lt;- getMetadataCells(fb150ObjRaw)[getCells(fb150Obj), ]\n\nmetaCDrop &lt;- getMetadataCells(fb150ObjRaw)[!getCells(fb150ObjRaw) %in% getCells(fb150Obj), ]\n\nExtract the cells of class ‘Neuron’\n\nmetaNeuron &lt;- metaC[metaC[[\"Class\"]] == \"Neuron\", ]\n\nsort(table(metaNeuron[[\"Subclass\"]]), decreasing = TRUE)\n\n\nCortical or hippocampal glutamatergic                   Forebrain GABAergic \n                                 3969                                   610 \n                        Cajal-Retzius                Mixed region GABAergic \n                                  145                                    21 \n                            Undefined               Forebrain glutamatergic \n                                   16                                    15 \n                         Hypothalamus            Mixed region glutamatergic \n                                    8                                     5 \n    Mixed region and neurotransmitter               Hindbrain glutamatergic \n                                    4                                     2 \n                Hindbrain glycinergic            Hypothalamus glutamatergic \n                                    2                                     2 \n        Dorsal midbrain glutamatergic                          Mixed region \n                                    1                                     1 \n\nsort(table(metaNeuron[[\"ClusterName\"]]), decreasing = TRUE)\n\n\nNeur525 Neur511 Neur509 Neur510 Neur508 Neur507 Neur568 Neur504 Neur505 Neur516 \n    826     540     402     402     397     183     181     174     147     137 \nNeur565 Neur524 Neur679 Neur493 Neur498 Neur497 Neur506 Neur502 Neur494 Neur574 \n    133     108     105      93      79      51      46      42      41      41 \nNeur575 Neur492 Neur519 Neur526 Neur566 Neur501 Neur573 Neur499 Neur518 Neur560 \n     41      38      31      28      28      24      24      23      22      20 \nNeur514 Neur523 Neur569 Neur557 Neur495 Neur520 Neur535 Neur542 Neur677 Neur527 \n     19      19      18      16      15      15      14      14      14      13 \nNeur496 Neur512 Neur676 Neur517 Neur558 Neur503 Neur739 Neur559 Neur564 Neur538 \n     11      11      11      10       9       8       8       7       7       6 \nNeur549 Neur561 Neur671 Neur695 Neur738 Neur747 Neur500 Neur536 Neur678 Neur534 \n      6       6       6       6       6       6       5       5       5       4 \nNeur550 Neur570 Neur686 Neur731 Neur737 Neur513 Neur515 Neur528 Neur533 Neur539 \n      4       4       4       4       4       3       3       3       3       3 \nNeur544 Neur571 Neur674 Neur675 Neur732 Neur531 Neur543 Neur548 Neur552 Neur554 \n      3       3       3       3       3       2       2       2       2       2 \nNeur562 Neur670 Neur689 Neur740 Neur529 Neur530 Neur532 Neur537 Neur540 Neur553 \n      2       2       2       2       1       1       1       1       1       1 \nNeur567 Neur572 Neur601 Neur614 Neur634 Neur647 Neur649 Neur672 Neur680 Neur681 \n      1       1       1       1       1       1       1       1       1       1 \nNeur684 Neur693 Neur696 Neur726 Neur734 Neur749 Neur750 Neur751 Neur760 Neur771 \n      1       1       1       1       1       1       1       1       1       1 \n\n\nCheck uniformity of sub-class: Cajal-Retzius\n\nFB_CaRe_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"Subclass\"]] == \"Cajal-Retzius\"]\n\ntable(metaNeuron[FB_CaRe_Cells, \"ClusterName\"])\n\n\nNeur674 Neur675 Neur676 Neur677 Neur678 Neur679 Neur686 \n      3       3      11      14       5     105       4 \n\nc(FB_CaRe_IsUniform, FB_CaRe_HighGDIRatio,\n  FB_CaRe_LastPercentile, FB_CaRe_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Cajal-Retzius\",\n                   cells = FB_CaRe_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Cajal-Retzius' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.82%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3896\"\n\n\nCheck uniformity of sub-class: Forebrain GABAergic\n\nFB_GABA_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"Subclass\"]] == \"Forebrain GABAergic\"]\n\ntable(metaNeuron[FB_GABA_Cells, \"ClusterName\"])\n\n\nNeur529 Neur530 Neur531 Neur532 Neur533 Neur534 Neur535 Neur536 Neur537 Neur538 \n      1       1       2       1       3       4      14       5       1       6 \nNeur539 Neur540 Neur542 Neur543 Neur544 Neur548 Neur549 Neur550 Neur552 Neur553 \n      3       1      14       2       3       2       6       4       2       1 \nNeur554 Neur558 Neur559 Neur560 Neur561 Neur562 Neur564 Neur565 Neur566 Neur567 \n      2       9       7      20       6       2       7     133      28       1 \nNeur568 Neur569 Neur570 Neur571 Neur572 Neur573 Neur574 Neur575 Neur747 \n    181      18       4       3       1      24      41      41       6 \n\nc(FB_GABA_isUniform, FB_GABA_HighGDIRatio,\n  FB_GABA_LastPercentile, FB_GABA_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Forebrain_GABAergic\",\n                   cells = FB_GABA_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Forebrain_GABAergic' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 12.68%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.6987\"\n\n\nCheck uniformity of sub-class: Cortical or hippocampal glutamatergic\n\nFB_CHGl_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"Subclass\"]] == \"Cortical or hippocampal glutamatergic\"]\n\ntable(metaNeuron[FB_CHGl_Cells, \"ClusterName\"])\n\n\nNeur492 Neur493 Neur494 Neur495 Neur496 Neur497 Neur498 Neur499 Neur500 Neur501 \n     38      93      41      15      11      51      79      23       5      24 \nNeur502 Neur503 Neur504 Neur505 Neur506 Neur507 Neur508 Neur509 Neur510 Neur511 \n     42       8     174     147      46     183     397     402     402     540 \nNeur512 Neur513 Neur514 Neur515 Neur516 Neur517 Neur518 Neur519 Neur520 Neur523 \n     11       3      19       3     137      10      22      31      15      19 \nNeur524 Neur525 Neur526 Neur527 Neur528 \n    108     826      28      13       3 \n\nc(FB_CHGl_IsUniform, FB_CHGl_HighGDIRatio,\n  FB_CHGl_LastPercentile, FB_CHGl_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Cortical or hippocampal glutamatergic\",\n                   cells = FB_CHGl_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Cortical or hippocampal glutamatergic' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 61.17%\"\n[1] \"The last percentile (99%) of the GDI values is: 3.0064\"\n\n\nCheck uniformity of Cajal-Retzius cluster: Neur679\n\nFB_Neur679_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"]\n\nc(FB_Neur679_IsUniform, FB_Neur679_HighGDIRatio,\n  FB_Neur679_LastPercentile, FB_Neur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur679\",\n                   cells = FB_Neur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur679' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.24%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3392\"\n\n\nCheck uniformity of Forebrain GABAergic cluster: Neur568\n\nFB_Neur568_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"]\n\nc(FB_Neur568_IsUniform, FB_Neur568_HighGDIRatio,\n  FB_Neur568_LastPercentile, FB_Neur568_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur568\",\n                   cells = FB_Neur568_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur568' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3058\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur525\n\nFB_Neur525_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur525\"]\n\nc(FB_Neur525_IsUniform, FB_Neur525_HighGDIRatio,\n  FB_Neur525_LastPercentile, FB_Neur525_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur525\",\n                   cells = FB_Neur525_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur525' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 30.16%\"\n[1] \"The last percentile (99%) of the GDI values is: 2.3522\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508\n\nFB_Neur508_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"]\n\nc(FB_Neur508_IsUniform, FB_Neur508_HighGDIRatio,\n  FB_Neur508_LastPercentile, FB_Neur508_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508\",\n                   cells = FB_Neur508_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.46%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3701\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur509\n\nFB_Neur509_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur509\"]\n\nc(FB_Neur509_IsUniform, FB_Neur509_HighGDIRatio,\n  FB_Neur509_LastPercentile, FB_Neur509_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur509\",\n                   cells = FB_Neur509_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur509' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.67%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3811\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur507\n\nFB_Neur507_Cells &lt;-\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur507\"]\n\nc(FB_Neur507_IsUniform, FB_Neur507_HighGDIRatio,\n  FB_Neur507_LastPercentile, FB_Neur507_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur507\",\n                   cells = FB_Neur507_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur507' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.94%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3939\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and Neur509\n\nFB_Neur508.Neur509_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur509\"]\n)\n\nc(FB_Neur508.Neur509_IsUniform, FB_Neur508.Neur509_HighGDIRatio,\n  FB_Neur508.Neur509_LastPercentile, FB_Neur508.Neur509_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.Neur509\",\n                   cells = FB_Neur508.Neur509_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.Neur509' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 2.63%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.4529\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and Neur507\n\nFB_Neur508.Neur507_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur507\"]\n)\n\nc(FB_Neur508.Neur507_IsUniform, FB_Neur508.Neur507_HighGDIRatio,\n  FB_Neur508.Neur507_LastPercentile, FB_Neur508.Neur507_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.Neur507\",\n                   cells = FB_Neur508.Neur507_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.Neur507' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 3.76%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.5202\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and Cajal-Retzius cluster: Neur679\n\nFB_Neur508.Neur679_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"]\n)\n\nc(FB_Neur508.Neur679_IsUniform, FB_Neur508.Neur679_HighGDIRatio,\n  FB_Neur508.Neur679_LastPercentile, FB_Neur508.Neur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.Neur679\",\n                   cells = FB_Neur508.Neur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.Neur679' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 15.95%\"\n[1] \"The last percentile (99%) of the GDI values is: 2.1736\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and Forebrain GABAergic cluster: Neur568\n\nFB_Neur508.Neur568_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"]\n)\n\nc(FB_Neur508.Neur568_IsUniform, FB_Neur508.Neur568_HighGDIRatio,\n  FB_Neur508.Neur568_LastPercentile, FB_Neur508.Neur568_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.Neur568\",\n                   cells = FB_Neur508.Neur568_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.Neur568' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 21.27%\"\n[1] \"The last percentile (99%) of the GDI values is: 2.1539\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur509 and Cajal-Retzius cluster: Neur679\n\nFB_Neur509.Neur679_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur509\"],\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"]\n)\n\nc(FB_Neur509.Neur679_IsUniform, FB_Neur509.Neur679_HighGDIRatio,\n  FB_Neur509.Neur679_LastPercentile, FB_Neur509.Neur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur509.Neur679\",\n                   cells = FB_Neur509.Neur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur509.Neur679' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 14.34%\"\n[1] \"The last percentile (99%) of the GDI values is: 2.1308\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur507 and Cajal-Retzius cluster: Neur679\n\nFB_Neur507.Neur679_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur507\"],\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"]\n)\n\nc(FB_Neur507.Neur679_IsUniform, FB_Neur507.Neur679_HighGDIRatio,\n  FB_Neur507.Neur679_LastPercentile, FB_Neur507.Neur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur507.Neur679\",\n                   cells = FB_Neur507.Neur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur507.Neur679' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 8.6%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.8754\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and 40 cells taken from Cajal-Retzius cluster: Neur679\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur508 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur508\")))\n\n[1] \"Cluser Neur508 size: 397\"\n\nFB_Neur508.s40oNeur679_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"], 40)\n)\n\nc(FB_Neur508.s40oNeur679_IsUniform, FB_Neur508.s40oNeur679_HighGDIRatio,\n  FB_Neur508.s40oNeur679_LastPercentile, FB_Neur508.s40oNeur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.s40oNeur679\",\n                   cells = FB_Neur508.s40oNeur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.s40oNeur679' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 6.95%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.8052\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and 20 cells taken from Cajal-Retzius cluster: Neur679\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur508 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur508\")))\n\n[1] \"Cluser Neur508 size: 397\"\n\nFB_Neur508.s20oNeur679_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"], 20)\n)\n\nc(FB_Neur508.s20oNeur679_IsUniform, FB_Neur508.s20oNeur679_HighGDIRatio,\n  FB_Neur508.s20oNeur679_LastPercentile, FB_Neur508.s20oNeur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.s20oNeur679\",\n                   cells = FB_Neur508.s20oNeur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.s20oNeur679' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 4.3%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.61\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and 10 cells taken from Cajal-Retzius cluster: Neur679\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur508 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur508\")))\n\n[1] \"Cluser Neur508 size: 397\"\n\nFB_Neur508.s10oNeur679_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur679\"], 10)\n)\n\nc(FB_Neur508.s10oNeur679_IsUniform, FB_Neur508.s10oNeur679_HighGDIRatio,\n  FB_Neur508.s10oNeur679_LastPercentile, FB_Neur508.s10oNeur679_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.s10oNeur679\",\n                   cells = FB_Neur508.s10oNeur679_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.s10oNeur679' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 1.92%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.4542\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and 40 cells taken from all Neuron - non Cortical or hippocampal glutamatergic cells\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur508 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur508\")))\n\n[1] \"Cluser Neur508 size: 397\"\n\nFB_Neur508.s40oNonCHGl_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"Subclass\"]] != \"Cortical or hippocampal glutamatergic\"], 40)\n)\n\nc(FB_Neur508.s40oNonCHGl_IsUniform, FB_Neur508.s40oNonCHGl_HighGDIRatio,\n  FB_Neur508.s40oNonCHGl_LastPercentile, FB_Neur508.s40oNonCHGl_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.s40oNonCHGl\",\n                   cells = FB_Neur508.s40oNonCHGl_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.s40oNonCHGl' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 3.05%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.514\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and 20 cells taken from all Neuron - non Cortical or hippocampal glutamatergic cells\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur508 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur508\")))\n\n[1] \"Cluser Neur508 size: 397\"\n\nFB_Neur508.s20oNonCHGl_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"Subclass\"]] != \"Cortical or hippocampal glutamatergic\"], 20)\n)\n\nc(FB_Neur508.s20oNonCHGl_IsUniform, FB_Neur508.s20oNonCHGl_HighGDIRatio,\n  FB_Neur508.s20oNonCHGl_LastPercentile, FB_Neur508.s20oNonCHGl_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.s20oNonCHGl\",\n                   cells = FB_Neur508.s20oNonCHGl_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.s20oNonCHGl' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 1.15%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.4091\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur508 and 10 cells taken from all Neuron - non Cortical or hippocampal glutamatergic cells\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur508 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur508\")))\n\n[1] \"Cluser Neur508 size: 397\"\n\nFB_Neur508.s10oNonCHGl_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur508\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"Subclass\"]] != \"Cortical or hippocampal glutamatergic\"], 10)\n)\n\nc(FB_Neur508.s10oNonCHGl_IsUniform, FB_Neur508.s10oNonCHGl_HighGDIRatio,\n  FB_Neur508.s10oNonCHGl_LastPercentile, FB_Neur508.s10oNonCHGl_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur508.s10oNonCHGl\",\n                   cells = FB_Neur508.s10oNonCHGl_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur508.s10oNonCHGl' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.67%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3853\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur509 and 40 cells taken from Forebrain GABAergic cluster: Neur568\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur509 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur509\")))\n\n[1] \"Cluser Neur509 size: 402\"\n\nFB_Neur509.s40oNeur568_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur509\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"], 40)\n)\n\nc(FB_Neur509.s40oNeur568_IsUniform, FB_Neur509.s40oNeur568_HighGDIRatio,\n  FB_Neur509.s40oNeur568_LastPercentile, FB_Neur509.s40oNeur568_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur509.s40oNeur568\",\n                   cells = FB_Neur509.s40oNeur568_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur509.s40oNeur568' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 4.59%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.5904\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur509 and 20 cells taken from Forebrain GABAergic cluster: Neur568\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur509 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur509\")))\n\n[1] \"Cluser Neur509 size: 402\"\n\nFB_Neur509.s20oNeur568_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur509\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"], 20)\n)\n\nc(FB_Neur509.s20oNeur568_IsUniform, FB_Neur509.s20oNeur568_HighGDIRatio,\n  FB_Neur509.s20oNeur568_LastPercentile, FB_Neur509.s20oNeur568_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur509.s20oNeur568\",\n                   cells = FB_Neur509.s20oNeur568_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur509.s20oNeur568' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 2.43%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.4661\"\n\n\nCheck uniformity of Cortical or hippocampal glutamatergic cluster: Neur509 and 10 cells taken from Forebrain GABAergic cluster: Neur568\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur509 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur509\")))\n\n[1] \"Cluser Neur509 size: 402\"\n\nFB_Neur509.s10oNeur568_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur509\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"], 10)\n)\n\nc(FB_Neur509.s10oNeur568_IsUniform, FB_Neur509.s10oNeur568_HighGDIRatio,\n  FB_Neur509.s10oNeur568_LastPercentile, FB_Neur509.s10oNeur568_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur509.s10oNeur568\",\n                   cells = FB_Neur509.s10oNeur568_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur509.s10oNeur568' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 1.14%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.4103\"\n\n\nCheck uniformity of Forebrain GABAergic cluster: Neur568 and 20 cells taken from Cortical or hippocampal glutamatergic cluster: Neur507\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur568 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur568\")))\n\n[1] \"Cluser Neur568 size: 181\"\n\nFB_Neur568.s20oNeur507_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur507\"], 20)\n)\n\nc(FB_Neur568.s20oNeur507_IsUniform, FB_Neur568.s20oNeur507_HighGDIRatio,\n  FB_Neur568.s20oNeur507_LastPercentile, FB_Neur568.s20oNeur507_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur568.s20oNeur507\",\n                   cells = FB_Neur568.s20oNeur507_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur568.s20oNeur507' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 7.46%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.7445\"\n\n\nCheck uniformity of Forebrain GABAergic cluster: Neur568 and 10 cells taken from Cortical or hippocampal glutamatergic cluster: Neur507\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur568 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur568\")))\n\n[1] \"Cluser Neur568 size: 181\"\n\nFB_Neur568.s10oNeur507_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur507\"], 10)\n)\n\nc(FB_Neur568.s10oNeur507_IsUniform, FB_Neur568.s10oNeur507_HighGDIRatio,\n  FB_Neur568.s10oNeur507_LastPercentile, FB_Neur568.s10oNeur507_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur568.s10oNeur507\",\n                   cells = FB_Neur568.s10oNeur507_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur568.s10oNeur507' is not uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 1.9%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.4669\"\n\n\nCheck uniformity of Forebrain GABAergic cluster: Neur568 and 5 cells taken from Cortical or hippocampal glutamatergic cluster: Neur507\n\nset.seed(639245)\n\nprint(paste0(\"Cluser Neur568 size: \", sum(metaNeuron[[\"ClusterName\"]] == \"Neur568\")))\n\n[1] \"Cluser Neur568 size: 181\"\n\nFB_Neur568.s5oNeur507_Cells &lt;- c(\n  rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur568\"],\n  sample(rownames(metaNeuron)[metaNeuron[[\"ClusterName\"]] == \"Neur507\"], 5)\n)\n\nc(FB_Neur568.s5oNeur507_IsUniform, FB_Neur568.s5oNeur507_HighGDIRatio,\n  FB_Neur568.s5oNeur507_LastPercentile, FB_Neur568.s5oNeur507_GDIPlot) %&lt;-%\n  clusterIsUniform(fb150Obj, cluster = \"Neur568.s5oNeur507\",\n                   cells = FB_Neur568.s5oNeur507_Cells, GDIThreshold = 1.4)\n\n\n\n\n[1] \"The cluster 'Neur568.s5oNeur507' is uniform\"\n[1] \"The percentage of genes with GDI above 1.4 is: 0.48%\"\n[1] \"The last percentile (99%) of the GDI values is: 1.3517\"\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.5   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.14        jsonlite_1.8.4        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.21        \n [10] GlobalOptions_0.1.2    vctrs_0.6.1            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-20    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.1          zoo_1.8-12             igraph_1.4.2          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.5-4.1         R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-8     future_1.32.0         \n [34] shiny_1.7.4            clue_0.3-64            digest_0.6.31         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.0      \n [40] Seurat_4.3.0           tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.13.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-1 \n [49] httr_1.4.5             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.0         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.2          dendextend_1.17.1      MASS_7.3-59           \n [58] openssl_2.0.6          rjson_0.2.21           tools_4.3.0           \n [61] lmtest_0.9-40          httpuv_1.6.9           future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.0             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_1.6-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-1    RcppAnnoy_0.0.20      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.0           \n [88] circlize_0.4.15        splines_4.3.0          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-6          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-0          knitr_1.42             gridExtra_2.3         \n[100] IRanges_2.34.0         scattermore_1.2        stats4_4.3.0          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.20          codetools_0.2-19       cli_3.6.1             \n[112] RcppParallel_5.1.7     uwot_0.1.14            xtable_1.8-4          \n[115] reticulate_1.30        munsell_0.5.0          Rcpp_1.0.10           \n[118] globals_0.16.2         spatstat.random_3.1-4  png_0.1-8             \n[121] parallel_4.3.0         Rfast_2.0.7            ellipsis_0.3.2        \n[124] assertthat_0.2.1       parallelDist_0.2.6     listenv_0.9.0         \n[127] ggthemes_4.2.4         viridisLite_0.4.1      scales_1.2.1          \n[130] ggridges_0.5.4         SeuratObject_4.1.3     leiden_0.4.3          \n[133] purrr_1.0.1            crayon_1.5.2           GetoptLong_1.0.5      \n[136] rlang_1.1.0            cowplot_1.1.1"
  },
  {
    "objectID": "FDR_analisysResults5_20.html",
    "href": "FDR_analisysResults5_20.html",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults5_20.html#preamble",
    "href": "FDR_analisysResults5_20.html#preamble",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults5_20.html#dataset-composition",
    "href": "FDR_analisysResults5_20.html#dataset-composition",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "Dataset composition",
    "text": "Dataset composition\n\ndatasets_csv &lt;- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv[1:3,]\n\n                 Group            Collection E13.5.432 E13.5.187 E13.5.434\n1 2_Clusters_even_near E13.5-434_+_E15.0-428         0         0       318\n2 2_Clusters_even_near E15.0-432_+_E13.5-432       536         0         0\n3 2_Clusters_even_near E15.0-508_+_E15.0-509         0         0         0\n  E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509 E15.0.510 E15.0.508\n1         0         0         0         0         0         0         0\n2         0         0         0       536         0         0         0\n3         0         0         0         0       397         0       397\n  E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1       318         0         0         0         0\n2         0         0         0         0         0\n3         0         0         0         0         0\n\n\n\nDefine which genes are expressed\nFor each data set we need to define, independently from the DEA methods, which genes are specific for each cluster. So we need to define first which genes are expressed and which are not expressed. To do so we can take advantage from the fact that we have the original clusters from which the cells were sampled to create the artificial datasets. So looking to the original cluster we define as expressed all genes present in at least the 20% of cells and we define as not expressed the genes completely absent or expressed in less than 5% of cells.\nSince these two thresholds can have a big influence on the tools performances we will test also others in other pages.\n\nfile.presence &lt;- readRDS(\"Data/MouseCortexFromLoom/FDR/Results/GenePresence_PerCluster.RDS\")\n\nfor (file in list.files(\"Data/MouseCortexFromLoom/SingleClusterRawData/\")) {\n#  print(file)\n  Code &lt;- str_split(file,pattern = \"_\",simplify = T)[1]\n  Time &lt;- str_split(Code,pattern = \"e\",simplify = T)[2]\n  Cluster &lt;- str_split(Code,pattern = \"e\",simplify = T)[1]\n  Cluster &lt;- str_remove(Cluster,pattern = \"Cl\")\n  Cluster &lt;- paste0(\"E\",Time,\"-\",Cluster)\n  file.presence[,Cluster] &lt;- \"Absent\"\n  dataset.cl &lt;- readRDS(file.path(\"Data/MouseCortexFromLoom/SingleClusterRawData/\",\n                                         file))\n  number.cell.expressing &lt;- rowSums(dataset.cl &gt; 0)\n  AbsentThreshold &lt;- round(0.05*dim(dataset.cl)[2],digits = 0)\n  PresenceThreshold &lt;- round(0.2*dim(dataset.cl)[2],digits = 0)\n  file.presence[names(number.cell.expressing[number.cell.expressing &gt; AbsentThreshold]),Cluster] &lt;- \"Uncertain\" \n  \n  file.presence[names(number.cell.expressing[number.cell.expressing &gt;= PresenceThreshold]),Cluster] &lt;- \"Present\"\n  print(Cluster)\n  print(table(file.presence[,Cluster]))\n  \n  }\n\n[1] \"E13.5-184\"\n\n   Absent   Present Uncertain \n     6719      3476      4500 \n[1] \"E13.5-187\"\n\n   Absent   Present Uncertain \n     5930      4609      4156 \n[1] \"E15.0-428\"\n\n   Absent   Present Uncertain \n     7470      2864      4361 \n[1] \"E13.5-432\"\n\n   Absent   Present Uncertain \n     6847      3640      4208 \n[1] \"E15.0-432\"\n\n   Absent   Present Uncertain \n     6951      3514      4230 \n[1] \"E13.5-434\"\n\n   Absent   Present Uncertain \n     7191      3185      4319 \n[1] \"E15.0-434\"\n\n   Absent   Present Uncertain \n     7554      3028      4113 \n[1] \"E13.5-437\"\n\n   Absent   Present Uncertain \n     7024      3430      4241 \n[1] \"E15.0-437\"\n\n   Absent   Present Uncertain \n     7090      3419      4186 \n[1] \"E17.5-505\"\n\n   Absent   Present Uncertain \n     7141      3154      4400 \n[1] \"E15.0-508\"\n\n   Absent   Present Uncertain \n     6637      3892      4166 \n[1] \"E15.0-509\"\n\n   Absent   Present Uncertain \n     6495      4039      4161 \n[1] \"E13.5-510\"\n\n   Absent   Present Uncertain \n     5961      4541      4193 \n[1] \"E15.0-510\"\n\n   Absent   Present Uncertain \n     6082      4480      4133 \n[1] \"E17.5-516\"\n\n   Absent   Present Uncertain \n     6931      3496      4268"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_even_near",
    "href": "FDR_analisysResults5_20.html#clusters_even_near",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2_Clusters_even_near",
    "text": "2_Clusters_even_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set             set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                     &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_even_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_even_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_even_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_even_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_even_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_even_near          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 8\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_even_nearPL &lt;- TwoClusters_even_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_even_nearPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_even_medium",
    "href": "FDR_analisysResults5_20.html#clusters_even_medium",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2_Clusters_even_medium",
    "text": "2_Clusters_even_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_even_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_even_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_even_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_even_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_even_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_even_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 447\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_even_mediumPL &lt;- Two_Clusters_even_medium + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_even_far",
    "href": "FDR_analisysResults5_20.html#clusters_even_far",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2_Clusters_even_far",
    "text": "2_Clusters_even_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set            set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                    &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_even_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_even_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_even_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_even_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_even_far          1\n6 Lama1 E13.5-187 FALSE 2_Clusters_even_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1359\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_even_farPL &lt;- Two_Clusters_even_far + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_farPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_uneven_near",
    "href": "FDR_analisysResults5_20.html#clusters_uneven_near",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2_Clusters_uneven_near",
    "text": "2_Clusters_uneven_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_uneven_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_uneven_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 8\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\nplot(roc_resultSeurat)\n\n\n\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_uneven_nearPL &lt;- Two_Clusters_uneven_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_uneven_nearPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_uneven_medium",
    "href": "FDR_analisysResults5_20.html#clusters_uneven_medium",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2_Clusters_uneven_medium",
    "text": "2_Clusters_uneven_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set                 set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                         &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 447\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_uneven_mediumPL &lt;- Two_Clusters_uneven_medium + xlab(\"FPR\") + ylab(\"TPR\")\n\nTwo_Clusters_uneven_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_uneven_far",
    "href": "FDR_analisysResults5_20.html#clusters_uneven_far",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2_Clusters_uneven_far",
    "text": "2_Clusters_uneven_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set              set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                      &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_uneven_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_uneven_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n6 Lama1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1359\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_uneven_farPL &lt;- Two_Clusters_uneven_far + xlab(\"FPR\") + ylab(\"TPR\")\n\nTwo_Clusters_uneven_farPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_even",
    "href": "FDR_analisysResults5_20.html#clusters_even",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "3_Clusters_even",
    "text": "3_Clusters_even\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_even\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set        set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                &lt;int&gt;\n1 Neil2 E15.0-437 FALSE 3_Clusters_even          1\n2 Neil2 E13.5-510 FALSE 3_Clusters_even          1\n3 Neil2 E13.5-437 FALSE 3_Clusters_even          1\n4 Lamc1 E15.0-437 FALSE 3_Clusters_even          1\n5 Lamc1 E13.5-510 FALSE 3_Clusters_even          1\n6 Lamc1 E13.5-437 FALSE 3_Clusters_even          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1305\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E17.5-516\"\n[1] \"E13.5-437\"\n[1] \"E17.5-505\"\n[1] \"E15.0-510\"\n[1] \"E15.0-428\"\n[1] \"E13.5-510\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_even &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nThree_Clusters_evenPL &lt;- Three_Clusters_even + \n  xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\nThree_Clusters_even"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_uneven",
    "href": "FDR_analisysResults5_20.html#clusters_uneven",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "3_Clusters_uneven",
    "text": "3_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E15.0-428 FALSE 3_Clusters_uneven          1\n2 Neil2 E13.5-434 FALSE 3_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 3_Clusters_uneven          1\n4 Lamc1 E15.0-428 FALSE 3_Clusters_uneven          1\n5 Lamc1 E13.5-434 FALSE 3_Clusters_uneven          1\n6 Lamc1 E15.0-510 FALSE 3_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1577\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E15.0-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E13.5-187\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_uneven &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nThree_Clusters_unevenPL &lt;- Three_Clusters_uneven + xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\n\nThree_Clusters_uneven"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters_uneven-1",
    "href": "FDR_analisysResults5_20.html#clusters_uneven-1",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "5_Clusters_uneven",
    "text": "5_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"5_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E13.5-510 FALSE 5_Clusters_uneven          1\n2 Neil2 E15.0-437 FALSE 5_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 5_Clusters_uneven          1\n4 Neil2 E13.5-432 FALSE 5_Clusters_uneven          1\n5 Neil2 E13.5-437 FALSE 5_Clusters_uneven          1\n6 Lamc1 E13.5-510 FALSE 5_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1862\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-432\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E13.5-184\"\n[1] \"E15.0-434\"\n[1] \"E17.5-505\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-187\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nFive_Clusters &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\n \nFive_Clusters_unevenPL &lt;- Five_Clusters + xlab(\"FPR\") + ylab(\"TPR\")\n\nFive_Clusters_unevenPL"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#clusters-2",
    "href": "FDR_analisysResults5_20.html#clusters-2",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "2 Clusters",
    "text": "2 Clusters\n\nggarrange(TwoClusters_even_nearPL,Two_Clusters_even_mediumPL, Two_Clusters_even_farPL,Two_Clusters_uneven_nearPL, Two_Clusters_uneven_mediumPL,Two_Clusters_uneven_farPL,\n          labels = c(\"Even_Near\", \"Even_Medium\", \"Even_Far\", \"Uneven_Near\",\"Uneven_Medium\",\"Uneven_Far\"),\n          ncol = 3, nrow = 2, common.legend = T, legend = \"bottom\")"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#and-5-clusters",
    "href": "FDR_analisysResults5_20.html#and-5-clusters",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "3 and 5 Clusters",
    "text": "3 and 5 Clusters\n\nggarrange(Three_Clusters_evenPL,Three_Clusters_unevenPL, NULL, Five_Clusters_unevenPL,\n          labels = c(\"3_Even\", \"3_Uneven\", \"\", \"5_Uneven\"),\n          ncol = 2, nrow = 2, common.legend = T, legend = \"bottom\")"
  },
  {
    "objectID": "FDR_analisysResults5_20.html#footer",
    "href": "FDR_analisysResults5_20.html#footer",
    "title": "FDR analysis - Results - thresholds true 5% 20%",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggpubr_0.6.0                ggplot2_3.4.2              \n [3] tidyr_1.3.0                 dplyr_1.1.2                \n [5] stringr_1.5.0               reticulate_1.35.0          \n [7] monocle3_1.3.4              SingleCellExperiment_1.22.0\n [9] SummarizedExperiment_1.30.2 GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            MatrixGenerics_1.12.3      \n[15] matrixStats_1.2.0           Biobase_2.60.0             \n[17] BiocGenerics_0.46.0         Seurat_5.0.0               \n[19] SeuratObject_5.0.0          sp_2.1-1                   \n[21] pROC_1.18.4                 COTAN_2.3.3                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] rstatix_0.7.2             doParallel_1.0.17        \n [11] globals_0.16.2            lattice_0.22-5           \n [13] MASS_7.3-60               backports_1.4.1          \n [15] dendextend_1.17.1         magrittr_2.0.3           \n [17] plotly_4.10.2             rmarkdown_2.24           \n [19] yaml_2.3.7                httpuv_1.6.11            \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.16                purrr_1.0.1              \n [33] RCurl_1.98-1.12           GenomeInfoDbData_1.2.10  \n [35] circlize_0.4.15           ggrepel_0.9.3            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       tidyselect_1.2.0         \n [53] shape_1.4.6               farver_2.1.1             \n [55] lme4_1.1-34               ScaledMatrix_1.8.1       \n [57] viridis_0.6.4             spatstat.explore_3.2-1   \n [59] jsonlite_1.8.7            GetoptLong_1.0.5         \n [61] ellipsis_0.3.2            progressr_0.14.0         \n [63] ggridges_0.5.4            survival_3.5-7           \n [65] iterators_1.0.14          foreach_1.5.2            \n [67] tools_4.3.2               ica_1.0-3                \n [69] Rcpp_1.0.11               glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.0.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] scattermore_1.2           tensor_1.5               \n [87] spatstat.data_3.0-1       utf8_1.2.3               \n [89] generics_0.1.3            data.table_1.15.0        \n [91] httr_1.4.6                htmlwidgets_1.6.2        \n [93] S4Arrays_1.2.0            uwot_0.1.16              \n [95] pkgconfig_2.0.3           gtable_0.3.3             \n [97] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n [99] XVector_0.40.0            htmltools_0.5.7          \n[101] carData_3.0-5             dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] nlme_3.1-163              zoo_1.8-12               \n[113] GlobalOptions_0.1.2       KernSmooth_2.23-22       \n[115] parallel_4.3.2            miniUI_0.1.1.1           \n[117] RcppZiggurat_0.1.6        pillar_1.9.0             \n[119] grid_4.3.2                vctrs_0.6.3              \n[121] RANN_2.6.1                promises_1.2.0.1         \n[123] car_3.1-2                 BiocSingular_1.16.0      \n[125] beachmat_2.16.0           xtable_1.8-4             \n[127] cluster_2.1.6             evaluate_0.21            \n[129] zeallot_0.1.0             cli_3.6.1                \n[131] compiler_4.3.2            rlang_1.1.1              \n[133] crayon_1.5.2              ggsignif_0.6.4           \n[135] future.apply_1.11.0       labeling_0.4.2           \n[137] plyr_1.8.8                stringi_1.8.1            \n[139] viridisLite_0.4.2         deldir_2.0-2             \n[141] BiocParallel_1.34.2       assertthat_0.2.1         \n[143] munsell_0.5.0             lazyeval_0.2.2           \n[145] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[147] Matrix_1.6-3              RcppHNSW_0.6.0           \n[149] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[151] future_1.33.0             shiny_1.8.0              \n[153] ROCR_1.0-11               Rfast_2.1.0              \n[155] broom_1.0.5               igraph_1.6.0             \n[157] RcppParallel_5.1.7"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html",
    "href": "FDR_analisysResults3_10_th04.html",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(cowplot)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nmethods.color &lt;- c(\"COTAN\"=\"#F73604\",\"Seurat\"=\"#ABD9E9\",\"Seurat_scTr\"=\"#74ADD1\",\"Seurat_Bimod\"=\"#4575B4\", \"Monocle\"=\"#DAABE9\", \"Scanpy\"=\"#7F9B5C\" )\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#preamble",
    "href": "FDR_analisysResults3_10_th04.html#preamble",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(cowplot)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nmethods.color &lt;- c(\"COTAN\"=\"#F73604\",\"Seurat\"=\"#ABD9E9\",\"Seurat_scTr\"=\"#74ADD1\",\"Seurat_Bimod\"=\"#4575B4\", \"Monocle\"=\"#DAABE9\", \"Scanpy\"=\"#7F9B5C\" )\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#dataset-composition",
    "href": "FDR_analisysResults3_10_th04.html#dataset-composition",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "Dataset composition",
    "text": "Dataset composition\n\ndatasets_csv &lt;- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv[1:3,]\n\n                 Group            Collection E13.5.432 E13.5.187 E13.5.434\n1 2_Clusters_even_near E13.5-434_+_E15.0-428         0         0       318\n2 2_Clusters_even_near E15.0-432_+_E13.5-432       536         0         0\n3 2_Clusters_even_near E15.0-508_+_E15.0-509         0         0         0\n  E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509 E15.0.510 E15.0.508\n1         0         0         0         0         0         0         0\n2         0         0         0       536         0         0         0\n3         0         0         0         0       397         0       397\n  E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1       318         0         0         0         0\n2         0         0         0         0         0\n3         0         0         0         0         0\n\n\n\nDefine which genes are expressed\nFor each data set we need to define, independently from the DEA methods, which genes are specific for each cluster. So we need to define first which genes are expressed and which are not expressed. To do so we can take advantage from the fact that we have the original clusters from which the cells were sampled to create the artificial datasets. So looking to the original cluster we define as expressed all genes present in at least the 10% of cells and we define as not expressed the genes completely absent or expressed in less than 3% of cells.\nSince these two thresholds can have a big influence on the tools performances we will test also others in other pages.\n\nfile.presence &lt;- readRDS(\"Data/MouseCortexFromLoom/FDR/Results/GenePresence_PerCluster.RDS\")\n\nfor (file in list.files(\"Data/MouseCortexFromLoom/SingleClusterRawData/\")) {\n#  print(file)\n  Code &lt;- str_split(file,pattern = \"_\",simplify = T)[1]\n  Time &lt;- str_split(Code,pattern = \"e\",simplify = T)[2]\n  Cluster &lt;- str_split(Code,pattern = \"e\",simplify = T)[1]\n  Cluster &lt;- str_remove(Cluster,pattern = \"Cl\")\n  Cluster &lt;- paste0(\"E\",Time,\"-\",Cluster)\n  file.presence[,Cluster] &lt;- \"Absent\"\n  dataset.cl &lt;- readRDS(file.path(\"Data/MouseCortexFromLoom/SingleClusterRawData/\",\n                                         file))\n  number.cell.expressing &lt;- rowSums(dataset.cl &gt; 0)\n  AbsentThreshold &lt;- round(0.03*dim(dataset.cl)[2],digits = 0)\n  PresenceThreshold &lt;- round(0.1*dim(dataset.cl)[2],digits = 0)\n  file.presence[names(number.cell.expressing[number.cell.expressing &gt; AbsentThreshold]),Cluster] &lt;- \"Uncertain\" \n  \n  file.presence[names(number.cell.expressing[number.cell.expressing &gt;= PresenceThreshold]),Cluster] &lt;- \"Present\"\n  print(Cluster)\n  print(table(file.presence[,Cluster]))\n  \n  }\n\n[1] \"E13.5-184\"\n\n   Absent   Present Uncertain \n     5519      6027      3149 \n[1] \"E13.5-187\"\n\n   Absent   Present Uncertain \n     4926      7151      2618 \n[1] \"E15.0-428\"\n\n   Absent   Present Uncertain \n     6386      5253      3056 \n[1] \"E13.5-432\"\n\n   Absent   Present Uncertain \n     5765      5975      2955 \n[1] \"E15.0-432\"\n\n   Absent   Present Uncertain \n     5912      5843      2940 \n[1] \"E13.5-434\"\n\n   Absent   Present Uncertain \n     6124      5487      3084 \n[1] \"E15.0-434\"\n\n   Absent   Present Uncertain \n     6301      5396      2998 \n[1] \"E13.5-437\"\n\n   Absent   Present Uncertain \n     5943      5783      2969 \n[1] \"E15.0-437\"\n\n   Absent   Present Uncertain \n     6017      5713      2965 \n[1] \"E17.5-505\"\n\n   Absent   Present Uncertain \n     6048      5662      2985 \n[1] \"E15.0-508\"\n\n   Absent   Present Uncertain \n     5625      6240      2830 \n[1] \"E15.0-509\"\n\n   Absent   Present Uncertain \n     5452      6454      2789 \n[1] \"E13.5-510\"\n\n   Absent   Present Uncertain \n     4924      6958      2813 \n[1] \"E15.0-510\"\n\n   Absent   Present Uncertain \n     5070      6952      2673 \n[1] \"E17.5-516\"\n\n   Absent   Present Uncertain \n     5821      5847      3027"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_even_near",
    "href": "FDR_analisysResults3_10_th04.html#clusters_even_near",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_even_near",
    "text": "2_Clusters_even_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot,20)\n\n# A tibble: 20 × 5\n   genes  clusters  value data_set             set_number\n   &lt;chr&gt;  &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                     &lt;int&gt;\n 1 Neil2  E13.5-434 FALSE 2_Clusters_even_near          1\n 2 Neil2  E15.0-428 FALSE 2_Clusters_even_near          1\n 3 Lamc1  E13.5-434 FALSE 2_Clusters_even_near          1\n 4 Lamc1  E15.0-428 FALSE 2_Clusters_even_near          1\n 5 Lama1  E13.5-434 FALSE 2_Clusters_even_near          1\n 6 Lama1  E15.0-428 FALSE 2_Clusters_even_near          1\n 7 Hs3st1 E13.5-434 FALSE 2_Clusters_even_near          1\n 8 Hs3st1 E15.0-428 FALSE 2_Clusters_even_near          1\n 9 Fabp3  E13.5-434 FALSE 2_Clusters_even_near          1\n10 Fabp3  E15.0-428 FALSE 2_Clusters_even_near          1\n11 Nrg2   E13.5-434 FALSE 2_Clusters_even_near          1\n12 Nrg2   E15.0-428 FALSE 2_Clusters_even_near          1\n13 Kdelr3 E13.5-434 FALSE 2_Clusters_even_near          1\n14 Kdelr3 E15.0-428 FALSE 2_Clusters_even_near          1\n15 Bend4  E13.5-434 FALSE 2_Clusters_even_near          1\n16 Bend4  E15.0-428 FALSE 2_Clusters_even_near          1\n17 Gjb4   E13.5-434 FALSE 2_Clusters_even_near          1\n18 Gjb4   E15.0-428 FALSE 2_Clusters_even_near          1\n19 Mogs   E13.5-434 FALSE 2_Clusters_even_near          1\n20 Mogs   E15.0-428 FALSE 2_Clusters_even_near          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 24\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwoClusters_even_nearPL &lt;- TwoClusters_even_near + \n  xlab(\"FPR\") + \n  ylab(\"TPR\")\nTwoClusters_even_nearPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_even_medium",
    "href": "FDR_analisysResults3_10_th04.html#clusters_even_medium",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_even_medium",
    "text": "2_Clusters_even_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_even_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_even_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_even_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_even_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_even_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_even_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 771\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_even_mediumPL &lt;- Two_Clusters_even_medium + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_even_far",
    "href": "FDR_analisysResults3_10_th04.html#clusters_even_far",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_even_far",
    "text": "2_Clusters_even_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set            set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                    &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_even_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_even_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_even_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_even_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_even_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_even_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2325\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_even_farPL &lt;- Two_Clusters_even_far + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_farPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_uneven_near",
    "href": "FDR_analisysResults3_10_th04.html#clusters_uneven_near",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_uneven_near",
    "text": "2_Clusters_uneven_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_uneven_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_uneven_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 24\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\nplot(roc_resultSeurat)\n\n\n\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_uneven_nearPL &lt;- Two_Clusters_uneven_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_uneven_nearPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_uneven_medium",
    "href": "FDR_analisysResults3_10_th04.html#clusters_uneven_medium",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_uneven_medium",
    "text": "2_Clusters_uneven_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set                 set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                         &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 771\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_uneven_mediumPL &lt;- Two_Clusters_uneven_medium + xlab(\"FPR\") + ylab(\"TPR\")\n\nTwo_Clusters_uneven_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_uneven_far",
    "href": "FDR_analisysResults3_10_th04.html#clusters_uneven_far",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_uneven_far",
    "text": "2_Clusters_uneven_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set              set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                      &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_uneven_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_uneven_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_uneven_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2325\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_uneven_farPL &lt;- Two_Clusters_uneven_far + xlab(\"FPR\") + ylab(\"TPR\")\n\nlg &lt;- get_legend(Two_Clusters_uneven_farPL)\n\nTwo_Clusters_uneven_farPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_even",
    "href": "FDR_analisysResults3_10_th04.html#clusters_even",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "3_Clusters_even",
    "text": "3_Clusters_even\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_even\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set        set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                &lt;int&gt;\n1 Neil2 E15.0-437 FALSE 3_Clusters_even          1\n2 Neil2 E13.5-510 FALSE 3_Clusters_even          1\n3 Neil2 E13.5-437 FALSE 3_Clusters_even          1\n4 Lamc1 E15.0-437 FALSE 3_Clusters_even          1\n5 Lamc1 E13.5-510 FALSE 3_Clusters_even          1\n6 Lamc1 E13.5-437 FALSE 3_Clusters_even          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1288\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E17.5-516\"\n[1] \"E13.5-437\"\n[1] \"E17.5-505\"\n[1] \"E15.0-510\"\n[1] \"E15.0-428\"\n[1] \"E13.5-510\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_even &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nThree_Clusters_evenPL &lt;- Three_Clusters_even + \n  xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\nThree_Clusters_even"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_uneven",
    "href": "FDR_analisysResults3_10_th04.html#clusters_uneven",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "3_Clusters_uneven",
    "text": "3_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E15.0-428 FALSE 3_Clusters_uneven          1\n2 Neil2 E13.5-434 FALSE 3_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 3_Clusters_uneven          1\n4 Lamc1 E15.0-428 FALSE 3_Clusters_uneven          1\n5 Lamc1 E13.5-434 FALSE 3_Clusters_uneven          1\n6 Lamc1 E15.0-510 FALSE 3_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1804\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E15.0-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E13.5-187\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_uneven &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nThree_Clusters_unevenPL &lt;- Three_Clusters_uneven + xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\n\nThree_Clusters_uneven"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters_uneven-1",
    "href": "FDR_analisysResults3_10_th04.html#clusters_uneven-1",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "5_Clusters_uneven",
    "text": "5_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"5_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.35  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\n\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E13.5-510 FALSE 5_Clusters_uneven          1\n2 Neil2 E15.0-437 FALSE 5_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 5_Clusters_uneven          1\n4 Neil2 E13.5-432 FALSE 5_Clusters_uneven          1\n5 Neil2 E13.5-437 FALSE 5_Clusters_uneven          1\n6 Lamc1 E13.5-510 FALSE 5_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1663\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  genesLambda &lt;- getLambda(dataset)\n  genesLambda &lt;- as.data.frame(genesLambda)\n  genesLambda$genes &lt;- rownames(genesLambda)\n  \n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  \n  onlyPositive.pVal.Cotan &lt;- merge(onlyPositive.pVal.Cotan,genesLambda,by=\"genes\")\n  \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-432\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E13.5-184\"\n[1] \"E15.0-434\"\n[1] \"E17.5-505\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-187\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\ncotan.threshold.pval &lt;- quantile(onlyPositive.pVal.Cotan_tot[onlyPositive.pVal.Cotan_tot$value == 0,]$p_values,probs = 0.05)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\ndeaSeurat_tot_base &lt;- deaSeurat_tot\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\nseurat.threshold.pval &lt;- quantile(deaSeurat_tot_base[deaSeurat_tot_base$value == 0,]$p_val,probs = 0.05)\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\ndeaSeurat_tot_scTr &lt;- deaSeurat_tot\n\nSeurat_scTr.threshold.pval &lt;- quantile(deaSeurat_tot_scTr[deaSeurat_tot_scTr$value == 0,]$p_val,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\ndeaSeurat_tot_Bimod &lt;- deaSeurat_tot\n\nseurat_bimod.threshold.pval &lt;- quantile(deaSeurat_tot_Bimod[deaSeurat_tot_Bimod$value == 0,]$p_val,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\nmonocle.threshold.pval &lt;- quantile(deaMonocle_tot[deaMonocle_tot$value == 0,]$marker_test_p_value,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\nscanpy.threshold.pval &lt;- quantile(deaScanpy_tot[deaScanpy_tot$value == 0,]$pval,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nFive_Clusters &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\n \nFive_Clusters_unevenPL &lt;- Five_Clusters + xlab(\"FPR\") + ylab(\"TPR\")\n\nFive_Clusters_unevenPL"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#clusters-2",
    "href": "FDR_analisysResults3_10_th04.html#clusters-2",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2 Clusters",
    "text": "2 Clusters\n\nplot_2cl &lt;- ggarrange(TwoClusters_even_nearPL,Two_Clusters_even_mediumPL, Two_Clusters_even_farPL,Two_Clusters_uneven_nearPL, Two_Clusters_uneven_mediumPL,Two_Clusters_uneven_farPL,\n          labels = c(\"Even_Near\", \"Even_Medium\", \"Even_Far\", \"Uneven_Near\",\"Uneven_Medium\",\"Uneven_Far\"),\n          ncol = 3, nrow = 2, common.legend = T, legend = \"bottom\")\n\npdf(paste0(dirOut,\"ROC_two_supp.pdf\"),width = 15,height = 10)\nplot(plot_2cl)\ndev.off()\n\npng \n  2 \n\nplot_2cl"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#and-5-clusters",
    "href": "FDR_analisysResults3_10_th04.html#and-5-clusters",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "3 and 5 Clusters",
    "text": "3 and 5 Clusters\n\nplot_3_5 &lt;- ggarrange(Three_Clusters_evenPL,Three_Clusters_unevenPL, NULL, Five_Clusters_unevenPL,\n          labels = c(\"3_Even\", \"3_Uneven\", \"\", \"5_Uneven\"),\n          ncol = 2, nrow = 2, common.legend = T, legend = \"bottom\")\n\npdf(paste0(dirOut,\"ROC_three_five_supp.pdf\"),width = 10,height = 10)\nplot(plot_3_5)\ndev.off()\n\npng \n  2 \n\nplot_3_5\n\n\n\n\n\nplot3 &lt;- ggarrange(Two_Clusters_uneven_farPL,Three_Clusters_unevenPL, Five_Clusters_unevenPL,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 3, nrow = 1, common.legend = T, legend = \"none\")\n\npdf(paste0(dirOut,\"ROC_three_main.pdf\"),width = 15,height = 5)\nplot(plot3)\ndev.off()\n\npng \n  2 \n\nplot3"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#histogram-with-gene-expression-level",
    "href": "FDR_analisysResults3_10_th04.html#histogram-with-gene-expression-level",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "Histogram with gene expression level",
    "text": "Histogram with gene expression level\n\nground_truth_tot_subset &lt;- as.data.frame(ground_truth_tot[ground_truth_tot$value ==1,])\n\nCOTAN_data &lt;- onlyPositive.pVal.Cotan_tot[,c(\"genes\",\"set_number\",\"clusters\",\"p_values\",\"genesLambda\")]\n\ncolnames(COTAN_data) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_COTAN\",\"genesLambda\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 COTAN_data,\n                                 by=c(\"genes\",\"set_number\", \"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nSeurat_data_base &lt;- deaSeurat_tot_base[,c(\"genes\",\"set_number\",\"clusters\", \"p_val\")]\ncolnames(Seurat_data_base) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Seurat\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 Seurat_data_base,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nSeurat_data_scTr &lt;- deaSeurat_tot_scTr[,c(\"genes\",\"set_number\",\"clusters\", \"p_val\")]\ncolnames(Seurat_data_scTr) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Seurat_scTr\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 Seurat_data_scTr,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nSeurat_data_Bimod &lt;- deaSeurat_tot_Bimod[,c(\"genes\",\"set_number\",\"clusters\", \"p_val\")]\ncolnames(Seurat_data_Bimod) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Seurat_Bimod\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 Seurat_data_Bimod,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\n\ndata_Monocle &lt;- deaMonocle_tot[,c(\"genes\",\"set_number\",\"clusters\", \"marker_test_p_value\")]\ncolnames(data_Monocle) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Monocle\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 data_Monocle,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\ndata_Scanpy &lt;- deaScanpy_tot[,c(\"genes\",\"set_number\",\"clusters\", \"pval\")]\ncolnames(data_Scanpy) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Scanpy\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 data_Scanpy,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nground_truth_tot_subset &lt;- ground_truth_tot_subset %&gt;% mutate(lambda_bin = cut(genesLambda, breaks=50))\n\nground_truth_tot_subset[is.na(ground_truth_tot_subset)] &lt;- 1\n\nhead(ground_truth_tot_subset)\n\n          genes set_number  clusters value          data_set p_value_COTAN\n1 A330102I10Rik          2 E17.5-505  TRUE 5_Clusters_uneven  3.580400e-01\n2 A630089N07Rik          2 E13.5-184  TRUE 5_Clusters_uneven  1.152963e-10\n3 A830010M20Rik          1 E15.0-510  TRUE 5_Clusters_uneven  6.731088e-05\n4 A930004D18Rik          2 E13.5-184  TRUE 5_Clusters_uneven  1.847177e-04\n5         Aaed1          3 E13.5-187  TRUE 5_Clusters_uneven  1.613229e-05\n6          Abat          2 E15.0-428  TRUE 5_Clusters_uneven  4.997729e-07\n  genesLambda p_value_Seurat p_value_Seurat_scTr p_value_Seurat_Bimod\n1  0.03431373   1.000000e+00        1.000000e+00         2.718294e-04\n2  0.06617647   1.632048e-12        7.812652e-13         1.731541e-09\n3  0.07175926   2.117000e-07        1.205805e-07         1.913975e-06\n4  0.06740196   1.841516e-05        1.287232e-05         4.368518e-06\n5  0.01704158   8.730213e-07        7.218352e-07         3.744192e-05\n6  0.05514706   2.469818e-05        3.984286e-05         5.906623e-04\n  p_value_Monocle p_value_Scanpy       lambda_bin\n1    1.935776e-01    0.793509146  (0.0341,0.0641]\n2    1.328598e-09    0.004754579  (0.0641,0.0941]\n3    2.189873e-06    0.024391612  (0.0641,0.0941]\n4    1.947179e-04    0.074967388  (0.0641,0.0941]\n5    2.742404e-03    0.311500465 (0.00259,0.0341]\n6    6.040666e-05    0.102450927  (0.0341,0.0641]\n\n\n\nbins &lt;- levels(ground_truth_tot_subset$lambda_bin)\nbins &lt;- bins[!is.na(bins)]\n\nforBarChart &lt;- as.data.frame(matrix(nrow = length(bins),ncol = 7,data = 0))\n\ncolnames(forBarChart) &lt;- c(\"bins\",\"COTAN\",\"Seurat\",\"Seurat_Bimod\",\"Seurat_scTr\",\"Monocle\", \"Scanpy\")\nforBarChart$bins &lt;- bins\nrownames(forBarChart) &lt;- forBarChart$bins\n\n#p_val_threshold &lt;- 0.05\n\nfor (i in as.vector(forBarChart$bins)) {\n  forBarChart[ i,\"COTAN\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_COTAN &lt;= cotan.threshold.pval)\n  \n  forBarChart[ i,\"Seurat\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Seurat &lt;= seurat.threshold.pval)\n  \n  forBarChart[ i,\"Seurat_Bimod\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Seurat_Bimod &lt;= seurat_bimod.threshold.pval)\n  \n  forBarChart[ i,\"Seurat_scTr\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Seurat_scTr &lt;= Seurat_scTr.threshold.pval)\n  \n  forBarChart[ i,\"Monocle\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Monocle &lt;= monocle.threshold.pval)\n  \n  forBarChart[ i,\"Scanpy\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Scanpy &lt;= scanpy.threshold.pval)\n  \n}\n\ntemp.bin &lt;- as.data.frame(str_split(forBarChart$bins,pattern = \",\",simplify = T))\ntemp.bin[,1] &lt;- as.numeric(str_remove(temp.bin[,1],pattern = \"[(]\"))\ntemp.bin[,2] &lt;- as.numeric(str_remove(temp.bin[,2],pattern = \"[]]\"))\n\nforBarChart$bins &lt;- round(rowMeans(temp.bin),digits = 2)\n\n\nforBarChart &lt;- forBarChart[rowSums(forBarChart[,2:ncol(forBarChart)]) &gt; 0,]\n\nforBarChart.perc &lt;- forBarChart[1:8,]\n\nforBarChart.perc$tot &lt;- rowSums(forBarChart.perc[,2:ncol(forBarChart.perc)])\n\nforBarChart.perc[,2:(ncol(forBarChart.perc)-1)] &lt;- round(forBarChart.perc[,2:(ncol(forBarChart.perc)-1)]/forBarChart.perc$tot,digits = 4)\n\nforBarChart.perc &lt;- pivot_longer(forBarChart.perc,\n                               cols = 2:(ncol(forBarChart.perc)-1),\n                               names_to = \"Methods\")\n\nforBarChart.number &lt;- pivot_longer(forBarChart[1:8,],\n                               cols = 2:(ncol(forBarChart)),\n                               names_to = \"Methods\")\n\ncolnames(forBarChart.number) &lt;- c(\"bins\",\"Methods\", \"valueOriginal\")\n\nforBarChart.perc &lt;- merge(forBarChart.perc,forBarChart.number, by = c(\"bins\",\"Methods\"))\n\nbarChart &lt;- ggplot(forBarChart.perc,aes(x=bins,y=value,fill=Methods))+\n  geom_bar(stat=\"identity\")+\n  geom_text(aes(label = valueOriginal), \n            position = position_stack(vjust = 0.5),  size=3)+\n  scale_fill_manual(\n    values = methods.color)+\n  theme_light()+\n  scale_x_continuous(breaks =forBarChart.perc$bins)+\n  theme(axis.title.y=element_blank(),axis.title.x=element_blank(),\n      legend.position=\"none\",axis.text.x = element_text(angle = 45, hjust=1)\n    )+\n  scale_y_continuous(labels = scales::percent_format())\n\npdf(paste0(dirOut,\"EnrichedGenesForExpressionLevel.pdf\"),height = 3,width = 5)\nbarChart\ndev.off()\n\npng \n  2 \n\nplot(barChart)\n\n\n\n\n\nplot.with.inset &lt;-\n  ggdraw() +\n  draw_plot(plot3) +\n  draw_plot(as_ggplot(lg), x = 0.18, y = 0.1, width = 0.2, height = .45)+\n  draw_plot(barChart, x = 0.78, y = 0.09, width = 0.22, height = .5)\n\npdf(paste0(dirOut,\"Plot3WihtGenesExLevel.pdf\"),height = 5,width = 15)\nplot(plot.with.inset)\ndev.off()\n\npng \n  2 \n\nplot(plot.with.inset)"
  },
  {
    "objectID": "FDR_analisysResults3_10_th04.html#footer",
    "href": "FDR_analisysResults3_10_th04.html#footer",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggpubr_0.6.0                ggplot2_3.5.1              \n [3] tidyr_1.3.1                 dplyr_1.1.4                \n [5] stringr_1.5.1               cowplot_1.1.3              \n [7] reticulate_1.37.0           monocle3_1.3.4             \n [9] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n[11] GenomicRanges_1.56.0        GenomeInfoDb_1.40.0        \n[13] IRanges_2.38.0              S4Vectors_0.42.0           \n[15] MatrixGenerics_1.16.0       matrixStats_1.3.0          \n[17] Biobase_2.64.0              BiocGenerics_0.50.0        \n[19] Seurat_5.1.0                SeuratObject_5.0.2         \n[21] sp_2.1-4                    pROC_1.18.5                \n[23] COTAN_2.5.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.0            \n  [3] later_1.3.2               tibble_3.2.1             \n  [5] polyclip_1.10-6           fastDummies_1.7.3        \n  [7] lifecycle_1.0.4           rstatix_0.7.2            \n  [9] doParallel_1.0.17         globals_0.16.3           \n [11] lattice_0.22-6            MASS_7.3-60.2            \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.4            \n [17] rmarkdown_2.27            yaml_2.3.8               \n [19] httpuv_1.6.15             sctransform_0.4.1        \n [21] spam_2.10-0               askpass_1.2.0            \n [23] spatstat.sparse_3.0-3     minqa_1.2.7              \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] abind_1.4-5               zlibbioc_1.50.0          \n [29] Rtsne_0.17                purrr_1.0.2              \n [31] GenomeInfoDbData_1.2.12   circlize_0.4.16          \n [33] ggrepel_0.9.5             irlba_2.3.5.1            \n [35] listenv_0.9.1             spatstat.utils_3.0-4     \n [37] terra_1.7-78              umap_0.2.10.0            \n [39] goftest_1.2-3             RSpectra_0.16-1          \n [41] spatstat.random_3.2-3     dqrng_0.4.0              \n [43] fitdistrplus_1.1-11       parallelly_1.37.1        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] tidyselect_1.2.1          shape_1.4.6.1            \n [51] farver_2.1.2              UCSC.utils_1.0.0         \n [53] lme4_1.1-35.3             ScaledMatrix_1.12.0      \n [55] viridis_0.6.5             spatstat.explore_3.2-7   \n [57] jsonlite_1.8.8            GetoptLong_1.0.5         \n [59] progressr_0.14.0          ggridges_0.5.6           \n [61] survival_3.6-4            iterators_1.0.14         \n [63] foreach_1.5.2             tools_4.4.0              \n [65] ica_1.0-3                 Rcpp_1.0.12              \n [67] glue_1.7.0                gridExtra_2.3            \n [69] SparseArray_1.4.5         xfun_0.44                \n [71] ggthemes_5.1.0            withr_3.0.0              \n [73] fastmap_1.2.0             boot_1.3-30              \n [75] fansi_1.0.6               openssl_2.2.0            \n [77] digest_0.6.35             rsvd_1.0.5               \n [79] parallelDist_0.2.6        R6_2.5.1                 \n [81] mime_0.12                 colorspace_2.1-0         \n [83] scattermore_1.2           tensor_1.5               \n [85] spatstat.data_3.0-4       utf8_1.2.4               \n [87] generics_0.1.3            data.table_1.15.4        \n [89] httr_1.4.7                htmlwidgets_1.6.4        \n [91] S4Arrays_1.4.1            uwot_0.2.2               \n [93] pkgconfig_2.0.3           gtable_0.3.5             \n [95] ComplexHeatmap_2.20.0     lmtest_0.9-40            \n [97] XVector_0.44.0            htmltools_0.5.8.1        \n [99] carData_3.0-5             dotCall64_1.1-1          \n[101] clue_0.3-65               scales_1.3.0             \n[103] png_0.1-8                 knitr_1.46               \n[105] rstudioapi_0.16.0         reshape2_1.4.4           \n[107] rjson_0.2.21              nloptr_2.0.3             \n[109] nlme_3.1-164              zoo_1.8-12               \n[111] GlobalOptions_0.1.2       KernSmooth_2.23-24       \n[113] parallel_4.4.0            miniUI_0.1.1.1           \n[115] RcppZiggurat_0.1.6        pillar_1.9.0             \n[117] grid_4.4.0                vctrs_0.6.5              \n[119] RANN_2.6.1                promises_1.3.0           \n[121] car_3.1-2                 BiocSingular_1.20.0      \n[123] beachmat_2.20.0           xtable_1.8-4             \n[125] cluster_2.1.6             evaluate_0.23            \n[127] zeallot_0.1.0             cli_3.6.2                \n[129] compiler_4.4.0            rlang_1.1.3              \n[131] crayon_1.5.2              ggsignif_0.6.4           \n[133] future.apply_1.11.2       labeling_0.4.3           \n[135] plyr_1.8.9                stringi_1.8.4            \n[137] viridisLite_0.4.2         deldir_2.0-4             \n[139] BiocParallel_1.38.0       assertthat_0.2.1         \n[141] munsell_0.5.1             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-9       PCAtools_2.16.0          \n[145] Matrix_1.7-0              RcppHNSW_0.6.0           \n[147] patchwork_1.2.0           sparseMatrixStats_1.16.0 \n[149] future_1.33.2             shiny_1.8.1.1            \n[151] ROCR_1.0-11               Rfast_2.1.0              \n[153] broom_1.0.6               igraph_2.0.3             \n[155] RcppParallel_5.1.7"
  },
  {
    "objectID": "FDR_analisys.html",
    "href": "FDR_analisys.html",
    "title": "FDR analysis - define DE genes",
    "section": "",
    "text": "library(COTAN)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\"\n\n\nSeurat.DEA &lt;- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n  \n  \n  pbmc &lt;- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n  pbmc &lt;- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n  all.genes &lt;- rownames(pbmc)\n  pbmc &lt;- ScaleData(pbmc, features = all.genes)\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE)\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n}\n\n\nSeurat.DEA.bimod &lt;- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n  \n  \n  pbmc &lt;- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n  pbmc &lt;- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n  all.genes &lt;- rownames(pbmc)\n  pbmc &lt;- ScaleData(pbmc, features = all.genes)\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE,test.use = \"bimod\" )\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n}\n\nSeurat.DEAScTransform &lt;- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n\n  # store mitochondrial percentage in object meta data\n  pbmc &lt;- PercentageFeatureSet(pbmc, pattern = \"^mt-\", col.name = \"percent.mt\")\n\n# run sctransform\n  pbmc &lt;- SCTransform(pbmc, vars.to.regress = \"percent.mt\", verbose = FALSE)\n\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE)\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n}\n\n\n\n\nMonocle.DEA &lt;- function(dataSet,clusters.list,project, dirOut#,percentage\n                        ){\n  \n  cell_metadata = as.data.frame(clusters.list[colnames(dataSet)])\n  colnames(cell_metadata) &lt;- \"Clusters\"\n  cds &lt;- new_cell_data_set(dataSet[rowSums(dataSet) &gt; 3,],\n                         cell_metadata = cell_metadata\n                         )\n  colData(cds)$cluster &lt;- clusters.list[rownames(colData(cds))]\n\n  #cds &lt;- preprocess_cds(cds, num_dim = 100)\n  #cds &lt;- reduce_dimension(cds)\n  #cds &lt;- cluster_cells(cds, resolution=1e-5)\n  marker_test_res &lt;- top_markers(cds, \n                                 group_cells_by=\"Clusters\", \n                                 genes_to_test_per_group = dim(cds)[1],\n                                  cores=10)\n  \n  # de_results &lt;- fit_models(cds,model_formula_str = \" ~ cluster\",cores = 10,verbose = T)\n  # fit_coefs &lt;- coefficient_table(de_results)\n  # \n  # fit_coefs &lt;- fit_coefs %&gt;% filter(grepl(\"cluster\",term))\n  # fit_coefs &lt;- as.data.frame(fit_coefs)\n  #write.csv(as.data.frame(fit_coefs[,c(\"num_cells_expressed\" ,\"gene_id\",\"p_value\",\"q_value\")]), file = paste0(dirOut,project,\"_de_genes_Monocle_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=sum(marker_test_res$marker_test_q_value &lt; 0.05, na.rm = T),\n              \"marker_test_res\"= marker_test_res\n              ))\n}\n\n\nScamPy.DEA &lt;- function(dataSet,\n                       clusters.list, \n                       project, \n                       dirOut,\n                       percentage){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 20)\n  \n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- clusters.list\n  \n  exprs &lt;- pbmc@assays$RNA$counts\n  \n  meta &lt;- pbmc[[]]\n  #feature_meta &lt;- GetAssay(pbmc)[[]]\n  tmp &lt;- as.data.frame(matrix(data = NA, \n                              ncol = 1, \n                              nrow = nrow(pbmc@assays$RNA$counts)))\n  rownames(tmp) &lt;- rownames(pbmc@assays$RNA$counts)\n  \n  feature_meta &lt;- tmp\n  #embedding &lt;- Embeddings(pbmc, \"umap\")\n  \n  Sys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyFDR.py\")\n  scanpyFDR(exprs, \n                   meta, \n                   feature_meta, \n                   \"mt\", \n                   dirOut, \n                   project)\n\n  out &lt;- read.csv(file = paste0(dirOut,\n                                project,\n                                \"_Scampy_DEA_all_genes.csv\"\n                               ),\n                  header = T,\n                  row.names = 1)\n\n  gc()\n\n  return(out)\n}"
  },
  {
    "objectID": "FDR_analisys.html#automatic-functions",
    "href": "FDR_analisys.html#automatic-functions",
    "title": "FDR analysis - define DE genes",
    "section": "",
    "text": "library(COTAN)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\"\n\n\nSeurat.DEA &lt;- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n  \n  \n  pbmc &lt;- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n  pbmc &lt;- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n  all.genes &lt;- rownames(pbmc)\n  pbmc &lt;- ScaleData(pbmc, features = all.genes)\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE)\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n}\n\n\nSeurat.DEA.bimod &lt;- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n  \n  \n  pbmc &lt;- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n  pbmc &lt;- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n  all.genes &lt;- rownames(pbmc)\n  pbmc &lt;- ScaleData(pbmc, features = all.genes)\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE,test.use = \"bimod\" )\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n}\n\nSeurat.DEAScTransform &lt;- function(dataSet,clusters.list, project, dirOut#,percentage\n                       ){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet,\n                             project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n\n  # store mitochondrial percentage in object meta data\n  pbmc &lt;- PercentageFeatureSet(pbmc, pattern = \"^mt-\", col.name = \"percent.mt\")\n\n# run sctransform\n  pbmc &lt;- SCTransform(pbmc, vars.to.regress = \"percent.mt\", verbose = FALSE)\n\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE)\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  #write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n}\n\n\n\n\nMonocle.DEA &lt;- function(dataSet,clusters.list,project, dirOut#,percentage\n                        ){\n  \n  cell_metadata = as.data.frame(clusters.list[colnames(dataSet)])\n  colnames(cell_metadata) &lt;- \"Clusters\"\n  cds &lt;- new_cell_data_set(dataSet[rowSums(dataSet) &gt; 3,],\n                         cell_metadata = cell_metadata\n                         )\n  colData(cds)$cluster &lt;- clusters.list[rownames(colData(cds))]\n\n  #cds &lt;- preprocess_cds(cds, num_dim = 100)\n  #cds &lt;- reduce_dimension(cds)\n  #cds &lt;- cluster_cells(cds, resolution=1e-5)\n  marker_test_res &lt;- top_markers(cds, \n                                 group_cells_by=\"Clusters\", \n                                 genes_to_test_per_group = dim(cds)[1],\n                                  cores=10)\n  \n  # de_results &lt;- fit_models(cds,model_formula_str = \" ~ cluster\",cores = 10,verbose = T)\n  # fit_coefs &lt;- coefficient_table(de_results)\n  # \n  # fit_coefs &lt;- fit_coefs %&gt;% filter(grepl(\"cluster\",term))\n  # fit_coefs &lt;- as.data.frame(fit_coefs)\n  #write.csv(as.data.frame(fit_coefs[,c(\"num_cells_expressed\" ,\"gene_id\",\"p_value\",\"q_value\")]), file = paste0(dirOut,project,\"_de_genes_Monocle_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=sum(marker_test_res$marker_test_q_value &lt; 0.05, na.rm = T),\n              \"marker_test_res\"= marker_test_res\n              ))\n}\n\n\nScamPy.DEA &lt;- function(dataSet,\n                       clusters.list, \n                       project, \n                       dirOut,\n                       percentage){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 20)\n  \n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- clusters.list\n  \n  exprs &lt;- pbmc@assays$RNA$counts\n  \n  meta &lt;- pbmc[[]]\n  #feature_meta &lt;- GetAssay(pbmc)[[]]\n  tmp &lt;- as.data.frame(matrix(data = NA, \n                              ncol = 1, \n                              nrow = nrow(pbmc@assays$RNA$counts)))\n  rownames(tmp) &lt;- rownames(pbmc@assays$RNA$counts)\n  \n  feature_meta &lt;- tmp\n  #embedding &lt;- Embeddings(pbmc, \"umap\")\n  \n  Sys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyFDR.py\")\n  scanpyFDR(exprs, \n                   meta, \n                   feature_meta, \n                   \"mt\", \n                   dirOut, \n                   project)\n\n  out &lt;- read.csv(file = paste0(dirOut,\n                                project,\n                                \"_Scampy_DEA_all_genes.csv\"\n                               ),\n                  header = T,\n                  row.names = 1)\n\n  gc()\n\n  return(out)\n}"
  },
  {
    "objectID": "FDR_analisys.html#cluster-gene-enrichment",
    "href": "FDR_analisys.html#cluster-gene-enrichment",
    "title": "FDR analysis - define DE genes",
    "section": "Cluster Gene Enrichment",
    "text": "Cluster Gene Enrichment\n\ndatasets_csv &lt;- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv\n\n                      Group\n1      2_Clusters_even_near\n2      2_Clusters_even_near\n3      2_Clusters_even_near\n4    2_Clusters_even_medium\n5    2_Clusters_even_medium\n6    2_Clusters_even_medium\n7       2_Clusters_even_far\n8       2_Clusters_even_far\n9       2_Clusters_even_far\n10   2_Clusters_uneven_near\n11   2_Clusters_uneven_near\n12   2_Clusters_uneven_near\n13 2_Clusters_uneven_medium\n14 2_Clusters_uneven_medium\n15 2_Clusters_uneven_medium\n16    2_Clusters_uneven_far\n17    2_Clusters_uneven_far\n18    2_Clusters_uneven_far\n19          3_Clusters_even\n20          3_Clusters_even\n21          3_Clusters_even\n22        3_Clusters_uneven\n23        3_Clusters_uneven\n24        3_Clusters_uneven\n25        5_Clusters_uneven\n26        5_Clusters_uneven\n27        5_Clusters_uneven\n                                                  Collection E13.5.432\n1                                      E13.5-434_+_E15.0-428         0\n2                                      E15.0-432_+_E13.5-432       536\n3                                      E15.0-508_+_E15.0-509         0\n4                                      E13.5-187_+_E13.5-184         0\n5                                      E15.0-434_+_E17.5-516         0\n6                                      E15.0-437_+_E15.0-508         0\n7                                      E17.5-516_+_E13.5-187         0\n8                                      E15.0-510_+_E13.5-437         0\n9                                      E15.0-509_+_E13.5-184         0\n10                                     E13.5-434_+_E15.0-428         0\n11                                     E15.0-432_+_E13.5-432        66\n12                                     E15.0-508_+_E15.0-509         0\n13                                     E13.5-187_+_E13.5-184         0\n14                                     E15.0-434_+_E17.5-516         0\n15                                     E15.0-437_+_E15.0-508         0\n16                                     E17.5-516_+_E13.5-187         0\n17                                     E15.0-510_+_E13.5-437         0\n18                                     E15.0-509_+_E13.5-184         0\n19                         E15.0-437_+_E13.5-510_+_E13.5-437         0\n20                         E17.5-505_+_E17.5-516_+_E13.5-437         0\n21                         E15.0-510_+_E15.0-428_+_E13.5-510         0\n22                         E15.0-428_+_E13.5-434_+_E15.0-510         0\n23                         E13.5-187_+_E13.5-432_+_E15.0-432       168\n24                         E15.0-509_+_E13.5-184_+_E15.0-508         0\n25 E13.5-510_+_E15.0-437_+_E15.0-510_+_E13.5-432_+_E13.5-437       518\n26 E15.0-428_+_E13.5-434_+_E15.0-434_+_E17.5-505_+_E13.5-184         0\n27 E13.5-432_+_E15.0-509_+_E15.0-432_+_E13.5-187_+_E15.0-508       440\n   E13.5.187 E13.5.434 E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509\n1          0       318         0         0         0         0         0\n2          0         0         0         0         0       536         0\n3          0         0         0         0         0         0       397\n4        292         0       292         0         0         0         0\n5          0         0         0         0         0         0         0\n6          0         0         0         0         0         0         0\n7        297         0         0         0         0         0         0\n8          0         0         0       259         0         0         0\n9          0         0       292         0         0         0       292\n10         0       326         0         0         0         0         0\n11         0         0         0         0         0       586         0\n12         0         0         0         0         0         0       402\n13       334         0        38         0         0         0         0\n14         0         0         0         0         0         0         0\n15         0         0         0         0         0         0         0\n16       334         0         0         0         0         0         0\n17         0         0         0        45         0         0         0\n18         0         0        45         0         0         0       402\n19         0         0         0       248       248         0         0\n20         0         0         0       203         0         0         0\n21         0         0         0         0       248         0         0\n22         0       115         0         0         0         0         0\n23        84         0         0         0         0       586         0\n24         0         0        58         0         0         0       402\n25         0         0         0       259        65         0         0\n26         0       326       163         0         0         0         0\n27        74         0         0         0         0       586       293\n   E15.0.510 E15.0.508 E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1          0         0       318         0         0         0         0\n2          0         0         0         0         0         0         0\n3          0       397         0         0         0         0         0\n4          0         0         0         0         0         0         0\n5          0         0         0       273         0       273         0\n6          0       258         0         0       258         0         0\n7          0         0         0         0         0       297         0\n8        259         0         0         0         0         0         0\n9          0         0         0         0         0         0         0\n10         0         0        37         0         0         0         0\n11         0         0         0         0         0         0         0\n12         0        45         0         0         0         0         0\n13         0         0         0         0         0         0         0\n14         0         0         0        33         0       297         0\n15         0       397         0         0        45         0         0\n16         0         0         0         0         0        38         0\n17       402         0         0         0         0         0         0\n18         0         0         0         0         0         0         0\n19         0         0         0         0       248         0         0\n20         0         0         0         0         0       203       203\n21       248         0       248         0         0         0         0\n22       402         0        58         0         0         0         0\n23         0         0         0         0         0         0         0\n24         0       115         0         0         0         0         0\n25       389         0         0         0        65         0         0\n26         0         0       245        41         0         0        41\n27         0        74         0         0         0         0         0\n\n\n\nDEA genes for COTAN\n\nfor (ind in 1:dim(datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"bonferroni\")\n\n  df.genes &lt;- deaCOTAN[rowMin(as.matrix(pvalCOTAN)) &lt; 0.05,]\n  \n  write.csv(df.genes,file.path(dirOut,paste0(file.code,\"COTAN_DEA_genes.csv\")))\n  \n  }\n\n\n\nDEA genes for Seurat\n\nfor (ind in 1:dim(datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusters &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  deaSeurat &lt;- Seurat.DEA(getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  write.csv(deaSeurat$markers,\n          file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")))\n}\n\n\n\nDEA genes for Seurat scTransform\n\nfor (ind in 1:dim(datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusters &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  deaSeurat &lt;- Seurat.DEAScTransform(getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  write.csv(deaSeurat$markers,\n          file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")))\n}\n\n\n\nDEA genes for Seurat test: bimod\n\nfor (ind in 1:dim(datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusters &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  deaSeurat &lt;- Seurat.DEA.bimod(getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  write.csv(deaSeurat$markers,\n          file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")))\n}\n\n\n\nDEA from Monocle\n\nfor (ind in 1:dim(datasets_csv)[1]) {\n  file.code &lt;- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  print(file.code)\n  clusters &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  \n  deaMonocle &lt;- Monocle.DEA(dataSet = getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  \n  # deaMonocleOut &lt;- deaMonocle$fit_coefs[,c(\"num_cells_expressed\", \n  #                                         \"gene_id\",\"term\",\"estimate\",\n  #                                         \"std_err\", \"test_val\",\"p_value\", \n  #                                         \"normalized_effect\",\"q_value\")]\n  \n  \n  write.csv(deaMonocle$marker_test_res,\n          file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\"))) \n  \n  #rm(deaMonocleOut)\n  rm(deaMonocle)\n  gc()\n}\n\n\n\nDEA from ScamPy\n\nfor (ind in 1:dim(datasets_csv)[1]) {\n  file.code &lt;- paste0(datasets_csv$Group[ind],\"_\",datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusters &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[1]]\n  \n  deaScamPy &lt;- ScamPy.DEA(dataSet = getRawData(dataset),\n                          clusters.list = clusters,\n                          project = file.code,\n                          dirOut = dirOut)\n  \n  write.csv(deaScamPy,\n          file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\"))) \n  \n}"
  },
  {
    "objectID": "FDR_analisys.html#footer",
    "href": "FDR_analisys.html#footer",
    "title": "FDR analysis - define DE genes",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] dplyr_1.1.2                 stringr_1.5.0              \n [3] reticulate_1.35.0           monocle3_1.3.4             \n [5] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [7] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [9] IRanges_2.34.1              S4Vectors_0.38.1           \n[11] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[13] Biobase_2.60.0              BiocGenerics_0.46.0        \n[15] Seurat_5.0.0                SeuratObject_5.0.0         \n[17] sp_2.1-1                    COTAN_2.3.3                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] doParallel_1.0.17         globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] dendextend_1.17.1         magrittr_2.0.3           \n [15] plotly_4.10.2             rmarkdown_2.24           \n [17] yaml_2.3.7                httpuv_1.6.11            \n [19] sctransform_0.4.1         spam_2.10-0              \n [21] askpass_1.2.0             spatstat.sparse_3.0-2    \n [23] minqa_1.2.5               cowplot_1.1.1            \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] zlibbioc_1.46.0           abind_1.4-5              \n [29] Rtsne_0.16                purrr_1.0.1              \n [31] RCurl_1.98-1.12           GenomeInfoDbData_1.2.10  \n [33] circlize_0.4.15           ggrepel_0.9.3            \n [35] irlba_2.3.5.1             listenv_0.9.0            \n [37] spatstat.utils_3.0-3      terra_1.7-39             \n [39] umap_0.2.10.0             goftest_1.2-3            \n [41] RSpectra_0.16-1           spatstat.random_3.2-1    \n [43] dqrng_0.3.0               fitdistrplus_1.1-11      \n [45] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [47] leiden_0.4.3              codetools_0.2-19         \n [49] DelayedArray_0.26.7       tidyselect_1.2.0         \n [51] shape_1.4.6               lme4_1.1-34              \n [53] ScaledMatrix_1.8.1        viridis_0.6.4            \n [55] spatstat.explore_3.2-1    jsonlite_1.8.7           \n [57] GetoptLong_1.0.5          ellipsis_0.3.2           \n [59] progressr_0.14.0          ggridges_0.5.4           \n [61] survival_3.5-7            iterators_1.0.14         \n [63] foreach_1.5.2             tools_4.3.2              \n [65] ica_1.0-3                 Rcpp_1.0.11              \n [67] glue_1.7.0                gridExtra_2.3            \n [69] xfun_0.39                 ggthemes_5.0.0           \n [71] withr_3.0.0               fastmap_1.1.1            \n [73] boot_1.3-28               fansi_1.0.4              \n [75] openssl_2.1.0             digest_0.6.33            \n [77] rsvd_1.0.5                parallelDist_0.2.6       \n [79] R6_2.5.1                  mime_0.12                \n [81] colorspace_2.1-0          scattermore_1.2          \n [83] tensor_1.5                spatstat.data_3.0-1      \n [85] utf8_1.2.3                tidyr_1.3.0              \n [87] generics_0.1.3            data.table_1.15.0        \n [89] httr_1.4.6                htmlwidgets_1.6.2        \n [91] S4Arrays_1.2.0            uwot_0.1.16              \n [93] pkgconfig_2.0.3           gtable_0.3.3             \n [95] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n [97] XVector_0.40.0            htmltools_0.5.7          \n [99] dotCall64_1.1-0           clue_0.3-64              \n[101] scales_1.3.0              png_0.1-8                \n[103] knitr_1.43                rstudioapi_0.15.0        \n[105] reshape2_1.4.4            rjson_0.2.21             \n[107] nloptr_2.0.3              nlme_3.1-163             \n[109] zoo_1.8-12                GlobalOptions_0.1.2      \n[111] KernSmooth_2.23-22        parallel_4.3.2           \n[113] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[115] pillar_1.9.0              grid_4.3.2               \n[117] vctrs_0.6.3               RANN_2.6.1               \n[119] promises_1.2.0.1          BiocSingular_1.16.0      \n[121] beachmat_2.16.0           xtable_1.8-4             \n[123] cluster_2.1.6             evaluate_0.21            \n[125] zeallot_0.1.0             cli_3.6.1                \n[127] compiler_4.3.2            rlang_1.1.1              \n[129] crayon_1.5.2              future.apply_1.11.0      \n[131] plyr_1.8.8                stringi_1.8.1            \n[133] viridisLite_0.4.2         deldir_2.0-2             \n[135] BiocParallel_1.34.2       assertthat_0.2.1         \n[137] munsell_0.5.0             lazyeval_0.2.2           \n[139] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[141] Matrix_1.6-3              RcppHNSW_0.6.0           \n[143] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[145] future_1.33.0             ggplot2_3.4.2            \n[147] shiny_1.8.0               ROCR_1.0-11              \n[149] Rfast_2.1.0               igraph_1.6.0             \n[151] RcppParallel_5.1.7"
  },
  {
    "objectID": "DEA_Type1Er.html",
    "href": "DEA_Type1Er.html",
    "title": "Differential expression analisys: type I error",
    "section": "",
    "text": "library(COTAN)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(viridis)\n\n\ndirOut &lt;- \"Results/TypeIError/\"\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/SingleClusterRawData/\"\n\n\nAutomatic functions\n\nCOTAN.DEA &lt;- function(dataSet,clusters.list, GEO.code, sequencingMethod,sampleCondition, clName,dirOut,percentage){\n  obj &lt;- automaticCOTANObjectCreation(raw = dataSet,\n                                      calcCoex = F,\n                                      cores = 10,\n                                      saveObj = F,\n                                      GEO = GEO.code,\n                                      sequencingMethod = sequencingMethod,\n                                      sampleCondition = sampleCondition)\n  obj &lt;- addClusterization(obj,clName = clName,clusters = clusters.list)\n  \n  DF.DEA &lt;- DEAOnClusters(obj,clName = clName )\n  pval.DEA &lt;- pValueFromDEA(DF.DEA,numCells = getNumCells(obj))\n  adj.pval.DEA &lt;- pval.DEA\n  for (col in colnames(pval.DEA)) {\n    adj.pval.DEA[,col] &lt;- p.adjust(adj.pval.DEA[,col],method = \"bonferroni\")\n  }\n  n.genes.DEA &lt;- sum(adj.pval.DEA &lt; 0.05)\n  res &lt;- list(\"n.genes.DEA\"=n.genes.DEA,\"DF.DEA\"=DF.DEA,\"adj.pval.DEA\" = adj.pval.DEA)\n  \n  write.csv(res$adj.pval.DEA, file = paste0(dirOut,clName,\"_de_genes_COTAN_\",percentage,\".csv\"))\n  \n  return(res)\n\n}\n\nSeurat.DEA &lt;- function(dataSet,clusters.list, project, dirOut,percentage){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 20)\n  \n  stopifnot(length(clusters.list)==length(pbmc$orig.ident))\n  \n  \n  pbmc &lt;- NormalizeData(pbmc, normalization.method = \"LogNormalize\", scale.factor = 10000)\n  pbmc &lt;- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n  all.genes &lt;- rownames(pbmc)\n  pbmc &lt;- ScaleData(pbmc, features = all.genes)\n  \n  pbmc &lt;- RunPCA(pbmc)\n  pbmc &lt;- RunUMAP(pbmc, dims = 1:20)\n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- factor(clusters.list)\n  \n  pbmc &lt;- SetIdent(pbmc,value = \"TestCl\")\n  \n  pbmc.markers &lt;- FindAllMarkers(pbmc, only.pos = TRUE)\n  \n  \n  \n  n.genes.DEA &lt;- sum(pbmc.markers$p_val_adj &lt; 0.05)\n  \n  print(n.genes.DEA)\n  \n  write.csv(pbmc.markers, file = paste0(dirOut,project,\"_de_genes_Seurat_\",percentage,\".csv\"))\n  \n  return(list(\"n.genes.DEA\"=n.genes.DEA,\"markers\"= pbmc.markers))\n  }\n\nMonocle.DEA &lt;- function(dataSet,clusters.list,project, dirOut,percentage){\n  \n  cell_metadata = as.data.frame(clusters.list[colnames(dataSet)])\n  colnames(cell_metadata) &lt;- \"Clusters\"\n  cds &lt;- new_cell_data_set(dataSet[rowSums(dataSet) &gt; 3,],\n                         cell_metadata = cell_metadata\n                         )\n  colData(cds)$cluster &lt;- clusters.list[rownames(colData(cds))]\n\n  #cds &lt;- preprocess_cds(cds, num_dim = 100)\n  #cds &lt;- reduce_dimension(cds)\n  #cds &lt;- cluster_cells(cds, resolution=1e-5)\n\n  marker_test_res &lt;- top_markers(cds, \n                                 group_cells_by=\"Clusters\", \n                                 genes_to_test_per_group = dim(cds)[1],\n                                  cores=10)\n  \n  # de_results &lt;- fit_models(cds,model_formula_str = \" ~ cluster\",cores = 10,verbose = T)\n  # fit_coefs &lt;- coefficient_table(de_results)\n  # \n  # fit_coefs &lt;- fit_coefs %&gt;% filter(term == \"cluster\")\n  \n  write.csv(marker_test_res, file = paste0(dirOut,project,\"_de_genes_Monocle_\",percentage,\".csv\"))\n  \n  # return(list(\"n.genes.DEA\"=sum(fit_coefs$q_value &lt; 0.05, na.rm = T),\n  #             \"fit_coefs\"= fit_coefs,\n  #             \"de_results\"=de_results))\n  return(list(\"n.genes.DEA\"=sum(marker_test_res$marker_test_q_value &lt; 0.05, na.rm = T),\n              \"marker_test_res\"= marker_test_res\n              ))\n}\n\n\nScanPy.DEA &lt;- function(dataSet,\n                       clusters.list, \n                       project, \n                       dirOut,\n                       percentage){\n  pbmc &lt;- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 20)\n  \n  \n  pbmc@meta.data$TestCl &lt;- NA\n  pbmc@meta.data[names(clusters.list),]$TestCl &lt;- clusters.list\n  \n  exprs &lt;- pbmc@assays$RNA$counts\n  \n  meta &lt;- pbmc[[]]\n  #feature_meta &lt;- GetAssay(pbmc)[[]]\n  tmp &lt;- as.data.frame(matrix(data = NA, \n                              ncol = 1, \n                              nrow = nrow(pbmc@assays$RNA$counts)))\n  rownames(tmp) &lt;- rownames(pbmc@assays$RNA$counts)\n  \n  feature_meta &lt;- tmp\n  #embedding &lt;- Embeddings(pbmc, \"umap\")\n  \n  Sys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyTypeIError.py\")\n  scanpyTypeIError(exprs, \n                   meta, \n                   feature_meta, \n                   \"mt\", \n                   dirOut, \n                   percentage,project)\n\n  out &lt;- read.csv(file = paste0(dirOut,\n                                project,\n                                \"_Scanpy_de_genes_\",\n                                percentage,\n                                \".csv\"),\n                  header = T, \n                  row.names = 1)\n  \n  gc()\n\n  return(out)\n}\n\nWe would evaluate the Type I error and to do so, we consider some transcriptionally uniform clusters from the Loom dataset. We splitted these cluster in two partitions (with three different dimensions: 1/2, 1/3 and 1/4) one containing the cells with higher library size and the other with the lower library size. On these two clusters we than tested the four different software.\n\nfor (perc in c(0.75)) { #0.5, 0.33, 0.25,0.67, \n  outPutMatrix &lt;- as.data.frame(matrix(nrow = 1,ncol = 4))\n  colnames(outPutMatrix) &lt;- c(\"COTAN\",\"Seurat\", \"Monocle\", \"Scanpy\")\n\n  for (dataSet in list.files(dataSetDir)) {\n  \n    cluster.name &lt;- str_split(dataSet,pattern = \"_\", simplify = T)[1]\n    \n    print(cluster.name)\n    outTemp &lt;- NA\n     \n    dataSet &lt;- readRDS(paste0(dataSetDir,dataSet))\n    \n\n    cl1 &lt;- colnames(dataSet)[order(colSums(dataSet),decreasing = T)[1:round(ncol(dataSet)*perc,digits = 0)]]\n    \n    clusters.list &lt;- list(\"cl1\"=cl1,\n                          \"cl2\"=colnames(dataSet)[!colnames(dataSet) %in% cl1])\n  \n    clusters.list &lt;- setNames(rep(1,ncol(dataSet)),\n                              colnames(dataSet))\n    clusters.list[colnames(dataSet)[!colnames(dataSet) %in% cl1]] &lt;- 2 \n  \n    cotan.dea.out &lt;- COTAN.DEA(dataSet = dataSet,\n                               clusters.list = clusters.list,\n                               GEO.code = \"\",\n                               sequencingMethod = \"10x\",\n                               sampleCondition = \"Temp\",\n                               clName =  cluster.name,\n                               dirOut, percentage = perc)\n  \n    outTemp &lt;- c(outTemp,cotan.dea.out$n.genes.DEA)\n    \n    rm(cotan.dea.out)\n    gc()\n  \n    seurat.dea.out &lt;- Seurat.DEA(dataSet = dataSet,\n                               clusters.list = clusters.list,\n                               project = cluster.name,\n                               dirOut, percentage = perc)\n  \n    outTemp &lt;- c(outTemp,seurat.dea.out$n.genes.DEA)\n    \n    rm(seurat.dea.out)\n    gc()\n  \n  \n    monocle.dea.out &lt;- Monocle.DEA(dataSet = dataSet,\n                                   clusters.list = clusters.list,\n                                   project = cluster.name,\n                                   dirOut = dirOut, percentage = perc)\n  \n    outTemp &lt;- c(outTemp,monocle.dea.out$n.genes.DEA)\n    rm(monocle.dea.out)\n    gc()\n  \n    ScanPy.dea.out &lt;- ScanPy.DEA(dataSet = dataSet, \n                                 clusters.list = clusters.list, \n                                 project = cluster.name, \n                                 dirOut = dirOut, percentage = perc\n                                  )\n    \n  \n    ScanPy.dea.out.filterd &lt;- ScanPy.dea.out[ScanPy.dea.out$pval_adj &lt; 0.05\n                                             & ScanPy.dea.out$clusters == \"cl1.0\",]\n    \n    outTemp &lt;- c(outTemp,dim(ScanPy.dea.out.filterd)[1])\n    rm(ScanPy.dea.out.filterd)\n    gc()\n    \n    outTemp &lt;- outTemp[2:length(outTemp)]\n    \n    outPutMatrix &lt;- rbind(outPutMatrix,outTemp)\n    rownames(outPutMatrix)[nrow(outPutMatrix)] &lt;- cluster.name\n    \n    write.csv(outPutMatrix,paste0(dirOut,\"Complete_outPut_\",perc,\".csv\"))\n  }\n  \n  outPutMatrix &lt;-   outPutMatrix[2:nrow(outPutMatrix),]\n  write.csv(outPutMatrix,paste0(dirOut,\"Complete_outPut_\",perc,\".csv\"))\n\n}\n\n\n\nSummarize the output\n\nmethods.color &lt;- c(\"COTAN\"=\"#F73604\",\"Seurat\"=\"#ABD9E9\",\"Seurat_scTr\"=\"#74ADD1\",\"Seurat_Bimod\"=\"#4575B4\", \"Monocle\"=\"#DAABE9\", \"Scanpy\"=\"#7F9B5C\" )\ndf_plot &lt;- NA\nfor (perc in c(0.5, 0.33, 0.25,0.67, 0.75)) {\n  outPutMatrix &lt;- read.csv(paste0(dirOut,\"Complete_outPut_\",perc,\".csv\"))\n  \n  outPutMatrix$Division &lt;- perc\n  \n  df_plot &lt;- rbind(df_plot,outPutMatrix)\n  \n}\ndf_plot &lt;- df_plot[2:nrow(df_plot),]\n\ndf_plot &lt;- as.data.frame(pivot_longer(df_plot,cols = c(2:5),values_to = \"N.Genes\",names_to = \"Method\"))\n\ndf_plot[df_plot$Method == \"Cotan\",]$Method &lt;- \"COTAN\"\ndf_plot[df_plot$Method == \"ScanPy\",]$Method &lt;- \"Scanpy\"\n\n\ntypeIerrorPlot &lt;- ggplot(df_plot,aes(x = Method, y=N.Genes,fill=Method))+geom_boxplot(outliers = F)+\nscale_fill_manual(\n    values = methods.color)+ facet_wrap(~Division,scales = \"free\",nrow = 1)+\n    geom_jitter(color=\"black\",  alpha=0.5,width = 0.2) +\n    theme_light()+\n    theme(axis.text.x=element_blank(),axis.title.x=element_blank(),\n      legend.position=\"bottom\",\n      plot.title = element_text(size=11)\n    )\n\npdf(paste0(dirOut,\"Type1ErrorPlot.pdf\"),height = 3,width = 15)\n\nplot(typeIerrorPlot)\ndev.off()\n\npng \n  2 \n\nplot(typeIerrorPlot)\n\n\n\n\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] viridis_0.6.5               viridisLite_0.4.2          \n [3] ggplot2_3.5.1               tidyr_1.3.1                \n [5] dplyr_1.1.4                 stringr_1.5.1              \n [7] reticulate_1.37.0           monocle3_1.3.4             \n [9] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n[11] GenomicRanges_1.56.0        GenomeInfoDb_1.40.0        \n[13] IRanges_2.38.0              S4Vectors_0.42.0           \n[15] MatrixGenerics_1.16.0       matrixStats_1.3.0          \n[17] Biobase_2.64.0              BiocGenerics_0.50.0        \n[19] Seurat_5.1.0                SeuratObject_5.0.2         \n[21] sp_2.1-4                    COTAN_2.5.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.0            \n  [3] later_1.3.2               tibble_3.2.1             \n  [5] polyclip_1.10-6           fastDummies_1.7.3        \n  [7] lifecycle_1.0.4           doParallel_1.0.17        \n  [9] globals_0.16.3            lattice_0.22-6           \n [11] MASS_7.3-60.2             dendextend_1.17.1        \n [13] magrittr_2.0.3            plotly_4.10.4            \n [15] rmarkdown_2.27            yaml_2.3.8               \n [17] httpuv_1.6.15             sctransform_0.4.1        \n [19] spam_2.10-0               askpass_1.2.0            \n [21] spatstat.sparse_3.0-3     minqa_1.2.7              \n [23] cowplot_1.1.3             pbapply_1.7-2            \n [25] RColorBrewer_1.1-3        abind_1.4-5              \n [27] zlibbioc_1.50.0           Rtsne_0.17               \n [29] purrr_1.0.2               GenomeInfoDbData_1.2.12  \n [31] circlize_0.4.16           ggrepel_0.9.5            \n [33] irlba_2.3.5.1             listenv_0.9.1            \n [35] spatstat.utils_3.0-4      terra_1.7-78             \n [37] umap_0.2.10.0             goftest_1.2-3            \n [39] RSpectra_0.16-1           spatstat.random_3.2-3    \n [41] dqrng_0.4.0               fitdistrplus_1.1-11      \n [43] parallelly_1.37.1         DelayedMatrixStats_1.26.0\n [45] leiden_0.4.3.1            codetools_0.2-20         \n [47] DelayedArray_0.30.1       tidyselect_1.2.1         \n [49] shape_1.4.6.1             farver_2.1.2             \n [51] UCSC.utils_1.0.0          lme4_1.1-35.3            \n [53] ScaledMatrix_1.12.0       spatstat.explore_3.2-7   \n [55] jsonlite_1.8.8            GetoptLong_1.0.5         \n [57] progressr_0.14.0          ggridges_0.5.6           \n [59] survival_3.6-4            iterators_1.0.14         \n [61] foreach_1.5.2             tools_4.4.0              \n [63] ica_1.0-3                 Rcpp_1.0.12              \n [65] glue_1.7.0                gridExtra_2.3            \n [67] SparseArray_1.4.5         xfun_0.44                \n [69] ggthemes_5.1.0            withr_3.0.0              \n [71] fastmap_1.2.0             boot_1.3-30              \n [73] fansi_1.0.6               openssl_2.2.0            \n [75] digest_0.6.35             rsvd_1.0.5               \n [77] parallelDist_0.2.6        R6_2.5.1                 \n [79] mime_0.12                 colorspace_2.1-0         \n [81] scattermore_1.2           tensor_1.5               \n [83] spatstat.data_3.0-4       utf8_1.2.4               \n [85] generics_0.1.3            data.table_1.15.4        \n [87] httr_1.4.7                htmlwidgets_1.6.4        \n [89] S4Arrays_1.4.1            uwot_0.2.2               \n [91] pkgconfig_2.0.3           gtable_0.3.5             \n [93] ComplexHeatmap_2.20.0     lmtest_0.9-40            \n [95] XVector_0.44.0            htmltools_0.5.8.1        \n [97] dotCall64_1.1-1           clue_0.3-65              \n [99] scales_1.3.0              png_0.1-8                \n[101] knitr_1.46                rstudioapi_0.16.0        \n[103] reshape2_1.4.4            rjson_0.2.21             \n[105] nloptr_2.0.3              nlme_3.1-164             \n[107] zoo_1.8-12                GlobalOptions_0.1.2      \n[109] KernSmooth_2.23-24        parallel_4.4.0           \n[111] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[113] pillar_1.9.0              grid_4.4.0               \n[115] vctrs_0.6.5               RANN_2.6.1               \n[117] promises_1.3.0            BiocSingular_1.20.0      \n[119] beachmat_2.20.0           xtable_1.8-4             \n[121] cluster_2.1.6             evaluate_0.23            \n[123] zeallot_0.1.0             cli_3.6.2                \n[125] compiler_4.4.0            rlang_1.1.3              \n[127] crayon_1.5.2              future.apply_1.11.2      \n[129] labeling_0.4.3            plyr_1.8.9               \n[131] stringi_1.8.4             deldir_2.0-4             \n[133] BiocParallel_1.38.0       assertthat_0.2.1         \n[135] munsell_0.5.1             lazyeval_0.2.2           \n[137] spatstat.geom_3.2-9       PCAtools_2.16.0          \n[139] Matrix_1.7-0              RcppHNSW_0.6.0           \n[141] patchwork_1.2.0           sparseMatrixStats_1.16.0 \n[143] future_1.33.2             shiny_1.8.1.1            \n[145] ROCR_1.0-11               Rfast_2.1.0              \n[147] igraph_2.0.3              RcppParallel_5.1.7"
  },
  {
    "objectID": "CorticalCells_GSM2861514_E175-analysis.html",
    "href": "CorticalCells_GSM2861514_E175-analysis.html",
    "title": "Cortical cells DGE E17.5 Data-set Anaysis",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Data/Yuzwa_MouseCortex/\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"CorticalCells_GSM2861514_E175-analysis.log\"))\nRead the dataset from file\ndataset &lt;- read.csv(file.path(outDir &lt;- \"Data/Yuzwa_MouseCortex/\"\n, \"GSM2861514_E175_Only_Cortical_Cells_DGE.txt\"),\n       header = TRUE, sep = \"\\t\", strip.white = TRUE,row.names = 1)"
  },
  {
    "objectID": "CorticalCells_GSM2861514_E175-analysis.html#cleaning",
    "href": "CorticalCells_GSM2861514_E175-analysis.html#cleaning",
    "title": "Cortical cells DGE E17.5 Data-set Anaysis",
    "section": "Cleaning",
    "text": "Cleaning\nCrate the COTAN object\n\nsampleCondition &lt;- \"CorticalCells_GSM2861514_E175\"\ncc175Obj &lt;- COTAN(raw = dataset)\ncc175Obj &lt;- initializeMetaDataset(cc175Obj,\n                                  GEO = \"GSM2861511_E135\",\n                                  sequencingMethod = \"DropSeq\",\n                                  sampleCondition = sampleCondition)\n\nInspect cells’ sizes\n\ncellSizePlot(cc175Obj)\n\n\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\ncellsSizeThr &lt;- 6500\ncc175Obj &lt;- addElementToMetaDataset(cc175Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem &lt;- getCells(cc175Obj)[getCellsSize(cc175Obj) &gt; cellsSizeThr]\ncc175Obj &lt;- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\ncellSizePlot(cc175Obj)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(cc175Obj)\n\n\n\n\nDrop cells with too high genes expession as they are probably duplets\n\ngenesSizeThr &lt;- 3000\ncc175Obj &lt;- addElementToMetaDataset(cc175Obj, \"Num genes threshold\", genesSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(cc175Obj)\ncells_to_rem &lt;- names(numExprGenes)[numExprGenes &gt; genesSizeThr]\ncc175Obj &lt;- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\ngenesSizePlot(cc175Obj)\n\n\n\n\nCheck number of mitocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^mt-\"\ngetGenes(cc175Obj)[grep(mitGenesPattern, getGenes(cc175Obj))]\n\n [1] \"mt-Co1\"  \"mt-Co2\"  \"mt-Co3\"  \"mt-Cytb\" \"mt-Nd1\"  \"mt-Nd2\"  \"mt-Nd4\" \n [8] \"mt-Nd5\"  \"mt-Nd6\"  \"mt-Rnr1\" \"mt-Rnr2\" \"mt-Ta\"   \"mt-Tc\"   \"mt-Te\"  \n[15] \"mt-Tf\"   \"mt-Ti\"   \"mt-Tl1\"  \"mt-Tl2\"  \"mt-Tm\"   \"mt-Tp\"   \"mt-Tq\"  \n[22] \"mt-Ts2\"  \"mt-Tt\"   \"mt-Tv\"   \"mt-Tw\"   \"mt-Ty\"  \n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(cc175Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr &lt;- 5.0\ncc175Obj &lt;- addElementToMetaDataset(cc175Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\ncc175Obj &lt;- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(cc175Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(cc175Obj)\n\n\n\ngenesSizePlot(cc175Obj)\n\n\n\n\n\nClean: round 1\n\ncc175Obj &lt;- clean(cc175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\ncc175Obj &lt;- addElementToMetaDataset(cc175Obj, \"Num drop B group\", 0)\n\nB group contains high number of hemoglobin genes: so they are not interesting\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc175Obj &lt;- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\n\n\nClean: round 2\n\ncc175Obj &lt;- clean(cc175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\ncc175Obj &lt;- addElementToMetaDataset(cc175Obj, \"Num drop B group\", 1)\n\nVisualize if all is ok:\n\nplot(pcaCellsData)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\nDrop very low UDE cells as they are likely outliers\n\nlowUDEThr &lt;- 0.2\ncc175Obj &lt;- addElementToMetaDataset(cc175Obj, \"Low UDE threshold\", lowUDEThr)\n\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(cc175Obj)), \"n\" = seq_along(getNu(cc175Obj)))\n\ncells_to_rem &lt;- rownames(nuDf)[nuDf[[\"nu\"]] &lt; lowUDEThr]\ncc175Obj &lt;- dropGenesCells(cc175Obj, cells = cells_to_rem)\n\nFinal cleaning to check all is OK\n\ncc175Obj &lt;- clean(cc175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(cellSizePlot(cc175Obj))\n\n\n\nplot(genesSizePlot(cc175Obj))\n\n\n\n\nCalculate genes’ COEX\n\ncc175Obj &lt;- proceedToCoex(cc175Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)"
  },
  {
    "objectID": "CorticalCells_GSM2861514_E175-analysis.html#gdi",
    "href": "CorticalCells_GSM2861514_E175-analysis.html#gdi",
    "title": "Cortical cells DGE E17.5 Data-set Anaysis",
    "section": "GDI",
    "text": "GDI\n\ngdiData &lt;- calculateGDI(cc175Obj)\n\ngenesToLabel &lt;- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\n [1] \"Ednrb\"   \"Mfge8\"   \"Aldoc\"   \"Sox2\"    \"Vim\"     \"Hes5\"    \"Neurod6\"\n [8] \"Tubb3\"   \"Ddah1\"   \"Atp1a2\" \n\ngdiPlot &lt;- GDIPlot(cc175Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n\n\n\n\nSave the COTAN object\n\nsaveRDS(cc175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))"
  },
  {
    "objectID": "CorticalCells_GSM2861514_E175-analysis.html#consistent-transcript-cohorts-clustering",
    "href": "CorticalCells_GSM2861514_E175-analysis.html#consistent-transcript-cohorts-clustering",
    "title": "Cortical cells DGE E17.5 Data-set Anaysis",
    "section": "Consistent Transcript Cohorts (clustering)",
    "text": "Consistent Transcript Cohorts (clustering)\n\nc(splitClusters, splitCoexDF) %&lt;-%\n  cellsUniformClustering(cc175Obj, GDIThreshold = 1.4, cores = 13,\n                         saveObj = TRUE, outDir = outDir)\n\n\ncc175Obj &lt;- addClusterization(cc175Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\ntable(splitClusters)\n\n\nsaveRDS(cc175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cc175Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\ncc175Obj &lt;- addClusterization(cc175Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\ntable(mergedClusters)\n\n\nsaveRDS(cc175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\n\nSys.time()\n\n[1] \"2023-08-22 19:46:59 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.7   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.15.0      jsonlite_1.8.7        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.24        \n [10] GlobalOptions_0.1.2    vctrs_0.6.3            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-22    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.2          zoo_1.8-12             igraph_1.5.1          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.6-0           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-11    future_1.33.0         \n [34] shiny_1.7.5            clue_0.3-64            digest_0.6.33         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.1      \n [40] Seurat_4.3.0.1         tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.14.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-2 \n [49] httr_1.4.6             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.1         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.4          dendextend_1.17.1      MASS_7.3-60           \n [58] openssl_2.1.0          rjson_0.2.21           tools_4.3.1           \n [61] lmtest_0.9-40          httpuv_1.6.11          future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.1             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_2.0-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-4    RcppAnnoy_0.0.21      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.1           \n [88] circlize_0.4.15        splines_4.3.1          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-9          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-2          knitr_1.43             gridExtra_2.3         \n[100] IRanges_2.34.1         scattermore_1.2        stats4_4.3.1          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.21          codetools_0.2-19       cli_3.6.1             \n[112] RcppParallel_5.1.7     uwot_0.1.16            xtable_1.8-4          \n[115] reticulate_1.30        munsell_0.5.0          Rcpp_1.0.11           \n[118] globals_0.16.2         spatstat.random_3.1-5  png_0.1-8             \n[121] parallel_4.3.1         Rfast_2.0.8            ellipsis_0.3.2        \n[124] assertthat_0.2.1       parallelDist_0.2.6     listenv_0.9.0         \n[127] ggthemes_4.2.4         viridisLite_0.4.2      scales_1.2.1          \n[130] ggridges_0.5.4         SeuratObject_4.1.3     leiden_0.4.3          \n[133] purrr_1.0.1            crayon_1.5.2           GetoptLong_1.0.5      \n[136] rlang_1.1.1            cowplot_1.1.1"
  },
  {
    "objectID": "CorticalCells_GSM2861511_E135-analysis.html",
    "href": "CorticalCells_GSM2861511_E135-analysis.html",
    "title": "Cortical cells DGE E13.5 Data-set Anaysis",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Data/Yuzwa_MouseCortex/\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"CorticalCells_GSM2861511_E135-analysis.log\"))\nRead the dataset from file\ndataset &lt;- read.csv(file.path(\"Data/Yuzwa_MouseCortex/\", \"GSM2861511_E135_Only_Cortical_Cells_DGE.txt.gz\"),\n                    header = TRUE, sep = \"\\t\", strip.white = TRUE,\n                    row.names = 1)"
  },
  {
    "objectID": "CorticalCells_GSM2861511_E135-analysis.html#cleaning",
    "href": "CorticalCells_GSM2861511_E135-analysis.html#cleaning",
    "title": "Cortical cells DGE E13.5 Data-set Anaysis",
    "section": "Cleaning",
    "text": "Cleaning\nCrate the COTAN object\n\nsampleCondition &lt;- \"CorticalCells_GSM2861511_E135\"\ncc135Obj &lt;- COTAN(raw = dataset)\ncc135Obj &lt;- initializeMetaDataset(cc135Obj,\n                                  GEO = \"GSM2861511_E135\",\n                                  sequencingMethod = \"Drop_seq\",\n                                  sampleCondition = sampleCondition)\n\nInspect cells’ sizes\n\ncellSizePlot(cc135Obj)\n\n\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\ncellsSizeThr &lt;- 8000\ncc135Obj &lt;- addElementToMetaDataset(cc135Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem &lt;- getCells(cc135Obj)[getCellsSize(cc135Obj) &gt; cellsSizeThr]\ncc135Obj &lt;- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\ncellSizePlot(cc135Obj)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(cc135Obj)\n\n\n\n\nDrop cells with too high genes expession as they are probably duplets\n\ngenesSizeThr &lt;- 3300\ncc135Obj &lt;- addElementToMetaDataset(cc135Obj, \"Num genes threshold\", genesSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(cc135Obj)\ncells_to_rem &lt;- names(numExprGenes)[numExprGenes &gt; genesSizeThr]\ncc135Obj &lt;- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\ngenesSizePlot(cc135Obj)\n\n\n\n\nCheck number of mitocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^mt-\"\ngetGenes(cc135Obj)[grep(mitGenesPattern, getGenes(cc135Obj))]\n\n [1] \"mt-Co1\"  \"mt-Co3\"  \"mt-Cytb\" \"mt-Nd1\"  \"mt-Nd2\"  \"mt-Nd4\"  \"mt-Nd5\" \n [8] \"mt-Nd6\"  \"mt-Rnr1\" \"mt-Rnr2\" \"mt-Ta\"   \"mt-Tc\"   \"mt-Te\"   \"mt-Tf\"  \n[15] \"mt-Ti\"   \"mt-Tl1\"  \"mt-Tl2\"  \"mt-Tm\"   \"mt-Tn\"   \"mt-Tp\"   \"mt-Tq\"  \n[22] \"mt-Ts2\"  \"mt-Tt\"   \"mt-Tv\"   \"mt-Tw\"  \n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(cc135Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr &lt;- 10.0\ncc135Obj &lt;- addElementToMetaDataset(cc135Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\ncc135Obj &lt;- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(cc135Obj, genePrefix = mitGenesPattern)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(cc135Obj)\n\n\n\ngenesSizePlot(cc135Obj)\n\n\n\n\n\nClean: round 1\n\ncc135Obj &lt;- clean(cc135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\n\nB group contains high number of hemoglobin genes: so they are not interesting\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc135Obj &lt;- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\n\n\nClean: round 2\n\ncc135Obj &lt;- clean(cc135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(pcaCellsData)\n\n\n\nplot(genesPlot)\n\n\n\n\nB group contains just 3 cells quite different in the 3rd and 4th components: better to drop them\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\ncc135Obj &lt;- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\n\n\nClean: round 3\n\ncc135Obj &lt;- clean(cc135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\ncc135Obj &lt;- addElementToMetaDataset(cc135Obj, \"Num drop B group\", 2)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\nDrop very low UDE cells as they are likely outliers\n\nlowUDEThr &lt;- 0.14 # the threshold to remove low UDE cells\n\ncc135Obj &lt;- addElementToMetaDataset(cc135Obj, \"Low UDE threshold\", lowUDEThr)\n\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(cc135Obj)), \"n\" = seq_along(getNu(cc135Obj)))\n\n\ncells_to_rem &lt;- rownames(nuDf)[nuDf[[\"nu\"]] &lt; lowUDEThr]\ncc135Obj &lt;- dropGenesCells(cc135Obj, cells = cells_to_rem)\n\nFinal cleaning to check all is OK\n\ncc135Obj &lt;- clean(cc135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cc135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(zoomedNuPlot)\n\n\n\nplot(cellSizePlot(cc135Obj))\n\n\n\nplot(genesSizePlot(cc135Obj))\n\n\n\n\n\ncc135Obj &lt;- proceedToCoex(cc135Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\nSave the COTAN object\n\nsaveRDS(cc135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))"
  },
  {
    "objectID": "CorticalCells_GSM2861511_E135-analysis.html#gdi",
    "href": "CorticalCells_GSM2861511_E135-analysis.html#gdi",
    "title": "Cortical cells DGE E13.5 Data-set Anaysis",
    "section": "GDI",
    "text": "GDI\n\ngdiData &lt;- calculateGDI(cc135Obj)\n\ngenesToLabel &lt;- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\n [1] \"Neurod6\"       \"2610017I09Rik\" \"Nr2e1\"         \"Ina\"          \n [5] \"Sox2\"          \"Stmn2\"         \"Mdk\"           \"Mapt\"         \n [9] \"Gas1\"          \"2810417H13Rik\"\n\ngdiPlot &lt;- GDIPlot(cc135Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)"
  },
  {
    "objectID": "CorticalCells_GSM2861511_E135-analysis.html#consistent-transcript-cohorts",
    "href": "CorticalCells_GSM2861511_E135-analysis.html#consistent-transcript-cohorts",
    "title": "Cortical cells DGE E13.5 Data-set Anaysis",
    "section": "Consistent Transcript Cohorts",
    "text": "Consistent Transcript Cohorts\n\nc(splitClusters, splitCoexDF) %&lt;-% \n  cellsUniformClustering(cc135Obj, GDIThreshold = 1.4, cores = 13,\n                         saveObj = TRUE, outDir = outDir)\n\n\ncc135Obj &lt;- addClusterization(cc135Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\n\ntable(splitClusters)\n\nsplitClusters\n -1  01  02  03  04  05  06  07  08  09  10  11  12  13  14 \n  6  94 106  47  69 127  92  11  25  12  41 113  59 161 149 \n\n\n\nsaveRDS(cc135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cc135Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\ncc135Obj &lt;- addClusterization(cc135Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\n\ntable(mergedClusters)\n\nmergedClusters\n  1   2   3   4   5   6   7   8   9 \n 94 153 161 127 113 102  52 161 149 \n\n\n\nsaveRDS(cc135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\n\nSys.time()\n\n[1] \"2023-08-22 17:55:23 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.7   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.15.0      jsonlite_1.8.7        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.24        \n [10] GlobalOptions_0.1.2    vctrs_0.6.3            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-22    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.2          zoo_1.8-12             igraph_1.5.1          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.6-0           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-11    future_1.33.0         \n [34] shiny_1.7.5            clue_0.3-64            digest_0.6.33         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.1      \n [40] Seurat_4.3.0.1         tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.14.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-2 \n [49] httr_1.4.6             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.1         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.4          dendextend_1.17.1      MASS_7.3-60           \n [58] openssl_2.1.0          rjson_0.2.21           tools_4.3.1           \n [61] lmtest_0.9-40          httpuv_1.6.11          future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.1             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_2.0-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-4    RcppAnnoy_0.0.21      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.1           \n [88] circlize_0.4.15        splines_4.3.1          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-9          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-2          knitr_1.43             gridExtra_2.3         \n[100] IRanges_2.34.1         scattermore_1.2        stats4_4.3.1          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.21          codetools_0.2-19       cli_3.6.1             \n[112] RcppParallel_5.1.7     uwot_0.1.16            xtable_1.8-4          \n[115] reticulate_1.30        munsell_0.5.0          Rcpp_1.0.11           \n[118] globals_0.16.2         spatstat.random_3.1-5  png_0.1-8             \n[121] parallel_4.3.1         Rfast_2.0.8            ellipsis_0.3.2        \n[124] assertthat_0.2.1       parallelDist_0.2.6     listenv_0.9.0         \n[127] ggthemes_4.2.4         viridisLite_0.4.2      scales_1.2.1          \n[130] ggridges_0.5.4         SeuratObject_4.1.3     leiden_0.4.3          \n[133] purrr_1.0.1            crayon_1.5.2           GetoptLong_1.0.5      \n[136] rlang_1.1.1            cowplot_1.1.1"
  },
  {
    "objectID": "DEA_Seurat_COTAN.html",
    "href": "DEA_Seurat_COTAN.html",
    "title": "DEA comparison Seurat - Cotan",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\nlibrary(plyr)\nlibrary(scales) \nlibrary(rlang)\nlibrary(Seurat)\nlibrary(wordcloud)\nlibrary(stringr)\nlibrary(assertr)\nlibrary(ggVennDiagram)\nlibrary(ggplot2)\nlibrary(tidyr)\n\nlibrary(enrichR)\n\nwebsiteLive &lt;- getOption(\"enrichR.live\")\nif (websiteLive) dbs &lt;- listEnrichrDbs()\nhead(dbs)\n\n  geneCoverage genesPerTerm                      libraryName\n1        13362          275              Genome_Browser_PWMs\n2        27884         1284         TRANSFAC_and_JASPAR_PWMs\n3         6002           77        Transcription_Factor_PPIs\n4        47172         1370                        ChEA_2013\n5        47107          509 Drug_Perturbations_from_GEO_2014\n6        21493         3713          ENCODE_TF_ChIP-seq_2014\n                                                      link numTerms\n1 http://hgdownload.cse.ucsc.edu/goldenPath/hg18/database/      615\n2                 http://jaspar.genereg.net/html/DOWNLOAD/      326\n3                                                               290\n4           http://amp.pharm.mssm.edu/lib/cheadownload.jsp      353\n5                         http://www.ncbi.nlm.nih.gov/geo/      701\n6             http://genome.ucsc.edu/ENCODE/downloads.html      498\n                                   appyter categoryId\n1 ea115789fcbf12797fd692cec6df0ab4dbc79c6a          1\n2 7d42eb43a64a4e3b20d721fc7148f685b53b6b30          1\n3 849f222220618e2599d925b6b51868cf1dab3763          1\n4 7ebe772afb55b63b41b79dd8d06ea0fdd9fa2630          7\n5 ad270a6876534b7cb063e004289dcd4d3164f342          7\n6 497787ebc418d308045efb63b8586f10c526af51          7\n\n#dbs &lt;- \"Tabula_Muris\"\ndbs &lt;- \"ARCHS4_Tissues\"\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"./e15.0_FD_CheckClustersUniformity\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"FindUniformGivenClustersInForebrainDorsal_E150.log\"))\nfb150ObjRaw &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/SourceData/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\n\nfb150Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\nAlign to cleaned cells’ list\nmetaC &lt;- getMetadataCells(fb150ObjRaw)[getCells(fb150Obj), ]\n\n#metaCDrop &lt;- getMetadataCells(fb150ObjRaw)[!getCells(fb150ObjRaw) %in% getCells(fb150Obj), ]\nExtract the cells of class ‘Neuron’\nmetaNeuron &lt;- metaC[metaC[[\"Class\"]] == \"Neuron\", ]\n\nsort(table(metaNeuron[[\"Subclass\"]]), decreasing = TRUE)\n\n\nCortical or hippocampal glutamatergic                   Forebrain GABAergic \n                                 3969                                   610 \n                        Cajal-Retzius                Mixed region GABAergic \n                                  145                                    21 \n                            Undefined               Forebrain glutamatergic \n                                   16                                    15 \n                         Hypothalamus            Mixed region glutamatergic \n                                    8                                     5 \n    Mixed region and neurotransmitter               Hindbrain glutamatergic \n                                    4                                     2 \n                Hindbrain glycinergic            Hypothalamus glutamatergic \n                                    2                                     2 \n        Dorsal midbrain glutamatergic                          Mixed region \n                                    1                                     1 \n\nsort(table(metaNeuron[[\"ClusterName\"]]), decreasing = TRUE)\n\n\nNeur525 Neur511 Neur509 Neur510 Neur508 Neur507 Neur568 Neur504 Neur505 Neur516 \n    826     540     402     402     397     183     181     174     147     137 \nNeur565 Neur524 Neur679 Neur493 Neur498 Neur497 Neur506 Neur502 Neur494 Neur574 \n    133     108     105      93      79      51      46      42      41      41 \nNeur575 Neur492 Neur519 Neur526 Neur566 Neur501 Neur573 Neur499 Neur518 Neur560 \n     41      38      31      28      28      24      24      23      22      20 \nNeur514 Neur523 Neur569 Neur557 Neur495 Neur520 Neur535 Neur542 Neur677 Neur527 \n     19      19      18      16      15      15      14      14      14      13 \nNeur496 Neur512 Neur676 Neur517 Neur558 Neur503 Neur739 Neur559 Neur564 Neur538 \n     11      11      11      10       9       8       8       7       7       6 \nNeur549 Neur561 Neur671 Neur695 Neur738 Neur747 Neur500 Neur536 Neur678 Neur534 \n      6       6       6       6       6       6       5       5       5       4 \nNeur550 Neur570 Neur686 Neur731 Neur737 Neur513 Neur515 Neur528 Neur533 Neur539 \n      4       4       4       4       4       3       3       3       3       3 \nNeur544 Neur571 Neur674 Neur675 Neur732 Neur531 Neur543 Neur548 Neur552 Neur554 \n      3       3       3       3       3       2       2       2       2       2 \nNeur562 Neur670 Neur689 Neur740 Neur529 Neur530 Neur532 Neur537 Neur540 Neur553 \n      2       2       2       2       1       1       1       1       1       1 \nNeur567 Neur572 Neur601 Neur614 Neur634 Neur647 Neur649 Neur672 Neur680 Neur681 \n      1       1       1       1       1       1       1       1       1       1 \nNeur684 Neur693 Neur696 Neur726 Neur734 Neur749 Neur750 Neur751 Neur760 Neur771 \n      1       1       1       1       1       1       1       1       1       1\ncl.to.keep &lt;- names(table(metaNeuron[[\"ClusterName\"]])[table(metaNeuron[[\"ClusterName\"]]) &gt;= 20L])\n\nmeta.to.keep &lt;- metaNeuron[metaNeuron$ClusterName %in% cl.to.keep,]\ndim(meta.to.keep)\n\n[1] 4407   41\n\ndim(metaNeuron)\n\n[1] 4801   41\nDropped cell\ndim(metaNeuron)[1] - dim(meta.to.keep)[1]\n\n[1] 394\nRemoving cells\ncell.to.drop &lt;- getCells(fb150Obj)[!getCells(fb150Obj) %in% rownames(meta.to.keep)]\n\nfb150Obj &lt;- dropGenesCells(fb150Obj,cells = cell.to.drop)\n\ndim(meta.to.keep)[1] == dim(getRawData(fb150Obj))[2]\n\n[1] TRUE\n\nmetaC &lt;- getMetadataCells(fb150ObjRaw)[getCells(fb150Obj), ]\nfb150Obj &lt;- clean(fb150Obj)\nfb150Obj &lt;- estimateDispersionBisection(fb150Obj)\n\nidentical(rownames(fb150Obj@metaCells), rownames(metaC))\n\n[1] TRUE\n\nfb150Obj@metaCells &lt;- cbind(fb150Obj@metaCells,metaC)\n\nfb150Obj@metaCells[1:10,]\n\n                            feCells        nu feCells        nu   Age\n10X74_4_A_1:TGGTAGACCCTACCx   FALSE 0.9375770   FALSE 0.9214807 e15.0\n10X73_3_A_1:TACCGGCTTCAGTGx   FALSE 0.7855991   FALSE 0.7722440 e15.0\n10X74_4_A_1:CCCAGTTGGAGGTGx   FALSE 0.6983103   FALSE 0.6863260 e15.0\n10X73_3_A_1:AATTGATGAGAATGx   FALSE 1.1751850   FALSE 1.1548031 e15.0\n10X74_4_A_1:TAGTGGTGAGTAGAx   FALSE 1.1001290   FALSE 1.0808973 e15.0\n10X74_4_A_1:ATTATGGACTACGAx   FALSE 1.3074658   FALSE 1.2844945 e15.0\n10X64_3_A_1:TGTATCTGCCTTATx   FALSE 1.4138296   FALSE 1.3891434 e15.0\n10X64_3_A_1:TAGTATGACTATGGx   FALSE 1.6528889   FALSE 1.6249089 e15.0\n10X73_3_A_1:ACTTGGGATTGCAGx   FALSE 0.7482785   FALSE 0.7355965 e15.0\n10X74_4_A_1:AGCTCGCTCCATGAx   FALSE 1.1109106   FALSE 1.0914844 e15.0\n                                       CellCycle                      CellID\n10X74_4_A_1:TGGTAGACCCTACCx  0.00308982564555286 10X74_4_A_1:TGGTAGACCCTACCx\n10X73_3_A_1:TACCGGCTTCAGTGx 0.000789058390320884 10X73_3_A_1:TACCGGCTTCAGTGx\n10X74_4_A_1:CCCAGTTGGAGGTGx  0.00177988727380599 10X74_4_A_1:CCCAGTTGGAGGTGx\n10X73_3_A_1:AATTGATGAGAATGx 0.000880436696601514 10X73_3_A_1:AATTGATGAGAATGx\n10X74_4_A_1:TAGTGGTGAGTAGAx 0.000752021056589585 10X74_4_A_1:TAGTGGTGAGTAGAx\n10X74_4_A_1:ATTATGGACTACGAx  0.00174133291119202 10X74_4_A_1:ATTATGGACTACGAx\n10X64_3_A_1:TGTATCTGCCTTATx 0.000878348704435661 10X64_3_A_1:TGTATCTGCCTTATx\n10X64_3_A_1:TAGTATGACTATGGx  0.00125156445556946 10X64_3_A_1:TAGTATGACTATGGx\n10X73_3_A_1:ACTTGGGATTGCAGx  0.00221177771633951 10X73_3_A_1:ACTTGGGATTGCAGx\n10X74_4_A_1:AGCTCGCTCCATGAx  0.00111835973904939 10X74_4_A_1:AGCTCGCTCCATGAx\n                            Cell_Conc Chemistry ChipID  Class ClusterName\n10X74_4_A_1:TGGTAGACCCTACCx       600        v2  10X74 Neuron     Neur492\n10X73_3_A_1:TACCGGCTTCAGTGx       600        v2  10X73 Neuron     Neur492\n10X74_4_A_1:CCCAGTTGGAGGTGx       600        v2  10X74 Neuron     Neur492\n10X73_3_A_1:AATTGATGAGAATGx       600        v2  10X73 Neuron     Neur492\n10X74_4_A_1:TAGTGGTGAGTAGAx       600        v2  10X74 Neuron     Neur492\n10X74_4_A_1:ATTATGGACTACGAx       600        v2  10X74 Neuron     Neur492\n10X64_3_A_1:TGTATCTGCCTTATx       600        v2  10X64 Neuron     Neur492\n10X64_3_A_1:TAGTATGACTATGGx       600        v2  10X64 Neuron     Neur492\n10X73_3_A_1:ACTTGGGATTGCAGx       600        v2  10X73 Neuron     Neur492\n10X74_4_A_1:AGCTCGCTCCATGAx       600        v2  10X74 Neuron     Neur492\n                            Clusters Date_Captured    DonorID\n10X74_4_A_1:TGGTAGACCCTACCx      492    2016-11-30 Batch14K-2\n10X73_3_A_1:TACCGGCTTCAGTGx      492    2016-11-30 Batch14K-2\n10X74_4_A_1:CCCAGTTGGAGGTGx      492    2016-11-30 Batch14K-2\n10X73_3_A_1:AATTGATGAGAATGx      492    2016-11-30 Batch14K-2\n10X74_4_A_1:TAGTGGTGAGTAGAx      492    2016-11-30 Batch14K-2\n10X74_4_A_1:ATTATGGACTACGAx      492    2016-11-30 Batch14K-2\n10X64_3_A_1:TGTATCTGCCTTATx      492    2016-11-15 Batch11H-5\n10X64_3_A_1:TAGTATGACTATGGx      492    2016-11-15 Batch11H-5\n10X73_3_A_1:ACTTGGGATTGCAGx      492    2016-11-30 Batch14K-2\n10X74_4_A_1:AGCTCGCTCCATGAx      492    2016-11-30 Batch14K-2\n                              DoubletFinderPCA         HPF_LogPP IsCycling\n10X74_4_A_1:TGGTAGACCCTACCx                  0 -881923.697556259         0\n10X73_3_A_1:TACCGGCTTCAGTGx                  0 -621646.228431766         0\n10X74_4_A_1:CCCAGTTGGAGGTGx 0.0303030303030303 -615788.630071891         0\n10X73_3_A_1:AATTGATGAGAATGx  0.027027027027027 -1043580.43446046         0\n10X74_4_A_1:TAGTGGTGAGTAGAx 0.0606060606060606 -892588.390822332         0\n10X74_4_A_1:ATTATGGACTACGAx 0.0606060606060606 -1057464.46525045         0\n10X64_3_A_1:TGTATCTGCCTTATx 0.0588235294117647 -1259381.55581998         0\n10X64_3_A_1:TAGTATGACTATGGx  0.147058823529412 -1384562.64613975         0\n10X73_3_A_1:ACTTGGGATTGCAGx  0.027027027027027 -766332.582748427         0\n10X74_4_A_1:AGCTCGCTCCATGAx                  0 -760899.629760664         0\n                            Label Location_E9_E11 NCellsCluster NGenes\n10X74_4_A_1:TGGTAGACCCTACCx  G119             nan           457   2402\n10X73_3_A_1:TACCGGCTTCAGTGx  G115             nan           457   2034\n10X74_4_A_1:CCCAGTTGGAGGTGx  G119             nan           457   1915\n10X73_3_A_1:AATTGATGAGAATGx  G115             nan           457   2555\n10X74_4_A_1:TAGTGGTGAGTAGAx  G119             nan           457   2448\n10X74_4_A_1:ATTATGGACTACGAx  G119             nan           457   2785\n10X64_3_A_1:TGTATCTGCCTTATx   G94             nan           457   2842\n10X64_3_A_1:TAGTATGACTATGGx   G94             nan           457   3160\n10X73_3_A_1:ACTTGGGATTGCAGx  G115             nan           457   2033\n10X74_4_A_1:AGCTCGCTCCATGAx  G119             nan           457   2469\n                            Num_Pooled_Animals PCR_Cycles  Plug_Date Project\n10X74_4_A_1:TGGTAGACCCTACCx                  3         13 2016-11-15     Dev\n10X73_3_A_1:TACCGGCTTCAGTGx                  3         13 2016-11-15     Dev\n10X74_4_A_1:CCCAGTTGGAGGTGx                  3         13 2016-11-15     Dev\n10X73_3_A_1:AATTGATGAGAATGx                  3         13 2016-11-15     Dev\n10X74_4_A_1:TAGTGGTGAGTAGAx                  3         13 2016-11-15     Dev\n10X74_4_A_1:ATTATGGACTACGAx                  3         13 2016-11-15     Dev\n10X64_3_A_1:TGTATCTGCCTTATx                  3         13 2016-10-31     Dev\n10X64_3_A_1:TAGTATGACTATGGx                  3         13 2016-10-31     Dev\n10X73_3_A_1:ACTTGGGATTGCAGx                  3         13 2016-11-15     Dev\n10X74_4_A_1:AGCTCGCTCCATGAx                  3         13 2016-11-15     Dev\n                            PseudoAge     PseudoTissue    Region SampleID\n10X74_4_A_1:TGGTAGACCCTACCx    15.905  ForebrainDorsal Forebrain  10X74_4\n10X73_3_A_1:TACCGGCTTCAGTGx    13.155  ForebrainDorsal Forebrain  10X73_3\n10X74_4_A_1:CCCAGTTGGAGGTGx    13.935  ForebrainDorsal Forebrain  10X74_4\n10X73_3_A_1:AATTGATGAGAATGx     15.54  ForebrainDorsal Forebrain  10X73_3\n10X74_4_A_1:TAGTGGTGAGTAGAx    14.595  ForebrainDorsal Forebrain  10X74_4\n10X74_4_A_1:ATTATGGACTACGAx   14.3725  ForebrainDorsal Forebrain  10X74_4\n10X64_3_A_1:TGTATCTGCCTTATx   15.1275  ForebrainDorsal Forebrain  10X64_3\n10X64_3_A_1:TAGTATGACTATGGx    16.225  ForebrainDorsal Forebrain  10X64_3\n10X73_3_A_1:ACTTGGGATTGCAGx   12.8175 ForebrainVentral Forebrain  10X73_3\n10X74_4_A_1:AGCTCGCTCCATGAx   14.7975  ForebrainDorsal Forebrain  10X74_4\n                            SampleName Sample_Index Sex Species Split Strain\n10X74_4_A_1:TGGTAGACCCTACCx       G119     SI-3A-E7   ?      Mm     0   CD-1\n10X73_3_A_1:TACCGGCTTCAGTGx       G115     SI-3A-A7   ?      Mm     0   CD-1\n10X74_4_A_1:CCCAGTTGGAGGTGx       G119     SI-3A-E7   ?      Mm     0   CD-1\n10X73_3_A_1:AATTGATGAGAATGx       G115     SI-3A-A7   ?      Mm     0   CD-1\n10X74_4_A_1:TAGTGGTGAGTAGAx       G119     SI-3A-E7   ?      Mm     0   CD-1\n10X74_4_A_1:ATTATGGACTACGAx       G119     SI-3A-E7   ?      Mm     0   CD-1\n10X64_3_A_1:TGTATCTGCCTTATx        G94     SI-3A-H3   ?      Mm     0   CD-1\n10X64_3_A_1:TAGTATGACTATGGx        G94     SI-3A-H3   ?      Mm     0   CD-1\n10X73_3_A_1:ACTTGGGATTGCAGx       G115     SI-3A-A7   ?      Mm     0   CD-1\n10X74_4_A_1:AGCTCGCTCCATGAx       G119     SI-3A-E7   ?      Mm     0   CD-1\n                                                         Subclass\n10X74_4_A_1:TGGTAGACCCTACCx Cortical or hippocampal glutamatergic\n10X73_3_A_1:TACCGGCTTCAGTGx Cortical or hippocampal glutamatergic\n10X74_4_A_1:CCCAGTTGGAGGTGx Cortical or hippocampal glutamatergic\n10X73_3_A_1:AATTGATGAGAATGx Cortical or hippocampal glutamatergic\n10X74_4_A_1:TAGTGGTGAGTAGAx Cortical or hippocampal glutamatergic\n10X74_4_A_1:ATTATGGACTACGAx Cortical or hippocampal glutamatergic\n10X64_3_A_1:TGTATCTGCCTTATx Cortical or hippocampal glutamatergic\n10X64_3_A_1:TAGTATGACTATGGx Cortical or hippocampal glutamatergic\n10X73_3_A_1:ACTTGGGATTGCAGx Cortical or hippocampal glutamatergic\n10X74_4_A_1:AGCTCGCTCCATGAx Cortical or hippocampal glutamatergic\n                            Target_Num_Cells          Tissue TotalUMI\n10X74_4_A_1:TGGTAGACCCTACCx             3500 ForebrainDorsal     4531\n10X73_3_A_1:TACCGGCTTCAGTGx             3500 ForebrainDorsal     3802\n10X74_4_A_1:CCCAGTTGGAGGTGx             3500 ForebrainDorsal     3371\n10X73_3_A_1:AATTGATGAGAATGx             3500 ForebrainDorsal     5679\n10X74_4_A_1:TAGTGGTGAGTAGAx             3500 ForebrainDorsal     5319\n10X74_4_A_1:ATTATGGACTACGAx             3500 ForebrainDorsal     6317\n10X64_3_A_1:TGTATCTGCCTTATx             3500 ForebrainDorsal     6831\n10X64_3_A_1:TAGTATGACTATGGx             3500 ForebrainDorsal     7990\n10X73_3_A_1:ACTTGGGATTGCAGx             3500 ForebrainDorsal     3617\n10X74_4_A_1:AGCTCGCTCCATGAx             3500 ForebrainDorsal     5365\n                            Transcriptome cDNA_Lib_Ok ngperul_cDNA\n10X74_4_A_1:TGGTAGACCCTACCx          mm10           Y          3,1\n10X73_3_A_1:TACCGGCTTCAGTGx          mm10           Y          3,4\n10X74_4_A_1:CCCAGTTGGAGGTGx          mm10           Y          3,1\n10X73_3_A_1:AATTGATGAGAATGx          mm10           Y          3,4\n10X74_4_A_1:TAGTGGTGAGTAGAx          mm10           Y          3,1\n10X74_4_A_1:ATTATGGACTACGAx          mm10           Y          3,1\n10X64_3_A_1:TGTATCTGCCTTATx          mm10           Y          3,5\n10X64_3_A_1:TAGTATGACTATGGx          mm10           Y          3,5\n10X73_3_A_1:ACTTGGGATTGCAGx          mm10           Y          3,4\n10X74_4_A_1:AGCTCGCTCCATGAx          mm10           Y          3,1"
  },
  {
    "objectID": "DEA_Seurat_COTAN.html#cotan-differential-expression",
    "href": "DEA_Seurat_COTAN.html#cotan-differential-expression",
    "title": "DEA comparison Seurat - Cotan",
    "section": "Cotan differential expression",
    "text": "Cotan differential expression\nDEA on Subclass groups formed by just three cell types: Cortical or hippocampal glutamatergic, Forebrain GABAergic and Cajal-Retzius.\n\nclusters.cells &lt;- set_names(fb150Obj@metaCells$Subclass,nm = rownames(fb150Obj@metaCells))\ndea.Subclass &lt;- DEAOnClusters(fb150Obj,clusters = clusters.cells)\n\nhead(dea.Subclass$coex)\n\n       Cajal-Retzius Cortical or hippocampal glutamatergic Forebrain GABAergic\nLamc1   -0.026166913                          -0.003964787          0.02109719\nLama1   -0.021046008                          -0.059311990          0.08266931\nHs3st1   0.009828396                           0.072980864         -0.08910190\nFabp3   -0.090809976                           0.106706770         -0.06883822\nNrg2    -0.001594555                          -0.025294811          0.03037227\nBend4    0.009762501                          -0.192484391          0.21811993\n\n\nDEA on ClusterName: [1] “Neur492” “Neur493” “Neur494” “Neur497” “Neur498” “Neur499” “Neur501” “Neur502” “Neur504” [10] “Neur505” “Neur506” “Neur507” “Neur508” “Neur509” “Neur510” “Neur511” “Neur516” “Neur518” [19] “Neur519” “Neur524” “Neur525” “Neur526” “Neur560” “Neur565” “Neur566” “Neur568” “Neur573” [28] “Neur574” “Neur575” “Neur679”\n30 different cell groups.\n\nclusters.cells &lt;- set_names(fb150Obj@metaCells$ClusterName,nm = rownames(fb150Obj@metaCells))\ndea.ClusterName &lt;- DEAOnClusters(fb150Obj,clusters = clusters.cells)\n\nhead(dea.ClusterName$coex)\n\n            Neur492       Neur493      Neur494      Neur497      Neur498\nLamc1  -0.015142482  0.0052112095 -0.007566741  0.026741619  0.010599224\nLama1  -0.009632159 -0.0002343889 -0.010660671 -0.011372217 -0.004549478\nHs3st1  0.017614822 -0.0670123869  0.031852014 -0.033595679 -0.051990356\nFabp3  -0.013876113  0.0978372006  0.033870283 -0.018363993 -0.001097806\nNrg2   -0.005434727  0.0035304650  0.005300480 -0.008163350 -0.009236954\nBend4  -0.006635644 -0.0051243739 -0.007347493 -0.007827941 -0.014149243\n            Neur499      Neur501      Neur502     Neur504      Neur505\nLamc1  -0.002987865  0.010825673 -0.020364010 -0.01240859 -0.008362820\nLama1  -0.004586508 -0.004627726  0.008897717 -0.02182153  0.013489025\nHs3st1 -0.028752186  0.116297848  0.039591917  0.09582077  0.080567467\nFabp3  -0.001637069 -0.017191649 -0.010664235 -0.06640263 -0.046594627\nNrg2   -0.010451945  0.004869471  0.015748204 -0.02610886 -0.001227308\nBend4   0.027951286  0.012358515 -0.004432487 -0.01802341 -0.003364840\n             Neur506      Neur507      Neur508      Neur509      Neur510\nLamc1  -0.0137768308  0.013438810  0.003655012  0.015332401 -0.022982461\nLama1   0.0473493936 -0.001843277 -0.020074771 -0.004309732 -0.022499414\nHs3st1  0.0009883989 -0.044753051 -0.005629901  0.113439645 -0.017375581\nFabp3   0.0495867141 -0.030231847 -0.043623601 -0.077834754  0.043983043\nNrg2   -0.0005773858 -0.024882460 -0.051351834 -0.033940039 -0.006889284\nBend4  -0.0096820697 -0.023076428 -0.024799514 -0.026800103 -0.023813556\n            Neur511      Neur516      Neur518      Neur519      Neur524\nLamc1  -0.006029846  0.029054227 -0.001584281 -0.023778455  0.010622135\nLama1  -0.007894555 -0.022458902 -0.008383886 -0.008774730 -0.008985542\nHs3st1  0.026348751  0.015910202 -0.022958194 -0.011012483 -0.026955014\nFabp3   0.025743620 -0.017541959  0.038232083  0.016478606  0.086814711\nNrg2   -0.041561278  0.008453141 -0.002869805  0.037131271  0.077391246\nBend4  -0.032179960  0.006955173 -0.005798012 -0.006054586  0.010811234\n            Neur525       Neur526      Neur560     Neur565      Neur566\nLamc1  -0.005698386  8.098411e-03 -0.002777033  0.02760694  0.042467086\nLama1   0.021459376 -5.210111e-03  0.026547559  0.05971741  0.026773138\nHs3st1 -0.058540117 -5.159973e-03 -0.028545565 -0.03421586 -0.018237097\nFabp3   0.104026536 -4.399868e-05 -0.031478717 -0.01143598 -0.007057800\nNrg2    0.067456393  1.888367e-02  0.036151663  0.04125869  0.005918738\nBend4  -0.035214002 -3.580672e-03 -0.003135888  0.21473720  0.012669639\n             Neur568      Neur573      Neur574      Neur575      Neur679\nLamc1  -0.0238073082  0.016259061  0.029273702 -0.006876455 -0.026166913\nLama1   0.0269694769  0.011948982 -0.005923828  0.009594151 -0.021046008\nHs3st1 -0.0557759330 -0.025415472 -0.033200908 -0.024987623  0.009828396\nFabp3  -0.0650712806 -0.026079990 -0.007401114 -0.012669512 -0.090809976\nNrg2    0.0004859691 -0.008135245  0.001663527 -0.013282661 -0.001594555\nBend4   0.1394771632 -0.002429324 -0.004063790  0.011455264  0.009762501"
  },
  {
    "objectID": "DEA_Seurat_COTAN.html#seurat-object-creation",
    "href": "DEA_Seurat_COTAN.html#seurat-object-creation",
    "title": "DEA comparison Seurat - Cotan",
    "section": "Seurat object creation",
    "text": "Seurat object creation\n\nseurat.obj &lt;- CreateSeuratObject(counts = getRawData(fb150Obj), project = \"fb15.0\", min.cells = 3, min.features = 200)\n\nseurat.obj[[\"percent.mt\"]] &lt;- PercentageFeatureSet(seurat.obj, pattern = \"^mt.\")\nVlnPlot(seurat.obj, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\n\n\n\n\n\nseurat.obj &lt;- NormalizeData(seurat.obj, normalization.method = \"LogNormalize\", scale.factor = 10000)\n\nseurat.obj &lt;- FindVariableFeatures(seurat.obj, selection.method = \"vst\", nfeatures = 2000)\nall.genes &lt;- rownames(seurat.obj)\nseurat.obj &lt;- ScaleData(seurat.obj, features = all.genes)\n\nseurat.obj &lt;- RunPCA(seurat.obj, features = VariableFeatures(object = seurat.obj))\n\nDimPlot(seurat.obj)\n\n\n\n\n\nElbowPlot(seurat.obj,ndims = 50)\n\n\n\n\n\nseurat.obj &lt;- FindNeighbors(seurat.obj, dims = 1:25)\nseurat.obj &lt;- FindClusters(seurat.obj, resolution = 0.5)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 4407\nNumber of edges: 148076\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8695\nNumber of communities: 11\nElapsed time: 0 seconds\n\nseurat.obj &lt;- RunUMAP(seurat.obj, dims = 1:25)\n\n\nDimPlot(seurat.obj)\n\n\n\n\n\nidentical(rownames(seurat.obj@meta.data),rownames(metaC))\n\n[1] TRUE\n\nseurat.obj@meta.data &lt;- cbind(seurat.obj@meta.data, metaC)\n\nDimPlot(seurat.obj,group.by = \"Subclass\", label = TRUE)+NoLegend()\n\n\n\n\n\nDimPlot(seurat.obj,group.by = \"ClusterName\", label = T, label.size = 3)+NoLegend()\n\n\n\n\n\nseurat.obj &lt;- SetIdent(seurat.obj,value = \"Subclass\")\nseurat.obj.markers.Subclass &lt;- FindAllMarkers(seurat.obj, logfc.threshold = 0.1,min.pct = 0.01, only.pos = TRUE)\n\nhead(seurat.obj.markers.Subclass)\n\n                p_val avg_log2FC pct.1 pct.2     p_val_adj\nNeurod6  0.000000e+00   4.090494 0.987 0.127  0.000000e+00\nNeurod2 3.164351e-294   3.376326 0.957 0.065 4.101949e-290\nTiam2   4.807385e-256   3.542872 0.900 0.068 6.231813e-252\nSox5    2.989319e-249   3.598904 0.912 0.127 3.875055e-245\nPpp2r2b 9.140509e-235   2.193826 0.970 0.361 1.184884e-230\nRbfox1  3.234905e-206   2.318090 0.974 0.412 4.193407e-202\n                                      cluster    gene\nNeurod6 Cortical or hippocampal glutamatergic Neurod6\nNeurod2 Cortical or hippocampal glutamatergic Neurod2\nTiam2   Cortical or hippocampal glutamatergic   Tiam2\nSox5    Cortical or hippocampal glutamatergic    Sox5\nPpp2r2b Cortical or hippocampal glutamatergic Ppp2r2b\nRbfox1  Cortical or hippocampal glutamatergic  Rbfox1\n\n\n\n seurat.obj &lt;- SetIdent(seurat.obj,value = \"ClusterName\")\n seurat.obj.markers.ClusterName &lt;- FindAllMarkers(seurat.obj,densify = TRUE, logfc.threshold = 0.1,min.pct = 0.01,only.pos = TRUE)\n \nhead(seurat.obj.markers.ClusterName)\n\n                 p_val avg_log2FC pct.1 pct.2     p_val_adj cluster     gene\nWnt10a   4.836119e-259  0.9646853 0.316 0.000 6.269061e-255 Neur492   Wnt10a\nAdamts19 2.737699e-201  0.8726592 0.316 0.001 3.548879e-197 Neur492 Adamts19\nTac2     1.894266e-172  2.0721515 0.316 0.002 2.455537e-168 Neur492     Tac2\nRmst     1.166934e-155  2.2966143 0.763 0.024 1.512697e-151 Neur492     Rmst\nEomes    1.978338e-139  1.6902540 0.579 0.015 2.564520e-135 Neur492    Eomes\nEbf1     4.915113e-109  1.9468755 0.526 0.016 6.371461e-105 Neur492     Ebf1"
  },
  {
    "objectID": "DEA_Seurat_COTAN.html#comparision-cotan-seurat",
    "href": "DEA_Seurat_COTAN.html#comparision-cotan-seurat",
    "title": "DEA comparison Seurat - Cotan",
    "section": "Comparision COTAN-Seurat",
    "text": "Comparision COTAN-Seurat\n\nmarkers.list.names &lt;- col_concat(crossing(colnames(dea.Subclass$coex),c(\"Seurat\",\"Cotan\")),sep = \" \")\n\nmarkers.list &lt;- vector(\"list\", length(markers.list.names))\nnames(markers.list) &lt;- markers.list.names\n\n# I take positive coex significant genes \nfor (cl.name in colnames(dea.Subclass$coex)) {\n  genes &lt;- rownames(dea.Subclass$coex[dea.Subclass$`p-value`[,cl.name] &lt; 0.01 & dea.Subclass$coex[,cl.name] &gt; 0,])\n  markers.list[[paste0(cl.name,\" Cotan\")]] &lt;- genes\n}\n\n#For seurat\nfor (cl.name in colnames(dea.Subclass$coex)) {\n  genes &lt;- seurat.obj.markers.Subclass[seurat.obj.markers.Subclass$cluster == cl.name & seurat.obj.markers.Subclass$p_val &lt; 0.01,]$gene\n  markers.list[[paste0(cl.name,\" Seurat\")]] &lt;- genes\n}\n\n\nCajal-Retzius subclass\n\nggvenn.CR &lt;- ggVennDiagram(markers.list[1:2])\nggvenn.CR\n\n\n\n\nWe can observe that there is a good overlap among the detected markers.\n\ngenes.to.test &lt;- markers.list$`Cajal-Retzius Seurat`[!markers.list$`Cajal-Retzius Seurat` %in% markers.list$`Cajal-Retzius Cotan`]\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Seurat Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#E69F00\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 50)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\nset.seed(111)\ngenes &lt;- sample(genes.to.test,size = 12)\ngenes\n\n [1] \"Zfp579\" \"Lias\"   \"Tmed2\"  \"Srsf9\"  \"Dtx3\"   \"Srp14\"  \"Pofut2\" \"Rtn1\"  \n [9] \"Thap3\"  \"Cttn\"   \"Socs2\"  \"Ctxn1\" \n\n\n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\nGenerally if we look at the genes specifically detected by Seurat, they don’t seems so distinctive for CR cells.\n\nsum(genes.to.test %in% markers.list$`Cortical or hippocampal glutamatergic Seurat`)/length(genes.to.test)\n\n[1] 0.08626761\n\n\n\ngenes.to.test.Cotan &lt;- markers.list$`Cajal-Retzius Cotan`[!markers.list$`Cajal-Retzius Cotan` %in% markers.list$`Cajal-Retzius Seurat`]\n\nset.seed(11)\ngenes &lt;- sample(genes.to.test.Cotan,size = 30)\ngenes\n\n [1] \"Fam149a\"        \"Slc35g2\"        \"Chst7\"          \"P2ry14\"        \n [5] \"Tusc3\"          \"A730056A06Rik\"  \"Zfp941\"         \"Gpx8\"          \n [9] \"Ripk1\"          \"Gm15441\"        \"Igsf10\"         \"X4930522L14Rik\"\n[13] \"Gm16845\"        \"Gspt2\"          \"Scn2b\"          \"Akr1b10\"       \n[17] \"Vegfa\"          \"X4933431E20Rik\" \"Rtkn\"           \"Gm38250\"       \n[21] \"Fancf\"          \"Rab43\"          \"Grik1\"          \"Eya1\"          \n[25] \"Pih1d2\"         \"Cldn12\"         \"Cacng2\"         \"Pias3\"         \n[29] \"Gm26782\"        \"Mme\"           \n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test.Cotan]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Cotan Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#C69AFF\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 25)+xlim(0,4800)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\nNow we can test the enrichment for the specific gene both in Seurat and in Cotan.\nTo make a comparison more equal we select the same number of genes (depending on the smallest group)\n\ngenes.to.testTop &lt;- seurat.obj.markers.Subclass[seurat.obj.markers.Subclass$cluster == \"Cajal-Retzius\" & seurat.obj.markers.Subclass$gene %in% genes.to.test,]$gene[1:length(genes.to.test.Cotan)]\n\n\nenriched &lt;- enrichr(genes.to.testTop, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\nenriched &lt;- enrichr(genes.to.test.Cotan, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\n\nCortical or hippocampal glutamatergic subclass\n\nggvenn.CHG &lt;- ggVennDiagram(markers.list[3:4])\nggvenn.CHG\n\n\n\n\n\ngenes.to.test &lt;- markers.list$`Cortical or hippocampal glutamatergic Seurat`[!markers.list$`Cortical or hippocampal glutamatergic Seurat` %in% markers.list$`Cortical or hippocampal glutamatergic Cotan`]\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Seurat Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nlibrary(plyr)\nlibrary(scales) \nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#E69F00\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 50)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\nset.seed(111)\ngenes &lt;- sample(genes.to.test,size = 18)\ngenes\n\n [1] \"Fam220a\" \"Taok3\"   \"Fau\"     \"Fzd1\"    \"Rpl7\"    \"Idh3a\"   \"Lgmn\"   \n [8] \"Mapkap1\" \"Apopt1\"  \"Tubg1\"   \"Rpl10\"   \"Rpl6\"    \"Ankrd45\" \"Nsa2\"   \n[15] \"Reep2\"   \"Rpl14\"   \"Egfem1\"  \"Letm1\"  \n\n\n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ngenes.to.test.Cotan &lt;- markers.list$`Cortical or hippocampal glutamatergic Cotan`[!markers.list$`Cortical or hippocampal glutamatergic Cotan` %in% markers.list$`Cortical or hippocampal glutamatergic Seurat`]\n\nset.seed(11)\ngenes &lt;- sample(genes.to.test.Cotan,size = 30)\ngenes\n\n [1] \"Pitpnm1\"        \"Nptx1\"          \"Tnfaip8l1\"      \"Dlc1\"          \n [5] \"Ttyh1\"          \"Pde11a\"         \"Adamts2\"        \"Pomk\"          \n [9] \"D6Ertd474e\"     \"Car12\"          \"Rspo3\"          \"Gm43517\"       \n[13] \"X3830406C13Rik\" \"Grp\"            \"E2f1\"           \"Ntf3\"          \n[17] \"Stim2\"          \"D030068K23Rik\"  \"Tspan17\"        \"Ube2t\"         \n[21] \"Impa2\"          \"Egfl6\"          \"Serping1\"       \"Pttg1\"         \n[25] \"Sh3bgrl3\"       \"Mcrip2\"         \"Map1lc3a\"       \"Nrn1\"          \n[29] \"Gm42997\"        \"AC124490.1\"    \n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test.Cotan]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Cotan Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#C69AFF\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 25)+xlim(0,4800)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\ngenes.to.testTop &lt;- seurat.obj.markers.Subclass[seurat.obj.markers.Subclass$cluster == \"Cortical or hippocampal glutamatergic\" & seurat.obj.markers.Subclass$gene %in% genes.to.test,]$gene[1:length(genes.to.test.Cotan)]\n\n\nenriched &lt;- enrichr(genes.to.testTop, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(12333)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:8],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:8])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(2, 0.5), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\nenriched &lt;- enrichr(genes.to.test.Cotan, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(1233)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\n\nForebrain GABAergic subclass\n\nggvenn.FGaba &lt;- ggVennDiagram(markers.list[5:6])\nggvenn.FGaba\n\n\n\n\n\ngenes.to.test &lt;- markers.list$`Forebrain GABAergic Seurat`[!markers.list$`Forebrain GABAergic Seurat` %in% markers.list$`Forebrain GABAergic Cotan`]\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Seurat Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nlibrary(plyr)\nlibrary(scales) \nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#E69F00\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 50)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\nset.seed(111)\ngenes &lt;- sample(genes.to.test,size = 18)\ngenes\n\n [1] \"Ddx5\"    \"Pycr2\"   \"Them4\"   \"Zfp647\"  \"Jpt1\"    \"Ybx1\"    \"Atp5a1\" \n [8] \"Cdkn1c\"  \"Gm3764\"  \"Bex2\"    \"Ftl1\"    \"Kmt2a\"   \"Map2\"    \"Cntnap2\"\n[15] \"Pogk\"    \"Rtn1\"    \"Scg5\"    \"H3f3b\"  \n\n\n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ngenes.to.test.Cotan &lt;- markers.list$`Forebrain GABAergic Cotan`[!markers.list$`Forebrain GABAergic Cotan` %in% markers.list$`Forebrain GABAergic Seurat`]\n\nset.seed(11)\ngenes &lt;- sample(genes.to.test.Cotan,size = 30)\ngenes\n\n [1] \"Met\"        \"Rsbn1l\"     \"Zfp358\"     \"Enpp5\"      \"Sft2d3\"    \n [6] \"Gng4\"       \"Gm14342\"    \"Msrb3\"      \"Ncaph2\"     \"Dtnbp1\"    \n[11] \"Zfp62\"      \"Shprh\"      \"Bmf\"        \"AC174678.1\" \"Map7d1\"    \n[16] \"Srsf1\"      \"Smim7\"      \"Rab39b\"     \"Depdc7\"     \"Prkg1\"     \n[21] \"Rad21\"      \"Brinp1\"     \"Rbm5\"       \"Laptm4b\"    \"Dcbld2\"    \n[26] \"Slf2\"       \"Fam173a\"    \"Sh3bp5l\"    \"Slc1a2\"     \"Sstr1\"     \n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test.Cotan]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Cotan Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#C69AFF\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 25)+xlim(0,4800)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\nenriched &lt;- enrichr(genes.to.test, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(12333)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:5],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:5])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\nsubset.pval &lt;- dea.Subclass$`p-value`[rownames(dea.Subclass$`p-value`) %in% genes.to.test.Cotan,]\n\ngenes.to.test.Cotan.Top &lt;- rownames(subset.pval[order(subset.pval$`Forebrain GABAergic`,decreasing = F),])[1:length(genes.to.test)]\n\nenriched &lt;- enrichr(genes.to.test.Cotan.Top, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term,pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score)\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\n\nCluster Neur509\n\n# markers.list.namesNeur509 &lt;- col_concat(crossing(colnames(dea.ClusterName$coex),c(\"Seurat\",\"Cotan\")),sep = \" \")\n# \n# markers.listNeur509 &lt;- vector(\"list\", length(markers.list.namesNeur509))\n# names(markers.listNeur509) &lt;- markers.list.namesNeur509\n\nmarkers.listNeur509 &lt;- list(\"Neur509 Cotan\"=NA,\"Neur509 Seurat\"=NA)\n\n# I take positive coex significant genes \nfor (cl.name in \"Neur509\") {\n  genes &lt;- rownames(dea.ClusterName$coex[dea.ClusterName$`p-value`[,cl.name] &lt; 0.01 & dea.ClusterName$coex[,cl.name] &gt; 0,])\n  markers.listNeur509[[paste0(cl.name,\" Cotan\")]] &lt;- genes\n}\n\n#For seurat\nfor (cl.name in \"Neur509\") {\n  genes &lt;- seurat.obj.markers.ClusterName[seurat.obj.markers.ClusterName$cluster == cl.name & seurat.obj.markers.ClusterName$p_val &lt; 0.01,]$gene\n  markers.listNeur509[[paste0(cl.name,\" Seurat\")]] &lt;- genes\n}\n\n\nggVennDiagram(markers.listNeur509)\n\n\n\n\nWe can observe that there is a good overlap among the detected markers.\n\ngenes.to.test &lt;- markers.listNeur509$`Neur509 Seurat`[!markers.listNeur509$`Neur509 Seurat` %in% markers.listNeur509$`Neur509 Cotan`]\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Seurat Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#E69F00\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 25)+xlim(0,4800)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent of genes\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\nset.seed(111)\ngenes &lt;- sample(genes.to.test,size = 12)\ngenes\n\n [1] \"Grpel1\"         \"Ssna1\"          \"X1110004E09Rik\" \"Mri1\"          \n [5] \"Sod2\"           \"Bola1\"          \"Ppp4c\"          \"Draxin\"        \n [9] \"Peli2\"          \"Sfpq\"           \"Rpl22\"          \"Chmp5\"         \n\n\n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\nGenerally if we look at the genes specifically detected by Seurat, they don’t seems so distinctive for CR cells.\n\nsum(genes.to.test %in% markers.listNeur509$`Cortical or hippocampal glutamatergic Seurat`)/length(genes.to.test)\n\n[1] 0\n\n\n\ngenes.to.test.Cotan &lt;- markers.listNeur509$`Neur509 Cotan`[!markers.listNeur509$`Neur509 Cotan` %in% markers.listNeur509$`Neur509 Seurat`]\n\nset.seed(11)\ngenes &lt;- sample(genes.to.test.Cotan,size = 30)\ngenes\n\n [1] \"Dusp14\"     \"Gm15594\"    \"Tnik\"       \"Sertad3\"    \"Sowahc\"    \n [6] \"Adgrg6\"     \"Rbfox1\"     \"Gm10073\"    \"Gm17231\"    \"Btf3\"      \n[11] \"Khdrbs2\"    \"Adpgk\"      \"Pih1d2\"     \"Capzb\"      \"Cox6b1\"    \n[16] \"Chst5\"      \"Dcxr\"       \"Tfdp2\"      \"Plcxd2\"     \"Prss41\"    \n[21] \"Kcnq5\"      \"AC152827.1\" \"Atg4a\"      \"Fezf2\"      \"Gm15489\"   \n[26] \"Cth\"        \"Zbtb44\"     \"Sec61a1\"    \"Rbm12b1\"    \"Hk2\"       \n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test.Cotan]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Cotan Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#C69AFF\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 25)+xlim(0,4800)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\nNow we can test the enrichment for the specific gene both in Seurat and in Cotan.\nTo make a comparison more equal we select the same number of genes (depending on the smallest group)\n\ngenes.to.testTop &lt;- seurat.obj.markers.ClusterName[seurat.obj.markers.ClusterName$cluster == \"Neur509\" & seurat.obj.markers.ClusterName$gene %in% genes.to.test,]$gene[1:length(genes.to.test.Cotan)]\n\n\nenriched &lt;- enrichr(genes.to.testTop, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\nenriched &lt;- enrichr(genes.to.test.Cotan, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\n\nCluster Neur508\n\n# markers.list.namesNeur508 &lt;- col_concat(crossing(colnames(dea.ClusterName$coex),c(\"Seurat\",\"Cotan\")),sep = \" \")\n# \n# markers.listNeur508 &lt;- vector(\"list\", length(markers.list.namesNeur508))\n# names(markers.listNeur508) &lt;- markers.list.namesNeur508\n\nmarkers.listNeur508 &lt;- list(\"Neur508 Cotan\"=NA,\"Neur508 Seurat\"=NA)\n\n# I take positive coex significant genes \nfor (cl.name in \"Neur508\") {\n  genes &lt;- rownames(dea.ClusterName$coex[dea.ClusterName$`p-value`[,cl.name] &lt; 0.01 & dea.ClusterName$coex[,cl.name] &gt; 0,])\n  markers.listNeur508[[paste0(cl.name,\" Cotan\")]] &lt;- genes\n}\n\n#For seurat\nfor (cl.name in \"Neur508\") {\n  genes &lt;- seurat.obj.markers.ClusterName[seurat.obj.markers.ClusterName$cluster == cl.name & seurat.obj.markers.ClusterName$p_val &lt; 0.01,]$gene\n  markers.listNeur508[[paste0(cl.name,\" Seurat\")]] &lt;- genes\n}\n\n\nggVennDiagram(markers.listNeur508)\n\n\n\n\nWe can observe that there is a good overlap among the detected markers.\n\ngenes.to.test &lt;- markers.listNeur508$`Neur508 Seurat`[!markers.listNeur508$`Neur508 Seurat` %in% markers.listNeur508$`Neur508 Cotan`]\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Seurat Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#E69F00\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 50)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\nset.seed(111)\ngenes &lt;- sample(genes.to.test,size = 12)\ngenes\n\n [1] \"Gm10131\" \"Topors\"  \"Agfg1\"   \"Pfdn4\"   \"Arhgdia\" \"Fam96b\"  \"Kif5c\"  \n [8] \"Rpl18\"   \"Akt3\"    \"Gm42743\" \"Papola\"  \"Uri1\"   \n\n\n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\nGenerally if we look at the genes specifically detected by Seurat, they don’t seems so distinctive for CR cells.\n\nsum(genes.to.test %in% markers.listNeur508$`Cortical or hippocampal glutamatergic Seurat`)/length(genes.to.test)\n\n[1] 0\n\n\n\ngenes.to.test.Cotan &lt;- markers.listNeur508$`Neur508 Cotan`[!markers.listNeur508$`Neur508 Cotan` %in% markers.listNeur508$`Neur508 Seurat`]\n\n\n\nset.seed(11)\ngenes &lt;- sample(genes.to.test.Cotan,size = 30)\ngenes\n\n [1] \"X1700066M21Rik\" \"Gm44734\"        \"Zfp959\"         \"Rpl37\"         \n [5] \"Chodl\"          \"Mmp17\"          \"Atp5h\"          \"Acot6\"         \n [9] \"Cux2\"           \"Rps10\"          \"Rpl13a\"         \"Lurap1l\"       \n[13] \"Tcf12\"          \"Sirt6\"          \"Gm12184\"        \"Etohd2\"        \n[17] \"Laptm4b\"        \"Pomc\"           \"Rpl9\"           \"Inhbb\"         \n[21] \"Gpr62\"          \"Sstr3\"          \"D830035M03Rik\"  \"Eef1b2\"        \n[25] \"Bmpr1b\"         \"Rps4x\"          \"Tpd52\"          \"Selenow\"       \n[29] \"Pla2g7\"         \"Kcnj11\"        \n\nn=0\nfor (g in c(0:2)) {\n  n = g*4\n  plot(FeaturePlot(seurat.obj,features = genes[n+c(1:4)], label = T))\n}\n\n\n\n\n\n\n\n\n\n\n\ndf &lt;- getNumOfExpressingCells(fb150Obj)[genes.to.test.Cotan]\ndf &lt;- as.data.frame(df)\ncolnames(df) &lt;- \"CellNumber\"\nrownames(df) &lt;- NULL\ndf$type &lt;- \"Only Cotan Genes\"\n\ndf.bk &lt;- as.data.frame(getNumOfExpressingCells(fb150Obj)[sample(getGenes(fb150Obj), size = length(rownames(df)))])\nrownames(df.bk) &lt;- NULL\ncolnames(df.bk) &lt;- \"CellNumber\"\ndf.bk$type &lt;- \"Whole dataset Genes\"\ndf &lt;- rbind(df,df.bk)\n\nmu &lt;- ddply(df, \"type\", summarise, grp.mean=mean(CellNumber))\n\nggplot(df,aes(x=CellNumber,fill=type))+\n  scale_fill_manual(values=c(\"#C69AFF\", \"#56B4E9\"))+\n  geom_histogram(aes(y=..density..), position=\"identity\", alpha=0.5,bins = 25)+xlim(0,4800)+\n  geom_vline(data=mu, aes(xintercept=grp.mean, color=type),\n           linetype=\"dashed\")+\n  geom_density(alpha=0.6)+\n  scale_y_continuous(labels = percent, name = \"percent\") +\n  theme_classic()+\n  theme(legend.position=\"bottom\")\n\n\n\n\nNow we can test the enrichment for the specific gene both in Seurat and in Cotan.\nTo make a comparison more equal we select the same number of genes (depending on the smallest group)\n\n#genes.to.testTop &lt;- seurat.obj.markers.ClusterName[seurat.obj.markers.ClusterName$cluster == \"Neur508\" & seurat.obj.markers.ClusterName$gene %in% genes.to.test,]$gene[1:length(genes.to.test.Cotan)]\n\n\nenriched &lt;- enrichr(genes.to.test, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\nsubset.pval &lt;- dea.ClusterName$`p-value`[rownames(dea.ClusterName$`p-value`) %in% genes.to.test.Cotan,]\n\ngenes.to.test.Cotan.Top &lt;- rownames(subset.pval[order(subset.pval$Neur492,decreasing = F),])[1:length(genes.to.test)]\n\n\n\nenriched &lt;- enrichr(genes.to.test.Cotan.Top, dbs)\n\nUploading data to Enrichr... Done.\n  Querying ARCHS4_Tissues... Done.\nParsing results... Done.\n\nplotEnrich(enriched[[1]], showTerms = 10, numChar = 40, y = \"Count\", orderBy = \"P.value\")\n\n\n\n\n\nset.seed(123)\nwordcloud_data &lt;- data.frame(Terms = str_split(enriched[[1]]$Term[1:20],pattern = \" CL\",simplify = T )[,1],\n                             Scores = enriched[[1]]$Combined.Score[1:20])\n\nwordcloud(wordcloud_data$Terms, wordcloud_data$Scores, scale = c(3, 1), min.freq = 1, random.order=FALSE, rot.per=0.1,colors=brewer.pal(8, \"Dark2\"))\n\n\n\n\n\nggVennDiagram(markers.list[c(1,3,5)])\n\n\n\n\n\nggVennDiagram(markers.list[c(2,4,6)])\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] enrichR_3.2         tidyr_1.3.0         ggVennDiagram_1.2.2\n [4] assertr_3.0.0       stringr_1.5.0       wordcloud_2.6      \n [7] RColorBrewer_1.1-3  SeuratObject_4.1.3  Seurat_4.3.0       \n[10] rlang_1.1.0         scales_1.2.1        plyr_1.8.8         \n[13] COTAN_2.1.5         zeallot_0.1.0       tibble_3.2.1       \n[16] ggplot2_3.4.2      \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.20       splines_4.3.0          later_1.3.0           \n  [4] polyclip_1.10-4        factoextra_1.0.7       lifecycle_1.0.3       \n  [7] sf_1.0-13              doParallel_1.0.17      globals_0.16.2        \n [10] lattice_0.21-8         MASS_7.3-59            dendextend_1.17.1     \n [13] magrittr_2.0.3         limma_3.56.0           plotly_4.10.1         \n [16] rmarkdown_2.21         yaml_2.3.7             httpuv_1.6.9          \n [19] sctransform_0.3.5      askpass_1.1            sp_1.6-0              \n [22] spatstat.sparse_3.0-1  reticulate_1.30        cowplot_1.1.1         \n [25] pbapply_1.7-0          DBI_1.1.3              abind_1.4-5           \n [28] Rtsne_0.16             purrr_1.0.1            BiocGenerics_0.46.0   \n [31] WriteXLS_6.4.0         circlize_0.4.15        IRanges_2.34.0        \n [34] S4Vectors_0.38.0       ggrepel_0.9.3          irlba_2.3.5.1         \n [37] listenv_0.9.0          spatstat.utils_3.0-3   units_0.8-2           \n [40] umap_0.2.10.0          goftest_1.2-3          RSpectra_0.16-1       \n [43] spatstat.random_3.1-4  fitdistrplus_1.1-8     parallelly_1.36.0     \n [46] leiden_0.4.3           codetools_0.2-19       tidyselect_1.2.0      \n [49] shape_1.4.6            farver_2.1.1           viridis_0.6.2         \n [52] matrixStats_1.0.0      stats4_4.3.0           spatstat.explore_3.2-1\n [55] jsonlite_1.8.4         GetoptLong_1.0.5       e1071_1.7-13          \n [58] ellipsis_0.3.2         progressr_0.13.0       ggridges_0.5.4        \n [61] survival_3.5-5         iterators_1.0.14       foreach_1.5.2         \n [64] tools_4.3.0            ica_1.0-3              Rcpp_1.0.10           \n [67] glue_1.6.2             gridExtra_2.3          xfun_0.39             \n [70] ggthemes_4.2.4         dplyr_1.1.2            withr_2.5.0           \n [73] fastmap_1.1.1          fansi_1.0.4            openssl_2.0.6         \n [76] digest_0.6.31          parallelDist_0.2.6     R6_2.5.1              \n [79] mime_0.12              colorspace_2.1-0       scattermore_1.2       \n [82] tensor_1.5             spatstat.data_3.0-1    utf8_1.2.3            \n [85] generics_0.1.3         data.table_1.14.8      class_7.3-21          \n [88] httr_1.4.5             htmlwidgets_1.6.2      uwot_0.1.14           \n [91] pkgconfig_2.0.3        gtable_0.3.3           ComplexHeatmap_2.16.0 \n [94] lmtest_0.9-40          htmltools_0.5.5        clue_0.3-64           \n [97] png_0.1-8              knitr_1.42             rstudioapi_0.14       \n[100] reshape2_1.4.4         rjson_0.2.21           nlme_3.1-162          \n[103] curl_5.0.0             proxy_0.4-27           zoo_1.8-12            \n[106] GlobalOptions_0.1.2    RVenn_1.1.0            KernSmooth_2.23-20    \n[109] parallel_4.3.0         miniUI_0.1.1.1         vipor_0.4.5           \n[112] RcppZiggurat_0.1.6     ggrastr_1.0.2          pillar_1.9.0          \n[115] grid_4.3.0             vctrs_0.6.1            RANN_2.6.1            \n[118] promises_1.2.0.1       xtable_1.8-4           cluster_2.1.4         \n[121] beeswarm_0.4.0         evaluate_0.20          cli_3.6.1             \n[124] compiler_4.3.0         crayon_1.5.2           future.apply_1.11.0   \n[127] labeling_0.4.2         classInt_0.4-9         ggbeeswarm_0.7.2      \n[130] stringi_1.7.12         viridisLite_0.4.1      deldir_1.0-6          \n[133] assertthat_0.2.1       munsell_0.5.0          lazyeval_0.2.2        \n[136] spatstat.geom_3.2-1    Matrix_1.5-4.1         patchwork_1.1.2       \n[139] future_1.32.0          shiny_1.7.4            ROCR_1.0-11           \n[142] Rfast_2.0.7            igraph_1.4.2           RcppParallel_5.1.7"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html",
    "href": "FDR_DataSetCreation_ByClusterMerging.html",
    "title": "False Discovery Rate: data-sets creation",
    "section": "",
    "text": "# Load the libraries\nlibrary(stringr)\nlibrary(assertthat)\nlibrary(rlang)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(COTAN)\n\n\nassert_that(packageVersion(\"COTAN\") &gt;= package_version(\"2.3.3\"),\n            msg = \"Error: The required version of the 'COTAN' library is 2.3.3\")\n\n[1] TRUE\n\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\ninRawDataDir &lt;- file.path(inDir, \"SingleClusterRawData/\")\n\noutDir &lt;- file.path(\"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\")\nif (!dir.exists(outDir)) {\n  dir.create(outDir)\n}\n\noutMergedRawDataDir &lt;- outDir\nif (!dir.exists(outMergedRawDataDir)) {\n  dir.create(outMergedRawDataDir)\n}\n\noptions(parallelly.fork.enable = TRUE)\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"MixingClusters_FDR_ForebrainDorsal.log\"))"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#preamble",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#preamble",
    "title": "False Discovery Rate: data-sets creation",
    "section": "",
    "text": "# Load the libraries\nlibrary(stringr)\nlibrary(assertthat)\nlibrary(rlang)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(COTAN)\n\n\nassert_that(packageVersion(\"COTAN\") &gt;= package_version(\"2.3.3\"),\n            msg = \"Error: The required version of the 'COTAN' library is 2.3.3\")\n\n[1] TRUE\n\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\ninRawDataDir &lt;- file.path(inDir, \"SingleClusterRawData/\")\n\noutDir &lt;- file.path(\"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\")\nif (!dir.exists(outDir)) {\n  dir.create(outDir)\n}\n\noutMergedRawDataDir &lt;- outDir\nif (!dir.exists(outMergedRawDataDir)) {\n  dir.create(outMergedRawDataDir)\n}\n\noptions(parallelly.fork.enable = TRUE)\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"MixingClusters_FDR_ForebrainDorsal.log\"))"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#loading-all-cotan-objects",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#loading-all-cotan-objects",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Loading all COTAN Objects",
    "text": "Loading all COTAN Objects\n\nfb135Obj &lt;- readRDS(file = file.path(inRawDataDir, \"e13.5_ForebrainDorsal.cotan.RDS\"))\ngetMetadataElement(fb135Obj, datasetTags()[[\"cond\"]])\n\nfb150Obj &lt;- readRDS(file = file.path(inRawDataDir, \"e15.0_ForebrainDorsal.cotan.RDS\"))\ngetMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\nfb175Obj &lt;- readRDS(file = file.path(inRawDataDir, \"e17.5_ForebrainDorsal.cotan.RDS\"))\ngetMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#relevant-clusters-lists",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#relevant-clusters-lists",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Relevant clusters lists",
    "text": "Relevant clusters lists"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#align-clusters-from-different-datasets",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#align-clusters-from-different-datasets",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Align clusters from different datasets",
    "text": "Align clusters from different datasets\n\nallGenes &lt;- union(union(getGenes(fb135Obj), getGenes(fb150Obj)), getGenes(fb175Obj))\n\n# This function completes the raw data so that the genes list\n# matches the `allGenes` above\nfillGenes &lt;- function(m, prefixName) {\n  # find the missing genes in the given matrix m\n  missingGenes &lt;- !(allGenes %in% rownames(m))\n  # create a matrix with the right sizes for the missing genes\n  # and set their values all to zero\n  fillM &lt;- matrix(0, nrow = sum(missingGenes), ncol = ncol(m))\n  rownames(fillM) &lt;- allGenes[missingGenes]\n  # append the new matrix to the original and reorder the rows\n  # to match overall genes order\n  retM &lt;- rbind(m, fillM)\n  retM &lt;- retM[allGenes, ]\n  # assign unique identifiers to the columns, so that one can discriminate\n  # the source even after merging with other matrices\n  colnames(retM) &lt;- paste0(prefixName, \"_\", colnames(retM))\n  return(retM)\n}"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#create-all-raw-data-for-each-cluster-compatible-with-the-full-genes-list",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#create-all-raw-data-for-each-cluster-compatible-with-the-full-genes-list",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Create all raw data for each cluster compatible with the full genes’ list",
    "text": "Create all raw data for each cluster compatible with the full genes’ list\n\nallClustersRawData &lt;- list()\nfor (dsName in names(relevant)) {\n  clList &lt;- toClustersList(getClusters(objSelector(dsName),\n                                       clName = \"original.clusters\"))\n  for (clName in relevant[[dsName]]) {\n    fullName &lt;- fullClusterName(dsName = dsName, clName = clName)\n    fullRawData &lt;- fillGenes(getRawData(objSelector(dsName))[, clList[[clName]]],\n                             fullName)\n    allClustersRawData &lt;- append(allClustersRawData, list(fullRawData))\n    names(allClustersRawData)[length(allClustersRawData)] &lt;- fullName\n  }\n}\n\nassert_that(identical(rownames(allClustersRawData[[1]]), allGenes))\n\n# delete the COTAN objects\nrm(fb135Obj, fb150Obj, fb175Obj)"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#calculate-ritz-average-for-each-cluster",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#calculate-ritz-average-for-each-cluster",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Calculate ritz average for each cluster",
    "text": "Calculate ritz average for each cluster"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#parse-selected-clusters-collections",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#parse-selected-clusters-collections",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Parse selected clusters’ collections",
    "text": "Parse selected clusters’ collections"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#create-merged-clusters-cells-collections",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#create-merged-clusters-cells-collections",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Create merged clusters cells’ collections",
    "text": "Create merged clusters cells’ collections\n\nset.seed(137L)\n\ncellsUsed &lt;- as.data.frame(x = matrix(list(), ncol = 2 + length(allClustersRawData)))\n\nfor (i in (1:length(allComb))) {\n  metaGroup &lt;- allComb[[i]]\n  metaMix &lt;- allMixtures[[i]]\n  metaGroupName &lt;- names(allComb)[[i]]\n  print(paste0(\"Meta: \", metaGroupName))\n  \n  for (j in 1:length(metaGroup)) {\n    group &lt;- metaGroup[[j]]\n    groupMix &lt;- metaMix[[j]]\n    groupName &lt;- paste0(metaGroupName, \"_\", names(metaGroup)[[j]])\n    print(paste0(\"Group: \", groupName))\n\n    for (k in 1:length(group)) {\n      coll &lt;- group[[k]]\n      mix &lt;- groupMix[[k]]\n      collName &lt;- paste0(groupName, \"_\", k)\n      print(paste0(\"Coll: \", collName))\n      \n      pos &lt;- names(allClustersRawData) %in% coll\n      collRawData &lt;- allClustersRawData[pos]\n      \n      len &lt;- unlist(lapply(collRawData, ncol))\n      perm &lt;- order(len, decreasing = TRUE)\n\n      ratios &lt;- len[perm] / mix\n      \n      cellsToPickUp &lt;- set_names(ceiling(mix * min(ratios)),\n                                 nm = names(len)[perm])\n\n      collAsStr &lt;- paste0(coll[perm], collapse = \"_+_\")\n      \n      numUsedCells &lt;- set_names(rep(0L, length(allClustersRawData)),\n                             nm = names(allClustersRawData))\n      numUsedCells[names(cellsToPickUp)] &lt;- cellsToPickUp\n      \n      cellsUsed &lt;- rbind(cellsUsed, c(groupName, collAsStr, numUsedCells))\n\n      mergedRawData &lt;- data.frame(row.names = allGenes)\n      mergedClusters &lt;- c()\n      for (clName in names(cellsToPickUp)) {\n        cells &lt;- sample(colnames(allClustersRawData[[clName]]),\n                        size = cellsToPickUp[[clName]],\n                        replace = FALSE)\n        mergedClusters &lt;- c(mergedClusters,\n                            rep.int(max(0, mergedClusters) + 1L,\n                                    times = length(cells)))\n        mergedRawData &lt;- cbind(mergedRawData,\n                               as.data.frame(allClustersRawData[[clName]][, cells]))\n      }\n      names(mergedClusters) &lt;- colnames(mergedRawData)\n      mergedClusters &lt;- niceFactorLevels(mergedClusters)\n      \n      mergedObj &lt;- automaticCOTANObjectCreation(mergedRawData,\n                                         GEO = groupName,\n                                         sequencingMethod = \"10X\",\n                                         sampleCondition = collAsStr,\n                                         calcCoex = FALSE,\n                                         cores = 5L,\n                                         saveObj = FALSE)\n      mergedObj &lt;- addClusterization(mergedObj, clName = \"mergedClusters\",\n                                     clusters = mergedClusters,\n                                     override = FALSE)\n\n      lfcDF &lt;- logFoldChangeOnClusters(mergedObj, clusters = mergedClusters)\n      mergedObj &lt;- addClusterization(mergedObj,\n                                     clName = \"Contains_LogFoldChange\",\n                                     clusters = mergedClusters,\n                                     coexDF = lfcDF, override = FALSE)\n\n      outFileName &lt;- file.path(outMergedRawDataDir,\n                               paste0(collName, \"_\", collAsStr, \".RDS\"))\n      print(outFileName)\n      saveRDS(mergedObj, file = outFileName)\n    }\n  }\n}\ncolnames(cellsUsed) &lt;- c(\"Group\", \"Collection\", names(allClustersRawData))\n\nhead(cellsUsed, n = 10)\n\nwrite.csv(cellsUsed, file = file.path(outMergedRawDataDir, \"Cells_Usage_DataFrame.csv\"))"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#loader",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#loader",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Loader",
    "text": "Loader\n\ncellsUsed &lt;- read.csv(file = file.path(outMergedRawDataDir, \"Cells_Usage_DataFrame.csv\"))\n\nnumTopGenes &lt;- 100\n\nfor(i in (1:nrow(cellsUsed))) {\n  collName &lt;- cellsUsed[i, \"Group\"]\n  collAsStr &lt;- cellsUsed[i, \"Collection\"]\n  fileName &lt;- file.path(outMergedRawDataDir,\n                        paste0(collName, \"_\", (i - 1) %% 3 + 1,\n                               \"_\", collAsStr, \".RDS\"))\n  print(paste(\"Analisys of\", collName, \"consisting of clusters\", collAsStr))\n  \n  obj &lt;- readRDS(fileName)\n  \n  cm1DF &lt;- findClustersMarkers(obj, n = numTopGenes, clName = \"mergedClusters\")\n  \n  lfcDF &lt;- getClusterizationData(obj, clName = \"Contains_LogFoldChange\")[[\"coex\"]]\n\n  cm2DF &lt;- as.data.frame(matrix(data = NA, nrow = 0L, ncol = 3L))\n  colnames(cm2DF) &lt;- c(\"CL\", \"Gene\", \"LFC\")\n\n  for(cl in colnames(lfcDF)) {\n    for (type in c(\"min\", \"max\")) {\n        tmpDF &lt;- as.data.frame(matrix(data = NA, nrow = numTopGenes, ncol = ncol(cm2DF)))\n        colnames(tmpDF) &lt;- colnames(cm2DF)\n\n        # Get the first numTopGenes minimum/maximum scores for each cluster\n        sortedPos &lt;- order(lfcDF[, cl], decreasing = (type == \"max\"))[1L:numTopGenes]\n  \n        tmpDF[[\"CL\"]]   &lt;- cl\n        tmpDF[[\"Gene\"]] &lt;- rownames(lfcDF)[sortedPos]\n        tmpDF[[\"LFC\"]]  &lt;- lfcDF[sortedPos, cl]\n\n        cm2DF &lt;- rbind(cm2DF, tmpDF)\n        rm(tmpDF)\n    }\n  }\n\n  assert_that(identical(cm1DF$CL, cm2DF$CL))\n  \n  print(\"fraction of matching genes per cluster\")\n  \n  ## to be finished, debugged...\n  for (bl in c(0:(nrow(cm1DF) %/% numTopGenes -1))) {\n    r &lt;- bl * numTopGenes\n    genes1 &lt;- cm1DF[(r + 1):(r + numTopGenes), \"Gene\"]\n    genes2 &lt;- cm2DF[(r + 1):(r + numTopGenes), \"Gene\"]\n\n    msg &lt;- paste0(\"Cluster \", cm1DF[r + 1, \"CL\"], \": \", \n                 100.0 * length(intersect(genes1, genes2)) / numTopGenes, \"%\")\n    print(msg)\n  }\n}"
  },
  {
    "objectID": "FDR_DataSetCreation_ByClusterMerging.html#footer",
    "href": "FDR_DataSetCreation_ByClusterMerging.html#footer",
    "title": "False Discovery Rate: data-sets creation",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.3.3       data.table_1.15.0 zeallot_0.1.0     ggplot2_3.4.2    \n[5] scales_1.3.0      rlang_1.1.1       assertthat_0.2.1  stringr_1.5.0    \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3        rstudioapi_0.15.0        \n  [3] jsonlite_1.8.7            shape_1.4.6              \n  [5] umap_0.2.10.0             magrittr_2.0.3           \n  [7] spatstat.utils_3.0-3      rmarkdown_2.24           \n  [9] GlobalOptions_0.1.2       vctrs_0.6.3              \n [11] ROCR_1.0-11               spatstat.explore_3.2-1   \n [13] DelayedMatrixStats_1.22.5 askpass_1.2.0            \n [15] htmltools_0.5.7           S4Arrays_1.2.0           \n [17] sctransform_0.4.1         parallelly_1.36.0        \n [19] KernSmooth_2.23-22        htmlwidgets_1.6.2        \n [21] ica_1.0-3                 plyr_1.8.8               \n [23] plotly_4.10.2             zoo_1.8-12               \n [25] igraph_1.6.0              mime_0.12                \n [27] lifecycle_1.0.3           iterators_1.0.14         \n [29] pkgconfig_2.0.3           rsvd_1.0.5               \n [31] Matrix_1.6-3              R6_2.5.1                 \n [33] fastmap_1.1.1             MatrixGenerics_1.12.3    \n [35] fitdistrplus_1.1-11       future_1.33.0            \n [37] shiny_1.8.0               clue_0.3-64              \n [39] digest_0.6.33             colorspace_2.1-0         \n [41] patchwork_1.2.0           S4Vectors_0.38.1         \n [43] tensor_1.5                Seurat_5.0.0             \n [45] dqrng_0.3.0               RSpectra_0.16-1          \n [47] irlba_2.3.5.1             beachmat_2.16.0          \n [49] PCAtools_2.14.0           progressr_0.14.0         \n [51] RcppZiggurat_0.1.6        spatstat.sparse_3.0-2    \n [53] fansi_1.0.4               polyclip_1.10-4          \n [55] httr_1.4.6                abind_1.4-5              \n [57] compiler_4.3.2            withr_3.0.0              \n [59] doParallel_1.0.17         BiocParallel_1.34.2      \n [61] viridis_0.6.4             fastDummies_1.7.3        \n [63] dendextend_1.17.1         MASS_7.3-60              \n [65] openssl_2.1.0             DelayedArray_0.26.7      \n [67] rjson_0.2.21              tools_4.3.2              \n [69] lmtest_0.9-40             httpuv_1.6.11            \n [71] future.apply_1.11.0       goftest_1.2-3            \n [73] glue_1.7.0                nlme_3.1-163             \n [75] promises_1.2.0.1          grid_4.3.2               \n [77] Rtsne_0.16                cluster_2.1.6            \n [79] reshape2_1.4.4            generics_0.1.3           \n [81] spatstat.data_3.0-1       gtable_0.3.3             \n [83] tidyr_1.3.0               BiocSingular_1.16.0      \n [85] ScaledMatrix_1.8.1        sp_2.1-1                 \n [87] utf8_1.2.3                spatstat.geom_3.2-4      \n [89] BiocGenerics_0.46.0       RcppAnnoy_0.0.21         \n [91] ggrepel_0.9.3             RANN_2.6.1               \n [93] foreach_1.5.2             pillar_1.9.0             \n [95] spam_2.10-0               RcppHNSW_0.6.0           \n [97] later_1.3.1               circlize_0.4.15          \n [99] splines_4.3.2             dplyr_1.1.2              \n[101] lattice_0.22-5            deldir_2.0-2             \n[103] survival_3.5-7            tidyselect_1.2.0         \n[105] ComplexHeatmap_2.16.0     miniUI_0.1.1.1           \n[107] pbapply_1.7-2             knitr_1.43               \n[109] gridExtra_2.3             IRanges_2.34.1           \n[111] scattermore_1.2           stats4_4.3.2             \n[113] xfun_0.39                 matrixStats_1.2.0        \n[115] stringi_1.8.1             lazyeval_0.2.2           \n[117] yaml_2.3.7                evaluate_0.21            \n[119] codetools_0.2-19          tibble_3.2.1             \n[121] cli_3.6.1                 uwot_0.1.16              \n[123] RcppParallel_5.1.7        xtable_1.8-4             \n[125] reticulate_1.35.0         munsell_0.5.0            \n[127] Rcpp_1.0.11               spatstat.random_3.2-1    \n[129] globals_0.16.2            png_0.1-8                \n[131] parallel_4.3.2            Rfast_2.1.0              \n[133] ellipsis_0.3.2            dotCall64_1.1-0          \n[135] parallelDist_0.2.6        sparseMatrixStats_1.12.2 \n[137] listenv_0.9.0             ggthemes_5.0.0           \n[139] viridisLite_0.4.2         ggridges_0.5.4           \n[141] purrr_1.0.1               SeuratObject_5.0.0       \n[143] leiden_0.4.3              crayon_1.5.2             \n[145] GetoptLong_1.0.5          cowplot_1.1.1"
  },
  {
    "objectID": "FDR_analisysResults3_10.html",
    "href": "FDR_analisysResults3_10.html",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(cowplot)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nmethods.color &lt;- c(\"COTAN\"=\"#F73604\",\"Seurat\"=\"#ABD9E9\",\"Seurat_scTr\"=\"#74ADD1\",\"Seurat_Bimod\"=\"#4575B4\", \"Monocle\"=\"#DAABE9\", \"Scanpy\"=\"#7F9B5C\" )\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults3_10.html#preamble",
    "href": "FDR_analisysResults3_10.html#preamble",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(cowplot)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nmethods.color &lt;- c(\"COTAN\"=\"#F73604\",\"Seurat\"=\"#ABD9E9\",\"Seurat_scTr\"=\"#74ADD1\",\"Seurat_Bimod\"=\"#4575B4\", \"Monocle\"=\"#DAABE9\", \"Scanpy\"=\"#7F9B5C\" )\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults3_10.html#dataset-composition",
    "href": "FDR_analisysResults3_10.html#dataset-composition",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "Dataset composition",
    "text": "Dataset composition\n\ndatasets_csv &lt;- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv[1:3,]\n\n                 Group            Collection E13.5.432 E13.5.187 E13.5.434\n1 2_Clusters_even_near E13.5-434_+_E15.0-428         0         0       318\n2 2_Clusters_even_near E15.0-432_+_E13.5-432       536         0         0\n3 2_Clusters_even_near E15.0-508_+_E15.0-509         0         0         0\n  E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509 E15.0.510 E15.0.508\n1         0         0         0         0         0         0         0\n2         0         0         0       536         0         0         0\n3         0         0         0         0       397         0       397\n  E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1       318         0         0         0         0\n2         0         0         0         0         0\n3         0         0         0         0         0\n\n\n\nDefine which genes are expressed\nFor each data set we need to define, independently from the DEA methods, which genes are specific for each cluster. So we need to define first which genes are expressed and which are not expressed. To do so we can take advantage from the fact that we have the original clusters from which the cells were sampled to create the artificial datasets. So looking to the original cluster we define as expressed all genes present in at least the 10% of cells and we define as not expressed the genes completely absent or expressed in less than 3% of cells.\nSince these two thresholds can have a big influence on the tools performances we will test also others in other pages.\n\nfile.presence &lt;- readRDS(\"Data/MouseCortexFromLoom/FDR/Results/GenePresence_PerCluster.RDS\")\n\nfor (file in list.files(\"Data/MouseCortexFromLoom/SingleClusterRawData/\")) {\n#  print(file)\n  Code &lt;- str_split(file,pattern = \"_\",simplify = T)[1]\n  Time &lt;- str_split(Code,pattern = \"e\",simplify = T)[2]\n  Cluster &lt;- str_split(Code,pattern = \"e\",simplify = T)[1]\n  Cluster &lt;- str_remove(Cluster,pattern = \"Cl\")\n  Cluster &lt;- paste0(\"E\",Time,\"-\",Cluster)\n  file.presence[,Cluster] &lt;- \"Absent\"\n  dataset.cl &lt;- readRDS(file.path(\"Data/MouseCortexFromLoom/SingleClusterRawData/\",\n                                         file))\n  number.cell.expressing &lt;- rowSums(dataset.cl &gt; 0)\n  AbsentThreshold &lt;- round(0.03*dim(dataset.cl)[2],digits = 0)\n  PresenceThreshold &lt;- round(0.1*dim(dataset.cl)[2],digits = 0)\n  file.presence[names(number.cell.expressing[number.cell.expressing &gt; AbsentThreshold]),Cluster] &lt;- \"Uncertain\" \n  \n  file.presence[names(number.cell.expressing[number.cell.expressing &gt;= PresenceThreshold]),Cluster] &lt;- \"Present\"\n  print(Cluster)\n  print(table(file.presence[,Cluster]))\n  \n  }\n\n[1] \"E13.5-184\"\n\n   Absent   Present Uncertain \n     5519      6027      3149 \n[1] \"E13.5-187\"\n\n   Absent   Present Uncertain \n     4926      7151      2618 \n[1] \"E15.0-428\"\n\n   Absent   Present Uncertain \n     6386      5253      3056 \n[1] \"E13.5-432\"\n\n   Absent   Present Uncertain \n     5765      5975      2955 \n[1] \"E15.0-432\"\n\n   Absent   Present Uncertain \n     5912      5843      2940 \n[1] \"E13.5-434\"\n\n   Absent   Present Uncertain \n     6124      5487      3084 \n[1] \"E15.0-434\"\n\n   Absent   Present Uncertain \n     6301      5396      2998 \n[1] \"E13.5-437\"\n\n   Absent   Present Uncertain \n     5943      5783      2969 \n[1] \"E15.0-437\"\n\n   Absent   Present Uncertain \n     6017      5713      2965 \n[1] \"E17.5-505\"\n\n   Absent   Present Uncertain \n     6048      5662      2985 \n[1] \"E15.0-508\"\n\n   Absent   Present Uncertain \n     5625      6240      2830 \n[1] \"E15.0-509\"\n\n   Absent   Present Uncertain \n     5452      6454      2789 \n[1] \"E13.5-510\"\n\n   Absent   Present Uncertain \n     4924      6958      2813 \n[1] \"E15.0-510\"\n\n   Absent   Present Uncertain \n     5070      6952      2673 \n[1] \"E17.5-516\"\n\n   Absent   Present Uncertain \n     5821      5847      3027"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_even_near",
    "href": "FDR_analisysResults3_10.html#clusters_even_near",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_even_near",
    "text": "2_Clusters_even_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot,20)\n\n# A tibble: 20 × 5\n   genes  clusters  value data_set             set_number\n   &lt;chr&gt;  &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                     &lt;int&gt;\n 1 Neil2  E13.5-434 FALSE 2_Clusters_even_near          1\n 2 Neil2  E15.0-428 FALSE 2_Clusters_even_near          1\n 3 Lamc1  E13.5-434 FALSE 2_Clusters_even_near          1\n 4 Lamc1  E15.0-428 FALSE 2_Clusters_even_near          1\n 5 Lama1  E13.5-434 FALSE 2_Clusters_even_near          1\n 6 Lama1  E15.0-428 FALSE 2_Clusters_even_near          1\n 7 Hs3st1 E13.5-434 FALSE 2_Clusters_even_near          1\n 8 Hs3st1 E15.0-428 FALSE 2_Clusters_even_near          1\n 9 Fabp3  E13.5-434 FALSE 2_Clusters_even_near          1\n10 Fabp3  E15.0-428 FALSE 2_Clusters_even_near          1\n11 Nrg2   E13.5-434 FALSE 2_Clusters_even_near          1\n12 Nrg2   E15.0-428 FALSE 2_Clusters_even_near          1\n13 Kdelr3 E13.5-434 FALSE 2_Clusters_even_near          1\n14 Kdelr3 E15.0-428 FALSE 2_Clusters_even_near          1\n15 Bend4  E13.5-434 FALSE 2_Clusters_even_near          1\n16 Bend4  E15.0-428 FALSE 2_Clusters_even_near          1\n17 Gjb4   E13.5-434 FALSE 2_Clusters_even_near          1\n18 Gjb4   E15.0-428 FALSE 2_Clusters_even_near          1\n19 Mogs   E13.5-434 FALSE 2_Clusters_even_near          1\n20 Mogs   E15.0-428 FALSE 2_Clusters_even_near          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 24\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwoClusters_even_nearPL &lt;- TwoClusters_even_near + \n  xlab(\"FPR\") + \n  ylab(\"TPR\")\nTwoClusters_even_nearPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_even_medium",
    "href": "FDR_analisysResults3_10.html#clusters_even_medium",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_even_medium",
    "text": "2_Clusters_even_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_even_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_even_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_even_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_even_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_even_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_even_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 771\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_even_mediumPL &lt;- Two_Clusters_even_medium + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_even_far",
    "href": "FDR_analisysResults3_10.html#clusters_even_far",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_even_far",
    "text": "2_Clusters_even_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set            set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                    &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_even_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_even_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_even_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_even_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_even_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_even_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2325\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_even_farPL &lt;- Two_Clusters_even_far + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_farPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_uneven_near",
    "href": "FDR_analisysResults3_10.html#clusters_uneven_near",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_uneven_near",
    "text": "2_Clusters_uneven_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_uneven_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_uneven_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 24\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\nplot(roc_resultSeurat)\n\n\n\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_uneven_nearPL &lt;- Two_Clusters_uneven_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_uneven_nearPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_uneven_medium",
    "href": "FDR_analisysResults3_10.html#clusters_uneven_medium",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_uneven_medium",
    "text": "2_Clusters_uneven_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set                 set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                         &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 771\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_uneven_mediumPL &lt;- Two_Clusters_uneven_medium + xlab(\"FPR\") + ylab(\"TPR\")\n\nTwo_Clusters_uneven_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_uneven_far",
    "href": "FDR_analisysResults3_10.html#clusters_uneven_far",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2_Clusters_uneven_far",
    "text": "2_Clusters_uneven_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set              set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                      &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_uneven_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_uneven_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_uneven_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2325\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nTwo_Clusters_uneven_farPL &lt;- Two_Clusters_uneven_far + xlab(\"FPR\") + ylab(\"TPR\")\n\nlg &lt;- get_legend(Two_Clusters_uneven_farPL)\n\nTwo_Clusters_uneven_farPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_even",
    "href": "FDR_analisysResults3_10.html#clusters_even",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "3_Clusters_even",
    "text": "3_Clusters_even\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_even\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set        set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                &lt;int&gt;\n1 Neil2 E15.0-437 FALSE 3_Clusters_even          1\n2 Neil2 E13.5-510 FALSE 3_Clusters_even          1\n3 Neil2 E13.5-437 FALSE 3_Clusters_even          1\n4 Lamc1 E15.0-437 FALSE 3_Clusters_even          1\n5 Lamc1 E13.5-510 FALSE 3_Clusters_even          1\n6 Lamc1 E13.5-437 FALSE 3_Clusters_even          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2512\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E17.5-516\"\n[1] \"E13.5-437\"\n[1] \"E17.5-505\"\n[1] \"E15.0-510\"\n[1] \"E15.0-428\"\n[1] \"E13.5-510\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_even &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nThree_Clusters_evenPL &lt;- Three_Clusters_even + \n  xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\nThree_Clusters_even"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_uneven",
    "href": "FDR_analisysResults3_10.html#clusters_uneven",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "3_Clusters_uneven",
    "text": "3_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E15.0-428 FALSE 3_Clusters_uneven          1\n2 Neil2 E13.5-434 FALSE 3_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 3_Clusters_uneven          1\n4 Lamc1 E15.0-428 FALSE 3_Clusters_uneven          1\n5 Lamc1 E13.5-434 FALSE 3_Clusters_uneven          1\n6 Lamc1 E15.0-510 FALSE 3_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2816\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E15.0-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E13.5-187\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_uneven &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\nThree_Clusters_unevenPL &lt;- Three_Clusters_uneven + xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\n\nThree_Clusters_uneven"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters_uneven-1",
    "href": "FDR_analisysResults3_10.html#clusters_uneven-1",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "5_Clusters_uneven",
    "text": "5_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"5_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\n\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E13.5-510 FALSE 5_Clusters_uneven          1\n2 Neil2 E15.0-437 FALSE 5_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 5_Clusters_uneven          1\n4 Neil2 E13.5-432 FALSE 5_Clusters_uneven          1\n5 Neil2 E13.5-437 FALSE 5_Clusters_uneven          1\n6 Lamc1 E13.5-510 FALSE 5_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 3544\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  genesLambda &lt;- getLambda(dataset)\n  genesLambda &lt;- as.data.frame(genesLambda)\n  genesLambda$genes &lt;- rownames(genesLambda)\n  \n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  \n  onlyPositive.pVal.Cotan &lt;- merge(onlyPositive.pVal.Cotan,genesLambda,by=\"genes\")\n  \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-432\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E13.5-184\"\n[1] \"E15.0-434\"\n[1] \"E17.5-505\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-187\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\ncotan.threshold.pval &lt;- quantile(onlyPositive.pVal.Cotan_tot[onlyPositive.pVal.Cotan_tot$value == 0,]$p_values,probs = 0.05)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\ndeaSeurat_tot_base &lt;- deaSeurat_tot\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\nseurat.threshold.pval &lt;- quantile(deaSeurat_tot_base[deaSeurat_tot_base$value == 0,]$p_val,probs = 0.05)\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\ndeaSeurat_tot_scTr &lt;- deaSeurat_tot\n\nSeurat_scTr.threshold.pval &lt;- quantile(deaSeurat_tot_scTr[deaSeurat_tot_scTr$value == 0,]$p_val,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\ndeaSeurat_tot_Bimod &lt;- deaSeurat_tot\n\nseurat_bimod.threshold.pval &lt;- quantile(deaSeurat_tot_Bimod[deaSeurat_tot_Bimod$value == 0,]$p_val,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\nmonocle.threshold.pval &lt;- quantile(deaMonocle_tot[deaMonocle_tot$value == 0,]$marker_test_p_value,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from Scanpy\n\ndeaScanpy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScanpy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Scanpy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScanpy[deaScanpy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScanpy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScanpy$set_number &lt;- ind \n  deaScanpy_tot &lt;- rbind(deaScanpy_tot, deaScanpy)\n  \n  \n  }\n deaScanpy_tot &lt;-  deaScanpy_tot[2:nrow(deaScanpy_tot),]\n \n deaScanpy_tot &lt;- merge.data.frame(deaScanpy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScanpy_tot$value &lt;- as.numeric(deaScanpy_tot$value)\n\nscanpy.threshold.pval &lt;- quantile(deaScanpy_tot[deaScanpy_tot$value == 0,]$pval,probs = 0.05)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScanpy &lt;- roc(deaScanpy_tot$value, 1 - deaScanpy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScanpy)\n\n\n\nSummary ROC for all methods\n\nFive_Clusters &lt;- ggroc(list(COTAN=roc_resultCOTAN, \n                                    Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, \n                 Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, \n                 Scanpy=roc_resultScanpy),\n                 aes = c(\"colour\"),\n            legacy.axes = T,\n            linewidth = 1)+theme_light()+\n  scale_colour_manual(\"\", \n                      values = methods.color)\n\n \nFive_Clusters_unevenPL &lt;- Five_Clusters + xlab(\"FPR\") + ylab(\"TPR\")\n\nFive_Clusters_unevenPL"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#clusters-2",
    "href": "FDR_analisysResults3_10.html#clusters-2",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "2 Clusters",
    "text": "2 Clusters\n\nplot_2cl &lt;- ggarrange(TwoClusters_even_nearPL,Two_Clusters_even_mediumPL, Two_Clusters_even_farPL,Two_Clusters_uneven_nearPL, Two_Clusters_uneven_mediumPL,Two_Clusters_uneven_farPL,\n          labels = c(\"Even_Near\", \"Even_Medium\", \"Even_Far\", \"Uneven_Near\",\"Uneven_Medium\",\"Uneven_Far\"),\n          ncol = 3, nrow = 2, common.legend = T, legend = \"bottom\")\n\npdf(paste0(dirOut,\"ROC_two_supp.pdf\"),width = 15,height = 10)\nplot(plot_2cl)\ndev.off()\n\npng \n  2 \n\nplot_2cl"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#and-5-clusters",
    "href": "FDR_analisysResults3_10.html#and-5-clusters",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "3 and 5 Clusters",
    "text": "3 and 5 Clusters\n\nplot_3_5 &lt;- ggarrange(Three_Clusters_evenPL,Three_Clusters_unevenPL, NULL, Five_Clusters_unevenPL,\n          labels = c(\"3_Even\", \"3_Uneven\", \"\", \"5_Uneven\"),\n          ncol = 2, nrow = 2, common.legend = T, legend = \"bottom\")\n\npdf(paste0(dirOut,\"ROC_three_five_supp.pdf\"),width = 10,height = 10)\nplot(plot_3_5)\ndev.off()\n\npng \n  2 \n\nplot_3_5\n\n\n\n\n\nplot3 &lt;- ggarrange(Two_Clusters_uneven_farPL,Three_Clusters_unevenPL, Five_Clusters_unevenPL,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 3, nrow = 1, common.legend = T, legend = \"none\")\n\npdf(paste0(dirOut,\"ROC_three_main.pdf\"),width = 15,height = 5)\nplot(plot3)\ndev.off()\n\npng \n  2 \n\nplot3"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#histogram-with-gene-expression-level",
    "href": "FDR_analisysResults3_10.html#histogram-with-gene-expression-level",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "Histogram with gene expression level",
    "text": "Histogram with gene expression level\n\nground_truth_tot_subset &lt;- as.data.frame(ground_truth_tot[ground_truth_tot$value ==1,])\n\nCOTAN_data &lt;- onlyPositive.pVal.Cotan_tot[,c(\"genes\",\"set_number\",\"clusters\",\"p_values\",\"genesLambda\")]\n\ncolnames(COTAN_data) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_COTAN\",\"genesLambda\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 COTAN_data,\n                                 by=c(\"genes\",\"set_number\", \"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nSeurat_data_base &lt;- deaSeurat_tot_base[,c(\"genes\",\"set_number\",\"clusters\", \"p_val\")]\ncolnames(Seurat_data_base) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Seurat\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 Seurat_data_base,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nSeurat_data_scTr &lt;- deaSeurat_tot_scTr[,c(\"genes\",\"set_number\",\"clusters\", \"p_val\")]\ncolnames(Seurat_data_scTr) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Seurat_scTr\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 Seurat_data_scTr,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nSeurat_data_Bimod &lt;- deaSeurat_tot_Bimod[,c(\"genes\",\"set_number\",\"clusters\", \"p_val\")]\ncolnames(Seurat_data_Bimod) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Seurat_Bimod\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 Seurat_data_Bimod,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\n\ndata_Monocle &lt;- deaMonocle_tot[,c(\"genes\",\"set_number\",\"clusters\", \"marker_test_p_value\")]\ncolnames(data_Monocle) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Monocle\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 data_Monocle,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\ndata_Scanpy &lt;- deaScanpy_tot[,c(\"genes\",\"set_number\",\"clusters\", \"pval\")]\ncolnames(data_Scanpy) &lt;- c(\"genes\",\"set_number\",\"clusters\",\"p_value_Scanpy\")\n\nground_truth_tot_subset &lt;- merge(ground_truth_tot_subset,\n                                 data_Scanpy,\n                                 by=c(\"genes\",\"set_number\",\"clusters\"),\n                                 all.x = T, all.y= FALSE)\n\nground_truth_tot_subset &lt;- ground_truth_tot_subset %&gt;% mutate(lambda_bin = cut(genesLambda, breaks=50))\n\nground_truth_tot_subset[is.na(ground_truth_tot_subset)] &lt;- 1\n\nhead(ground_truth_tot_subset)\n\n          genes set_number  clusters value          data_set p_value_COTAN\n1 A330008L17Rik          1 E13.5-432  TRUE 5_Clusters_uneven  2.397295e-10\n2 A330084C13Rik          1 E15.0-510  TRUE 5_Clusters_uneven  1.517987e-01\n3 A330084C13Rik          2 E17.5-505  TRUE 5_Clusters_uneven  1.871017e-01\n4 A330102I10Rik          1 E15.0-510  TRUE 5_Clusters_uneven  4.020632e-05\n5 A330102I10Rik          2 E17.5-505  TRUE 5_Clusters_uneven  3.580400e-01\n6 A630089N07Rik          2 E13.5-184  TRUE 5_Clusters_uneven  1.152963e-10\n  genesLambda p_value_Seurat p_value_Seurat_scTr p_value_Seurat_Bimod\n1  0.07870370   8.273625e-09        9.966968e-09         6.141385e-08\n2  0.09027778   1.000000e+00        8.095134e-03         8.676023e-05\n3  0.04289216   1.000000e+00        1.000000e+00         1.000000e+00\n4  0.08024691   2.547529e-07        1.579015e-07         1.104961e-05\n5  0.03431373   1.000000e+00        1.000000e+00         2.718294e-04\n6  0.06617647   1.632048e-12        7.812652e-13         1.731541e-09\n  p_value_Monocle p_value_Scanpy       lambda_bin\n1    7.760581e-09    0.012422646    (0.069,0.134]\n2    5.065628e-02    0.266934766    (0.069,0.134]\n3    2.001536e-01    0.671631728 (0.000846,0.069]\n4    1.989451e-06    0.028717392    (0.069,0.134]\n5    1.935776e-01    0.793509146 (0.000846,0.069]\n6    1.328598e-09    0.004754579 (0.000846,0.069]\n\n\n\nbins &lt;- levels(ground_truth_tot_subset$lambda_bin)\nbins &lt;- bins[!is.na(bins)]\n\nforBarChart &lt;- as.data.frame(matrix(nrow = length(bins),ncol = 7,data = 0))\n\ncolnames(forBarChart) &lt;- c(\"bins\",\"COTAN\",\"Seurat\",\"Seurat_Bimod\",\"Seurat_scTr\",\"Monocle\", \"Scanpy\")\nforBarChart$bins &lt;- bins\nrownames(forBarChart) &lt;- forBarChart$bins\n\n#p_val_threshold &lt;- 0.05\n\nfor (i in as.vector(forBarChart$bins)) {\n  forBarChart[ i,\"COTAN\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_COTAN &lt;= cotan.threshold.pval)\n  \n  forBarChart[ i,\"Seurat\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Seurat &lt;= seurat.threshold.pval)\n  \n  forBarChart[ i,\"Seurat_Bimod\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Seurat_Bimod &lt;= seurat_bimod.threshold.pval)\n  \n  forBarChart[ i,\"Seurat_scTr\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Seurat_scTr &lt;= Seurat_scTr.threshold.pval)\n  \n  forBarChart[ i,\"Monocle\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Monocle &lt;= monocle.threshold.pval)\n  \n  forBarChart[ i,\"Scanpy\"] &lt;- sum(ground_truth_tot_subset$lambda_bin == i & ground_truth_tot_subset$p_value_Scanpy &lt;= scanpy.threshold.pval)\n  \n}\n\ntemp.bin &lt;- as.data.frame(str_split(forBarChart$bins,pattern = \",\",simplify = T))\ntemp.bin[,1] &lt;- as.numeric(str_remove(temp.bin[,1],pattern = \"[(]\"))\ntemp.bin[,2] &lt;- as.numeric(str_remove(temp.bin[,2],pattern = \"[]]\"))\n\nforBarChart$bins &lt;- round(rowMeans(temp.bin),digits = 2)\n\n\nforBarChart &lt;- forBarChart[rowSums(forBarChart[,2:ncol(forBarChart)]) &gt; 0,]\n\nforBarChart.perc &lt;- forBarChart[1:8,]\n\nforBarChart.perc$tot &lt;- rowSums(forBarChart.perc[,2:ncol(forBarChart.perc)])\n\nforBarChart.perc[,2:(ncol(forBarChart.perc)-1)] &lt;- round(forBarChart.perc[,2:(ncol(forBarChart.perc)-1)]/forBarChart.perc$tot,digits = 4)\n\nforBarChart.perc &lt;- pivot_longer(forBarChart.perc,\n                               cols = 2:(ncol(forBarChart.perc)-1),\n                               names_to = \"Methods\")\n\nforBarChart.number &lt;- pivot_longer(forBarChart[1:8,],\n                               cols = 2:(ncol(forBarChart)),\n                               names_to = \"Methods\")\n\ncolnames(forBarChart.number) &lt;- c(\"bins\",\"Methods\", \"valueOriginal\")\n\nforBarChart.perc &lt;- merge(forBarChart.perc,forBarChart.number, by = c(\"bins\",\"Methods\"))\n\nbarChart &lt;- ggplot(forBarChart.perc,aes(x=bins,y=value,fill=Methods))+\n  geom_bar(stat=\"identity\")+\n  geom_text(aes(label = valueOriginal), \n            position = position_stack(vjust = 0.5),  size=3)+\n  scale_fill_manual(\n    values = methods.color)+\n  theme_light()+\n  scale_x_continuous(breaks =forBarChart.perc$bins)+\n  theme(axis.title.y=element_blank(),axis.title.x=element_blank(),\n      legend.position=\"none\",axis.text.x = element_text(angle = 45, hjust=1)\n    )+\n  scale_y_continuous(labels = scales::percent_format())\n\npdf(paste0(dirOut,\"EnrichedGenesForExpressionLevel.pdf\"),height = 3,width = 5)\nbarChart\ndev.off()\n\npng \n  2 \n\nplot(barChart)\n\n\n\n\n\nplot.with.inset &lt;-\n  ggdraw() +\n  draw_plot(plot3) +\n  draw_plot(as_ggplot(lg), x = 0.18, y = 0.1, width = 0.2, height = .45)+\n  draw_plot(barChart, x = 0.78, y = 0.09, width = 0.22, height = .5)\n\npdf(paste0(dirOut,\"Plot3WihtGenesExLevel.pdf\"),height = 5,width = 15)\nplot(plot.with.inset)\ndev.off()\n\npng \n  2 \n\nplot(plot.with.inset)"
  },
  {
    "objectID": "FDR_analisysResults3_10.html#footer",
    "href": "FDR_analisysResults3_10.html#footer",
    "title": "FDR analysis - Results - thresholds true 3% 10%",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggpubr_0.6.0                ggplot2_3.5.1              \n [3] tidyr_1.3.1                 dplyr_1.1.4                \n [5] stringr_1.5.1               cowplot_1.1.3              \n [7] reticulate_1.37.0           monocle3_1.3.4             \n [9] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n[11] GenomicRanges_1.56.0        GenomeInfoDb_1.40.0        \n[13] IRanges_2.38.0              S4Vectors_0.42.0           \n[15] MatrixGenerics_1.16.0       matrixStats_1.3.0          \n[17] Biobase_2.64.0              BiocGenerics_0.50.0        \n[19] Seurat_5.1.0                SeuratObject_5.0.2         \n[21] sp_2.1-4                    pROC_1.18.5                \n[23] COTAN_2.5.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.0            \n  [3] later_1.3.2               tibble_3.2.1             \n  [5] polyclip_1.10-6           fastDummies_1.7.3        \n  [7] lifecycle_1.0.4           rstatix_0.7.2            \n  [9] doParallel_1.0.17         globals_0.16.3           \n [11] lattice_0.22-6            MASS_7.3-60.2            \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.4            \n [17] rmarkdown_2.27            yaml_2.3.8               \n [19] httpuv_1.6.15             sctransform_0.4.1        \n [21] spam_2.10-0               askpass_1.2.0            \n [23] spatstat.sparse_3.0-3     minqa_1.2.7              \n [25] pbapply_1.7-2             RColorBrewer_1.1-3       \n [27] abind_1.4-5               zlibbioc_1.50.0          \n [29] Rtsne_0.17                purrr_1.0.2              \n [31] GenomeInfoDbData_1.2.12   circlize_0.4.16          \n [33] ggrepel_0.9.5             irlba_2.3.5.1            \n [35] listenv_0.9.1             spatstat.utils_3.0-4     \n [37] terra_1.7-78              umap_0.2.10.0            \n [39] goftest_1.2-3             RSpectra_0.16-1          \n [41] spatstat.random_3.2-3     dqrng_0.4.0              \n [43] fitdistrplus_1.1-11       parallelly_1.37.1        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] tidyselect_1.2.1          shape_1.4.6.1            \n [51] farver_2.1.2              UCSC.utils_1.0.0         \n [53] lme4_1.1-35.3             ScaledMatrix_1.12.0      \n [55] viridis_0.6.5             spatstat.explore_3.2-7   \n [57] jsonlite_1.8.8            GetoptLong_1.0.5         \n [59] progressr_0.14.0          ggridges_0.5.6           \n [61] survival_3.6-4            iterators_1.0.14         \n [63] foreach_1.5.2             tools_4.4.0              \n [65] ica_1.0-3                 Rcpp_1.0.12              \n [67] glue_1.7.0                gridExtra_2.3            \n [69] SparseArray_1.4.5         xfun_0.44                \n [71] ggthemes_5.1.0            withr_3.0.0              \n [73] fastmap_1.2.0             boot_1.3-30              \n [75] fansi_1.0.6               openssl_2.2.0            \n [77] digest_0.6.35             rsvd_1.0.5               \n [79] parallelDist_0.2.6        R6_2.5.1                 \n [81] mime_0.12                 colorspace_2.1-0         \n [83] scattermore_1.2           tensor_1.5               \n [85] spatstat.data_3.0-4       utf8_1.2.4               \n [87] generics_0.1.3            data.table_1.15.4        \n [89] httr_1.4.7                htmlwidgets_1.6.4        \n [91] S4Arrays_1.4.1            uwot_0.2.2               \n [93] pkgconfig_2.0.3           gtable_0.3.5             \n [95] ComplexHeatmap_2.20.0     lmtest_0.9-40            \n [97] XVector_0.44.0            htmltools_0.5.8.1        \n [99] carData_3.0-5             dotCall64_1.1-1          \n[101] clue_0.3-65               scales_1.3.0             \n[103] png_0.1-8                 knitr_1.46               \n[105] rstudioapi_0.16.0         reshape2_1.4.4           \n[107] rjson_0.2.21              nloptr_2.0.3             \n[109] nlme_3.1-164              zoo_1.8-12               \n[111] GlobalOptions_0.1.2       KernSmooth_2.23-24       \n[113] parallel_4.4.0            miniUI_0.1.1.1           \n[115] RcppZiggurat_0.1.6        pillar_1.9.0             \n[117] grid_4.4.0                vctrs_0.6.5              \n[119] RANN_2.6.1                promises_1.3.0           \n[121] car_3.1-2                 BiocSingular_1.20.0      \n[123] beachmat_2.20.0           xtable_1.8-4             \n[125] cluster_2.1.6             evaluate_0.23            \n[127] zeallot_0.1.0             cli_3.6.2                \n[129] compiler_4.4.0            rlang_1.1.3              \n[131] crayon_1.5.2              ggsignif_0.6.4           \n[133] future.apply_1.11.2       labeling_0.4.3           \n[135] plyr_1.8.9                stringi_1.8.4            \n[137] viridisLite_0.4.2         deldir_2.0-4             \n[139] BiocParallel_1.38.0       assertthat_0.2.1         \n[141] munsell_0.5.1             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-9       PCAtools_2.16.0          \n[145] Matrix_1.7-0              RcppHNSW_0.6.0           \n[147] patchwork_1.2.0           sparseMatrixStats_1.16.0 \n[149] future_1.33.2             shiny_1.8.1.1            \n[151] ROCR_1.0-11               Rfast_2.1.0              \n[153] broom_1.0.6               igraph_2.0.3             \n[155] RcppParallel_5.1.7"
  },
  {
    "objectID": "FDR_analisysResults5.html",
    "href": "FDR_analisysResults5.html",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggpubr)\nlibrary(ggplot2)\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults5.html#preamble",
    "href": "FDR_analisysResults5.html#preamble",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggpubr)\nlibrary(ggplot2)\n\ndirOut &lt;- \"Results/FDR/\"\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- \"Data/MouseCortexFromLoom/FDR/MergedClusters_For_FDR/\""
  },
  {
    "objectID": "FDR_analisysResults5.html#dataset-composition",
    "href": "FDR_analisysResults5.html#dataset-composition",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "Dataset composition",
    "text": "Dataset composition\n\ndatasets_csv &lt;- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1\n                        ) \n\ndatasets_csv[1:3,]\n\n                 Group            Collection E13.5.432 E13.5.187 E13.5.434\n1 2_Clusters_even_near E13.5-434_+_E15.0-428         0         0       318\n2 2_Clusters_even_near E15.0-432_+_E13.5-432       536         0         0\n3 2_Clusters_even_near E15.0-508_+_E15.0-509         0         0         0\n  E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509 E15.0.510 E15.0.508\n1         0         0         0         0         0         0         0\n2         0         0         0       536         0         0         0\n3         0         0         0         0       397         0       397\n  E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1       318         0         0         0         0\n2         0         0         0         0         0\n3         0         0         0         0         0\n\n\n\nDefine which genes are expressed\nFor each data set we need to define, independently from the DEA methods, which genes are specific for each cluster. So we need to define first which genes are expressed and which are not expressed. To do so we can take advantage from the fact that we have the original clusters from which the cells were sampled to create the artificial datasets. So looking to the original cluster we define as expressed all genes present in at least the 5% of cells and we define as not expressed the genes completely absent or expressed in less than 5% of cells.\nSince these two thresholds can have a big influence on the tools performances we will test also others in other pages.\n\nfile.presence &lt;- readRDS(\"Data/MouseCortexFromLoom/FDR/Results/GenePresence_PerCluster.RDS\")\n\nfor (file in list.files(\"Data/MouseCortexFromLoom/SingleClusterRawData/\")) {\n#  print(file)\n  Code &lt;- str_split(file,pattern = \"_\",simplify = T)[1]\n  Time &lt;- str_split(Code,pattern = \"e\",simplify = T)[2]\n  Cluster &lt;- str_split(Code,pattern = \"e\",simplify = T)[1]\n  Cluster &lt;- str_remove(Cluster,pattern = \"Cl\")\n  Cluster &lt;- paste0(\"E\",Time,\"-\",Cluster)\n  file.presence[,Cluster] &lt;- \"Absent\"\n  dataset.cl &lt;- readRDS(file.path(\"Data/MouseCortexFromLoom/SingleClusterRawData/\",\n                                         file))\n  number.cell.expressing &lt;- rowSums(dataset.cl &gt; 0)\n  AbsentThreshold &lt;- round(0.05*dim(dataset.cl)[2],digits = 0)\n  PresenceThreshold &lt;- round(0.05*dim(dataset.cl)[2],digits = 0)\n  file.presence[names(number.cell.expressing[number.cell.expressing &gt; AbsentThreshold]),Cluster] &lt;- \"Uncertain\" \n  \n  file.presence[names(number.cell.expressing[number.cell.expressing &gt;= PresenceThreshold]),Cluster] &lt;- \"Present\"\n  print(Cluster)\n  print(table(file.presence[,Cluster]))\n  \n  }\n\n[1] \"E13.5-184\"\n\n Absent Present \n   6536    8159 \n[1] \"E13.5-187\"\n\n Absent Present \n   5809    8886 \n[1] \"E15.0-428\"\n\n Absent Present \n   7304    7391 \n[1] \"E13.5-432\"\n\n Absent Present \n   6753    7942 \n[1] \"E15.0-432\"\n\n Absent Present \n   6873    7822 \n[1] \"E13.5-434\"\n\n Absent Present \n   7004    7691 \n[1] \"E15.0-434\"\n\n Absent Present \n   7380    7315 \n[1] \"E13.5-437\"\n\n Absent Present \n   6825    7870 \n[1] \"E15.0-437\"\n\n Absent Present \n   6891    7804 \n[1] \"E17.5-505\"\n\n Absent Present \n   6870    7825 \n[1] \"E15.0-508\"\n\n Absent Present \n   6520    8175 \n[1] \"E15.0-509\"\n\n Absent Present \n   6376    8319 \n[1] \"E13.5-510\"\n\n Absent Present \n   5790    8905 \n[1] \"E15.0-510\"\n\n Absent Present \n   5956    8739 \n[1] \"E17.5-516\"\n\n Absent Present \n   6777    7918"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_even_near",
    "href": "FDR_analisysResults5.html#clusters_even_near",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2_Clusters_even_near",
    "text": "2_Clusters_even_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set             set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                     &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_even_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_even_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_even_near          1\n4 Lamc1 E15.0-428 TRUE  2_Clusters_even_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_even_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_even_near          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2320\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_even_nearPL &lt;- TwoClusters_even_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_even_nearPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_even_medium",
    "href": "FDR_analisysResults5.html#clusters_even_medium",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2_Clusters_even_medium",
    "text": "2_Clusters_even_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_even_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_even_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_even_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_even_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_even_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_even_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 4661\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_even_mediumPL &lt;- Two_Clusters_even_medium + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_even_far",
    "href": "FDR_analisysResults5.html#clusters_even_far",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2_Clusters_even_far",
    "text": "2_Clusters_even_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set            set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                    &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_even_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_even_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_even_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_even_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_even_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_even_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 7189\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_even_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_even_farPL &lt;- Two_Clusters_even_far + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_even_farPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_uneven_near",
    "href": "FDR_analisysResults5.html#clusters_uneven_near",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2_Clusters_uneven_near",
    "text": "2_Clusters_uneven_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_near\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_uneven_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_uneven_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n4 Lamc1 E15.0-428 TRUE  2_Clusters_uneven_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2320\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\nplot(roc_resultSeurat)\n\n\n\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_uneven_nearPL &lt;- Two_Clusters_uneven_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwo_Clusters_uneven_nearPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_uneven_medium",
    "href": "FDR_analisysResults5.html#clusters_uneven_medium",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2_Clusters_uneven_medium",
    "text": "2_Clusters_uneven_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_medium\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set                 set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                         &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 4661\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_uneven_mediumPL &lt;- Two_Clusters_uneven_medium + xlab(\"FPR\") + ylab(\"TPR\")\n\nTwo_Clusters_uneven_mediumPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_uneven_far",
    "href": "FDR_analisysResults5.html#clusters_uneven_far",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2_Clusters_uneven_far",
    "text": "2_Clusters_uneven_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_far\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set              set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                      &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_uneven_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_uneven_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n6 Lama1 E13.5-187 TRUE  2_Clusters_uneven_far          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 7189\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwo_Clusters_uneven_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwo_Clusters_uneven_farPL &lt;- Two_Clusters_uneven_far + xlab(\"FPR\") + ylab(\"TPR\")\n\nTwo_Clusters_uneven_farPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_even",
    "href": "FDR_analisysResults5.html#clusters_even",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "3_Clusters_even",
    "text": "3_Clusters_even\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_even\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set        set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                &lt;int&gt;\n1 Neil2 E15.0-437 FALSE 3_Clusters_even          1\n2 Neil2 E13.5-510 FALSE 3_Clusters_even          1\n3 Neil2 E13.5-437 FALSE 3_Clusters_even          1\n4 Lamc1 E15.0-437 FALSE 3_Clusters_even          1\n5 Lamc1 E13.5-510 TRUE  3_Clusters_even          1\n6 Lamc1 E13.5-437 TRUE  3_Clusters_even          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 11529\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E17.5-516\"\n[1] \"E13.5-437\"\n[1] \"E17.5-505\"\n[1] \"E15.0-510\"\n[1] \"E15.0-428\"\n[1] \"E13.5-510\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_even &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nThree_Clusters_evenPL &lt;- Three_Clusters_even + \n  xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\nThree_Clusters_even"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_uneven",
    "href": "FDR_analisysResults5.html#clusters_uneven",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "3_Clusters_uneven",
    "text": "3_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E15.0-428 FALSE 3_Clusters_uneven          1\n2 Neil2 E13.5-434 FALSE 3_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 3_Clusters_uneven          1\n4 Lamc1 E15.0-428 TRUE  3_Clusters_uneven          1\n5 Lamc1 E13.5-434 FALSE 3_Clusters_uneven          1\n6 Lamc1 E15.0-510 TRUE  3_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 11195\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E15.0-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E13.5-187\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-184\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nThree_Clusters_uneven &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nThree_Clusters_unevenPL &lt;- Three_Clusters_uneven + xlab(\"FPR\") + ylab(\"TPR\")+theme(legend.position=\"none\")\n\nThree_Clusters_uneven"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters_uneven-1",
    "href": "FDR_analisysResults5.html#clusters_uneven-1",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "5_Clusters_uneven",
    "text": "5_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"5_Clusters_uneven\",] \n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  file.presence.subset &lt;- file.presence[,clusters]\n  \n  \n  #file.presence.subset &lt;- as.matrix(file.presence.subset)\n  \n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(file.presence.subset),\n                                       ncol = ncol(file.presence.subset)))\n  rownames(ground_truth) &lt;- rownames(file.presence.subset)\n  colnames(ground_truth) &lt;- colnames(file.presence.subset)\n  \n  ground_truth[file.presence.subset == \"Absent\"] &lt;- 0\n  ground_truth[file.presence.subset == \"Present\"] &lt;- 1\n  ground_truth[file.presence.subset == \"Uncertain\"] &lt;- 0.6\n  \n  file.presence.subset &lt;- ground_truth\n  \n  for (col in 1:ncol(ground_truth)) {\n    ground_truth[,col] &lt;- FALSE  \n    ground_truth[file.presence.subset[,col] == 1 & rowMeans(file.presence.subset[,-col,drop = FALSE]) &lt; 0.555  ,col] &lt;- TRUE\n    }\n  \n  ground_truth$genes &lt;- rownames(ground_truth) \n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind,1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n  \n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E13.5-510 FALSE 5_Clusters_uneven          1\n2 Neil2 E15.0-437 FALSE 5_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 5_Clusters_uneven          1\n4 Neil2 E13.5-432 FALSE 5_Clusters_uneven          1\n5 Neil2 E13.5-437 FALSE 5_Clusters_uneven          1\n6 Lamc1 E13.5-510 FALSE 5_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes)) \n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 13080\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-432\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E13.5-184\"\n[1] \"E15.0-434\"\n[1] \"E17.5-505\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-187\"\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nFive_Clusters &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,                  Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\n \nFive_Clusters_unevenPL &lt;- Five_Clusters + xlab(\"FPR\") + ylab(\"TPR\")\n\nFive_Clusters_unevenPL"
  },
  {
    "objectID": "FDR_analisysResults5.html#clusters-2",
    "href": "FDR_analisysResults5.html#clusters-2",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "2 Clusters",
    "text": "2 Clusters\n\nggarrange(TwoClusters_even_nearPL,Two_Clusters_even_mediumPL, Two_Clusters_even_farPL,Two_Clusters_uneven_nearPL, Two_Clusters_uneven_mediumPL,Two_Clusters_uneven_farPL,\n          labels = c(\"Even_Near\", \"Even_Medium\", \"Even_Far\", \"Uneven_Near\",\"Uneven_Medium\",\"Uneven_Far\"),\n          ncol = 3, nrow = 2, common.legend = T, legend = \"bottom\")"
  },
  {
    "objectID": "FDR_analisysResults5.html#and-5-clusters",
    "href": "FDR_analisysResults5.html#and-5-clusters",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "3 and 5 Clusters",
    "text": "3 and 5 Clusters\n\nggarrange(Three_Clusters_evenPL,Three_Clusters_unevenPL, NULL, Five_Clusters_unevenPL,\n          labels = c(\"3_Even\", \"3_Uneven\", \"\", \"5_Uneven\"),\n          ncol = 2, nrow = 2, common.legend = T, legend = \"bottom\")"
  },
  {
    "objectID": "FDR_analisysResults5.html#footer",
    "href": "FDR_analisysResults5.html#footer",
    "title": "FDR analysis - Results - thresholds true 5%",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] ggpubr_0.6.0                ggplot2_3.4.2              \n [3] tidyr_1.3.0                 dplyr_1.1.2                \n [5] stringr_1.5.0               reticulate_1.35.0          \n [7] monocle3_1.3.4              SingleCellExperiment_1.22.0\n [9] SummarizedExperiment_1.30.2 GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            MatrixGenerics_1.12.3      \n[15] matrixStats_1.2.0           Biobase_2.60.0             \n[17] BiocGenerics_0.46.0         Seurat_5.0.0               \n[19] SeuratObject_5.0.0          sp_2.1-1                   \n[21] pROC_1.18.4                 COTAN_2.3.3                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] rstatix_0.7.2             doParallel_1.0.17        \n [11] globals_0.16.2            lattice_0.22-5           \n [13] MASS_7.3-60               backports_1.4.1          \n [15] dendextend_1.17.1         magrittr_2.0.3           \n [17] plotly_4.10.2             rmarkdown_2.24           \n [19] yaml_2.3.7                httpuv_1.6.11            \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.16                purrr_1.0.1              \n [33] RCurl_1.98-1.12           GenomeInfoDbData_1.2.10  \n [35] circlize_0.4.15           ggrepel_0.9.3            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       tidyselect_1.2.0         \n [53] shape_1.4.6               farver_2.1.1             \n [55] lme4_1.1-34               ScaledMatrix_1.8.1       \n [57] viridis_0.6.4             spatstat.explore_3.2-1   \n [59] jsonlite_1.8.7            GetoptLong_1.0.5         \n [61] ellipsis_0.3.2            progressr_0.14.0         \n [63] ggridges_0.5.4            survival_3.5-7           \n [65] iterators_1.0.14          foreach_1.5.2            \n [67] tools_4.3.2               ica_1.0-3                \n [69] Rcpp_1.0.11               glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.0.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] scattermore_1.2           tensor_1.5               \n [87] spatstat.data_3.0-1       utf8_1.2.3               \n [89] generics_0.1.3            data.table_1.15.0        \n [91] httr_1.4.6                htmlwidgets_1.6.2        \n [93] S4Arrays_1.2.0            uwot_0.1.16              \n [95] pkgconfig_2.0.3           gtable_0.3.3             \n [97] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n [99] XVector_0.40.0            htmltools_0.5.7          \n[101] carData_3.0-5             dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] nlme_3.1-163              zoo_1.8-12               \n[113] GlobalOptions_0.1.2       KernSmooth_2.23-22       \n[115] parallel_4.3.2            miniUI_0.1.1.1           \n[117] RcppZiggurat_0.1.6        pillar_1.9.0             \n[119] grid_4.3.2                vctrs_0.6.3              \n[121] RANN_2.6.1                promises_1.2.0.1         \n[123] car_3.1-2                 BiocSingular_1.16.0      \n[125] beachmat_2.16.0           xtable_1.8-4             \n[127] cluster_2.1.6             evaluate_0.21            \n[129] zeallot_0.1.0             cli_3.6.1                \n[131] compiler_4.3.2            rlang_1.1.1              \n[133] crayon_1.5.2              ggsignif_0.6.4           \n[135] future.apply_1.11.0       labeling_0.4.2           \n[137] plyr_1.8.8                stringi_1.8.1            \n[139] viridisLite_0.4.2         deldir_2.0-2             \n[141] BiocParallel_1.34.2       assertthat_0.2.1         \n[143] munsell_0.5.0             lazyeval_0.2.2           \n[145] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[147] Matrix_1.6-3              RcppHNSW_0.6.0           \n[149] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[151] future_1.33.0             shiny_1.8.0              \n[153] ROCR_1.0-11               Rfast_2.1.0              \n[155] broom_1.0.5               igraph_1.6.0             \n[157] RcppParallel_5.1.7"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html",
    "href": "FDR_analysisResultsLFC.html",
    "title": "Results - Log Fold Change",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\n#library(Seurat)\n#library(monocle3)\n#library(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\ndirOut &lt;- file.path(\".\", \"Results/FDR/\")\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- file.path(\"Data/MouseCortexFromLoom/FDR/\", \"MergedClusters_For_FDR\")"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#preamble",
    "href": "FDR_analysisResultsLFC.html#preamble",
    "title": "Results - Log Fold Change",
    "section": "",
    "text": "library(COTAN)\nlibrary(pROC)\noptions(parallelly.fork.enable = TRUE)\n#library(Seurat)\n#library(monocle3)\n#library(reticulate)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\ndirOut &lt;- file.path(\".\", \"Results/FDR/\")\nif (!dir.exists(dirOut)) {\n  dir.create(dirOut)\n}\n\ndataSetDir &lt;- file.path(\"Data/MouseCortexFromLoom/FDR/\", \"MergedClusters_For_FDR\")"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#dataset-composition",
    "href": "FDR_analysisResultsLFC.html#dataset-composition",
    "title": "Results - Log Fold Change",
    "section": "Dataset composition",
    "text": "Dataset composition\n\ndatasets_csv &lt;- read.csv(file.path(dataSetDir,\"Cells_Usage_DataFrame.csv\"),\n                         row.names = 1, header = TRUE, quote = '\"'\n                        ) \n\ndatasets_csv[1:10, ]\n\n                    Group            Collection E13.5.432 E13.5.187 E13.5.434\n1    2_Clusters_even_near E13.5-434_+_E15.0-428         0         0       318\n2    2_Clusters_even_near E15.0-432_+_E13.5-432       536         0         0\n3    2_Clusters_even_near E15.0-508_+_E15.0-509         0         0         0\n4  2_Clusters_even_medium E13.5-187_+_E13.5-184         0       292         0\n5  2_Clusters_even_medium E15.0-434_+_E17.5-516         0         0         0\n6  2_Clusters_even_medium E15.0-437_+_E15.0-508         0         0         0\n7     2_Clusters_even_far E17.5-516_+_E13.5-187         0       297         0\n8     2_Clusters_even_far E15.0-510_+_E13.5-437         0         0         0\n9     2_Clusters_even_far E15.0-509_+_E13.5-184         0         0         0\n10 2_Clusters_uneven_near E13.5-434_+_E15.0-428         0         0       326\n   E13.5.184 E13.5.437 E13.5.510 E15.0.432 E15.0.509 E15.0.510 E15.0.508\n1          0         0         0         0         0         0         0\n2          0         0         0       536         0         0         0\n3          0         0         0         0       397         0       397\n4        292         0         0         0         0         0         0\n5          0         0         0         0         0         0         0\n6          0         0         0         0         0         0       258\n7          0         0         0         0         0         0         0\n8          0       259         0         0         0       259         0\n9        292         0         0         0       292         0         0\n10         0         0         0         0         0         0         0\n   E15.0.428 E15.0.434 E15.0.437 E17.5.516 E17.5.505\n1        318         0         0         0         0\n2          0         0         0         0         0\n3          0         0         0         0         0\n4          0         0         0         0         0\n5          0       273         0       273         0\n6          0         0       258         0         0\n7          0         0         0       297         0\n8          0         0         0         0         0\n9          0         0         0         0         0\n10        37         0         0         0         0\n\n\n\nDefine which genes are expressed\nFor each data set we need to define, independently from the DEA methods, which genes are specific for each cluster. So we need to define first which genes are expressed and which are not expressed. To do so we can take advantage from the fact that we have the original clusters from which the cells were sampled to create the artificial datasets. So looking to the original cluster we define as expressed all genes present for which there are at least 2 reads every 10 cells. We define as enriched for a cluster the genes that are present and have at least 3 times as many average reads as the average reads outside the cluster.\n\nreadsLogMeansPerCluster &lt;- readRDS(file.path(dirOut, \"readsLogAverageCount_PerCluster.RDS\"))\n\nthresholdLFC &lt;- log10(3.0) # presence if 3 times more reads on average\nthresholdLFM &lt;- log10(10000 * 2 / 10) # 2 reads each 10 cells\n\n10^thresholdLFC\n\n[1] 3\n\n10^(thresholdLFM-4)\n\n[1] 0.2"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_even_near",
    "href": "FDR_analysisResultsLFC.html#clusters_even_near",
    "title": "Results - Log Fold Change",
    "section": "2_Clusters_even_near",
    "text": "2_Clusters_even_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_near\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1] \n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set             set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                     &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_even_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_even_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_even_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_even_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_even_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_even_near          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 80\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_even_nearPL &lt;- TwoClusters_even_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_even_nearPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_even_medium",
    "href": "FDR_analysisResultsLFC.html#clusters_even_medium",
    "title": "Results - Log Fold Change",
    "section": "2_Clusters_even_medium",
    "text": "2_Clusters_even_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_medium\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_even_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_even_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_even_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_even_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_even_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_even_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1559\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_even_mediumPL &lt;- TwoClusters_even_medium + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_even_mediumPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_even_far",
    "href": "FDR_analysisResultsLFC.html#clusters_even_far",
    "title": "Results - Log Fold Change",
    "section": "2_Clusters_even_far",
    "text": "2_Clusters_even_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_even_far\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set            set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                    &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_even_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_even_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_even_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_even_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_even_far          1\n6 Lama1 E13.5-187 FALSE 2_Clusters_even_far          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 4020\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_even_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_even_farPL &lt;- TwoClusters_even_far + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_even_farPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_uneven_near",
    "href": "FDR_analysisResultsLFC.html#clusters_uneven_near",
    "title": "Results - Log Fold Change",
    "section": "2_Clusters_uneven_near",
    "text": "2_Clusters_uneven_near\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_near\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set               set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                       &lt;int&gt;\n1 Neil2 E13.5-434 FALSE 2_Clusters_uneven_near          1\n2 Neil2 E15.0-428 FALSE 2_Clusters_uneven_near          1\n3 Lamc1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n4 Lamc1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n5 Lama1 E13.5-434 FALSE 2_Clusters_uneven_near          1\n6 Lama1 E15.0-428 FALSE 2_Clusters_uneven_near          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 80\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_uneven_near &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_uneven_nearPL &lt;- TwoClusters_uneven_near + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_uneven_nearPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_uneven_medium",
    "href": "FDR_analysisResultsLFC.html#clusters_uneven_medium",
    "title": "Results - Log Fold Change",
    "section": "2_Clusters_uneven_medium",
    "text": "2_Clusters_uneven_medium\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_medium\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set                 set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                         &lt;int&gt;\n1 Neil2 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n2 Neil2 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n3 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n4 Lamc1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n5 Lama1 E13.5-187 FALSE 2_Clusters_uneven_medium          1\n6 Lama1 E13.5-184 FALSE 2_Clusters_uneven_medium          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 1559\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E13.5-184\"\n[1] \"E17.5-516\"\n[1] \"E15.0-434\"\n[1] \"E15.0-508\"\n[1] \"E15.0-437\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_uneven_medium &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_uneven_mediumPL &lt;- TwoClusters_uneven_medium + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_uneven_mediumPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_uneven_far",
    "href": "FDR_analysisResultsLFC.html#clusters_uneven_far",
    "title": "Results - Log Fold Change",
    "section": "2_Clusters_uneven_far",
    "text": "2_Clusters_uneven_far\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"2_Clusters_uneven_far\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set              set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                      &lt;int&gt;\n1 Neil2 E17.5-516 FALSE 2_Clusters_uneven_far          1\n2 Neil2 E13.5-187 FALSE 2_Clusters_uneven_far          1\n3 Lamc1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n4 Lamc1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n5 Lama1 E17.5-516 FALSE 2_Clusters_uneven_far          1\n6 Lama1 E13.5-187 FALSE 2_Clusters_uneven_far          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 4020\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-187\"\n[1] \"E17.5-516\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-509\"\n[1] \"E13.5-184\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nTwoClusters_uneven_far &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nTwoClusters_uneven_farPL &lt;- TwoClusters_uneven_far + xlab(\"FPR\") + ylab(\"TPR\")\nTwoClusters_uneven_farPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_even",
    "href": "FDR_analysisResultsLFC.html#clusters_even",
    "title": "Results - Log Fold Change",
    "section": "3_Clusters_even",
    "text": "3_Clusters_even\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_even\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set        set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                &lt;int&gt;\n1 Neil2 E15.0-437 FALSE 3_Clusters_even          1\n2 Neil2 E13.5-510 FALSE 3_Clusters_even          1\n3 Neil2 E13.5-437 FALSE 3_Clusters_even          1\n4 Lamc1 E15.0-437 FALSE 3_Clusters_even          1\n5 Lamc1 E13.5-510 FALSE 3_Clusters_even          1\n6 Lamc1 E13.5-437 FALSE 3_Clusters_even          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 2608\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E17.5-516\"\n[1] \"E13.5-437\"\n[1] \"E17.5-505\"\n[1] \"E15.0-510\"\n[1] \"E15.0-428\"\n[1] \"E13.5-510\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nThreeClusters_even &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nThreeClusters_evenPL &lt;- ThreeClusters_even + xlab(\"FPR\") + ylab(\"TPR\")\nThreeClusters_evenPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_uneven",
    "href": "FDR_analysisResultsLFC.html#clusters_uneven",
    "title": "Results - Log Fold Change",
    "section": "3_Clusters_uneven",
    "text": "3_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"3_Clusters_uneven\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E15.0-428 FALSE 3_Clusters_uneven          1\n2 Neil2 E13.5-434 FALSE 3_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 3_Clusters_uneven          1\n4 Lamc1 E15.0-428 FALSE 3_Clusters_uneven          1\n5 Lamc1 E13.5-434 FALSE 3_Clusters_uneven          1\n6 Lamc1 E15.0-510 FALSE 3_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 3293\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E15.0-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E13.5-187\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-184\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nThreeClusters_uneven &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nThreeClusters_unevenPL &lt;- ThreeClusters_uneven + xlab(\"FPR\") + ylab(\"TPR\")\nThreeClusters_unevenPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters_uneven-1",
    "href": "FDR_analysisResultsLFC.html#clusters_uneven-1",
    "title": "Results - Log Fold Change",
    "section": "5_Clusters_uneven",
    "text": "5_Clusters_uneven\n\nTrue vector\n\nsubset.datasets_csv &lt;-datasets_csv[datasets_csv$Group == \"5_Clusters_uneven\", ]\n\nground_truth_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  clusters &lt;- str_split(subset.datasets_csv$Collection[ind], pattern = \"_[+]_\", simplify = T)\n  \n  reads.LM.subset &lt;- readsLogMeansPerCluster[, clusters]\n  \n  ground_truth &lt;- as.data.frame(matrix(nrow = nrow(reads.LM.subset),\n                                       ncol = ncol(reads.LM.subset)))\n  rownames(ground_truth) &lt;- rownames(reads.LM.subset)\n  colnames(ground_truth) &lt;- colnames(reads.LM.subset)\n\n  for (col in 1:ncol(ground_truth)) {\n    # log fold change\n    ground_truth[, col] &lt;- reads.LM.subset[, col] - rowMeans(reads.LM.subset[, -col, drop = FALSE])\n    ground_truth[, col] &lt;- ground_truth[, col] &gt; thresholdLFC & reads.LM.subset[, col] &gt; thresholdLFM\n  }\n\n  ground_truth$genes &lt;- rownames(ground_truth)\n  ground_truth &lt;- pivot_longer(ground_truth,\n                               cols = 1:(ncol(ground_truth)-1),\n                               names_to = \"clusters\")\n  ground_truth$data_set &lt;- subset.datasets_csv[ind, 1]\n  ground_truth$set_number &lt;- ind \n  ground_truth_tot &lt;- rbind(ground_truth_tot, ground_truth)\n}\nground_truth_tot &lt;- ground_truth_tot[2:nrow(ground_truth_tot),]\n\nhead(ground_truth_tot)\n\n# A tibble: 6 × 5\n  genes clusters  value data_set          set_number\n  &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt; &lt;chr&gt;                  &lt;int&gt;\n1 Neil2 E13.5-510 FALSE 5_Clusters_uneven          1\n2 Neil2 E15.0-437 FALSE 5_Clusters_uneven          1\n3 Neil2 E15.0-510 FALSE 5_Clusters_uneven          1\n4 Neil2 E13.5-432 FALSE 5_Clusters_uneven          1\n5 Neil2 E13.5-437 FALSE 5_Clusters_uneven          1\n6 Lamc1 E13.5-510 FALSE 5_Clusters_uneven          1\n\n\n\nlength(unique(ground_truth_tot$genes))\n\n[1] 14695\n\nsum(ground_truth_tot$value)\n\n[1] 3653\n\n\n\n\nROC for COTAN\n\nonlyPositive.pVal.Cotan_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",\n                      subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  deaCOTAN &lt;- getClusterizationData(dataset,clName = \"mergedClusters\")[[2]]\n  pvalCOTAN &lt;- pValueFromDEA(deaCOTAN,\n              numCells = getNumCells(dataset),method = \"none\")\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.names &lt;- c(cl.names,\n                  str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1])\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  }\n  colnames(deaCOTAN) &lt;- cl.names\n  colnames(pvalCOTAN) &lt;- cl.names\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  onlyPositive.pVal.Cotan &lt;- pvalCOTAN\n\n    for (cl in cl.names) {\n    print(cl)\n    #temp.DEA.CotanSign &lt;- deaCOTAN[rownames(pvalCOTAN[pvalCOTAN[,cl] &lt; 0.05,]) ,]\n    onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl] &lt;-  1 #onlyPositive.pVal.Cotan[rownames(deaCOTAN[deaCOTAN[,cl] &lt; 0,]),cl]+1\n    }\n    \n    onlyPositive.pVal.Cotan$genes &lt;- rownames(onlyPositive.pVal.Cotan) \n    onlyPositive.pVal.Cotan &lt;- pivot_longer(onlyPositive.pVal.Cotan,\n                                            values_to = \"p_values\",\n                               cols = 1:(ncol(onlyPositive.pVal.Cotan)-1),\n                               names_to = \"clusters\")\n  onlyPositive.pVal.Cotan$data_set &lt;- subset.datasets_csv[ind,1]\n  onlyPositive.pVal.Cotan$set_number &lt;- ind \n  onlyPositive.pVal.Cotan_tot &lt;- rbind(onlyPositive.pVal.Cotan_tot, onlyPositive.pVal.Cotan)\n  \n  }\n\n[1] \"E13.5-432\"\n[1] \"E15.0-510\"\n[1] \"E13.5-437\"\n[1] \"E15.0-437\"\n[1] \"E13.5-510\"\n[1] \"E13.5-434\"\n[1] \"E15.0-428\"\n[1] \"E13.5-184\"\n[1] \"E15.0-434\"\n[1] \"E17.5-505\"\n[1] \"E15.0-432\"\n[1] \"E13.5-432\"\n[1] \"E15.0-509\"\n[1] \"E15.0-508\"\n[1] \"E13.5-187\"\n\n\n\nonlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[2:nrow(onlyPositive.pVal.Cotan_tot),]\n\nonlyPositive.pVal.Cotan_tot &lt;- merge.data.frame(onlyPositive.pVal.Cotan_tot,\n                                                ground_truth_tot,by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),all.x = T,all.y = F)\n\n#onlyPositive.pVal.Cotan_tot &lt;- onlyPositive.pVal.Cotan_tot[order(onlyPositive.pVal.Cotan_tot$p_values,\n #                                                                decreasing = F),]\n# df &lt;- as.data.frame(matrix(nrow = nrow(onlyPositive.pVal.Cotan_tot),ncol = 3)) \n# colnames(df) &lt;- c(\"TPR\",\"FPR\",\"Method\")\n# df$Method &lt;- \"COTAN\"\n# \n# Positive &lt;- sum(onlyPositive.pVal.Cotan_tot$value) \n# Negative &lt;- sum(!onlyPositive.pVal.Cotan_tot$value)\n# \n# for (i in 1:nrow(onlyPositive.pVal.Cotan_tot)) {\n#   df[i,\"TPR\"] &lt;- sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"])/Positive\n#   df[i,\"FPR\"] &lt;- (i-sum(onlyPositive.pVal.Cotan_tot[1:i,\"value\"]))/Negative\n  \n# Convert TRUE/FALSE to 1/0\nonlyPositive.pVal.Cotan_tot$value &lt;- as.numeric(onlyPositive.pVal.Cotan_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultCOTAN &lt;- roc(onlyPositive.pVal.Cotan_tot$value, 1 - onlyPositive.pVal.Cotan_tot$p_values)\n\n# Plot the ROC curve\n#plot(roc_resultCOTAN)\n\n\n\nROC for Seurat\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat scTransform\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_ScTransform_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_scTr &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Seurat Bimod\n\ndeaSeurat_tot &lt;- NA\n\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  #print(ind)\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  \n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  \n  deaSeurat &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Seurat_DEA_Bimod_genes.csv\")), row.names = 1)\n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaSeurat[deaSeurat$cluster == cl.val,]$cluster &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"cluster\",\n                                     replacement = \"clusters\") \n  colnames(deaSeurat) &lt;- str_replace(colnames(deaSeurat),\n                                     pattern = \"gene\",\n                                     replacement = \"genes\") \n  \n  deaSeurat$data_set &lt;- subset.datasets_csv[ind,1]\n  deaSeurat$set_number &lt;- ind \n  deaSeurat_tot &lt;- rbind(deaSeurat_tot, deaSeurat)\n  \n  \n  }\n deaSeurat_tot &lt;-  deaSeurat_tot[2:nrow(deaSeurat_tot),]\n \n deaSeurat_tot &lt;- merge.data.frame(deaSeurat_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaSeurat_tot$value &lt;- as.numeric(deaSeurat_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultSeurat_Bimod &lt;- roc(deaSeurat_tot$value, 1 - deaSeurat_tot$p_val)\n\n# Plot the ROC curve\n#plot(roc_resultSeurat)\n\n\n\nROC for Monocle\n\ndeaMonocle_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n  \n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaMonocle &lt;- read.csv(file.path(dirOut,paste0(file.code,\"Monocle_DEA_genes.csv\")),row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaMonocle[deaMonocle$cell_group == cl.val,\"cell_group\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n  \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"cell_group\",\n                                     replacement = \"clusters\") \n  colnames(deaMonocle) &lt;- str_replace(colnames(deaMonocle),\n                                     pattern = \"gene_id\",\n                                     replacement = \"genes\")\n  \n  deaMonocle$data_set &lt;- subset.datasets_csv[ind,1]\n  deaMonocle$set_number &lt;- ind \n  deaMonocle &lt;- as.data.frame(deaMonocle)\n  deaMonocle_tot &lt;- rbind(deaMonocle_tot, deaMonocle)\n  \n  \n  }\n deaMonocle_tot &lt;-  deaMonocle_tot[2:nrow(deaMonocle_tot),]\n \n deaMonocle_tot &lt;- merge.data.frame(deaMonocle_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaMonocle_tot$value &lt;- as.numeric(deaMonocle_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultMonocle &lt;- roc(deaMonocle_tot$value, 1 - deaMonocle_tot$marker_test_p_value)\n\n# Plot the ROC curve\n#plot(roc_resultMonocle)\n\n\n\nROC from ScamPy\n\ndeaScamPy_tot &lt;- NA\nfor (ind in 1:dim(subset.datasets_csv)[1]) {\n  file.code &lt;- paste0(subset.datasets_csv$Group[ind],\"_\",subset.datasets_csv$Collection[ind])\n  dataset &lt;- readRDS(file = file.path(dataSetDir,paste0(file.code,\".RDS\")))\n\n  clusterization &lt;- getClusterizationData(dataset, clName = \"mergedClusters\")[[1]]\n  #print(file.code)\n  \n  deaScamPy &lt;- read.csv(file.path(dirOut,paste0(file.code,\"ScamPy_DEA_genes.csv\")),\n                        row.names = 1) \n  \n  cl.names &lt;- NA\n  \n  for (cl.val in  unique(clusterization)) {\n    #print(cl.val)\n    cl.name &lt;- str_split(names(clusterization[clusterization == cl.val])[1],\n                            pattern = \"_\",simplify = T)[1]\n    cl.names &lt;- c(cl.names,cl.name)\n    cl.names &lt;- cl.names[!is.na(cl.names)]\n  \n    deaScamPy[deaScamPy$clusters == paste0(\"cl\",cl.val),\"clusters\"] &lt;- cl.name   \n  \n  }\n  \n  clusters &lt;- str_split(datasets_csv$Collection[ind],pattern = \"_[+]_\",simplify = T)\n\n\n  deaScamPy$data_set &lt;- subset.datasets_csv[ind,1]\n  deaScamPy$set_number &lt;- ind \n  deaScamPy_tot &lt;- rbind(deaScamPy_tot, deaScamPy)\n  \n  \n  }\n deaScamPy_tot &lt;-  deaScamPy_tot[2:nrow(deaScamPy_tot),]\n \n deaScamPy_tot &lt;- merge.data.frame(deaScamPy_tot,\n                                   ground_truth_tot,\n                                   by = c(\"genes\",\"clusters\",\"data_set\",\"set_number\"),\n                                   all.x = T,all.y = F)\n\n# Convert TRUE/FALSE to 1/0\ndeaScamPy_tot$value &lt;- as.numeric(deaScamPy_tot$value)\n\n# Compute the ROC curve - note that we invert the p-values with 1 - p_values\nroc_resultScamPy &lt;- roc(deaScamPy_tot$value, 1 - deaScamPy_tot$pval)\n\n# Plot the ROC curve\n#plot(roc_resultScamPy)\n\n\n\nSummary ROC for all methods\n\nFiveClusters_uneven &lt;- ggroc(list(COTAN=roc_resultCOTAN, Seurat=roc_resultSeurat,\n                 Seurat_scTr = roc_resultSeurat_scTr, Seurat_Bimod = roc_resultSeurat_Bimod,\n                 Monocle=roc_resultMonocle, ScamPy=roc_resultScamPy))\n\nFiveClusters_unevenPL &lt;- FiveClusters_uneven + xlab(\"FPR\") + ylab(\"TPR\")\nFiveClusters_unevenPL"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#clusters-2",
    "href": "FDR_analysisResultsLFC.html#clusters-2",
    "title": "Results - Log Fold Change",
    "section": "2 Clusters",
    "text": "2 Clusters\n\nggarrange(TwoClusters_even_nearPL,TwoClusters_even_mediumPL, TwoClusters_even_farPL,TwoClusters_uneven_nearPL, TwoClusters_uneven_mediumPL,TwoClusters_uneven_farPL,\n          labels = c(\"Even_Near\", \"Even_Medium\", \"Even_Far\", \"Uneven_Near\",\"Uneven_Medium\",\"Uneven_Far\"),\n          ncol = 3, nrow = 2, common.legend = T, legend = \"bottom\")"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#and-5-clusters",
    "href": "FDR_analysisResultsLFC.html#and-5-clusters",
    "title": "Results - Log Fold Change",
    "section": "3 and 5 Clusters",
    "text": "3 and 5 Clusters\n\nggarrange(ThreeClusters_evenPL,ThreeClusters_unevenPL, NULL, FiveClusters_unevenPL,\n          labels = c(\"3_Even\", \"3_Uneven\", \"\", \"5_Uneven\"),\n          ncol = 2, nrow = 2, common.legend = T, legend = \"bottom\")"
  },
  {
    "objectID": "FDR_analysisResultsLFC.html#footer",
    "href": "FDR_analysisResultsLFC.html#footer",
    "title": "Results - Log Fold Change",
    "section": "Footer",
    "text": "Footer\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggpubr_0.6.0  ggplot2_3.4.2 tidyr_1.3.0   dplyr_1.1.2   stringr_1.5.0\n[6] pROC_1.18.4   COTAN_2.3.3  \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               tibble_3.2.1             \n  [5] polyclip_1.10-4           fastDummies_1.7.3        \n  [7] lifecycle_1.0.3           rstatix_0.7.2            \n  [9] doParallel_1.0.17         globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             Seurat_5.0.0             \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             sp_2.1-1                 \n [25] spatstat.sparse_3.0-2     reticulate_1.35.0        \n [27] cowplot_1.1.1             pbapply_1.7-2            \n [29] RColorBrewer_1.1-3        abind_1.4-5              \n [31] Rtsne_0.16                purrr_1.0.1              \n [33] BiocGenerics_0.46.0       circlize_0.4.15          \n [35] IRanges_2.34.1            S4Vectors_0.38.1         \n [37] ggrepel_0.9.3             irlba_2.3.5.1            \n [39] listenv_0.9.0             spatstat.utils_3.0-3     \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       tidyselect_1.2.0         \n [53] shape_1.4.6               farver_2.1.1             \n [55] ScaledMatrix_1.8.1        viridis_0.6.4            \n [57] matrixStats_1.2.0         stats4_4.3.2             \n [59] spatstat.explore_3.2-1    jsonlite_1.8.7           \n [61] GetoptLong_1.0.5          ellipsis_0.3.2           \n [63] progressr_0.14.0          ggridges_0.5.4           \n [65] survival_3.5-7            iterators_1.0.14         \n [67] foreach_1.5.2             tools_4.3.2              \n [69] ica_1.0-3                 Rcpp_1.0.11              \n [71] glue_1.7.0                gridExtra_2.3            \n [73] xfun_0.39                 MatrixGenerics_1.12.3    \n [75] ggthemes_5.0.0            withr_3.0.0              \n [77] fastmap_1.1.1             fansi_1.0.4              \n [79] openssl_2.1.0             digest_0.6.33            \n [81] rsvd_1.0.5                parallelDist_0.2.6       \n [83] R6_2.5.1                  mime_0.12                \n [85] colorspace_2.1-0          scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                generics_0.1.3           \n [91] data.table_1.15.0         httr_1.4.6               \n [93] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [95] uwot_0.1.16               pkgconfig_2.0.3          \n [97] gtable_0.3.3              ComplexHeatmap_2.16.0    \n [99] lmtest_0.9-40             htmltools_0.5.7          \n[101] carData_3.0-5             dotCall64_1.1-0          \n[103] clue_0.3-64               SeuratObject_5.0.0       \n[105] scales_1.3.0              png_0.1-8                \n[107] knitr_1.43                rstudioapi_0.15.0        \n[109] reshape2_1.4.4            rjson_0.2.21             \n[111] nlme_3.1-163              zoo_1.8-12               \n[113] GlobalOptions_0.1.2       KernSmooth_2.23-22       \n[115] parallel_4.3.2            miniUI_0.1.1.1           \n[117] RcppZiggurat_0.1.6        pillar_1.9.0             \n[119] grid_4.3.2                vctrs_0.6.3              \n[121] RANN_2.6.1                promises_1.2.0.1         \n[123] car_3.1-2                 BiocSingular_1.16.0      \n[125] beachmat_2.16.0           xtable_1.8-4             \n[127] cluster_2.1.6             evaluate_0.21            \n[129] zeallot_0.1.0             cli_3.6.1                \n[131] compiler_4.3.2            rlang_1.1.1              \n[133] crayon_1.5.2              future.apply_1.11.0      \n[135] ggsignif_0.6.4            labeling_0.4.2           \n[137] plyr_1.8.8                stringi_1.8.1            \n[139] viridisLite_0.4.2         deldir_2.0-2             \n[141] BiocParallel_1.34.2       assertthat_0.2.1         \n[143] munsell_0.5.0             lazyeval_0.2.2           \n[145] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[147] Matrix_1.6-3              RcppHNSW_0.6.0           \n[149] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[151] future_1.33.0             shiny_1.8.0              \n[153] ROCR_1.0-11               Rfast_2.1.0              \n[155] broom_1.0.5               igraph_1.6.0             \n[157] RcppParallel_5.1.7"
  },
  {
    "objectID": "ForebrainDorsal_E135-analysis.html",
    "href": "ForebrainDorsal_E135-analysis.html",
    "title": "Forebrain Dorsal E13.5 Data-set Anaysis",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Data/MouseCortexFromLoom/\"\n\nsetLoggingLevel(1)\nsetLoggingFile(file.path(outDir, \"ForebrainDorsal_E135-analysis.log\"))\n\nRead the already created COTAN object\n\nfb135Obj &lt;- readRDS(\"Data/MouseCortexFromLoom/SourceData/e13.5_ForebrainDorsal.cotan.RDS\")\nsampleCondition &lt;- getMetadataElement(fb135Obj, datasetTags()[[\"cond\"]])\n\nsampleCondition\n\n[1] \"e13.5_ForebrainDorsal\"\n\n\nInspect cells’ sizes\n\ncellSizePlot(fb135Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nDrop cells with too many ritz reads as they are probably duplets\n\ncellsSizeThr &lt;- 10000\nfb135Obj &lt;- addElementToMetaDataset(fb135Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem &lt;- getCells(fb135Obj)[getCellsSize(fb135Obj) &gt; cellsSizeThr]\nfb135Obj &lt;- dropGenesCells(fb135Obj, cells = cells_to_rem)\n\ncellSizePlot(fb135Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(fb135Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nDrop cells with too low genes expession as they are probably dead\n\ngenesSizeLowThr &lt;- 700\nfb135Obj &lt;- addElementToMetaDataset(fb135Obj, \"Num genes low threshold\", genesSizeLowThr)\n\nnumExprGenes &lt;- getNumGenes(fb135Obj)\ncells_to_rem &lt;- names(numExprGenes)[numExprGenes &lt; genesSizeLowThr]\nfb135Obj &lt;- dropGenesCells(fb135Obj, cells = cells_to_rem)\n\ngenesSizePlot(fb135Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nCheck number of mitocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^mt.\"\ngetGenes(fb135Obj)[grep(mitGenesPattern, getGenes(fb135Obj))]\n\n[1] \"mt.Co1\"  \"mt.Co3\"  \"mt.Nd4\"  \"mt.Nd5\"  \"mt.Nd1\"  \"mt.Nd2\"  \"mt.Atp6\"\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(fb135Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr &lt;- 1.0\nfb135Obj &lt;- addElementToMetaDataset(fb135Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nfb135Obj &lt;- dropGenesCells(fb135Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(fb135Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(fb135Obj, splitPattern = \":\", numCol = 1)\n\n\n\ngenesSizePlot(fb135Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nClean: round 1\n\nfb135Obj &lt;- clean(fb135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %&lt;-% cleanPlots(fb135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb135Obj &lt;- addElementToMetaDataset(fb135Obj, \"Num drop B group\", 0)\n\nB group contains high number of hemoglobin genes: so they are not interesting\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb135Obj &lt;- dropGenesCells(fb135Obj, cells = cells_to_rem)\n\nClean: round 2\n\nfb135Obj &lt;- clean(fb135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %&lt;-% cleanPlots(fb135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb135Obj &lt;- addElementToMetaDataset(fb135Obj, \"Num drop B group\", 1)\n\nB group contains high number of hemoglobin genes: so they are not interesting\n\ncells_to_rem &lt;- rownames(pcaCellsData)[pcaCellsData[[\"groups\"]] == \"B\"]\n\nfb135Obj &lt;- dropGenesCells(fb135Obj, cells = cells_to_rem)\n\nClean: round 3\n\nfb135Obj &lt;- clean(fb135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %&lt;-% cleanPlots(fb135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb135Obj &lt;- addElementToMetaDataset(fb135Obj, \"Num drop B group\", 2)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nlowUDEThr &lt;- 0.3 # the threshold to remove low UDE cells\n\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(fb135Obj)), \"n\" = seq_along(getNu(fb135Obj)))\nUDEPlot_zoomed &lt;- ggplot(nuDf, aes(x = n, y = nu)) +\n            geom_point(colour = \"#8491B4B2\", size = 1.0) +\n            xlim(0L, 400L) +\n            ylim(0.0, 1.0) +\n            geom_hline(yintercept = lowUDEThr, linetype = \"dashed\",\n                       color = \"darkred\") +\n            annotate(geom = \"text\", x = 200L, y = 0.25,\n                     label = paste0(\"to remove cells with nu &lt; \", lowUDEThr),\n                     color = \"darkred\", size = 4.5)\n\nplot(UDEPlot_zoomed)\n\n\n\n\nFinal cleaning to check all is OK\n\nfb135Obj &lt;- clean(fb135Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %&lt;-% cleanPlots(fb135Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(cellSizePlot(fb135Obj, splitPattern = \":\", numCol = 1))\n\n\n\nplot(genesSizePlot(fb135Obj, splitPattern = \":\", numCol = 1))\n\n\n\n\nCalculate genes’ COEX\n\nfb135Obj &lt;- proceedToCoex(fb135Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\ngdiData &lt;- calculateGDI(fb135Obj)\n\ngenesToLabel &lt;- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\n [1] \"Myt1l\"   \"Ccser1\"  \"Hes1\"    \"Neurod2\" \"Neurod6\" \"Aldoc\"   \"Hes5\"   \n [8] \"Nsg2\"    \"Rab3a\"   \"Rbfox1\" \n\ngdiPlot &lt;- GDIPlot(fb135Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n\n\n\n\nSave the COTAN object\n\nsaveRDS(fb135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nfb135Obj &lt;- readRDS(file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nsplitClusters &lt;- cellsUniformClustering(fb135Obj, GDIThreshold = 1.4, cores = 13,\n                                        saveObj = TRUE, outDir = outDir)\n\nc(splitCoexDF, splitPValueDF) %&lt;-% DEAOnClusters(fb135Obj, clusters = splitClusters)\n\nfb135Obj &lt;- addClusterization(fb135Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\ntable(splitClusters)\n\n\nsaveRDS(fb135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(mergedClusters, mergedCoexDF, mergedPValueDF) %&lt;-%\n  mergeUniformCellsClusters(fb135Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\nfb135Obj &lt;- addClusterization(fb135Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\ntable(mergedClusters)\n\n\nsaveRDS(fb135Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.5   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.14        jsonlite_1.8.4        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.21        \n [10] GlobalOptions_0.1.2    vctrs_0.6.1            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-20    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.1          zoo_1.8-12             igraph_1.4.2          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.5-4.1         R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-8     future_1.32.0         \n [34] shiny_1.7.4            clue_0.3-64            digest_0.6.31         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.0      \n [40] Seurat_4.3.0           tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.13.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-1 \n [49] httr_1.4.5             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.0         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.2          dendextend_1.17.1      MASS_7.3-59           \n [58] openssl_2.0.6          rjson_0.2.21           tools_4.3.0           \n [61] lmtest_0.9-40          httpuv_1.6.9           future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.0             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_1.6-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-1    RcppAnnoy_0.0.20      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.0           \n [88] circlize_0.4.15        splines_4.3.0          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-6          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-0          knitr_1.42             gridExtra_2.3         \n[100] IRanges_2.34.0         scattermore_1.1        stats4_4.3.0          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.20          codetools_0.2-19       cli_3.6.1             \n[112] RcppParallel_5.1.7     uwot_0.1.14            xtable_1.8-4          \n[115] reticulate_1.28        munsell_0.5.0          Rcpp_1.0.10           \n[118] globals_0.16.2         spatstat.random_3.1-4  png_0.1-8             \n[121] parallel_4.3.0         Rfast_2.0.7            ellipsis_0.3.2        \n[124] assertthat_0.2.1       parallelDist_0.2.6     listenv_0.9.0         \n[127] ggthemes_4.2.4         viridisLite_0.4.1      scales_1.2.1          \n[130] ggridges_0.5.4         SeuratObject_4.1.3     leiden_0.4.3          \n[133] purrr_1.0.1            crayon_1.5.2           GetoptLong_1.0.5      \n[136] rlang_1.1.0            cowplot_1.1.1"
  },
  {
    "objectID": "ForebrainDorsal_E175-analysis.html",
    "href": "ForebrainDorsal_E175-analysis.html",
    "title": "Forebrain Dorsal E17.5 Data-set Anaysis",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\n#devtools::load_all(\"../COTAN/\")\n\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Data/MouseCortexFromLoom/\"\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"ForebrainDorsal_E175-analysis.log\"))\n\nRead the already created COTAN object\n\nfb175Obj &lt;- readRDS(file.path(\"Data/MouseCortexFromLoom/SourceData/\", \"e17.5_ForebrainDorsal.cotan.RDS\"))\nsampleCondition &lt;- getMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])\n\nsampleCondition\n\n[1] \"e17.5_ForebrainDorsal\"\n\n\nInspect cells’ sizes\n\ncellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nDrop cells with too many reads reads as they are probably doublets\n\ncellsSizeThr &lt;- 10000\nfb175Obj &lt;- addElementToMetaDataset(fb175Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem &lt;- getCells(fb175Obj)[getCellsSize(fb175Obj) &gt; cellsSizeThr]\nfb175Obj &lt;- dropGenesCells(fb175Obj, cells = cells_to_rem)\n\ncellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nDrop cells with too low genes expression as they are probably dead\n\ngenesSizeLowThr &lt;- 700\nfb175Obj &lt;- addElementToMetaDataset(fb175Obj, \"Num genes low threshold\", genesSizeLowThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(fb175Obj)\ncells_to_rem &lt;- names(numExprGenes)[numExprGenes &lt; genesSizeLowThr]\nfb175Obj &lt;- dropGenesCells(fb175Obj, cells = cells_to_rem)\n\ngenesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nCheck number of mitochondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^mt.\"\ngetGenes(fb175Obj)[grep(mitGenesPattern, getGenes(fb175Obj))]\n\n[1] \"mt.Co1\" \"mt.Co3\" \"mt.Nd4\" \"mt.Nd5\" \"mt.Nd1\" \"mt.Nd2\"\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(fb175Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitochondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr &lt;- 1.5\nfb175Obj &lt;- addElementToMetaDataset(fb175Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nfb175Obj &lt;- dropGenesCells(fb175Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(fb175Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \":\", numCol = 1)\n\nplot(mitPlot)\n\n\n\n\nCheck no further outlines after all the culling\n\ncellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n\n\n\ngenesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1)\n\n\n\n\nClean: round 1\n\nfb175Obj &lt;- clean(fb175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb175Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\nfb175Obj &lt;- addElementToMetaDataset(fb175Obj, \"Num drop B group\", 0)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\nFinal cleaning to check all is OK\n\nfb175Obj &lt;- clean(fb175Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot,\n  UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(fb175Obj)\n\nplot(pcaCellsPlot)\nplot(genesPlot)\nplot(UDEPlot)\nplot(nuPlot)\nplot(zoomedNuPlot)\n\nplot(cellSizePlot(fb175Obj, splitPattern = \":\", numCol = 1))\nplot(genesSizePlot(fb175Obj, splitPattern = \":\", numCol = 1))\n\nCalculate genes’ COEX\n\nfb175Obj &lt;- proceedToCoex(fb175Obj, calcCoex = TRUE, cores = 12,\n                          saveObj = TRUE, outDir = outDir)\n\n\ngdiData &lt;- calculateGDI(fb175Obj)\n\ngenesToLabel &lt;- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 10L)\n\ngenesToLabel\n\n [1] \"Mfge8\"    \"Myt1l\"    \"Atp1a2\"   \"Sparc\"    \"Apoe\"     \"Phgdh\"   \n [7] \"Slc9a3r1\" \"Tnc\"      \"Ccdc80\"   \"Aldoc\"   \n\ngdiPlot &lt;- GDIPlot(fb175Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel))\n\nplot(gdiPlot)\n\n\n\n\nSave the COTAN object\n\nsaveRDS(fb175Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(splitClusters, splitCoexDF) %&lt;-%\n  cellsUniformClustering(fb175Obj, GDIThreshold = 1.4, cores = 13L,\n                         saveObj = TRUE, outDir = outDir)\n\nfb175Obj &lt;- addClusterization(fb175Obj, clName = \"split\",\n                              clusters = splitClusters,\n                              coexDF = splitCoexDF, override = TRUE)\n\n\nsplitClusters &lt;- getClusterizationData(fb175Obj,clName = \"split\")$clusters\n\ntable(splitClusters)\n\nsplitClusters\n -1  20  04  05  06  07  10  22  11  08  21  23  16  12  18  24  09  14  15  13 \n 10 384 130 119  82  53  44  40  32  22 413 166 159  91  55  50  15 202 146  70 \n 02  01  03  17  19 \n 50  37  32  35  30 \n\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(fb175Obj, clusters = splitClusters,\n                            GDIThreshold = 1.4, batchSize = 20L, cores = 13L,\n                            saveObj = TRUE, outDir = outDir)\n\nfb175Obj &lt;- addClusterization(fb175Obj, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\n\nmergedClusters &lt;- getClusterizationData(fb175Obj,clName = \"merge\")$clusters\ntable(mergedClusters)\n\nmergedClusters\n 16  03  04  05  06  07  18  01  02  12  19  14  13  15  17  08  09  10  11 \n 65  37  50  32 130 119 135  22  15  44  32 237 100 202 194 384 413  90 166 \n\n\n\n\nSys.time()\n\n[1] \"2023-08-22 11:46:58 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.1.7   zeallot_0.1.0 tibble_3.2.1  ggplot2_3.4.2\n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.15.0      jsonlite_1.8.7        \n  [4] shape_1.4.6            umap_0.2.10.0          magrittr_2.0.3        \n  [7] spatstat.utils_3.0-3   farver_2.1.1           rmarkdown_2.24        \n [10] GlobalOptions_0.1.2    vctrs_0.6.3            ROCR_1.0-11           \n [13] spatstat.explore_3.2-1 askpass_1.1            htmltools_0.5.5       \n [16] sctransform_0.3.5      parallelly_1.36.0      KernSmooth_2.23-22    \n [19] htmlwidgets_1.6.2      ica_1.0-3              plyr_1.8.8            \n [22] plotly_4.10.2          zoo_1.8-12             igraph_1.5.1          \n [25] mime_0.12              lifecycle_1.0.3        iterators_1.0.14      \n [28] pkgconfig_2.0.3        Matrix_1.6-0           R6_2.5.1              \n [31] fastmap_1.1.1          fitdistrplus_1.1-11    future_1.33.0         \n [34] shiny_1.7.5            clue_0.3-64            digest_0.6.33         \n [37] colorspace_2.1-0       patchwork_1.1.2        S4Vectors_0.38.1      \n [40] Seurat_4.3.0.1         tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.2         progressr_0.14.0      \n [46] RcppZiggurat_0.1.6     fansi_1.0.4            spatstat.sparse_3.0-2 \n [49] httr_1.4.6             polyclip_1.10-4        abind_1.4-5           \n [52] compiler_4.3.1         withr_2.5.0            doParallel_1.0.17     \n [55] viridis_0.6.4          dendextend_1.17.1      MASS_7.3-60           \n [58] openssl_2.1.0          rjson_0.2.21           tools_4.3.1           \n [61] lmtest_0.9-40          httpuv_1.6.11          future.apply_1.11.0   \n [64] goftest_1.2-3          glue_1.6.2             nlme_3.1-162          \n [67] promises_1.2.0.1       grid_4.3.1             Rtsne_0.16            \n [70] cluster_2.1.4          reshape2_1.4.4         generics_0.1.3        \n [73] gtable_0.3.3           spatstat.data_3.0-1    tidyr_1.3.0           \n [76] data.table_1.14.8      sp_2.0-0               utf8_1.2.3            \n [79] BiocGenerics_0.46.0    spatstat.geom_3.2-4    RcppAnnoy_0.0.21      \n [82] ggrepel_0.9.3          RANN_2.6.1             foreach_1.5.2         \n [85] pillar_1.9.0           stringr_1.5.0          later_1.3.1           \n [88] circlize_0.4.15        splines_4.3.1          dplyr_1.1.2           \n [91] lattice_0.21-8         survival_3.5-5         deldir_1.0-9          \n [94] tidyselect_1.2.0       ComplexHeatmap_2.16.0  miniUI_0.1.1.1        \n [97] pbapply_1.7-2          knitr_1.43             gridExtra_2.3         \n[100] IRanges_2.34.1         scattermore_1.2        stats4_4.3.1          \n[103] xfun_0.39              factoextra_1.0.7       matrixStats_1.0.0     \n[106] stringi_1.7.12         lazyeval_0.2.2         yaml_2.3.7            \n[109] evaluate_0.21          codetools_0.2-19       cli_3.6.1             \n[112] RcppParallel_5.1.7     uwot_0.1.16            xtable_1.8-4          \n[115] reticulate_1.30        munsell_0.5.0          Rcpp_1.0.11           \n[118] globals_0.16.2         spatstat.random_3.1-5  png_0.1-8             \n[121] parallel_4.3.1         Rfast_2.0.8            ellipsis_0.3.2        \n[124] assertthat_0.2.1       parallelDist_0.2.6     listenv_0.9.0         \n[127] ggthemes_4.2.4         viridisLite_0.4.2      scales_1.2.1          \n[130] ggridges_0.5.4         SeuratObject_4.1.3     leiden_0.4.3          \n[133] purrr_1.0.1            crayon_1.5.2           GetoptLong_1.0.5      \n[136] rlang_1.1.1            cowplot_1.1.1"
  },
  {
    "objectID": "ForebrainLaManno2021ClustersGDI.html",
    "href": "ForebrainLaManno2021ClustersGDI.html",
    "title": "Forebrain La Manno 2021 Clusters GDI",
    "section": "",
    "text": "For the evaluation of GDI sensitivity and also to test type I error and FDR for the differential expressed gene in a cluster we need to have some Coherent Transcript Cell Cluster (cluster formed by cells as similar as possible). So we tested all clusters defined in the original paper for this data set (focusing on E13.5, E15.0, and E17.5).\n\nlibrary(rlang)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(COTAN)\n#devtools::load_all(\"~/dev/COTAN/COTAN/\")\n\noptions(parallelly.fork.enable = TRUE)\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(\".\", \"ClusterizationsGDI_AllForebrainDorsal.log\"))\n\n\n\n\ngetClData &lt;- function(objCOTAN, clList, cl) {\n  cluster &lt;- names(clList)[[cl]]\n  cells &lt;- clList[[cl]]\n  res &lt;- checkClusterUniformity(objCOTAN, cluster = cluster, cells = cells,\n                                GDIThreshold = 1.4, cores = 6, saveObj = FALSE)\n  res &lt;- c(list(\"cluster\" = cluster, \"size\" = length(cells)), res)\n  res &lt;- as.data.frame(res)\n  rownames(res) &lt;- cluster\n  colnames(res)\n  return(res)\n}\n\nclDataVal &lt;- list(\"cluster\" = NULL, \"size\" = NULL, \"isUniform\" = NULL,\n                  \"fractionAbove\" = NULL, \"1stPercentile\" = NULL)"
  },
  {
    "objectID": "ForebrainLaManno2021ClustersGDI.html#preamble",
    "href": "ForebrainLaManno2021ClustersGDI.html#preamble",
    "title": "Forebrain La Manno 2021 Clusters GDI",
    "section": "",
    "text": "For the evaluation of GDI sensitivity and also to test type I error and FDR for the differential expressed gene in a cluster we need to have some Coherent Transcript Cell Cluster (cluster formed by cells as similar as possible). So we tested all clusters defined in the original paper for this data set (focusing on E13.5, E15.0, and E17.5).\n\nlibrary(rlang)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(COTAN)\n#devtools::load_all(\"~/dev/COTAN/COTAN/\")\n\noptions(parallelly.fork.enable = TRUE)\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(\".\", \"ClusterizationsGDI_AllForebrainDorsal.log\"))\n\n\n\n\ngetClData &lt;- function(objCOTAN, clList, cl) {\n  cluster &lt;- names(clList)[[cl]]\n  cells &lt;- clList[[cl]]\n  res &lt;- checkClusterUniformity(objCOTAN, cluster = cluster, cells = cells,\n                                GDIThreshold = 1.4, cores = 6, saveObj = FALSE)\n  res &lt;- c(list(\"cluster\" = cluster, \"size\" = length(cells)), res)\n  res &lt;- as.data.frame(res)\n  rownames(res) &lt;- cluster\n  colnames(res)\n  return(res)\n}\n\nclDataVal &lt;- list(\"cluster\" = NULL, \"size\" = NULL, \"isUniform\" = NULL,\n                  \"fractionAbove\" = NULL, \"1stPercentile\" = NULL)"
  },
  {
    "objectID": "ForebrainLaManno2021ClustersGDI.html#forebrain-dorsal-e13.5",
    "href": "ForebrainLaManno2021ClustersGDI.html#forebrain-dorsal-e13.5",
    "title": "Forebrain La Manno 2021 Clusters GDI",
    "section": "Forebrain Dorsal E13.5",
    "text": "Forebrain Dorsal E13.5\n\nLoad dataset\n\nfb135Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e13.5_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(fb135Obj, datasetTags()[[\"cond\"]])\n\nlogThis(sampleCondition)\n\nallClust &lt;- getClusterizations(fb135Obj)\n\nlogThis(\"\")\nlogThis(paste(\"Number of cells:\", getNumCells(fb135Obj)))\n\nlogThis(\"\")\nlogThis(\"Available clusterizations:\")\nlogThis(paste0(allClust, collapse = \", \"))\n\nclSizes &lt;- vapply(allClust, function(x) { nlevels(getClusters(fb135Obj, x))}, integer(1L))\nclSizes\n\n            split             merge original.clusters original.subclass \n               35                31               159                40 \n   original.class       cell.typist            seurat   seurat.high.res \n               13                13                19                36 \n          monocle  monocle.high.res \n               11                27 \n\nlogThis(paste(names(clSizes), clSizes, sep = \": \", collapse = \", \"))\n\n\n\nExtract original cluster\n\noriginalFB135 &lt;- getClusters(fb135Obj, clName = \"original.clusters\")\n\nnlevels(originalFB135)\n\n[1] 159\n\nsort(table(originalFB135), decreasing = TRUE)\n\noriginalFB135\n432 186 187 434 184 437 510 509 183 185 438 433 525 443 446 192 568 188 441 565 \n536 423 334 326 292 259 248 239 178 168 155 141 130  82  74  65  65  63  56  53 \n428 181 679 440 189 118 507 431 442 445 497 444 193 426 511 439 178 436 508 135 \n 52  51  49  46  39  36  35  32  30  29  29  26  25  25  23  22  20  20  20  19 \n 68 177 427 435 175 225 120 271  67 173 430 494 524 176 429 493 496 502 566 117 \n 17  14  14  13  12  12  11  11  11  10  10  10  10   9   9   9   9   9   9   8 \n136 161 194 332 504 112 174 222 228 675 115 158 270 505 670 114 133 159 227 267 \n  8   8   8   8   8   7   7   6   6   6   5   5   5   5   5   4   4   4   4   4 \n359  41 470 564 162 179 329 447 492 519 535 671 119 130 146 163 168 195 224 226 \n  4   4   4   4   3   3   3   3   3   3   3   3   2   2   2   2   2   2   2   2 \n251 263 273 326 453 516 520 528 538 569 575 672 676 677 683 691 793 107 113 125 \n  2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   1   1   1 \n137 138 144 180 182 196 216 254 259 269 333 355 358 374  40 420 454 458 468 471 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n495 498 499 523 549  55 559 658 666 673 678 686 688 689 731 744 760 795  82 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n\n# drop too small clusters: those whose size is less than 15\nlargeClFB135 &lt;- which(table(originalFB135) &gt;= 50)\nlargeOrigFB135 &lt;- originalFB135[(originalFB135 %in% names(largeClFB135)),\n                                drop = TRUE]\n\nlargeOrigFB135 &lt;- toClustersList(largeOrigFB135)\n\n\n\nCalculate GDI for each cluster in E13.5\n\nprint(\"Length larger clusters\")\nvapply(largeOrigFB135, length, integer(1))\n\nresDataFB135 &lt;- lapply(seq_along(largeOrigFB135), FUN = getClData,\n                       objCOTAN = fb135Obj, clList = largeOrigFB135)\n\n\nclDataFB135 &lt;- data.table::rbindlist(resDataFB135)\nclDataFB135 &lt;- column_to_rownames(clDataFB135, var = \"cluster\")\n\n\nsaveRDS(clDataFB135,\n        file = file.path(\"Data/MouseCortexFromLoom/ClustersGDI/\", \"e13.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n\n\nclDataFB135 &lt;- readRDS(\"Data/MouseCortexFromLoom/ClustersGDI/e13.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\")\nclDataFB135[order(clDataFB135$size, decreasing = T),]\n\n    size isUniform fractionAbove X1stPercentile\n432  536     FALSE  3.770380e-02       1.484698\n186  423     FALSE  4.307131e-02       1.609718\n187  334     FALSE  1.303433e-02       1.423035\n434  326      TRUE  4.379562e-03       1.376828\n184  292     FALSE  1.170610e-02       1.414304\n437  259      TRUE  4.410239e-03       1.364885\n510  248      TRUE  9.610563e-03       1.397472\n509  239      TRUE  4.471580e-03       1.373229\n183  178     FALSE  1.458630e-02       1.427795\n185  168     FALSE  1.630482e-02       1.428907\n438  155      TRUE  1.080901e-03       1.320271\n433  141      TRUE  4.997501e-03       1.363220\n525  130      TRUE  1.488711e-03       1.329041\n443   82      TRUE  2.276508e-03       1.344695\n446   74      TRUE  8.701706e-05       1.300874\n192   65      TRUE  2.597852e-04       1.310808\n568   65      TRUE  0.000000e+00       1.233130\n188   63      TRUE  1.147802e-03       1.314789\n441   56      TRUE  0.000000e+00       1.277716\n565   53      TRUE  0.000000e+00       1.232690\n428   52      TRUE  0.000000e+00       1.263561\n181   51      TRUE  3.013116e-03       1.330148\n\n\nSo we can use the following clusters (at least 100 cells - cell number in the parenthesis - and GDI lower than 1.5):\n\ncl432 (n.cells 536),\ncl187 (334),\ncl434 (326),\ncl184 (292),\ncl437 (259),\ncl510 (248)"
  },
  {
    "objectID": "ForebrainLaManno2021ClustersGDI.html#forebrain-dorsal-e15.0",
    "href": "ForebrainLaManno2021ClustersGDI.html#forebrain-dorsal-e15.0",
    "title": "Forebrain La Manno 2021 Clusters GDI",
    "section": "Forebrain Dorsal E15.0",
    "text": "Forebrain Dorsal E15.0\n\nLoad dataset\n\nfb150Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e15.0_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(fb150Obj, datasetTags()[[\"cond\"]])\n\nlogThis(sampleCondition)\n\nallClust &lt;- getClusterizations(fb150Obj)\n\nlogThis(\"\")\nlogThis(paste(\"Number of cells:\", getNumCells(fb150Obj)))\n\nlogThis(\"\")\nlogThis(\"Available clusterizations:\")\nlogThis(paste0(allClust, collapse = \", \"))\n\nclSizes &lt;- vapply(allClust, function(x) { nlevels(getClusters(fb150Obj, x))}, integer(1L))\nclSizes\n\n            split             merge            seurat   seurat.high.res \n               57                50                21                40 \noriginal.clusters original.subclass    original.class           monocle \n              229                47                14                11 \n monocle.high.res       cell.typist \n               46                13 \n\nlogThis(paste(names(clSizes), clSizes, sep = \": \", collapse = \", \"))\n\n\n\nExtract original cluster\n\noriginalFB150 &lt;- getClusters(fb150Obj, clName = \"original.clusters\")\n\nnlevels(originalFB150)\n\n[1] 229\n\nsort(table(originalFB150), decreasing = TRUE)\n\noriginalFB150\n525 432 511 509 510 508 184 428 434 437 507 568 433 504 426 185 187 505 516 565 \n826 586 540 402 402 397 322 318 273 258 183 181 176 174 173 172 163 147 137 133 \n427 524 679 439 436 493 498 446 438 441 183 497 192 506 188 443 502 494 574 575 \n120 108 105 102  93  93  79  66  63  60  54  51  46  46  43  42  42  41  41  41 \n492 118 177 519 526 566 182 181 501 573 193 429 445 499 518 440 560 178 442 514 \n 38  36  31  31  28  28  27  26  24  24  23  23  23  23  22  21  20  19  19  19 \n523 186 569 444 557 271 452 495 520 535 542 677 527 431 135 455 458 496 512 676 \n 19  18  18  17  16  15  15  15  15  14  14  14  13  12  11  11  11  11  11  11 \n120 159 517 145 161 174 179 558 227 332 457 470 503 739 117 175 176 189 559 564 \n 10  10  10   9   9   9   9   9   8   8   8   8   8   8   7   7   7   7   7   7 \n180 225 538 549 561 671  68 695 738 747 136 144 222 226 273 500 536 678 112 114 \n  6   6   6   6   6   6   6   6   6   6   5   5   5   5   5   5   5   5   4   4 \n115 157 267 328 453 456 534 550 570 686 731 737 133 146 147 158 172 173 270 326 \n  4   4   4   4   4   4   4   4   4   4   4   4   3   3   3   3   3   3   3   3 \n430 513 515 528 533 539 544 571 674 675 732 113 125 130 143 152 162 163 195 259 \n  3   3   3   3   3   3   3   3   3   3   3   2   2   2   2   2   2   2   2   2 \n435 451 454 531 543 548 552 554 562 670 689 740 119 122 134 137 142 151 156 191 \n  2   2   2   2   2   2   2   2   2   2   2   2   1   1   1   1   1   1   1   1 \n194 223 224 228 234 240 262 268 269 275 286 296 308 314 329 333 359  41 448 450 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n468 529 530 532 537 540 553 567 572 601 614 634 647 649  67 672 680 681 684 693 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n696 726 734 749 750 751 760 771  88 \n  1   1   1   1   1   1   1   1   1 \n\n# drop too small clusters: those whose size is less than 15\nlargeClFB150 &lt;- which(table(originalFB150) &gt;= 50)\nlargeOrigFB150 &lt;- originalFB150[(originalFB150 %in% names(largeClFB150)),\n                                drop = TRUE]\n\nlargeOrigFB150 &lt;- toClustersList(largeOrigFB150)\n\n\n\nCalculate GDI for each cluster\n\nprint(\"Length larger clusters\")\nvapply(largeOrigFB150, length, integer(1))\n\nresDataFB150 &lt;- lapply(seq_along(largeOrigFB150), FUN = getClData,\n                       objCOTAN = fb150Obj, clList = largeOrigFB150)\n\n\nclDataFB150 &lt;- data.table::rbindlist(resDataFB150)\nclDataFB150 &lt;- column_to_rownames(clDataFB150, var = \"cluster\")\n\n\nsaveRDS(clDataFB150,\n        file = file.path(\"Data/MouseCortexFromLoom/ClustersGDI/\", \"e15.0_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n\n\nclDataFB150 &lt;- readRDS(\"Data/MouseCortexFromLoom/ClustersGDI/e15.0_ForebrainDorsal_GDI_of_original_clusterization.RDS\")\n\nclDataFB150[order(clDataFB150$size,decreasing = T),]\n\n    size isUniform fractionAbove X1stPercentile\n525  826     FALSE  0.3016472479       2.352178\n432  586     FALSE  0.0254880232       1.459100\n511  540     FALSE  0.1510725315       1.913734\n509  402      TRUE  0.0067395414       1.381121\n510  402     FALSE  0.0152561426       1.420390\n508  397      TRUE  0.0046488461       1.370125\n184  322     FALSE  0.0268745853       1.498304\n428  318      TRUE  0.0012377332       1.342660\n434  273      TRUE  0.0004509380       1.329601\n437  258      TRUE  0.0025343004       1.342904\n507  183      TRUE  0.0094123856       1.393946\n568  181      TRUE  0.0000000000       1.305810\n433  176      TRUE  0.0011034483       1.336980\n504  174      TRUE  0.0039181957       1.361682\n426  173      TRUE  0.0004750143       1.330498\n185  172     FALSE  0.0101354303       1.400158\n187  163      TRUE  0.0054207120       1.359734\n505  147      TRUE  0.0001728011       1.293017\n516  137      TRUE  0.0014539856       1.328445\n565  133      TRUE  0.0073304826       1.385537\n427  120      TRUE  0.0000000000       1.274314\n524  108     FALSE  0.0187910535       1.439259\n679  105      TRUE  0.0023903726       1.339173\n439  102      TRUE  0.0000000000       1.267754\n436   93      TRUE  0.0000000000       1.253222\n493   93      TRUE  0.0007476325       1.324079\n498   79      TRUE  0.0010643016       1.321372\n446   66      TRUE  0.0000000000       1.296987\n438   63      TRUE  0.0000000000       1.265541\n441   60      TRUE  0.0000000000       1.277497\n183   54      TRUE  0.0002659810       1.305260\n497   51      TRUE  0.0003751993       1.301691\n\n\nSo we can use the following clusters (at least 100 cells - cell number in the parenthesis - and GDI lower than 1.5):\n\ncl432 (586),\ncl509 (402),\ncl510 (402),\ncl508 (397),\ncl428 (318),\ncl434 (273),\ncl437 (258)"
  },
  {
    "objectID": "ForebrainLaManno2021ClustersGDI.html#forebrain-dorsal-e17.5",
    "href": "ForebrainLaManno2021ClustersGDI.html#forebrain-dorsal-e17.5",
    "title": "Forebrain La Manno 2021 Clusters GDI",
    "section": "Forebrain Dorsal E17.5",
    "text": "Forebrain Dorsal E17.5\n\nLoad dataset\n\nfb175Obj &lt;- readRDS(file = file.path(\"Data/MouseCortexFromLoom/\", \"e17.5_ForebrainDorsal.cotan.RDS\"))\n\nsampleCondition &lt;- getMetadataElement(fb175Obj, datasetTags()[[\"cond\"]])\n\nlogThis(sampleCondition)\n\nallClust &lt;- getClusterizations(fb175Obj)\n\nlogThis(\"\")\nlogThis(paste(\"Number of cells:\", getNumCells(fb175Obj)))\n\nlogThis(\"\")\nlogThis(\"Available clusterizations:\")\nlogThis(paste0(allClust, collapse = \", \"))\n\nclSizes &lt;- vapply(allClust, function(x) { nlevels(getClusters(fb175Obj, x))}, integer(1L))\nclSizes\n\n            split             merge original.clusters original.subclass \n               25                19               136                27 \n   original.class       cell.typist            seurat   seurat.high.res \n                9                10                19                21 \n          monocle  monocle.high.res \n                7                24 \n\nlogThis(paste(names(clSizes), clSizes, sep = \": \", collapse = \", \"))\n\n\n\nExtract original cluster\n\noriginalFB175 &lt;- getClusters(fb175Obj, clName = \"original.clusters\")\n\nnlevels(originalFB175)\n\n[1] 136\n\nsort(table(originalFB175), decreasing = TRUE)\n\noriginalFB175\n516 505 515 427 504 514 428 493 506 513 508 517 523 177 436 498 512 507 524 172 \n297 203 159 147 135 119 110  80  72  69  58  58  55  38  38  38  37  36  29  28 \n568 439 492 495 503 574 575 179 426 526 521 441 433 442 494 497 502 178 501 565 \n 27  26  23  22  22  22  20  18  17  17  16  15  13  13  13  13  13  12  12  12 \n678 446 518 677 180 536 573 135 159 174 309 564 225 452 453 522 525 676 679 161 \n 11  10  10  10   9   8   8   7   7   7   7   7   6   6   6   6   6   6   6   5 \n176 184 277 437 458 520 535 539 144 175 182 187 457 499 519 537 569 117 185 262 \n  5   5   5   5   5   5   5   5   4   4   4   4   4   4   4   4   4   3   3   3 \n355 359 425 509 511 689 142 158 189 307 315 429 432 434 443 448 538 543 690 737 \n  3   3   3   3   3   3   2   2   2   2   2   2   2   2   2   2   2   2   2   2 \n115 120 124 132 136 151 160 173 183 188 227 245 261 273 286 298 306 308 310 316 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n317 438 440 455 500 510 557 560 562 570 572 671 673 688 740 796 \n  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 \n\n# drop too small clusters: those whose size is less than 15\nlargeClFB175 &lt;- which(table(originalFB175) &gt;= 50)\nlargeOrigFB175 &lt;- originalFB175[(originalFB175 %in% names(largeClFB175)),\n                                drop = TRUE]\n\nlargeOrigFB175 &lt;- toClustersList(largeOrigFB175)\n\n\n\nCalculate GDI for each cluster\n\nprint(\"Length larger clusters\")\nvapply(largeOrigFB175, length, integer(1))\n\nresDataFB175 &lt;- lapply(seq_along(largeOrigFB175), FUN = getClData,\n                       objCOTAN = fb175Obj, clList = largeOrigFB175)\n\n\nclDataFB175 &lt;- data.table::rbindlist(resDataFB175)\nclDataFB175 &lt;- column_to_rownames(clDataFB175, var = \"cluster\")\n\n\nsaveRDS(clDataFB175,\n        file = file.path(\"Data/MouseCortexFromLoom/ClustersGDI/\", \"e17.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\"))\n\n\nclDataFB175 &lt;- readRDS(\"Data/MouseCortexFromLoom/ClustersGDI/e17.5_ForebrainDorsal_GDI_of_original_clusterization.RDS\")\nclDataFB175[order(clDataFB175$size,decreasing = T),]\n\n    size isUniform fractionAbove X1stPercentile\n516  297      TRUE  5.787234e-03       1.380640\n505  203      TRUE  7.261505e-04       1.330011\n515  159     FALSE  8.098331e-02       1.736907\n427  147      TRUE  0.000000e+00       1.275390\n504  135      TRUE  0.000000e+00       1.265854\n514  119     FALSE  3.665886e-02       1.517923\n428  110      TRUE  0.000000e+00       1.263149\n493   80      TRUE  1.512224e-03       1.331605\n506   72      TRUE  8.827684e-05       1.285308\n513   69     FALSE  7.475535e-02       1.649405\n508   58      TRUE  0.000000e+00       1.255277\n517   58      TRUE  8.074475e-03       1.383811\n523   55     FALSE  1.395007e-02       1.416125\n\n\nSo we can use the following clusters (at least 100 cells - cell number in the parenthesis - and GDI lower than 1.5):\n\ncl516 (297),\ncl505 (203)\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] COTAN_2.3.0       data.table_1.14.8 zeallot_0.1.0     rlang_1.1.1      \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3        rstudioapi_0.15.0        \n  [3] jsonlite_1.8.7            shape_1.4.6              \n  [5] umap_0.2.10.0             magrittr_2.0.3           \n  [7] spatstat.utils_3.0-3      rmarkdown_2.24           \n  [9] GlobalOptions_0.1.2       vctrs_0.6.3              \n [11] ROCR_1.0-11               spatstat.explore_3.2-1   \n [13] DelayedMatrixStats_1.22.5 askpass_1.2.0            \n [15] htmltools_0.5.5           S4Arrays_1.2.0           \n [17] sctransform_0.4.1         parallelly_1.36.0        \n [19] KernSmooth_2.23-22        htmlwidgets_1.6.2        \n [21] ica_1.0-3                 plyr_1.8.8               \n [23] plotly_4.10.2             zoo_1.8-12               \n [25] igraph_1.5.1              mime_0.12                \n [27] lifecycle_1.0.3           iterators_1.0.14         \n [29] pkgconfig_2.0.3           rsvd_1.0.5               \n [31] Matrix_1.6-2              R6_2.5.1                 \n [33] fastmap_1.1.1             MatrixGenerics_1.12.3    \n [35] fitdistrplus_1.1-11       future_1.33.0            \n [37] shiny_1.7.5               clue_0.3-64              \n [39] digest_0.6.33             colorspace_2.1-0         \n [41] patchwork_1.1.2           S4Vectors_0.38.1         \n [43] tensor_1.5                Seurat_5.0.0             \n [45] dqrng_0.3.0               RSpectra_0.16-1          \n [47] irlba_2.3.5.1             beachmat_2.16.0          \n [49] PCAtools_2.14.0           progressr_0.14.0         \n [51] RcppZiggurat_0.1.6        spatstat.sparse_3.0-2    \n [53] fansi_1.0.4               polyclip_1.10-4          \n [55] httr_1.4.6                abind_1.4-5              \n [57] compiler_4.3.2            withr_2.5.0              \n [59] doParallel_1.0.17         BiocParallel_1.34.2      \n [61] viridis_0.6.4             fastDummies_1.7.3        \n [63] dendextend_1.17.1         MASS_7.3-60              \n [65] openssl_2.1.0             DelayedArray_0.26.7      \n [67] rjson_0.2.21              tools_4.3.2              \n [69] lmtest_0.9-40             httpuv_1.6.11            \n [71] future.apply_1.11.0       goftest_1.2-3            \n [73] glue_1.6.2                nlme_3.1-163             \n [75] promises_1.2.0.1          grid_4.3.2               \n [77] Rtsne_0.16                cluster_2.1.4            \n [79] reshape2_1.4.4            generics_0.1.3           \n [81] spatstat.data_3.0-1       gtable_0.3.3             \n [83] tidyr_1.3.0               BiocSingular_1.16.0      \n [85] ScaledMatrix_1.8.1        sp_2.1-1                 \n [87] utf8_1.2.3                spatstat.geom_3.2-4      \n [89] BiocGenerics_0.46.0       RcppAnnoy_0.0.21         \n [91] ggrepel_0.9.3             RANN_2.6.1               \n [93] foreach_1.5.2             pillar_1.9.0             \n [95] stringr_1.5.0             spam_2.10-0              \n [97] RcppHNSW_0.5.0            later_1.3.1              \n [99] circlize_0.4.15           splines_4.3.2            \n[101] dplyr_1.1.2               lattice_0.22-5           \n[103] deldir_1.0-9              survival_3.5-7           \n[105] tidyselect_1.2.0          ComplexHeatmap_2.16.0    \n[107] miniUI_0.1.1.1            pbapply_1.7-2            \n[109] knitr_1.43                gridExtra_2.3            \n[111] IRanges_2.34.1            scattermore_1.2          \n[113] stats4_4.3.2              xfun_0.39                \n[115] matrixStats_1.1.0         stringi_1.8.1            \n[117] lazyeval_0.2.2            yaml_2.3.7               \n[119] evaluate_0.21             codetools_0.2-19         \n[121] tibble_3.2.1              cli_3.6.1                \n[123] uwot_0.1.16               RcppParallel_5.1.7       \n[125] xtable_1.8-4              reticulate_1.34.0        \n[127] munsell_0.5.0             Rcpp_1.0.11              \n[129] spatstat.random_3.2-1     globals_0.16.2           \n[131] png_0.1-8                 parallel_4.3.2           \n[133] Rfast_2.1.0               ellipsis_0.3.2           \n[135] assertthat_0.2.1          ggplot2_3.4.2            \n[137] dotCall64_1.1-0           parallelDist_0.2.6       \n[139] sparseMatrixStats_1.12.2  listenv_0.9.0            \n[141] ggthemes_4.2.4            viridisLite_0.4.2        \n[143] scales_1.2.1              ggridges_0.5.4           \n[145] SeuratObject_5.0.0        leiden_0.4.3             \n[147] purrr_1.0.1               crayon_1.5.2             \n[149] GetoptLong_1.0.5          cowplot_1.1.1"
  },
  {
    "objectID": "GDI_vairance.html",
    "href": "GDI_vairance.html",
    "title": "GDI and variance",
    "section": "",
    "text": "library(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(gghalves)\nlibrary(ggstatsplot)\nlibrary(\"gridExtra\")\nlibrary(cowplot)\nlibrary(Matrix)\nlibrary(ggstance)\nlibrary(scales)\n#library(COTAN)\n\n#Define colors\ncolors.methods &lt;- c(\"#ed5537\",\"#a3505c\",\"#95ba8f\",\"#B3CDE3\",\"#8856A7\" )\n\n\nlayer.genes &lt;- read.csv(\"CoexData/aam8999_tables6.csv\", header = T,skip = 1)\n\nHK &lt;- read.csv(\"CoexData/MouseconstitutiveGenesCerebralCortex.csv\")\n## From: https://housekeeping.unicamp.br/\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"=  c(sample(unique(HK$Gene.Symbol),size = 40),\n    \"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\", \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\",\"Tbp\"),\n  \n  \"layers\" = unique(c(layer.genes[str_detect(layer.genes$Cluster,pattern = \"CTX PyrL5|CTX PyrL6\"),\"Gene\"],\n    \n      \"Rasgrf2\", \"Slc17a6\", \"Satb2\", \"Sema3c\",\"Thsd7a\", \"Rorb\", \"Cux2\", \"Pvrl3\",\"Rasgrf2\",\"Syt6\", \"Grik3\", \"Foxp2\", \"Tle4\", \"Htr1f\",\"Rxfp1\",\n      #others\n    #  \"Pax3\", \"Mki67\",\"Lhx6\",\"Trdn\", \"Cpa6\",\"Adarb2\",\"Pbx3\",\"Trp73\", \"Reln\"))\n    \"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Trp73\"))\n    #sample(unique(unlist(str_split(layer.genes$supertype.markers.combo,pattern = \",\"))),size = 50)\n    #c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)\n\nInDir &lt;- \"CoexData/\""
  },
  {
    "objectID": "GDI_vairance.html#preamble",
    "href": "GDI_vairance.html#preamble",
    "title": "GDI and variance",
    "section": "",
    "text": "library(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(gghalves)\nlibrary(ggstatsplot)\nlibrary(\"gridExtra\")\nlibrary(cowplot)\nlibrary(Matrix)\nlibrary(ggstance)\nlibrary(scales)\n#library(COTAN)\n\n#Define colors\ncolors.methods &lt;- c(\"#ed5537\",\"#a3505c\",\"#95ba8f\",\"#B3CDE3\",\"#8856A7\" )\n\n\nlayer.genes &lt;- read.csv(\"CoexData/aam8999_tables6.csv\", header = T,skip = 1)\n\nHK &lt;- read.csv(\"CoexData/MouseconstitutiveGenesCerebralCortex.csv\")\n## From: https://housekeeping.unicamp.br/\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"=  c(sample(unique(HK$Gene.Symbol),size = 40),\n    \"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\", \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\",\"Tbp\"),\n  \n  \"layers\" = unique(c(layer.genes[str_detect(layer.genes$Cluster,pattern = \"CTX PyrL5|CTX PyrL6\"),\"Gene\"],\n    \n      \"Rasgrf2\", \"Slc17a6\", \"Satb2\", \"Sema3c\",\"Thsd7a\", \"Rorb\", \"Cux2\", \"Pvrl3\",\"Rasgrf2\",\"Syt6\", \"Grik3\", \"Foxp2\", \"Tle4\", \"Htr1f\",\"Rxfp1\",\n      #others\n    #  \"Pax3\", \"Mki67\",\"Lhx6\",\"Trdn\", \"Cpa6\",\"Adarb2\",\"Pbx3\",\"Trp73\", \"Reln\"))\n    \"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Trp73\"))\n    #sample(unique(unlist(str_split(layer.genes$supertype.markers.combo,pattern = \",\"))),size = 50)\n    #c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)\n\nInDir &lt;- \"CoexData/\""
  },
  {
    "objectID": "GDI_vairance.html#import-data",
    "href": "GDI_vairance.html#import-data",
    "title": "GDI and variance",
    "section": "Import data",
    "text": "Import data\nImport COTAN GDI and Seurat variances data from files\n\ntable.tot.hk &lt;- NA\ntable.tot.neural &lt;- NA\nfor (file in list.files(InDir,pattern = \"Variance\")) {\n  print(file)\n  data &lt;- read.csv(paste0(InDir,file),row.names = 1)\n  #data &lt;- as.data.frame(as.matrix(data))\n  if(str_detect(file,pattern = \"GDI\")){\n    code &lt;- \"COTAN GDI\"\n    data$genes &lt;- rownames(data)\n    #data &lt;- data[,c(\"genes\",\"GDI\",\"sum.raw.norm\")]\n    data &lt;- data[,c(\"genes\",\"GDI\",\"sum.raw.norm\")]\n    colnames(data) &lt;- c(\"genes\",\"GDI_Variance\",\"sum.raw.norm\")\n    #data$GDI_Variance &lt;- scale(data$GDI_Variance,center = T)\n    }else if(str_detect(file,pattern = \"SeuratSCT\")){\n    code &lt;- \"Seurat SCT variance\"\n    data$genes &lt;- rownames(data)\n    #data &lt;- data[,c(\"genes\",\"residual_variance\")]\n    data &lt;- data[,c(\"genes\",\"residual_variance\")]\n    colnames(data) &lt;- c(\"genes\",\"GDI_Variance\")\n    data$sum.raw.norm &lt;- NA\n    #data$GDI_Variance &lt;- scale(data$GDI_Variance,center = T)\n  }else if(str_detect(file,pattern = \"Seurat_\")){\n    code &lt;- \"Seurat variance\"\n    data$genes &lt;- rownames(data)\n    #data &lt;- data[,c(\"genes\",\"variance.standardized\")]\n    data &lt;- data[,c(\"genes\",\"variance.standardized\")]\n    \n    colnames(data) &lt;- c(\"genes\",\"GDI_Variance\")\n    data$sum.raw.norm &lt;- NA\n    #data$GDI_Variance &lt;- scale(data$GDI_Variance,center = T)\n    #print(\"ok\")\n  }\n  \n  data$Method &lt;- code\n  file &lt;- str_remove(file,pattern = \".csv\")\n  file &lt;- str_flatten(str_split(file,\n                              pattern = \"_\",simplify = T)[,c(3,4)],\n                              collapse = \"_\")\n  file &lt;- str_remove(file,pattern = \"genes\")\n  data$Dataset &lt;-   file\n  table.hk &lt;- data[rownames(data) %in% genesList$hk,]\n  table.tot.hk &lt;- rbind(table.tot.hk,table.hk)\n  #table.tot.hk &lt;- table.tot.hk[! table.tot.hk$Gene1 == table.tot.hk$Gene2,]\n \n  #Not hk\n  table.neural &lt;- data[rownames(data) %in% c(genesList$NPGs,genesList$PNGs,genesList$layers),]\n  \n\n  table.tot.neural &lt;- rbind(table.tot.neural,table.neural)\n  #table.tot.neural &lt;- table.tot.neural[! table.tot.neural$Gene1 == table.tot.neural$Gene2,]\n}\n\n[1] \"Variance_GDI_genesCorticalCells_GSM2861511_E135.csv\"\n[1] \"Variance_GDI_genesCorticalCells_GSM2861514_E175.csv\"\n[1] \"Variance_GDI_genese13.5_ForebrainDorsal.csv\"\n[1] \"Variance_GDI_genese15.0_ForebrainDorsal.csv\"\n[1] \"Variance_GDI_genese17.5_ForebrainDorsal.csv\"\n[1] \"Variance_GDI_genesMouseCortex_E14.5.csv\"\n[1] \"Variance_Seurat_genesCorticalCells_GSM2861511_E135.csv\"\n[1] \"Variance_Seurat_genesCorticalCells_GSM2861514_E175.csv\"\n[1] \"Variance_Seurat_genese13.5_ForebrainDorsal.csv\"\n[1] \"Variance_Seurat_genese15.0_ForebrainDorsal.csv\"\n[1] \"Variance_Seurat_genese17.5_ForebrainDorsal.csv\"\n[1] \"Variance_Seurat_genesMouseCortex_E14.5.csv\"\n[1] \"Variance_SeuratSCT_genesCorticalCells_GSM2861511_E135.csv\"\n[1] \"Variance_SeuratSCT_genesCorticalCells_GSM2861514_E175.csv\"\n[1] \"Variance_SeuratSCT_genese13.5_ForebrainDorsal.csv\"\n[1] \"Variance_SeuratSCT_genese15.0_ForebrainDorsal.csv\"\n[1] \"Variance_SeuratSCT_genese17.5_ForebrainDorsal.csv\"\n[1] \"Variance_SeuratSCT_genesMouseCortex_E14.5.csv\"\n\ntable.tot.neural$Type &lt;- \"Neural\"\ntable.tot.hk$Type &lt;- \"Constitutive\"\n\ntable.tot.neural &lt;- table.tot.neural[2:nrow(table.tot.neural),]\ntable.tot.hk &lt;- table.tot.hk[2:nrow(table.tot.hk),]\n\n\n\n\n\ntable.tot &lt;- rbind(table.tot.hk,table.tot.neural)\n\ntable.tot$Method_Type &lt;- paste0(table.tot$Method,\":\",table.tot$Type)\n\nhead(table.tot)\n\n        genes GDI_Variance sum.raw.norm    Method                  Dataset\nActb     Actb     0.894289     9.921265 COTAN GDI CorticalCells_GSM2861511\nAmacr   Amacr     1.096773     3.191098 COTAN GDI CorticalCells_GSM2861511\nAmfr     Amfr     1.314979     4.792456 COTAN GDI CorticalCells_GSM2861511\nApmap   Apmap     1.292071     4.029402 COTAN GDI CorticalCells_GSM2861511\nBrd1     Brd1     1.367249     4.936363 COTAN GDI CorticalCells_GSM2861511\nCactin Cactin     1.215138     4.624020 COTAN GDI CorticalCells_GSM2861511\n               Type            Method_Type\nActb   Constitutive COTAN GDI:Constitutive\nAmacr  Constitutive COTAN GDI:Constitutive\nAmfr   Constitutive COTAN GDI:Constitutive\nApmap  Constitutive COTAN GDI:Constitutive\nBrd1   Constitutive COTAN GDI:Constitutive\nCactin Constitutive COTAN GDI:Constitutive\n\n\n\nggplot(table.tot,aes(x=(GDI_Variance), fill=Method_Type))+geom_histogram(bins = 50, alpha=0.7,position = \"dodge\")+ facet_grid(.~ Method,scales = \"free\")\n\n\nggplot(table.tot,aes(x=(GDI_Variance), fill=Method_Type))+geom_density(alpha=0.5)+ facet_grid(.~ Method)+xlim(-3,5)\n\n\nggplot(table.tot,aes(y=log(abs(GDI_Variance)),x=Method_Type, fill=Method_Type))+geom_boxplot()+ facet_grid(.~ Method,scales = \"free\")"
  },
  {
    "objectID": "NonCT_clusters.html",
    "href": "NonCT_clusters.html",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "",
    "text": "library(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(parallelDist)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(caret)\ntheme_set(theme_bw())\nlibrary(COTAN)\nlibrary(stringr)\nlibrary(nnet)\n\noptions(parallelly.fork.enable = TRUE)\n\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\n\n#setLoggingLevel(2)\n#setLoggingFile(file.path(inDir, \"MixingClustersGDI_ForebrainDorsal.log\"))\n\noutDir &lt;- file.path(\"Data/MouseCortexFromLoom/NotCTSingleClusters/\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}\n\n\nresult.df &lt;- data.frame()\n\nIn this part we want to show that if COTAN detects more division for cluster defined by other methods, this division is consitent and real. To test it we will use a simple logistic regression."
  },
  {
    "objectID": "NonCT_clusters.html#preamble",
    "href": "NonCT_clusters.html#preamble",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "",
    "text": "library(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(parallelDist)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(caret)\ntheme_set(theme_bw())\nlibrary(COTAN)\nlibrary(stringr)\nlibrary(nnet)\n\noptions(parallelly.fork.enable = TRUE)\n\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\n\n#setLoggingLevel(2)\n#setLoggingFile(file.path(inDir, \"MixingClustersGDI_ForebrainDorsal.log\"))\n\noutDir &lt;- file.path(\"Data/MouseCortexFromLoom/NotCTSingleClusters/\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}\n\n\nresult.df &lt;- data.frame()\n\nIn this part we want to show that if COTAN detects more division for cluster defined by other methods, this division is consitent and real. To test it we will use a simple logistic regression."
  },
  {
    "objectID": "NonCT_clusters.html#cluster-525-e15.0",
    "href": "NonCT_clusters.html#cluster-525-e15.0",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Cluster 525 e15.0",
    "text": "Cluster 525 e15.0\n\ne15.0 &lt;- readRDS(paste0(inDir,\"e15.0_ForebrainDorsal.cotan.RDS\"))\n\ncells &lt;- getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]][getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]] == \"525\"]\n\ncells &lt;-names(cells)\n\nwrite.csv(getRawData(e15.0)[,cells],paste0(outDir,\"cl525/RawDataCL525.csv\"))\n\ncl525 &lt;-  automaticCOTANObjectCreation(raw = getRawData(e15.0)[,cells],\n                                       GEO = \"Loom\",\n                                       sequencingMethod = \"10X\",\n                                       sampleCondition = \"cl525\",\n                                       cores = 10,saveObj = T,\n                                       outDir = \"Data/MouseCortexFromLoom/NotCTSingleClusters/\",\n                                       calcCoex = T)\n\n\n\n  OriginalCluster CellNumber COTANClusterNumber Accuracy        Clusters\n1      Cl525E15.0        826                  3     &lt;NA&gt; 316 - 176 - 334\n\n\n\ntable(getClusterizationData(cl525)[1])\n\nclusters\n  1   2   3 \n316 176 334 \n\n\n\ncl525GDI &lt;- calculateGDI(cl525)\n\nsubsetGDICl525 &lt;- cl525GDI[cl525GDI$sum.raw.norm &gt; 7,]\ntop.GDI.genes &lt;- rownames(subsetGDICl525[order(subsetGDICl525$GDI,decreasing = T),])[1:50]\n\nGDIPlot(cl525,genes = \"\",GDIIn = cl525GDI)\n\n\n\n\n\nlist.cl.CT &lt;- cellsUniformClustering(cl525, GDIThreshold = 1.43, cores = 10L,\n                         saveObj = TRUE, outDir = outDir)\n\ncl525 &lt;- addClusterization(cl525, clName = \"split\",\n                              clusters = list.cl.CT$clusters,\n                              coexDF = list.cl.CT$coex, override = TRUE)\n\ntable(list.cl.CT$clusters)\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cl525, clusters = list.cl.CT$clusters,\n                            GDIThreshold = 1.43, batchSize = 4L, cores = 10L,\n                            saveObj = TRUE, outDir = outDir)\n\ncl525 &lt;- addClusterization(cl525, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\nsaveRDS(cl525,paste0(outDir,\"cl525.cotan.RDS\"))\n\ntable(str_split(names(mergedClusters),pattern = \"_\",simplify = T)[,1],mergedClusters)\n\nSo there isn’t a perfect separation due to the cell bar code.\n\ncl525ClsMarkers &lt;- findClustersMarkers(cl525,n = 200,method = \"BH\")\n\nhead(cl525ClsMarkers)\n\n  CL   Gene      Score      adjPVal        DEA IsMarker  logFoldCh\n1  1  Rps12 -0.4819441 1.557394e-39 -0.4649886        0 -0.6040561\n2  1 Gm2000 -0.4778070 4.048141e-39 -0.4860794        0 -0.6592709\n3  1  Uqcrq -0.4527215 4.377038e-35 -0.4532090        0 -0.6017733\n4  1  Atp5e -0.4512791 5.642611e-35 -0.4650357        0 -0.6855895\n5  1  Rpl12 -0.4431532 9.247019e-34 -0.4412634        0 -0.5511911\n6  1  Rps25 -0.4312821 5.759166e-32 -0.3765521        0 -0.5430405\n\n\n\ndata &lt;- getNormalizedData(cl525)\n\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cl525)[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                                Mllt3     Cdh11     Flrt2      Fry     Gtdc1\n10X73_3_A_1:CCATCGTGAGGAGCx 10.812807  0.000000 10.525132 9.426573 10.119680\n10X73_3_A_1:GCCGACGAAGTCACx  9.954078  0.000000  9.260978 0.000000  9.954078\n10X74_4_A_1:GCATTGGAACACACx  9.585297 11.194680 10.683864 9.585297  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  0.000000  0.000000  8.845407 8.845407  8.845407\n10X74_4_A_1:TAGTGGTGGCGTTAx  0.000000  0.000000  0.000000 9.080972  0.000000\n10X73_3_A_1:CAGCACCTTTCATCx  9.889364  8.790854  9.483925 0.000000  9.483925\n                                 Ier2      Sla    Cadps   Kcnk10      Bcl2\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000 9.426573  0.00000 9.426573  9.426573\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000 9.260978  0.00000 0.000000 10.359527\n10X74_4_A_1:GCATTGGAACACACx  9.585297 9.585297 10.27841 0.000000  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  0.000000 8.845407  0.00000 0.000000  0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.179509 9.080972  0.00000 9.080972  9.080972\n10X73_3_A_1:CAGCACCTTTCATCx 10.177034 0.000000  0.00000 0.000000  8.790854\n                              Dlgap1    Atxn1    Foxp1    Frmd4b    Alcam\n10X73_3_A_1:CCATCGTGAGGAGCx 0.000000 9.426573 10.11968 11.035946  0.00000\n10X73_3_A_1:GCCGACGAAGTCACx 0.000000 0.000000  0.00000  9.260978 10.64720\n10X74_4_A_1:GCATTGGAACACACx 0.000000 0.000000 10.27841  0.000000  0.00000\n10X73_3_A_1:GGCGACACGTTCAGx 0.000000 0.000000 10.45473  8.845407  0.00000\n10X74_4_A_1:TAGTGGTGGCGTTAx 0.000000 9.774063  0.00000  9.080972 10.17951\n10X73_3_A_1:CAGCACCTTTCATCx 8.790854 9.483925  0.00000  0.000000 11.09330\n                               Gria1    Lrrtm3     Glp2r       Cpe     Ntrk2\n10X73_3_A_1:CCATCGTGAGGAGCx 0.000000  0.000000  0.000000  0.000000  9.426573\n10X73_3_A_1:GCCGACGAAGTCACx 0.000000  9.260978  0.000000  9.260978  9.260978\n10X74_4_A_1:GCATTGGAACACACx 9.585297  9.585297  0.000000  0.000000  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx 9.538482 10.637047  9.538482  0.000000  0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx 0.000000  9.774063 10.179509  9.080972 10.179509\n10X73_3_A_1:CAGCACCTTTCATCx 8.790854  0.000000  0.000000 10.400170  9.483925\n                               Mmp16     Cadm2    Lsamp   Nkain2      Pak3\n10X73_3_A_1:CCATCGTGAGGAGCx 9.426573 10.525132 10.52513 9.426573  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx 0.000000 10.359527  0.00000 9.954078  0.000000\n10X74_4_A_1:GCATTGGAACACACx 0.000000  9.585297  0.00000 0.000000  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx 8.845407 10.454730  0.00000 9.538482 10.924723\n10X74_4_A_1:TAGTGGTGGCGTTAx 9.774063  9.774063  0.00000 0.000000  9.774063\n10X73_3_A_1:CAGCACCTTTCATCx 8.790854  9.889364 10.40017 9.889364  9.483925\n                               Sorbs2     Rspo3      Dcc    Elavl4  Fam171b\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000  0.000000 0.000000 10.119680 9.426573\n10X73_3_A_1:GCCGACGAAGTCACx  9.260978  9.260978 9.954078  0.000000 9.260978\n10X74_4_A_1:GCATTGGAACACACx  0.000000 10.683864 9.585297  0.000000 0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  0.000000  8.845407 0.000000  8.845407 9.538482\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.774063  9.080972 9.080972  0.000000 9.080972\n10X73_3_A_1:CAGCACCTTTCATCx 10.582486  0.000000 8.790854  0.000000 0.000000\n                                Ptprs      Nav2 Prickle1    Srgap3      Pak7\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000  0.000000 0.000000  0.000000  9.426573\n10X73_3_A_1:GCCGACGAAGTCACx  9.954078  9.954078 0.000000  0.000000 10.359527\n10X74_4_A_1:GCATTGGAACACACx  9.585297  0.000000 0.000000 10.278410  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  0.000000  0.000000 0.000000  0.000000  9.538482\n10X74_4_A_1:TAGTGGTGGCGTTAx  0.000000  0.000000 0.000000  0.000000  0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 10.400170 10.582486 8.790854  9.483925  8.790854\n                                Akap6     Epha3      Dlg2    Bend6      Msra\n10X73_3_A_1:CCATCGTGAGGAGCx 10.812807  9.426573 10.525132 0.000000  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000  9.260978  9.260978 9.954078  9.954078\n10X74_4_A_1:GCATTGGAACACACx  9.585297  0.000000  0.000000 0.000000 10.278410\n10X73_3_A_1:GGCGACACGTTCAGx  0.000000  0.000000  0.000000 8.845407 10.791194\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.774063  9.774063  0.000000 9.080972  9.080972\n10X73_3_A_1:CAGCACCTTTCATCx  8.790854 10.582486  8.790854 8.790854  0.000000\n                               Cnih3   B3gat1     Kcnq5      Tle4   St3gal1\n10X73_3_A_1:CCATCGTGAGGAGCx 0.000000 0.000000  0.000000  0.000000 10.119680\n10X73_3_A_1:GCCGACGAAGTCACx 9.260978 9.260978  9.260978  9.954078  0.000000\n10X74_4_A_1:GCATTGGAACACACx 0.000000 0.000000  9.585297  0.000000 10.278410\n10X73_3_A_1:GGCGACACGTTCAGx 8.845407 0.000000  8.845407  0.000000  8.845407\n10X74_4_A_1:TAGTGGTGGCGTTAx 9.774063 0.000000  0.000000 10.179509  0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 8.790854 8.790854 10.400170  0.000000  8.790854\n                             Adamts18   Adamts3  Gm17750     Cnr1     Dscam\n10X73_3_A_1:CCATCGTGAGGAGCx  9.426573 10.119680 9.426573 0.000000  9.426573\n10X73_3_A_1:GCCGACGAAGTCACx 10.359527  0.000000 0.000000 0.000000  9.260978\n10X74_4_A_1:GCATTGGAACACACx  0.000000  0.000000 9.585297 0.000000  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx  0.000000  9.538482 9.943923 9.943923  0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.080972  9.080972 0.000000 0.000000 10.467181\n10X73_3_A_1:CAGCACCTTTCATCx  9.483925  0.000000 8.790854 8.790854  8.790854\n                              Runx1t1    Tshz3    Nr4a2       Tox    Cd200\n10X73_3_A_1:CCATCGTGAGGAGCx 11.824395 0.000000 0.000000  9.426573 9.426573\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000 9.260978 0.000000  0.000000 9.260978\n10X74_4_A_1:GCATTGGAACACACx 12.293284 0.000000 0.000000  9.585297 9.585297\n10X73_3_A_1:GGCGACACGTTCAGx  9.538482 9.943923 8.845407 10.637047 0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx  0.000000 0.000000 0.000000  0.000000 0.000000\n10X73_3_A_1:CAGCACCTTTCATCx  0.000000 0.000000 0.000000  8.790854 0.000000\n                              Clstn2      Fat3     Kcnh7     Tenm1  Fam155a\n10X73_3_A_1:CCATCGTGAGGAGCx  0.00000  0.000000 10.812807 10.119680 9.426573\n10X73_3_A_1:GCCGACGAAGTCACx 10.87034  0.000000  9.260978  0.000000 9.954078\n10X74_4_A_1:GCATTGGAACACACx 10.97154 10.278410  0.000000  0.000000 0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  0.00000  0.000000  0.000000  8.845407 0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.17951  9.080972  0.000000  0.000000 0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 10.58249 10.870162  0.000000  0.000000 8.790854\n                              Cacnb4    Usp29     Lmo3       Ntm    Atp1a3\n10X73_3_A_1:CCATCGTGAGGAGCx 0.000000 0.000000 0.000000  9.426573  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx 0.000000 9.260978 0.000000  0.000000  0.000000\n10X74_4_A_1:GCATTGGAACACACx 0.000000 9.585297 0.000000 11.887821 10.683864\n10X73_3_A_1:GGCGACACGTTCAGx 8.845407 0.000000 0.000000 10.637047  0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx 0.000000 0.000000 9.080972  0.000000  9.080972\n10X73_3_A_1:CAGCACCTTTCATCx 8.790854 9.889364 0.000000  9.483925  0.000000\n                                 Caly     Foxp2 Hist3h2ba    Edil3    Enox1\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000 11.035946 10.119680 0.000000 0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  9.260978 10.870340  9.260978 0.000000 9.260978\n10X74_4_A_1:GCATTGGAACACACx  0.000000  0.000000  9.585297 0.000000 0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  8.845407  0.000000 10.454730 0.000000 0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.179509  9.080972 10.467181 0.000000 0.000000\n10X73_3_A_1:CAGCACCTTTCATCx  0.000000 11.093302  9.483925 9.889364 9.889364\n                               Atrnl1    Dock3  Cacna1c  Tmem178b    Gria3\n10X73_3_A_1:CCATCGTGAGGAGCx  9.426573 9.426573 9.426573 10.525132 0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000 9.954078 0.000000  0.000000 9.260978\n10X74_4_A_1:GCATTGGAACACACx  0.000000 0.000000 9.585297 10.278410 0.000000\n10X73_3_A_1:GGCGACACGTTCAGx 10.231594 8.845407 9.943923  8.845407 0.000000\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.080972 0.000000 9.080972  9.080972 0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 10.177034 8.790854 8.790854  9.889364 9.889364\n                               Trim2     Robo1     Apba1  Cacna1e      Rgs6\n10X73_3_A_1:CCATCGTGAGGAGCx 0.000000 11.372414  0.000000 0.000000 10.525132\n10X73_3_A_1:GCCGACGAAGTCACx 9.954078  0.000000  0.000000 9.260978  9.260978\n10X74_4_A_1:GCATTGGAACACACx 9.585297  9.585297  9.585297 0.000000  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx 8.845407  8.845407 10.454730 0.000000  8.845407\n10X74_4_A_1:TAGTGGTGGCGTTAx 9.774063  0.000000  0.000000 0.000000 10.179509\n10X73_3_A_1:CAGCACCTTTCATCx 9.889364  9.483925  0.000000 8.790854  0.000000\n                              Trim17    Polr1d     Uqcrq     Hspa5    Rpl26\n10X73_3_A_1:CCATCGTGAGGAGCx 9.426573  0.000000  0.000000  0.000000 10.11968\n10X73_3_A_1:GCCGACGAAGTCACx 0.000000  9.260978  0.000000  9.954078 11.34034\n10X74_4_A_1:GCATTGGAACACACx 9.585297 10.278410 10.683864  9.585297 10.68386\n10X73_3_A_1:GGCGACACGTTCAGx 9.538482  9.943923  9.538482  8.845407 10.79119\n10X74_4_A_1:TAGTGGTGGCGTTAx 0.000000 10.179509  9.774063  0.000000 10.46718\n10X73_3_A_1:CAGCACCTTTCATCx 9.889364  8.790854  0.000000 10.177034 11.18861\n                                 Rpl5     Psma2     Rtraf     Rps10     Rps17\n10X73_3_A_1:CCATCGTGAGGAGCx 10.119680  0.000000  0.000000 10.119680 10.119680\n10X73_3_A_1:GCCGACGAAGTCACx  9.954078 10.359527 10.359527 10.870340 10.647201\n10X74_4_A_1:GCATTGGAACACACx  0.000000  9.585297  0.000000  9.585297  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx  9.943923 10.454730 10.637047  9.943923 10.924723\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.080972 10.467181 10.179509 10.690319 10.690319\n10X73_3_A_1:CAGCACCTTTCATCx  9.889364 10.177034  8.790854 10.870162 10.177034\n                                Rpl12    Rps15a     Rplp1     Rpl22     Rps12\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000  0.000000 10.812807  9.426573  9.426573\n10X73_3_A_1:GCCGACGAAGTCACx  9.260978 10.359527  9.954078 10.647201 10.647201\n10X74_4_A_1:GCATTGGAACACACx  0.000000  9.585297  9.585297  0.000000  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx 10.231594 11.330182 10.924723 10.454730 10.231594\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.774063 11.160314 10.467181 10.467181  9.774063\n10X73_3_A_1:CAGCACCTTTCATCx 10.177034 10.987943  9.889364 10.582486  9.483925\n                                Rps26     Rps24    Rps13      Rps3    Snrpd2\n10X73_3_A_1:CCATCGTGAGGAGCx  9.426573  9.426573 11.03595 10.525132 10.119680\n10X73_3_A_1:GCCGACGAAGTCACx 10.647201 11.206807 10.64720  9.954078  0.000000\n10X74_4_A_1:GCATTGGAACACACx  9.585297 10.683864 10.68386  9.585297  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx 11.243172 11.243172 11.24317 11.243172  9.538482\n10X74_4_A_1:TAGTGGTGGCGTTAx 11.278096 11.645817 10.69032 10.690319  0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 10.400170 11.275621 10.73663  9.889364  9.483925\n                                Snrpg     Rps21      Sub1   Slc25a5       Jun\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000 10.119680 10.119680  9.426573  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000  0.000000 10.647201  0.000000 10.647201\n10X74_4_A_1:GCATTGGAACACACx 10.971540 10.278410  9.585297  0.000000  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx  9.538482  9.538482  8.845407  9.943923  8.845407\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.179509 10.467181 10.179509  0.000000  9.774063\n10X73_3_A_1:CAGCACCTTTCATCx  9.483925  9.889364  9.483925 10.987943  0.000000\n                                Uqcrh     Rpl38    Tspan5    Igf1r    Atox1\n10X73_3_A_1:CCATCGTGAGGAGCx 10.119680  0.000000  9.426573 0.000000 0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  9.260978  9.954078  0.000000 9.260978 9.260978\n10X74_4_A_1:GCATTGGAACACACx  9.585297 10.278410  9.585297 0.000000 0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  9.538482  9.943923  0.000000 8.845407 8.845407\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.467181  9.774063  9.080972 0.000000 9.080972\n10X73_3_A_1:CAGCACCTTTCATCx  9.889364  8.790854 10.177034 0.000000 8.790854\n                                Rps25     Pfdn5     Rps28     Pomp   Cox7a2l\n10X73_3_A_1:CCATCGTGAGGAGCx  9.426573 10.119680 10.525132 9.426573  9.426573\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000 10.647201  9.260978 0.000000 10.647201\n10X74_4_A_1:GCATTGGAACACACx  0.000000  9.585297  0.000000 0.000000  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx 10.454730 11.410224 10.231594 9.943923 10.791194\n10X74_4_A_1:TAGTGGTGGCGTTAx 11.278096 10.690319  0.000000 9.774063 10.179509\n10X73_3_A_1:CAGCACCTTTCATCx 10.177034  9.889364  9.889364 0.000000  9.483925\n                                Rps18     Rpl34     Rps29     Atp5j    Gm2000\n10X73_3_A_1:CCATCGTGAGGAGCx  9.426573  9.426573  0.000000  9.426573  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx 11.052658  9.954078  9.954078  9.260978  0.000000\n10X74_4_A_1:GCATTGGAACACACx  0.000000  9.585297  9.585297  0.000000  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx  9.943923 10.791194 11.243172  9.943923  9.538482\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.690319 10.179509  9.774063  9.080972 10.690319\n10X73_3_A_1:CAGCACCTTTCATCx  9.889364 10.582486 10.177034 10.582486 10.400170\n                                Ptk2      Pfn1     Rpl27    Atp5j2      Jund\n10X73_3_A_1:CCATCGTGAGGAGCx 9.426573  9.426573 10.119680  0.000000  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx 0.000000  9.954078 10.870340 10.359527 10.359527\n10X74_4_A_1:GCATTGGAACACACx 9.585297  0.000000  0.000000 10.278410  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx 8.845407 10.231594 10.924723  9.943923 10.454730\n10X74_4_A_1:TAGTGGTGGCGTTAx 0.000000  9.080972 10.179509  0.000000  9.774063\n10X73_3_A_1:CAGCACCTTTCATCx 8.790854 10.177034  9.483925  9.889364 10.582486\n                                Rpl35     Sbf2    Dusp1     Atp5e    Ndufc1\n10X73_3_A_1:CCATCGTGAGGAGCx  9.426573 0.000000 0.000000 10.119680 10.119680\n10X73_3_A_1:GCCGACGAAGTCACx 11.340336 0.000000 9.260978  0.000000 10.359527\n10X74_4_A_1:GCATTGGAACACACx  9.585297 0.000000 0.000000  9.585297  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx 11.147863 8.845407 9.538482  0.000000  9.943923\n10X74_4_A_1:TAGTGGTGGCGTTAx 11.383455 9.774063 9.080972 10.179509  0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 11.355662 8.790854 8.790854  0.000000  8.790854\n                               Rpl35a     Ttc28     Sumo1     Srp14      Calr\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000 10.119680 10.525132  9.426573  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  9.954078  9.260978  0.000000 10.870340  9.260978\n10X74_4_A_1:GCATTGGAACACACx 10.971540  0.000000  0.000000  0.000000 10.683864\n10X73_3_A_1:GGCGACACGTTCAGx 10.454730  9.943923  8.845407 10.231594  9.538482\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.467181  0.000000  9.774063  9.080972  9.080972\n10X73_3_A_1:CAGCACCTTTCATCx  9.889364 10.177034 10.177034  8.790854  9.483925\n                              Dynlrb1    Timm8b     Swi5      Ubl5      Xist\n10X73_3_A_1:CCATCGTGAGGAGCx 10.525132  9.426573 9.426573  0.000000 10.812807\n10X73_3_A_1:GCCGACGAAGTCACx 10.359527  9.954078 9.954078  0.000000  9.954078\n10X74_4_A_1:GCATTGGAACACACx  0.000000  9.585297 0.000000  0.000000  0.000000\n10X73_3_A_1:GGCGACACGTTCAGx 10.637047  9.538482 9.943923 10.454730 10.454730\n10X74_4_A_1:TAGTGGTGGCGTTAx  9.774063 10.467181 9.774063 10.179509  0.000000\n10X73_3_A_1:CAGCACCTTTCATCx 10.987943  9.483925 9.483925  8.790854 11.188610\n                                Dctn3      Tbca     Plcb1   Ube2e2    Ndufa6\n10X73_3_A_1:CCATCGTGAGGAGCx  0.000000  9.426573  0.000000 0.000000  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx  0.000000  9.260978  9.260978 9.260978  9.260978\n10X74_4_A_1:GCATTGGAACACACx  0.000000 10.278410  0.000000 9.585297  9.585297\n10X73_3_A_1:GGCGACACGTTCAGx  9.538482  9.943923  0.000000 8.845407  9.538482\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.467181  9.774063  0.000000 0.000000 10.179509\n10X73_3_A_1:CAGCACCTTTCATCx  9.483925  9.483925 10.870162 8.790854  0.000000\n                                Serf1    Clasp2   Atp5o.1  Atp6v1g1     Cox7c\n10X73_3_A_1:CCATCGTGAGGAGCx 10.119680 10.525132  0.000000  9.426573  0.000000\n10X73_3_A_1:GCCGACGAAGTCACx 10.359527  0.000000  9.954078 10.647201 10.870340\n10X74_4_A_1:GCATTGGAACACACx  9.585297  9.585297  0.000000 10.278410 10.278410\n10X73_3_A_1:GGCGACACGTTCAGx  9.538482  9.538482 10.637047 10.231594  9.943923\n10X74_4_A_1:TAGTGGTGGCGTTAx 10.179509  0.000000  0.000000  9.080972 11.278096\n10X73_3_A_1:CAGCACCTTTCATCx  9.889364 10.400170  9.483925  8.790854 10.400170\n                            COTAN_Cl.code\n10X73_3_A_1:CCATCGTGAGGAGCx             2\n10X73_3_A_1:GCCGACGAAGTCACx             2\n10X74_4_A_1:GCATTGGAACACACx             1\n10X73_3_A_1:GGCGACACGTTCAGx             3\n10X74_4_A_1:TAGTGGTGGCGTTAx             2\n10X73_3_A_1:CAGCACCTTTCATCx             3\n\n\n\ntrain.data$COTAN_Cl.code &lt;- as.factor(train.data$COTAN_Cl.code)\ntest.data$COTAN_Cl.code &lt;- as.factor(test.data$COTAN_Cl.code)\n# Fit the model\n#model &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 75))\nmodel &lt;- multinom(COTAN_Cl.code ~ ., data = train.data, maxit = 500)\n\n# weights:  456 (302 variable)\ninitial  value 727.281335 \niter  10 value 149.467006\niter  20 value 144.360899\niter  30 value 132.731875\niter  40 value 90.384826\niter  50 value 82.420514\niter  60 value 77.185594\niter  70 value 56.263874\niter  80 value 50.423463\niter  90 value 46.538673\niter 100 value 34.109745\niter 110 value 29.731988\niter 120 value 11.248129\niter 130 value 8.008341\niter 140 value 4.510408\niter 150 value 1.640137\niter 160 value 0.232066\niter 170 value 0.003377\niter 180 value 0.000135\nfinal  value 0.000077 \nconverged\n\nprobabilities &lt;- predict(model, newdata = test.data, type = \"probs\")\n\n# Find the class with the highest probability for each case\npredicted.classes &lt;- apply(probabilities, 1, which.max)\n\n# Adjust predicted classes to match your factor levels\nlevels &lt;- levels(train.data$COTAN_Cl.code)\npredicted.classes &lt;- levels[predicted.classes]\n\n# Calculate model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\nresult.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\nprint(accuracy)\n\n[1] 0.7865854\n\n\nSo also a simple logistic regression confirm that this cluster is in fact formed by four different cell populations.\nNow lets try to search the identity of these cells.\nSince COTAN can detect also very lowly expressed genes, but all the literature methods not, the online methods are bias for highly expressed genes. So, we will take all genes detected as enriched by COTAN and filter also for the highly expressed ones.\n\ntop &lt;- cl525ClsMarkers[cl525ClsMarkers$Gene %in% rownames(cl525GDI[cl525GDI$sum.raw.norm &gt; 7,]) & cl525ClsMarkers$Score &gt; 0,]\ntop\n\n     CL      Gene     Score      adjPVal        DEA IsMarker  logFoldCh\n201   1   Serinc1 0.3408795 3.522110e-20 0.24964566        0 0.32307822\n202   1       App 0.3235228 3.015436e-18 0.29261123        0 0.35097194\n205   1   Cttnbp2 0.2875769 1.609408e-14 0.22006363        0 0.27340879\n207   1     Pdia6 0.2855533 2.478528e-14 0.26450838        0 0.33277646\n208   1      Cdh2 0.2778350 1.387514e-13 0.22803499        0 0.31049133\n209   1   Arl6ip1 0.2748460 2.627941e-13 0.20284729        0 0.29640840\n214   1    Tspan3 0.2651792 2.069668e-12 0.19112225        0 0.29786706\n215   1     Kcnq3 0.2646002 2.323360e-12 0.24538098        0 0.32599439\n216   1   Kirrel3 0.2643709 2.413224e-12 0.16584200        0 0.38473994\n217   1     Ephb1 0.2628437 3.318548e-12 0.25408023        0 0.27583108\n218   1    Spock1 0.2576584 9.477975e-12 0.26142295        0 0.30079912\n219   1      Map2 0.2561333 1.287569e-11 0.08687432        0 0.21475728\n220   1    Arpp21 0.2538588 2.061710e-11 0.11149619        0 0.26914702\n222   1     Gpm6b 0.2506953 3.841314e-11 0.18431370        0 0.28914496\n224   1       Ntm 0.2502020 4.195103e-11 0.26017350        0 0.38133801\n225   1      Aff3 0.2497509 4.588671e-11 0.23112679        0 0.31090874\n227   1    Hivep2 0.2494358 4.802576e-11 0.13669270        0 0.28916034\n228   1     Gpm6a 0.2481234 6.225996e-11 0.16472598        0 0.24658322\n230   1     Lrrc7 0.2461643 9.219675e-11 0.20723107        0 0.29407089\n232   1     Spcs2 0.2457752 9.799310e-11 0.23025501        0 0.27250570\n235   1   B3galt1 0.2438637 1.405479e-10 0.19275473        0 0.29167593\n240   1   Selenof 0.2385575 3.697930e-10 0.20179485        0 0.25088372\n241   1      Rgs6 0.2383790 3.816930e-10 0.24016356        0 0.31439370\n243   1     Tusc3 0.2381598 3.955639e-10 0.22028110        0 0.23930311\n245   1     Magi2 0.2376378 4.338153e-10 0.16742978        0 0.28638716\n247   1     Tiam2 0.2360128 5.833699e-10 0.16929768        0 0.31457017\n249   1      Chl1 0.2350821 6.908205e-10 0.22293963        0 0.32313442\n250   1    Nedd4l 0.2348104 7.261856e-10 0.19585613        0 0.24574916\n251   1     Tmed9 0.2333217 9.520045e-10 0.22094052        0 0.24979943\n256   1    Tmem59 0.2326221 1.067873e-09 0.14283085        0 0.26865267\n264   1   Laptm4a 0.2277313 2.606305e-09 0.19733840        0 0.26141399\n265   1      Ank3 0.2277051 2.610285e-09 0.08917319        0 0.27065242\n267   1    Pgrmc1 0.2261741 3.428304e-09 0.17861411        0 0.22667964\n269   1    Tmbim6 0.2256124 3.777290e-09 0.21843864        0 0.27709749\n270   1    Ctnnd2 0.2253753 3.938385e-09 0.08652291        0 0.27917992\n271   1   Gpatch8 0.2250738 4.128953e-09 0.22662992        0 0.26502585\n272   1      Sez6 0.2249941 4.177978e-09 0.20349708        0 0.28369213\n275   1     Grip1 0.2227281 6.231213e-09 0.21660950        0 0.29498847\n276   1      Cd81 0.2227243 6.231213e-09 0.21831950        0 0.25966098\n277   1    Lrrtm3 0.2223763 6.631335e-09 0.23043835        0 0.35173291\n280   1     Macf1 0.2221299 6.878776e-09 0.16646885        0 0.25771172\n288   1     Cadm1 0.2193012 1.109372e-08 0.04571426        0 0.26841124\n290   1      Nbea 0.2187518 1.217104e-08 0.15234072        0 0.25297956\n293   1     Btbd9 0.2175968 1.488347e-08 0.20197677        0 0.20712210\n299   1     Mdga2 0.2148312 2.369896e-08 0.16159067        0 0.24663478\n300   1    Grin2b 0.2145459 2.474738e-08 0.12592999        0 0.25460844\n303   1    Nckap5 0.2138995 2.743672e-08 0.20045162        0 0.30365268\n304   1      Ctsb 0.2136741 2.841996e-08 0.20176905        0 0.27966479\n308   1   Arl6ip5 0.2129651 3.186011e-08 0.19264283        0 0.23205391\n309   1      Scg5 0.2124223 3.494121e-08 0.09270098        0 0.25401733\n310   1    Ergic3 0.2120774 3.707551e-08 0.19246613        0 0.20692041\n311   1      Tcf4 0.2115330 4.076895e-08 0.15367542        0 0.23468833\n313   1     Myt1l 0.2111908 4.311161e-08 0.11154017        0 0.20319217\n319   1     Ntrk3 0.2081419 7.086130e-08 0.20137988        0 0.24670069\n320   1   St3gal1 0.2079600 7.298311e-08 0.21303844        0 0.29627088\n322   1   Tspan13 0.2074645 7.898378e-08 0.20780390        0 0.26363291\n325   1     Opcml 0.2067448 8.810078e-08 0.14912677        0 0.30967875\n327   1      Ttc3 0.2064964 9.133256e-08 0.03079580        0 0.20328501\n328   1   Igfbpl1 0.2062907 9.444760e-08 0.06176610        0 0.32909611\n331   1  Serpini1 0.2060953 9.676791e-08 0.17011912        0 0.30128651\n333   1     Fgf14 0.2059114 9.929913e-08 0.20485498        0 0.24655559\n335   1     Bach2 0.2054243 1.074705e-07 0.18597372        0 0.24766006\n337   1    Igfbp2 0.2051675 1.118422e-07 0.13551283        0 0.28702655\n338   1    Atp2b1 0.2050504 1.138695e-07 0.20178904        0 0.26801075\n342   1     Epha5 0.2044107 1.254381e-07 0.12338185        0 0.18993995\n347   1      Cd47 0.2027153 1.642285e-07 0.19610871        0 0.27735449\n352   1     Srrm4 0.2015868 1.965894e-07 0.14262037        0 0.23228389\n353   1    Ccser1 0.2010514 2.130603e-07 0.19852738        0 0.24929920\n357   1   Dync1i1 0.2002038 2.438871e-07 0.12094415        0 0.23553199\n363   1     Nell2 0.1990625 2.907576e-07 0.18670185        0 0.26627276\n367   1     Ncam1 0.1986047 3.107212e-07 0.07841645        0 0.28398816\n376   1      Dab1 0.1972866 3.750657e-07 0.09680761        0 0.29301957\n380   1     Ccnl2 0.1967289 4.071966e-07 0.18380070        0 0.19469913\n387   1    mt.Nd1 0.1956526 4.783273e-07 0.11186414        0 0.22448748\n395   1      Dbn1 0.1938495 6.269075e-07 0.08956861        0 0.19265026\n603   2    Rpl35a 0.2938620 7.525156e-14 0.24065683        0 0.29780042\n605   2     Rpl26 0.2888101 1.779635e-13 0.22292687        0 0.38099599\n618   2    Hs3st4 0.2134343 3.674168e-07 0.15370137        0 0.13314486\n620   2     Uqcrh 0.2080665 8.684621e-07 0.14670581        0 0.22890824\n621   2    Tceal9 0.2072957 9.645900e-07 0.15179531        0 0.19184584\n623   2     Rps26 0.2059681 1.147738e-06 0.12849075        0 0.15858477\n626   2     Rps13 0.2009241 2.398424e-06 0.12363269        0 0.16480135\n628   2     Uqcrq 0.1999285 2.707853e-06 0.15873791        0 0.13862372\n630   2     Rpl34 0.1978388 3.598086e-06 0.13434403        0 0.18657008\n631   2     Rps12 0.1958917 4.772577e-06 0.14785951        0 0.14987733\n633   2     Pfdn5 0.1946184 5.656033e-06 0.12655865        0 0.15902100\n635   2    Rps15a 0.1912420 9.105094e-06 0.11969940        0 0.22333153\n636   2     Rps25 0.1907016 9.757654e-06 0.12727730        0 0.16062733\n637   2     Rpl27 0.1868400 1.783353e-05 0.12127108        0 0.13411705\n639   2     Rpl35 0.1855758 2.103510e-05 0.11448537        0 0.21714570\n640   2     Rps24 0.1853572 2.140008e-05 0.11148185        0 0.13886533\n642   2     Snrpg 0.1839823 2.527131e-05 0.13936484        0 0.12702132\n643   2     Rps17 0.1828466 2.970427e-05 0.10596765        0 0.13528034\n644   2     Rps29 0.1822661 3.200207e-05 0.11932471        0 0.12165062\n645   2      Clta 0.1818315 3.292478e-05 0.13064872        0 0.05947486\n647   2     Rtraf 0.1812610 3.517508e-05 0.12493920        0 0.16488383\n649   2     Rps10 0.1798487 4.247302e-05 0.10937585        0 0.11104186\n650   2    Gm2000 0.1794056 4.481440e-05 0.14607889        0 0.10435345\n651   2     Serf1 0.1786742 4.930321e-05 0.12589208        0 0.21173557\n655   2     Rpl36 0.1752860 7.712928e-05 0.09521977        0 0.13185536\n656   2   Atp5o.1 0.1750476 7.788751e-05 0.11506616        0 0.04916894\n657   2   Cox7a2l 0.1748343 7.939928e-05 0.12558605        0 0.21394230\n658   2      Sem1 0.1747361 7.956788e-05 0.13315351        0 0.12760975\n659   2      Rpl5 0.1742565 8.366361e-05 0.13044905        0 0.13233726\n660   2     Rpl22 0.1741539 8.366398e-05 0.11840455        0 0.15355572\n661   2    Bnip3l 0.1735804 8.857348e-05 0.13122161        0 0.14964539\n662   2      Rps3 0.1735327 8.857348e-05 0.10618854        0 0.09091756\n663   2     Rps18 0.1710477 1.195179e-04 0.10120230        0 0.05957778\n664   2    Dynll1 0.1706852 1.246858e-04 0.09094391        0 0.11697996\n665   2     Srp14 0.1703405 1.297383e-04 0.12799121        0 0.05883417\n667   2      Tbca 0.1696783 1.395044e-04 0.13338494        0 0.12759810\n668   2     Rps27 0.1696277 1.395044e-04 0.09325930        0 0.22226046\n669   2     Mef2c 0.1692609 1.441749e-04 0.10948121        0 0.20356186\n670   2     Eif3k 0.1679674 1.687552e-04 0.11073325        0 0.14174640\n673   2     Rpl38 0.1656145 2.212557e-04 0.12087231        0 0.11572376\n674   2     Rpl17 0.1650161 2.387099e-04 0.08514099        0 0.17601538\n675   2     Cyb5a 0.1642611 2.632556e-04 0.13012019        0 0.28484085\n676   2     Rpl37 0.1636663 2.833403e-04 0.08381462        0 0.17122382\n679   2     Rpl21 0.1627183 3.157019e-04 0.08754555        0 0.19048024\n680   2    Timm8b 0.1625148 3.220256e-04 0.13067234        0 0.16504657\n682   2     Atp5j 0.1617718 3.506921e-04 0.11364408        0 0.08530011\n684   2     Rplp1 0.1609005 3.807692e-04 0.09745928        0 0.09311209\n685   2  Atp6v1g1 0.1608910 3.807692e-04 0.10962854        0 0.15457099\n686   2   Dynlrb1 0.1600872 4.187358e-04 0.09914524        0 0.14364091\n688   2  Map1lc3a 0.1593875 4.538302e-04 0.11439130        0 0.17597656\n689   2     Rpl31 0.1589281 4.779567e-04 0.08420223        0 0.14792731\n690   2      Pomp 0.1588963 4.779567e-04 0.11865122        0 0.14507329\n691   2   Morf4l2 0.1585643 4.925485e-04 0.11954209        0 0.18218030\n695   2  Prickle1 0.1563646 6.350864e-04 0.13442301        0 0.15692621\n696   2      Btf3 0.1552406 7.223034e-04 0.10467682        0 0.17227686\n698   2      Rps6 0.1540305 8.320738e-04 0.07580006        0 0.20008503\n699   2   Uqcrfs1 0.1538168 8.501376e-04 0.11901025        0 0.19520608\n708   2     Sumo1 0.1507781 1.134943e-03 0.11348470        0 0.14569349\n710   2     Psma7 0.1504517 1.155608e-03 0.09520000        0 0.06963756\n712   2     Rplp2 0.1501329 1.190168e-03 0.08010200        0 0.13069406\n713   2      Tpt1 0.1499227 1.215123e-03 0.08294165        0 0.16652572\n715   2     Rpl15 0.1495373 1.263182e-03 0.08516777        0 0.21099982\n716   2    Polr1d 0.1486125 1.407028e-03 0.11340685        0 0.15481051\n718   2     Hsbp1 0.1485164 1.408179e-03 0.10827285        0 0.13263495\n720   2     Fkbp3 0.1482226 1.445834e-03 0.11635540        0 0.13775913\n722   2      Ppia 0.1476111 1.537672e-03 0.09264521        0 0.12794846\n723   2      Naca 0.1469963 1.627051e-03 0.06975409        0 0.17665574\n729   2     Crip2 0.1450640 1.963047e-03 0.10389378        0 0.13505370\n731   2      Rprm 0.1450154 1.963047e-03 0.07201300        0 0.28027678\n734   2     Psmb1 0.1444819 2.026622e-03 0.08385632        0 0.14049680\n735   2     Rpl7a 0.1441292 2.098366e-03 0.07486280        0 0.10744942\n737   2    Cox7a2 0.1438756 2.154690e-03 0.10042351        0 0.10356744\n738   2     Eif3e 0.1437716 2.172304e-03 0.09915179        0 0.17719262\n739   2     Eif3h 0.1435349 2.216013e-03 0.07513670        0 0.14215041\n740   2     Rps16 0.1433361 2.260807e-03 0.07045013        0 0.15602979\n741   2   Atp6v1f 0.1432104 2.285579e-03 0.10773112        0 0.14529544\n742   2     Rps20 0.1431650 2.287644e-03 0.08444867        0 0.10893926\n746   2    Rpl36a 0.1407191 2.955266e-03 0.08239977        0 0.11979713\n749   2      Swi5 0.1404278 3.021647e-03 0.10857557        0 0.10954595\n750   2    Chchd2 0.1402542 3.072832e-03 0.07131709        0 0.05773115\n751   2     Rpl12 0.1400731 3.125775e-03 0.11032664        0 0.08189504\n752   2      Rpl9 0.1400420 3.125775e-03 0.06370135        0 0.15288605\n753   2      Bex2 0.1398363 3.191155e-03 0.08392147        0 0.13764795\n755   2     Rps11 0.1389398 3.527812e-03 0.06302301        0 0.13794040\n756   2     Rpl19 0.1386209 3.635133e-03 0.07010860        0 0.11694786\n757   2    Fkbp1a 0.1384169 3.709958e-03 0.08304508        0 0.09414833\n758   2     Psmb6 0.1380291 3.871091e-03 0.09546062        0 0.09687129\n761   2    Rpl37a 0.1371342 4.168176e-03 0.06101430        0 0.17397466\n762   2    Lrrtm4 0.1354204 4.968820e-03 0.09864992        0 0.11355932\n766   2    Eif2s2 0.1350420 5.087437e-03 0.10230675        0 0.13195140\n769   2     Rps23 0.1344174 5.377667e-03 0.05873464        0 0.19394027\n770   2     Arpc3 0.1342511 5.462864e-03 0.10593336        0 0.14066606\n773   2      Elob 0.1337983 5.695346e-03 0.08281541        0 0.06952257\n775   2     Rps28 0.1329422 6.247222e-03 0.09931271        0 0.07813857\n776   2     Rpl28 0.1328537 6.267954e-03 0.07806750        0 0.13470387\n777   2     Cox7c 0.1328492 6.267954e-03 0.08179723        0 0.11864074\n779   2      Sub1 0.1322132 6.698610e-03 0.09791396        0 0.16976722\n782   2     Rps19 0.1318616 6.900174e-03 0.05672049        0 0.13707773\n784   2 Hist3h2ba 0.1314013 7.171485e-03 0.09706454        0 0.04631259\n785   2   Smarcd3 0.1311838 7.327013e-03 0.10261827        0 0.19215282\n788   2      Sybu 0.1304038 7.897777e-03 0.07653462        0 0.07256096\n791   2     Rpl24 0.1300144 8.172239e-03 0.05569997        0 0.17703358\n793   2     Cadm2 0.1297833 8.249708e-03 0.10880647        0 0.16082099\n795   2     Hint1 0.1296601 8.333350e-03 0.06882797        0 0.11943434\n796   2    Rps27a 0.1291928 8.698514e-03 0.05502099        0 0.19707287\n1001  3     Rpl12 0.3397906 6.558064e-19 0.14243647        0 0.35388873\n1002  3     Rps12 0.3379360 8.310110e-19 0.13595390        0 0.32593829\n1003  3    Gm2000 0.3361961 1.084593e-18 0.14591738        0 0.38881594\n1006  3      Ubl5 0.3082570 7.703104e-16 0.12385659        0 0.31082326\n1007  3    Timm8b 0.3034335 1.910865e-15 0.12970032        0 0.28518573\n1008  3     Rps25 0.3003772 3.721820e-15 0.10672288        0 0.28657235\n1009  3     Uqcrq 0.2980381 6.367192e-15 0.12596424        0 0.33411136\n1010  3     Rpl27 0.2972240 7.444269e-15 0.10265236        0 0.31097100\n1011  3     Rps28 0.2919088 2.429858e-14 0.11594742        0 0.31882427\n1012  3     Rpl34 0.2887113 5.083951e-14 0.10423073        0 0.25436899\n1013  3     Rps26 0.2852109 1.023624e-13 0.09497436        0 0.33602396\n1014  3     Rpl35 0.2852051 1.023624e-13 0.09385259        0 0.29709340\n1015  3    Rps15a 0.2825860 1.789529e-13 0.09450109        0 0.26987796\n1016  3     Rpl38 0.2814423 2.274015e-13 0.10944138        0 0.31797942\n1017  3     Snrpg 0.2766502 6.772678e-13 0.11137222        0 0.25915403\n1019  3     Pfdn5 0.2736200 1.219489e-12 0.09445097        0 0.23880544\n1022  3      Pfn1 0.2646097 8.249417e-12 0.10158169        0 0.25732269\n1023  3 Hist3h2ba 0.2630796 1.106482e-11 0.10330683        0 0.29529962\n1024  3     Rps21 0.2619462 1.389776e-11 0.10759860        0 0.28912799\n1025  3      Rps3 0.2617355 1.424733e-11 0.08519604        0 0.32937625\n1026  3     Rps13 0.2612813 1.541441e-11 0.08568574        0 0.28823991\n1027  3     Rps29 0.2546765 6.075488e-11 0.08866708        0 0.26746328\n1028  3     Rps18 0.2532370 8.103288e-11 0.07963740        0 0.34375496\n1029  3     Rps10 0.2519111 1.034203e-10 0.08149046        0 0.31188025\n1030  3     Rps24 0.2501872 1.435299e-10 0.08016513        0 0.29812798\n1031  3     Rplp1 0.2452679 3.799744e-10 0.07880385        0 0.28097152\n1033  3    Snrpd2 0.2443683 4.352680e-10 0.10382524        0 0.26456909\n1034  3   Atp5o.1 0.2432737 5.300723e-10 0.08472475        0 0.28516205\n1036  3    Ndufa6 0.2421195 6.481810e-10 0.10213115        0 0.18391727\n1039  3   Dynlrb1 0.2401455 8.873257e-10 0.07883815        0 0.19326433\n1040  3     Rps17 0.2396845 9.606627e-10 0.07391178        0 0.28856367\n1045  3  Atp6v1g1 0.2329069 3.300275e-09 0.08405659        0 0.20982558\n1046  3   Gabarap 0.2314703 4.269014e-09 0.07787413        0 0.21077029\n1047  3     Uqcrh 0.2308827 4.676195e-09 0.08640348        0 0.16728402\n1048  3    Cox6b1 0.2287013 6.747162e-09 0.08035815        0 0.24477681\n1049  3    Rpl36a 0.2280597 7.552797e-09 0.07068773        0 0.23142726\n1051  3     Psma2 0.2272878 8.574718e-09 0.09292942        0 0.18736752\n1052  3     Rpl17 0.2269527 9.047806e-09 0.06241492        0 0.29002865\n1053  3    Atp5j2 0.2265047 9.737068e-09 0.09097448        0 0.24079056\n1054  3      Tbca 0.2264605 9.737068e-09 0.09452408        0 0.25440467\n1055  3     Rpl37 0.2258131 1.079610e-08 0.06167285        0 0.29374143\n1057  3    Polr1d 0.2248102 1.268277e-08 0.09083334        0 0.19887609\n1059  3     Atp5h 0.2237668 1.473374e-08 0.08781701        0 0.27222686\n1061  3    Dynll1 0.2221122 1.957570e-08 0.06282928        0 0.26012306\n1062  3     Cox7c 0.2213582 2.214484e-08 0.07215140        0 0.21150237\n1063  3     Rpl22 0.2206255 2.516948e-08 0.07924743        0 0.17577896\n1065  3     Pdap1 0.2163628 5.363740e-08 0.09109466        0 0.23339661\n1066  3      Rpl5 0.2163201 5.363740e-08 0.08579479        0 0.19108698\n1067  3     Srp14 0.2158200 5.755575e-08 0.08596110        0 0.27455120\n1069  3      Btf3 0.2156889 5.798452e-08 0.07685916        0 0.16398125\n1071  3     Eif5a 0.2151423 6.252443e-08 0.06949307        0 0.20728776\n1072  3     Rtraf 0.2145692 6.830150e-08 0.07828506        0 0.18785082\n1073  3     Rps27 0.2144552 6.918558e-08 0.06280858        0 0.25552113\n1074  3     Rpl36 0.2137602 7.722883e-08 0.06170147        0 0.28519834\n1077  3     Fkbp3 0.2128469 8.907416e-08 0.08851880        0 0.19330445\n1078  3     Dctn3 0.2115998 1.106309e-07 0.08578597        0 0.20209367\n1082  3      Swi5 0.2099789 1.384790e-07 0.08605331        0 0.19936360\n1084  3     Rps20 0.2095382 1.477021e-07 0.06544452        0 0.25244393\n1086  3      Tpt1 0.2090494 1.578171e-07 0.06093535        0 0.19165178\n1087  3      Pomp 0.2087372 1.656702e-07 0.08260850        0 0.21599304\n1088  3     Nedd8 0.2083988 1.747134e-07 0.07354673        0 0.17217198\n1090  3     Hspe1 0.2076277 1.949688e-07 0.08231097        0 0.14898066\n1091  3     Psma7 0.2074651 1.993339e-07 0.06917425        0 0.19738003\n1092  3     Sumo1 0.2072055 2.073087e-07 0.08249881        0 0.14170563\n1095  3     Rpl28 0.2055475 2.718977e-07 0.06384552        0 0.22175308\n1096  3     Rps16 0.2052590 2.841290e-07 0.05346116        0 0.26543692\n1097  3     Smdt1 0.2051165 2.870427e-07 0.08708545        0 0.23859049\n1098  3      Sub1 0.2051044 2.870427e-07 0.08047079        0 0.17915382\n1099  3     Rplp2 0.2050925 2.870427e-07 0.05764488        0 0.19833562\n1103  3     Rpl19 0.2016926 4.865558e-07 0.05393480        0 0.26201429\n1105  3    Rpl13a 0.2013680 5.084807e-07 0.05813473        0 0.27816526\n1106  3     Cox6c 0.2008270 5.545360e-07 0.06425063        0 0.19395849\n1108  3     Rpl31 0.1993619 6.917311e-07 0.05587167        0 0.22846969\n1109  3     Cox8a 0.1979985 8.660400e-07 0.07667152        0 0.16393453\n1110  3      Rps6 0.1973421 9.513628e-07 0.05148424        0 0.20671436\n1112  3      Elob 0.1963808 1.093831e-06 0.06405173        0 0.19385896\n1117  3    Eef1b2 0.1954025 1.243457e-06 0.07620134        0 0.17513280\n1119  3     Eif3k 0.1953562 1.244762e-06 0.06807931        0 0.21470571\n1122  3   Cox7a2l 0.1934866 1.629790e-06 0.07361014        0 0.13583938\n1123  3    Cox7a2 0.1933936 1.638968e-06 0.07146876        0 0.19881709\n1127  3     Serf1 0.1928998 1.734027e-06 0.07210946        0 0.13817878\n1128  3     Psmb6 0.1928769 1.734027e-06 0.07039312        0 0.15481393\n1130  3      Bex2 0.1921564 1.933240e-06 0.06091947        0 0.18669154\n1133  3    Atp5c1 0.1911852 2.223986e-06 0.06187355        0 0.15026083\n1134  3     Atp5j 0.1906515 2.414647e-06 0.07084961        0 0.19315209\n1136  3     Rpl7a 0.1901509 2.572127e-06 0.05210420        0 0.21504712\n1139  3    Chchd2 0.1885685 3.178592e-06 0.05079733        0 0.32161993\n1140  3      Rpl9 0.1872610 3.869736e-06 0.04516423        0 0.25400201\n1141  3     Rack1 0.1870052 4.014063e-06 0.06080864        0 0.13755393\n1143  3       Mif 0.1864073 4.328402e-06 0.06286918        0 0.27218435\n1144  3    Zfp428 0.1861701 4.471953e-06 0.07056136        0 0.14436844\n1145  3    Rpl37a 0.1858426 4.691300e-06 0.04397133        0 0.28848121\n1148  3     Fabp5 0.1839680 6.180088e-06 0.05658658        0 0.20827728\n1150  3     Eif3e 0.1836716 6.423044e-06 0.06680958        0 0.10713674\n1151  3    Rpl10a 0.1833697 6.681173e-06 0.04881146        0 0.24820253\n1152  3      Sem1 0.1831834 6.809716e-06 0.07406466        0 0.22532380\n1153  3     Rps23 0.1826943 7.281763e-06 0.04247856        0 0.27230369\n1155  3     Rpl21 0.1816456 8.474376e-06 0.05174927        0 0.20777167\n1156  3     Cirbp 0.1809497 9.403216e-06 0.06464380        0 0.18021981\n1160  3   Atp6v1f 0.1800706 1.056817e-05 0.07153553        0 0.14303143\n1161  3     Atp5d 0.1797949 1.098506e-05 0.07396700        0 0.18862033\n1162  3     Cox5a 0.1793612 1.161206e-05 0.06800029        0 0.18521290\n1166  3     Rps19 0.1787900 1.248984e-05 0.04090554        0 0.30629677\n1168  3     Rpl30 0.1784251 1.311077e-05 0.06776687        0 0.14982502\n1169  3     Arpc3 0.1783593 1.319575e-05 0.07460327        0 0.16308666\n1175  3      Naca 0.1772535 1.512518e-05 0.04452810        0 0.22016926\n1177  3    Atp5g1 0.1764167 1.692552e-05 0.06554111        0 0.21659105\n1180  3     Crip2 0.1761189 1.738954e-05 0.06690474        0 0.16656579\n1183  3      Svbp 0.1751006 2.002370e-05 0.05834555        0 0.15092989\n1188  3     Rps11 0.1740409 2.285485e-05 0.04173346        0 0.23816676\n1189  3    Tceal9 0.1738251 2.352547e-05 0.06735429        0 0.15102561\n1190  3      Bex3 0.1736863 2.378672e-05 0.05541267        0 0.16615509\n1192  3     Hmgn1 0.1730200 2.609508e-05 0.06622513        0 0.20136117\n1193  3      Rpsa 0.1728203 2.679390e-05 0.04206178        0 0.19686986\n1194  3    Rps3a1 0.1727228 2.701274e-05 0.03920953        0 0.25428070\n1195  3    Eif4a1 0.1722805 2.856885e-05 0.06730840        0 0.32978023\n1197  3     Rpl24 0.1720728 2.915896e-05 0.03899605        0 0.22223278\n1200  3     Csrp2 0.1714707 3.160001e-05 0.05624954        0 0.16939915\n\n\n\nwrite.csv(top,paste0(outDir,\"cl525/TopClustersMarkers.csv\"))"
  },
  {
    "objectID": "NonCT_clusters.html#cluster-511-e15.0",
    "href": "NonCT_clusters.html#cluster-511-e15.0",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Cluster 511 e15.0",
    "text": "Cluster 511 e15.0\n\ncells &lt;- getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]][getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]] == \"511\"]\n\ncells &lt;-names(cells)\n\ncl511 &lt;-  automaticCOTANObjectCreation(raw = getRawData(e15.0)[,cells],\n                                       GEO = \"Loom\",\n                                       sequencingMethod = \"10X\",\n                                       sampleCondition = \"cl511\",\n                                       cores = 10,saveObj = T,\n                                       outDir = \"Data/MouseCortexFromLoom/NotCTSingleClusters/\",\n                                       calcCoex = T)\n\n\n\n  OriginalCluster CellNumber COTANClusterNumber          Accuracy\n1      Cl525E15.0        826                  3 0.786585365853659\n2      Cl511E15.0        540                  2              &lt;NA&gt;\n         Clusters\n1 316 - 176 - 334\n2       143 - 397\n\n\n\ncl511GDI &lt;- calculateGDI(cl511)\n\nsubsetGDIcl511 &lt;- cl511GDI[cl511GDI$sum.raw.norm &gt; 7,]\ntop.GDI.genes &lt;- rownames(subsetGDIcl511[order(subsetGDIcl511$GDI,decreasing = T),])[1:50]\n\nGDIPlot(cl511,genes = \"\",GDIIn = cl511GDI)\n\n\n\n\n\nlist.cl.CT &lt;- cellsUniformClustering(cl511, GDIThreshold = 1.43, cores = 10L,\n                         saveObj = TRUE, outDir = outDir)\n\ncl511 &lt;- addClusterization(cl511, clName = \"split\",\n                              clusters = list.cl.CT$clusters,\n                              coexDF = list.cl.CT$coex, override = TRUE)\n\ntable(list.cl.CT$clusters)\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cl511, clusters = list.cl.CT$clusters,\n                            GDIThreshold = 1.43, batchSize = 4L, cores = 10L,\n                            saveObj = TRUE, outDir = outDir)\n\ncl511 &lt;- addClusterization(cl511, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\nsaveRDS(cl511,paste0(outDir,\"cl511.cotan.RDS\"))\n\ntable(str_split(names(mergedClusters),pattern = \"_\",simplify = T)[,1],mergedClusters)\n\n\ndata &lt;- getNormalizedData(cl511)\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cl511)[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)-1\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                               Flrt2  Smarca2    Srgap1       Sla    Cadps\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000 0.000000  0.000000  0.000000 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000 0.000000  0.000000 10.471506 0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 9.207514 9.207514 10.306059  0.000000 9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 8.878654 8.878654  9.571731  0.000000 0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx 8.985081 9.678166 10.371281  0.000000 0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000 9.028611 10.127143  9.721698 9.028611\n                               Kcnk10 Itpr1    Klhl29   Elmod1       Nin\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.000000     0 10.627557 9.528994 10.915233\n10X74_4_A_1:GTCCACTGTCCTCGx  0.000000     0  9.778387 0.000000  9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx  9.207514     0  9.900611 0.000000  9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx  0.000000     0  0.000000 8.878654  0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx  0.000000     0  8.985081 8.985081  8.985081\n10X73_3_A_1:AAGCACTGCTTCGCx 10.127143     0  0.000000 9.028611  0.000000\n                               Kcnn2    Adgrb3    Foxp1     Alcam     Mtss1\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000  9.528994 0.000000  9.528994  0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000  0.000000 0.000000  0.000000  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 0.000000 11.153338 9.207514 10.593733  9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 9.571731 10.264844 9.571731  0.000000  8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 0.000000 10.083610 8.985081  8.985081 10.083610\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000  0.000000 9.028611  0.000000  9.028611\n                             Fam213a  Ralgps2       Ptn     Cadm2    Frmd4a\n10X74_4_A_1:CAGCGTCTCCTCGTx 9.528994 0.000000  0.000000 10.222104  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000 9.778387  0.000000  0.000000  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 0.000000 9.207514  9.207514  9.207514  9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 0.000000 0.000000 11.586574 10.487980  8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 0.000000 0.000000  0.000000  8.985081  0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000 9.028611  0.000000 10.127143 10.820270\n                              Nkain2     Tenm3     Grip1    Tanc2    Syt11\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000  0.000000 10.915233 0.000000 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 9.778387 10.876962  9.778387 9.778387 9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx 0.000000  9.207514  0.000000 0.000000 9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 0.000000  0.000000  8.878654 8.878654 8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 0.000000  9.678166  8.985081 8.985081 0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000 10.127143  0.000000 9.028611 0.000000\n                               Srgap3      Pak7    Mapk10     Sobp  Bhlhe22\n10X74_4_A_1:CAGCGTCTCCTCGTx  9.528994  0.000000 10.222104 9.528994 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 10.471506  9.778387  0.000000 0.000000 9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx  9.900611  0.000000  0.000000 0.000000 0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx  9.571731  8.878654 10.487980 8.878654 0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx  9.678166  0.000000  8.985081 9.678166 0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx  0.000000 10.820270  0.000000 0.000000 9.721698\n                               Epha3    Adgrl3      Dok5    Satb2    Hs6st2\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000  0.000000  0.000000  0.00000  0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000 10.471506  0.000000  0.00000  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 0.000000  0.000000  0.000000  0.00000  9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 9.571731  9.571731 10.487980 11.36343  8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 8.985081  8.985081  0.000000  0.00000  0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000  0.000000  9.028611  0.00000 12.024229\n                            X5730522E02Rik      Msra    Spock1     Enc1\n10X74_4_A_1:CAGCGTCTCCTCGTx       9.528994  0.000000  9.528994  0.00000\n10X74_4_A_1:GTCCACTGTCCTCGx       0.000000  0.000000  0.000000 10.47151\n10X64_3_A_1:ACGCCGGAGGATTCx       0.000000  0.000000  0.000000  0.00000\n10X73_3_A_1:GTTAACCTTGTCGAx       0.000000  0.000000  8.878654 10.26484\n10X74_4_A_1:CGTGATGAGAAGGCx      10.371281  8.985081  0.000000  0.00000\n10X73_3_A_1:AAGCACTGCTTCGCx      10.414815 10.820270 10.414815  0.00000\n                             Fam110b      Sybu     Lmo1     Dscam    Rab3c\n10X74_4_A_1:CAGCGTCTCCTCGTx 9.528994 10.627557 9.528994 10.222104 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000 10.471506 0.000000  9.778387 0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 0.000000  9.207514 0.000000  0.000000 0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx 8.878654  8.878654 8.878654  8.878654 8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 8.985081  0.000000 8.985081  8.985081 8.985081\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000  0.000000 9.028611  0.000000 9.028611\n                            Mir124.2hg    Clstn2      Fat3     Kcnh7    Usp29\n10X74_4_A_1:CAGCGTCTCCTCGTx   0.000000 10.222104 10.627557 10.222104 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx  10.471506 10.876962  9.778387  0.000000 0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx   9.207514 10.306059 10.816872  9.207514 0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx   8.878654  8.878654  9.571731  8.878654 0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx   8.985081  0.000000  0.000000  0.000000 0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx   0.000000  0.000000 10.414815 10.127143 9.028611\n                                 Cd47      Ryr3    Neto2     Ppm1e     Mdga2\n10X74_4_A_1:CAGCGTCTCCTCGTx 10.222104  0.000000 9.528994  0.000000  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx  0.000000  0.000000 9.778387  9.778387 10.471506\n10X64_3_A_1:ACGCCGGAGGATTCx  9.207514  0.000000 0.000000  9.207514 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx  0.000000  8.878654 9.571731 11.517582  0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx  9.678166 10.083610 8.985081  9.678166 10.083610\n10X73_3_A_1:AAGCACTGCTTCGCx  0.000000 10.414815 9.721698  9.721698  9.721698\n                            Serpini1     Ralyl     Nrcam     Robo2    Csrnp3\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000 10.222104  0.000000  0.000000 10.627557\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000 10.471506 10.471506  0.000000  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 9.207514  0.000000  9.900611 10.593733 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx 9.571731  8.878654  9.977173  8.878654  9.571731\n10X74_4_A_1:CGTGATGAGAAGGCx 8.985081 10.371281  8.985081  0.000000  0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000 10.637953  0.000000  0.000000  0.000000\n                            Hist3h2ba   Jakmip1     Edil3     Enox1      Rprm\n10X74_4_A_1:CAGCGTCTCCTCGTx  10.62756  0.000000  0.000000 10.222104 10.627557\n10X74_4_A_1:GTCCACTGTCCTCGx   0.00000  0.000000 10.471506  9.778387  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx  10.30606  9.207514  9.900611  9.207514  0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx  10.95797  9.571731  0.000000  0.000000  8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx  10.93088 10.083610  8.985081 10.594419 10.594419\n10X73_3_A_1:AAGCACTGCTTCGCx  11.10795  0.000000  9.028611  9.721698  9.028611\n                               Olfm1 Tmem178b      Gng3    Cntn2     Scg3\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000 0.000000  9.528994 0.000000 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 9.778387 0.000000  9.778387 0.000000 9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx 9.207514 0.000000  0.000000 0.000000 0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx 8.878654 8.878654 10.670297 8.878654 8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 0.000000 0.000000  8.985081 0.000000 9.678166\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000 9.028611  0.000000 9.028611 0.000000\n                               Gnao1     Serp2     Pcdh9    Trim2     Nrg1\n10X74_4_A_1:CAGCGTCTCCTCGTx 9.528994 10.222104 10.222104 9.528994 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 9.778387  9.778387  9.778387 0.000000 0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 9.207514  0.000000 10.816872 0.000000 0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx 9.571731  9.571731 10.264844 9.571731 9.571731\n10X74_4_A_1:CGTGATGAGAAGGCx 8.985081  9.678166  9.678166 8.985081 8.985081\n10X73_3_A_1:AAGCACTGCTTCGCx 9.028611  9.721698 10.127143 9.721698 9.028611\n                               Ppfia2  Cacna2d1     Uqcrq      Bex3       Ran\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.000000  0.000000  0.000000 10.627557  0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx  0.000000  0.000000  0.000000  9.778387 10.876962\n10X64_3_A_1:ACGCCGGAGGATTCx  0.000000  9.900611  9.900611 11.153338 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx 10.670297 11.181114 10.957974 10.264844 10.824445\n10X74_4_A_1:CGTGATGAGAAGGCx  9.678166  0.000000  8.985081  9.678166  9.678166\n10X73_3_A_1:AAGCACTGCTTCGCx  9.028611  0.000000 10.414815 10.414815 10.637953\n                               Atp5c1     Eif3k    Ppp1cb   Ndufaf2    Hmgb3\n10X74_4_A_1:CAGCGTCTCCTCGTx  9.528994  9.528994 10.222104  0.000000 9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx  0.000000  9.778387  0.000000  0.000000 0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 10.999190 10.306059  9.207514  0.000000 9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 10.957974 10.264844  8.878654  9.977173 9.977173\n10X74_4_A_1:CGTGATGAGAAGGCx 10.083610 10.594419  0.000000 10.594419 0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx  9.721698  0.000000  0.000000  9.028611 0.000000\n                               Rps10     Rae1      Mbd3     Eif3c   Hnrnpab\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.00000 0.000000 10.222104  9.528994  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx 10.87696 0.000000  9.778387 10.876962  9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx 10.81687 0.000000  0.000000  9.207514 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx 10.82444 0.000000  9.977173  0.000000  9.977173\n10X74_4_A_1:CGTGATGAGAAGGCx 10.77674 8.985081  0.000000  8.985081  9.678166\n10X73_3_A_1:AAGCACTGCTTCGCx 10.12714 9.028611  0.000000  9.028611 10.414815\n                                Rpl12   Rps15a   Rpl13a     Rpl31    Rplp1\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.000000 10.22210  0.00000 10.222104 10.22210\n10X74_4_A_1:GTCCACTGTCCTCGx 10.876962  0.00000 10.87696 10.876962 11.16464\n10X64_3_A_1:ACGCCGGAGGATTCx 10.999190 10.59373 11.28687 10.999190 10.81687\n10X73_3_A_1:GTTAACCTTGTCGAx  8.878654 11.18111 10.82444  9.977173 11.27642\n10X74_4_A_1:CGTGATGAGAAGGCx 10.930884 11.62402 10.93088 10.930884 10.93088\n10X73_3_A_1:AAGCACTGCTTCGCx  9.721698 11.59345 10.97442 10.637953 10.82027\n                                Hspe1     Rps12    Ranbp1    Rpl39     Rps26\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.000000  9.528994 10.627557 0.000000 10.222104\n10X74_4_A_1:GTCCACTGTCCTCGx  0.000000  9.778387  0.000000 0.000000  9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx  0.000000 10.593733  9.207514 0.000000  9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx  9.977173 10.264844 10.487980 9.571731 11.586574\n10X74_4_A_1:CGTGATGAGAAGGCx 10.371281 10.371281  9.678166 0.000000 11.549915\n10X73_3_A_1:AAGCACTGCTTCGCx  9.028611 10.414815 10.127143 9.028611 10.974418\n                               Rplp2    Rps13     Rps3     Rps20     Snrpg\n10X74_4_A_1:CAGCGTCTCCTCGTx 10.22210 10.91523 10.22210  9.528994  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx 10.47151 10.87696 10.87696  9.778387  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 11.40465 11.28687 10.81687 10.593733 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx 11.07575 10.95797 11.07575 10.957974 10.487980\n10X74_4_A_1:CGTGATGAGAAGGCx 10.77674 11.54991 11.46987 11.064413  8.985081\n10X73_3_A_1:AAGCACTGCTTCGCx 11.22573 11.42640 10.41482  9.721698  9.721698\n                                Rps21      Nme1     Uqcrh     Rpl38   Rps3a1\n10X74_4_A_1:CAGCGTCTCCTCGTx  9.528994  0.000000  9.528994  0.000000 11.13837\n10X74_4_A_1:GTCCACTGTCCTCGx  0.000000 10.876962  9.778387  0.000000 10.47151\n10X64_3_A_1:ACGCCGGAGGATTCx 10.593733  9.900611 10.593733 10.306059 11.77237\n10X73_3_A_1:GTTAACCTTGTCGAx  8.878654  9.977173  9.571731  8.878654 10.95797\n10X74_4_A_1:CGTGATGAGAAGGCx 10.371281 10.930884  0.000000  9.678166 11.62402\n10X73_3_A_1:AAGCACTGCTTCGCx 10.127143  9.721698  9.721698 10.637953 11.10795\n                               Rps25     Pfdn5    Saraf     Rps28     Rps27\n10X74_4_A_1:CAGCGTCTCCTCGTx 10.62756  0.000000 0.000000  9.528994 11.320692\n10X74_4_A_1:GTCCACTGTCCTCGx 10.47151  9.778387 0.000000 10.471506  9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx 10.59373 10.593733 9.207514 10.593733 11.153338\n10X73_3_A_1:GTTAACCTTGTCGAx 10.67030 10.264844 8.878654  9.571731 10.670297\n10X74_4_A_1:CGTGATGAGAAGGCx 11.18219 10.776736 9.678166 11.064413 10.776736\n10X73_3_A_1:AAGCACTGCTTCGCx 10.12714 11.225729 9.028611 10.974418 10.974418\n                                Rpl37      Gnaq      Pomp     Rps18     Rpl34\n10X74_4_A_1:CAGCGTCTCCTCGTx 10.915233  0.000000  0.000000 10.627557  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx  9.778387  9.778387  0.000000  9.778387  9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx 11.510009  9.207514 10.816872 10.306059  9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 11.276423 10.264844  9.977173  8.878654 10.957974\n10X74_4_A_1:CGTGATGAGAAGGCx 11.549915  0.000000 10.371281 11.624022 10.371281\n10X73_3_A_1:AAGCACTGCTTCGCx 10.974418  9.721698 10.414815 11.225729 10.820270\n                               Rps29     Ppdpf      Pfn1     Rpl27    Atp5j2\n10X74_4_A_1:CAGCGTCTCCTCGTx 10.22210  0.000000 10.222104 10.627557  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx  0.00000  9.778387 10.876962  0.000000 10.471506\n10X64_3_A_1:ACGCCGGAGGATTCx 10.81687  0.000000  9.900611 10.816872  0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx 10.95797 10.670297 11.075755  9.977173  9.977173\n10X74_4_A_1:CGTGATGAGAAGGCx 10.59442  9.678166  8.985081 10.930884  9.678166\n10X73_3_A_1:AAGCACTGCTTCGCx 10.82027  9.028611 10.414815 10.127143 10.414815\n                                Pdia3    Rpl35      Sbf2     Crip2      Tpt1\n10X74_4_A_1:CAGCGTCTCCTCGTx  9.528994 10.22210  0.000000 10.222104  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx 10.876962  0.00000 10.471506  0.000000  9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx  9.207514 10.30606  0.000000 10.999190 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx  9.571731 11.07575  9.977173 10.670297 11.075755\n10X74_4_A_1:CGTGATGAGAAGGCx  8.985081 11.28755  8.985081  9.678166 10.776736\n10X73_3_A_1:AAGCACTGCTTCGCx 10.820270 11.10795  0.000000 10.127143 11.107948\n                              Rpl35a X4930402H24Rik    Ppm1l     Itfg1   Large1\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.00000       9.528994 0.000000  0.000000 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx  0.00000       9.778387 0.000000 10.876962 9.778387\n10X64_3_A_1:ACGCCGGAGGATTCx  0.00000       0.000000 0.000000  9.207514 9.207514\n10X73_3_A_1:GTTAACCTTGTCGAx 10.95797       9.977173 0.000000  9.977173 0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx 11.28755       8.985081 8.985081  0.000000 0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 10.82027       0.000000 9.028611  0.000000 0.000000\n                                 Ktn1     Ddah2     Sumo1 Nipsnap3b   Dynlrb1\n10X74_4_A_1:CAGCGTCTCCTCGTx  0.000000 10.222104 10.222104  0.000000  9.528994\n10X74_4_A_1:GTCCACTGTCCTCGx 10.876962  0.000000  0.000000  0.000000  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx  0.000000 10.816872 10.816872  9.207514 10.306059\n10X73_3_A_1:GTTAACCTTGTCGAx  8.878654  8.878654  9.977173  9.571731  9.977173\n10X74_4_A_1:CGTGATGAGAAGGCx  0.000000 10.083610 10.083610  0.000000 10.930884\n10X73_3_A_1:AAGCACTGCTTCGCx  9.028611 10.637953  9.721698  9.721698 10.127143\n                                 Svbp   Tmem57     Acat2   Hmgcs1    Prmt2\n10X74_4_A_1:CAGCGTCTCCTCGTx  9.528994 9.528994  9.528994 9.528994 0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx  9.778387 9.778387  0.000000 9.778387 0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 10.306059 0.000000 10.306059 0.000000 0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx 10.264844 8.878654  8.878654 9.977173 0.000000\n10X74_4_A_1:CGTGATGAGAAGGCx 10.776736 8.985081  8.985081 8.985081 9.678166\n10X73_3_A_1:AAGCACTGCTTCGCx  9.028611 9.721698  9.721698 0.000000 0.000000\n                               Kif1a   Atp5o.1  Atp6v1g1   Camta1    Tnrc6c\n10X74_4_A_1:CAGCGTCTCCTCGTx 0.000000 10.222104  0.000000 9.528994  0.000000\n10X74_4_A_1:GTCCACTGTCCTCGx 0.000000  9.778387 10.471506 0.000000  0.000000\n10X64_3_A_1:ACGCCGGAGGATTCx 0.000000 10.593733 11.153338 9.207514  0.000000\n10X73_3_A_1:GTTAACCTTGTCGAx 9.571731 10.670297 10.264844 9.571731  8.878654\n10X74_4_A_1:CGTGATGAGAAGGCx 0.000000  9.678166 10.371281 0.000000  0.000000\n10X73_3_A_1:AAGCACTGCTTCGCx 0.000000 10.127143  9.721698 9.028611 10.127143\n                               Kifap3 COTAN_Cl.code\n10X74_4_A_1:CAGCGTCTCCTCGTx 10.915233             0\n10X74_4_A_1:GTCCACTGTCCTCGx 10.471506             0\n10X64_3_A_1:ACGCCGGAGGATTCx  0.000000             1\n10X73_3_A_1:GTTAACCTTGTCGAx  8.878654             1\n10X74_4_A_1:CGTGATGAGAAGGCx  0.000000             1\n10X73_3_A_1:AAGCACTGCTTCGCx  0.000000             1\n\n\n\n# Fit the model\nmodel &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 50))\n# Summarize the model\nsummary(model)\n\n\nCall:\nglm(formula = COTAN_Cl.code ~ ., family = binomial, data = train.data, \n    control = list(maxit = 50))\n\nCoefficients:\n                 Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)    -1.049e+02  2.871e+06       0        1\nFlrt2           6.629e-01  8.691e+04       0        1\nSmarca2         4.075e-01  5.966e+04       0        1\nSrgap1         -1.196e-01  6.491e+04       0        1\nSla             2.034e-01  6.556e+04       0        1\nCadps          -8.866e-02  6.676e+04       0        1\nKcnk10         -4.246e-01  8.725e+04       0        1\nItpr1          -1.009e+00  6.868e+04       0        1\nKlhl29          1.590e-01  6.882e+04       0        1\nElmod1          3.142e-01  9.102e+04       0        1\nNin            -1.495e-01  6.106e+04       0        1\nKcnn2          -1.893e-01  6.106e+04       0        1\nAdgrb3          1.495e-01  7.922e+04       0        1\nFoxp1          -2.477e-01  1.008e+05       0        1\nAlcam           6.261e-01  7.361e+04       0        1\nMtss1          -8.110e-02  8.371e+04       0        1\nFam213a        -2.518e-01  7.716e+04       0        1\nRalgps2        -5.499e-01  8.683e+04       0        1\nPtn             2.736e-01  1.076e+05       0        1\nCadm2          -3.845e-01  8.437e+04       0        1\nFrmd4a         -9.663e-02  7.256e+04       0        1\nNkain2          3.780e-01  8.739e+04       0        1\nTenm3           8.697e-02  9.269e+04       0        1\nGrip1           1.791e-01  8.187e+04       0        1\nTanc2          -3.292e-01  6.503e+04       0        1\nSyt11          -7.403e-01  8.730e+04       0        1\nSrgap3          2.804e-01  6.623e+04       0        1\nPak7           -1.187e-01  8.320e+04       0        1\nMapk10          4.246e-01  6.620e+04       0        1\nSobp           -3.389e-01  6.542e+04       0        1\nBhlhe22        -1.175e-01  8.535e+04       0        1\nEpha3          -3.948e-02  1.025e+05       0        1\nAdgrl3         -3.242e-01  8.414e+04       0        1\nDok5            4.329e-01  8.442e+04       0        1\nSatb2           6.319e-01  1.010e+05       0        1\nHs6st2         -2.440e-01  8.496e+04       0        1\nX5730522E02Rik -1.205e-02  7.793e+04       0        1\nMsra            2.379e-01  1.022e+05       0        1\nSpock1          3.863e-01  5.638e+04       0        1\nEnc1            1.667e-01  7.319e+04       0        1\nFam110b        -2.383e-01  6.774e+04       0        1\nSybu           -8.298e-02  6.530e+04       0        1\nLmo1            1.633e-01  8.353e+04       0        1\nDscam          -1.470e-01  6.781e+04       0        1\nRab3c          -1.161e-01  1.103e+05       0        1\nMir124.2hg     -4.476e-01  5.715e+04       0        1\nClstn2          6.641e-02  1.335e+05       0        1\nFat3           -6.251e-02  7.592e+04       0        1\nKcnh7          -1.409e-01  7.908e+04       0        1\nUsp29           5.262e-01  6.689e+04       0        1\nCd47            1.150e-01  7.403e+04       0        1\nRyr3            5.436e-02  7.676e+04       0        1\nNeto2          -5.954e-01  7.823e+04       0        1\nPpm1e           2.734e-02  5.762e+04       0        1\nMdga2          -3.037e-01  6.828e+04       0        1\nSerpini1       -2.279e-01  6.710e+04       0        1\nRalyl          -3.333e-01  6.759e+04       0        1\nNrcam           2.232e-01  1.150e+05       0        1\nRobo2           2.814e-01  9.011e+04       0        1\nCsrnp3          1.767e-01  7.869e+04       0        1\nHist3h2ba      -3.469e-01  7.690e+04       0        1\nJakmip1         1.356e-01  7.326e+04       0        1\nEdil3          -2.647e-01  7.989e+04       0        1\nEnox1          -4.503e-01  6.109e+04       0        1\nRprm           -1.513e-01  1.041e+05       0        1\nOlfm1          -6.746e-01  7.031e+04       0        1\nTmem178b       -6.360e-01  6.559e+04       0        1\nGng3           -5.081e-01  8.182e+04       0        1\nCntn2          -2.800e-01  7.506e+04       0        1\nScg3            1.798e-01  5.612e+04       0        1\nGnao1           1.006e+00  4.654e+04       0        1\nSerp2           5.087e-01  8.963e+04       0        1\nPcdh9           9.910e-02  5.588e+04       0        1\nTrim2           2.664e-01  8.437e+04       0        1\nNrg1            2.084e-01  6.518e+04       0        1\nPpfia2         -6.617e-01  8.399e+04       0        1\nCacna2d1       -8.806e-02  7.202e+04       0        1\nUqcrq           2.511e-01  1.384e+05       0        1\nBex3           -1.669e-01  1.273e+05       0        1\nRan             6.620e-01  1.443e+05       0        1\nAtp5c1         -3.353e-02  1.578e+05       0        1\nEif3k           4.805e-01  9.930e+04       0        1\nPpp1cb          1.551e-01  8.017e+04       0        1\nNdufaf2         3.192e-01  7.689e+04       0        1\nHmgb3          -1.110e-01  1.016e+05       0        1\nRps10           1.630e+00  1.090e+05       0        1\nRae1            5.199e-01  6.981e+04       0        1\nMbd3           -1.298e-01  9.411e+04       0        1\nEif3c           2.232e-01  8.238e+04       0        1\nHnrnpab         1.182e-01  1.083e+05       0        1\nRpl12           1.191e+00  9.106e+04       0        1\nRps15a          1.110e+00  2.237e+05       0        1\nRpl13a          8.337e-01  1.355e+05       0        1\nRpl31          -8.657e-01  1.168e+05       0        1\nRplp1          -1.786e+00  1.248e+05       0        1\nHspe1           1.058e+00  8.584e+04       0        1\nRps12           4.517e-01  1.105e+05       0        1\nRanbp1         -1.202e-01  1.214e+05       0        1\nRpl39          -1.539e-01  8.027e+04       0        1\nRps26           7.116e-01  1.420e+05       0        1\nRplp2           2.593e-02  1.459e+05       0        1\nRps13           1.006e+00  2.209e+05       0        1\nRps3            1.605e-01  2.148e+05       0        1\nRps20           6.931e-01  7.584e+04       0        1\nSnrpg           5.178e-01  1.196e+05       0        1\nRps21           2.324e-01  1.049e+05       0        1\nNme1            3.016e-01  8.911e+04       0        1\nUqcrh           9.312e-01  1.231e+05       0        1\nRpl38           1.087e+00  1.152e+05       0        1\nRps3a1          8.552e-01  2.686e+05       0        1\nRps25          -5.472e-01  1.139e+05       0        1\nPfdn5           1.396e+00  1.746e+05       0        1\nSaraf           1.785e-01  6.476e+04       0        1\nRps28           1.238e+00  7.323e+04       0        1\nRps27           1.297e+00  1.003e+05       0        1\nRpl37           3.752e-01  1.768e+05       0        1\nGnaq           -8.034e-01  7.836e+04       0        1\nPomp            4.339e-01  1.233e+05       0        1\nRps18           6.575e-01  1.207e+05       0        1\nRpl34          -2.467e-01  1.259e+05       0        1\nRps29          -3.668e-02  9.681e+04       0        1\nPpdpf          -2.466e-01  1.106e+05       0        1\nPfn1            6.434e-01  2.141e+05       0        1\nRpl27          -4.516e-01  1.775e+05       0        1\nAtp5j2         -1.048e+00  8.517e+04       0        1\nPdia3          -3.401e-02  6.777e+04       0        1\nRpl35          -3.067e-01  2.143e+05       0        1\nSbf2            9.417e-02  5.697e+04       0        1\nCrip2          -3.933e-01  1.004e+05       0        1\nTpt1            1.063e+00  1.331e+05       0        1\nRpl35a          9.226e-01  7.634e+04       0        1\nX4930402H24Rik  9.828e-02  8.299e+04       0        1\nPpm1l          -1.593e-01  7.842e+04       0        1\nItfg1          -5.603e-02  6.805e+04       0        1\nLarge1         -6.845e-01  9.282e+04       0        1\nKtn1           -8.550e-02  5.866e+04       0        1\nDdah2          -6.620e-01  8.598e+04       0        1\nSumo1           1.256e+00  8.659e+04       0        1\nNipsnap3b      -1.015e-01  6.388e+04       0        1\nDynlrb1        -8.849e-02  1.269e+05       0        1\nSvbp           -6.846e-01  1.063e+05       0        1\nTmem57          2.613e-01  8.641e+04       0        1\nAcat2          -4.664e-02  6.863e+04       0        1\nHmgcs1          6.751e-02  8.691e+04       0        1\nPrmt2           2.628e-01  7.913e+04       0        1\nKif1a          -7.816e-01  7.952e+04       0        1\nAtp5o.1         1.438e+00  8.623e+04       0        1\nAtp6v1g1       -5.073e-01  1.624e+05       0        1\nCamta1         -1.516e-01  8.179e+04       0        1\nTnrc6c         -3.085e-01  6.284e+04       0        1\nKifap3         -7.520e-01  5.213e+04       0        1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 5.1795e+02  on 431  degrees of freedom\nResidual deviance: 2.7747e-10  on 281  degrees of freedom\nAIC: 302\n\nNumber of Fisher Scoring iterations: 28\n\n# Make predictions\nprobabilities &lt;- model %&gt;% predict(test.data, type = \"response\")\npredicted.classes &lt;- ifelse(probabilities &gt; 0.5, \"1\", \"0\")\n# Model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\nresult.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\n\naccuracy\n\n[1] 0.9166667\n\n\nSo also in this case a logistic regression confirm the difference in cell population detected by COTAN.\n\ncl511ClsMarkers &lt;- findClustersMarkers(cl511,n = 200,method = \"BH\")\ncl511ClsMarkers\n\n    CL           Gene      Score      adjPVal          DEA IsMarker  logFoldCh\n1    1          Rps12 -0.4631574 6.179304e-23 -0.584421532        0 -0.6825116\n2    1          Atp5e -0.4421507 5.491674e-21 -0.594736065        0 -0.6826112\n3    1          Rpl12 -0.4249280 2.145989e-19 -0.543923920        0 -0.5752903\n4    1         Gm2000 -0.4178094 8.266734e-19 -0.572051609        0 -0.7062262\n5    1          Rpl27 -0.4101463 3.545306e-18 -0.432800906        0 -0.4851285\n6    1          Rpl35 -0.4095642 3.545306e-18 -0.401851783        0 -0.6420850\n7    1          Rpl38 -0.3944000 8.478137e-17 -0.481105067        0 -0.4901851\n8    1          Rpl34 -0.3839938 6.783729e-16 -0.451914003        0 -0.5340951\n9    1         Rpl13a -0.3816076 9.935167e-16 -0.371125202        0 -0.4674161\n10   1          Rps27 -0.3776191 2.046247e-15 -0.363245952        0 -0.5241613\n11   1           Rps3 -0.3674962 1.463958e-14 -0.371730743        0 -0.5091646\n12   1          Rps21 -0.3610531 4.848936e-14 -0.461230993        0 -0.4306092\n13   1          Rps13 -0.3572065 9.536353e-14 -0.344408649        0 -0.4967312\n14   1          Rps29 -0.3548193 1.410408e-13 -0.408760507        0 -0.4107293\n15   1          Uqcrh -0.3468007 6.147911e-13 -0.424625935        0 -0.4208264\n16   1         Rps15a -0.3458429 6.912919e-13 -0.325579408        0 -0.5734880\n17   1          Pfdn5 -0.3412558 1.543625e-12 -0.382153327        0 -0.4357714\n18   1         Uqcr10 -0.3369860 3.225511e-12 -0.472888697        0 -0.4964385\n19   1          Rps26 -0.3311185 8.957326e-12 -0.304127026        0 -0.5340777\n20   1          Rps18 -0.3305680 9.404136e-12 -0.328642278        0 -0.4596902\n21   1           Tpt1 -0.3299757 9.821432e-12 -0.334833143        0 -0.4076206\n22   1           Pomp -0.3298025 9.821432e-12 -0.418627805        0 -0.4368943\n23   1          Uqcrq -0.3293949 1.011334e-11 -0.418934275        0 -0.4547596\n24   1          Rps10 -0.3272393 1.429376e-11 -0.335435993        0 -0.4795864\n25   1         Timm8b -0.3243765 2.202010e-11 -0.438549319        0 -0.4229584\n26   1          Rps25 -0.3237942 2.352031e-11 -0.338428626        0 -0.4375944\n27   1           Pfn1 -0.3207294 3.901832e-11 -0.350525197        0 -0.4524917\n28   1       Atp6v1g1 -0.3200480 4.247356e-11 -0.383837263        0 -0.3852555\n29   1         Snrpd2 -0.3191408 4.809087e-11 -0.417735191        0 -0.4236104\n30   1      Hist3h2ba -0.3189606 4.809087e-11 -0.375631294        0 -0.4143786\n31   1          Rpl37 -0.3182726 5.113078e-11 -0.267828291        0 -0.5620636\n32   1         Ndufs6 -0.3181898 5.113078e-11 -0.442192679        0 -0.4034311\n33   1        Atp5o.1 -0.3180827 5.113078e-11 -0.340155995        0 -0.4328550\n34   1         Snrpd1 -0.3153742 7.959216e-11 -0.419860640        0 -0.4110424\n35   1        Dynlrb1 -0.3138158 1.013177e-10 -0.324836665        0 -0.4016523\n36   1         Uqcr11 -0.3127960 1.175129e-10 -0.403898886        0 -0.3977030\n37   1         Rpl35a -0.3107331 1.629691e-10 -0.399323616        0 -0.4733195\n38   1           Btf3 -0.3105683 1.633253e-10 -0.341729103        0 -0.3262416\n39   1           Swi5 -0.3089875 2.084660e-10 -0.402642410        0 -0.3992487\n40   1          Rps20 -0.3085851 2.163449e-10 -0.329888659        0 -0.4357840\n41   1          Rps28 -0.3084818 2.163449e-10 -0.387688767        0 -0.3976983\n42   1          Rpl31 -0.3080980 2.255272e-10 -0.289569128        0 -0.3883420\n43   1         Ndufa7 -0.3058711 3.210511e-10 -0.421807554        0 -0.3983718\n44   1           Tbca -0.3008359 7.277351e-10 -0.410192113        0 -0.4041754\n45   1          Snrpb -0.3004162 7.631375e-10 -0.399423112        0 -0.3556668\n46   1          Rplp2 -0.2994340 8.784554e-10 -0.291728399        0 -0.3876488\n47   1          Rpl28 -0.2980796 1.052945e-09 -0.297305040        0 -0.4146471\n48   1          Uqcc2 -0.2963589 1.340886e-09 -0.414962158        0 -0.5371598\n49   1          Rpl36 -0.2959873 1.397320e-09 -0.261236332        0 -0.3646947\n50   1           Edf1 -0.2907873 3.178356e-09 -0.387089437        0 -0.3900142\n51   1          Fkbp3 -0.2887652 4.309332e-09 -0.368730324        0 -0.3556366\n52   1          Rps24 -0.2855195 6.948539e-09 -0.246438427        0 -0.4770224\n53   1           Gpx4 -0.2835266 9.334702e-09 -0.376994788        0 -0.3245309\n54   1           Bex3 -0.2811619 1.303730e-08 -0.280547062        0 -0.3180195\n55   1          Rps16 -0.2797315 1.599893e-08 -0.231254320        0 -0.4247866\n56   1          Tomm7 -0.2794463 1.619178e-08 -0.388177087        0 -0.4093449\n57   1          Hspe1 -0.2791884 1.656933e-08 -0.346960443        0 -0.3462706\n58   1         Chchd1 -0.2776055 2.048508e-08 -0.388413528        0 -0.4354694\n59   1          Rpl17 -0.2772519 2.129819e-08 -0.209546604        0 -0.5191041\n60   1          Atp5k -0.2762977 2.391943e-08 -0.389059604        0 -0.4740455\n61   1           Svbp -0.2760335 2.454234e-08 -0.296261430        0 -0.3014819\n62   1         Atp5c1 -0.2745657 3.024473e-08 -0.302196022        0 -0.2363772\n63   1          Eif3k -0.2733174 3.508935e-08 -0.320571855        0 -0.3840566\n64   1          Sumo1 -0.2733073 3.508935e-08 -0.339556685        0 -0.2914956\n65   1         Timm13 -0.2727718 3.702865e-08 -0.377774817        0 -0.3686286\n66   1         Mrpl30 -0.2720558 4.017398e-08 -0.382606552        0 -0.4749261\n67   1           Sem1 -0.2709400 4.629720e-08 -0.349511344        0 -0.3741535\n68   1          Usmg5 -0.2698157 5.342106e-08 -0.371666578        0 -0.3823320\n69   1          Rpl22 -0.2684437 6.472822e-08 -0.337441482        0 -0.3428325\n70   1          Snrpg -0.2676395 7.204825e-08 -0.324818354        0 -0.3005801\n71   1          Snrpf -0.2669220 7.916026e-08 -0.366090722        0 -0.3441404\n72   1           Txn1 -0.2665875 8.218961e-08 -0.365744291        0 -0.3887734\n73   1         Rps3a1 -0.2649592 1.008742e-07 -0.203167316        0 -0.4636491\n74   1           Nol7 -0.2647717 1.025205e-07 -0.369353871        0 -0.4529087\n75   1         Myl12b -0.2633126 1.217868e-07 -0.360537936        0 -0.3769849\n76   1          Rpl7a -0.2628953 1.276785e-07 -0.229794002        0 -0.3803800\n77   1          Cirbp -0.2626861 1.302382e-07 -0.293366942        0 -0.2427524\n78   1         Ndufv3 -0.2624217 1.339336e-07 -0.368371495        0 -0.3777157\n79   1         Rps27l -0.2612837 1.563403e-07 -0.352765028        0 -0.5679664\n80   1         Rpl37a -0.2606170 1.704016e-07 -0.202190619        0 -0.5219644\n81   1           Cycs -0.2595830 1.938262e-07 -0.364390057        0 -0.3851088\n82   1         Rpl36a -0.2587267 2.134566e-07 -0.241254704        0 -0.2850982\n83   1        Anapc13 -0.2587054 2.134566e-07 -0.360826542        0 -0.4999552\n84   1          Smdt1 -0.2574564 2.478866e-07 -0.340092908        0 -0.3049345\n85   1           Sdhb -0.2573936 2.478866e-07 -0.331714280        0 -0.3655544\n86   1         Mrpl52 -0.2566519 2.729649e-07 -0.353808904        0 -0.3746260\n87   1         Ranbp1 -0.2564555 2.745307e-07 -0.318553658        0 -0.2617357\n88   1 X0610012G03Rik -0.2564191 2.745307e-07 -0.360520158        0 -0.4450968\n89   1         Csnk2b -0.2562342 2.750654e-07 -0.358206518        0 -0.3913248\n90   1          Rps17 -0.2562178 2.750654e-07 -0.202386725        0 -0.4469891\n91   1         Chchd2 -0.2560472 2.793599e-07 -0.193788481        0 -0.4363077\n92   1          Rpl21 -0.2552685 3.066352e-07 -0.201647574        0 -0.3799537\n93   1          Hmgb1 -0.2548369 3.231737e-07 -0.269925703        0 -0.3340397\n94   1         Mrpl28 -0.2536164 3.806468e-07 -0.355563858        0 -0.4316112\n95   1          Rtraf -0.2534402 3.869427e-07 -0.328327979        0 -0.2697156\n96   1          Cops9 -0.2500670 5.951063e-07 -0.340913986        0 -0.3814245\n97   1          Atox1 -0.2499292 5.970482e-07 -0.348739858        0 -0.4098502\n98   1          Rplp1 -0.2493355 6.431863e-07 -0.224320629        0 -0.4307723\n99   1         Hnrnpc -0.2478595 7.764310e-07 -0.330024487        0 -0.2664530\n100  1         Mrps17 -0.2474809 8.116952e-07 -0.342001665        0 -0.4752512\n101  1           Vapa -0.2468766 8.721894e-07 -0.325521577        0 -0.2749610\n102  1          Hmgn1 -0.2467652 8.754427e-07 -0.261664532        0 -0.2649146\n103  1          Rps23 -0.2450458 1.067455e-06 -0.168396186        0 -0.4578971\n104  1          Atp5h -0.2448166 1.093425e-06 -0.290107514        0 -0.3256882\n105  1        Tmem256 -0.2442493 1.164429e-06 -0.342668966        0 -0.3865038\n106  1         Dctpp1 -0.2439550 1.203392e-06 -0.342700900        0 -0.2977997\n107  1        Hnrnpab -0.2435611 1.243292e-06 -0.307282760        0 -0.2954051\n108  1          Pcbp2 -0.2424633 1.432268e-06 -0.332213880        0 -0.3170388\n109  1         Tceal9 -0.2415600 1.595730e-06 -0.314463119        0 -0.2648281\n110  1        Lamtor5 -0.2396741 2.026750e-06 -0.335412030        0 -0.4350606\n111  1        Ndufb10 -0.2369256 2.845753e-06 -0.325685754        0 -0.2863959\n112  1          Cox7c -0.2369182 2.845753e-06 -0.241234218        0 -0.2824851\n113  1           Oaz1 -0.2366414 2.932600e-06 -0.229553175        0 -0.2739040\n114  1         Scand1 -0.2362110 3.045776e-06 -0.331520561        0 -0.4189525\n115  1         Polr2j -0.2362091 3.045776e-06 -0.328874086        0 -0.2842206\n116  1          Rpl10 -0.2359108 3.147805e-06 -0.159349430        0 -0.4748902\n117  1          Pfdn4 -0.2355480 3.280891e-06 -0.329735866        0 -0.4199890\n118  1          Rps19 -0.2350084 3.456874e-06 -0.161080275        0 -0.5025216\n119  1         Rpl10a -0.2349587 3.458358e-06 -0.183182197        0 -0.3144984\n120  1           Nme1 -0.2348907 3.468223e-06 -0.262253867        0 -0.2836137\n121  1          Arpc3 -0.2343649 3.670787e-06 -0.313434622        0 -0.3467814\n122  1            Ran -0.2336881 3.939102e-06 -0.234814216        0 -0.2541407\n123  1           Rnf7 -0.2330448 4.257928e-06 -0.326124365        0 -0.3808571\n124  1           Bex2 -0.2329246 4.299934e-06 -0.225915349        0 -0.2931452\n125  1         Snrpd3 -0.2324171 4.517130e-06 -0.325624088        0 -0.4085823\n126  1        Gm10260 -0.2324063 4.517130e-06 -0.321271193        0 -0.3556503\n127  1          Cox7b -0.2323683 4.517130e-06 -0.314201651        0 -0.2699185\n128  1          H2afz -0.2321814 4.601751e-06 -0.326113056        0 -0.3482270\n129  1          Ddah2 -0.2317266 4.853274e-06 -0.309847599        0 -0.3249683\n130  1           Tbcb -0.2312374 5.112467e-06 -0.291971857        0 -0.2296635\n131  1         Atp5j2 -0.2304235 5.636766e-06 -0.275307857        0 -0.2909852\n132  1         Cox6b1 -0.2303935 5.636766e-06 -0.229962365        0 -0.2710346\n133  1          Atp5j -0.2299245 5.889998e-06 -0.266743515        0 -0.2785515\n134  1        Uqcrfs1 -0.2295070 6.115004e-06 -0.308734220        0 -0.2729393\n135  1         Txnl4a -0.2284923 6.924840e-06 -0.320799295        0 -0.4264706\n136  1         Mrps24 -0.2284003 6.969881e-06 -0.315393958        0 -0.4010231\n137  1 X1110004F10Rik -0.2278742 7.413813e-06 -0.287768164        0 -0.2576501\n138  1            Mif -0.2278143 7.431771e-06 -0.177478896        0 -0.3175502\n139  1         Mrpl18 -0.2263196 8.711184e-06 -0.317228702        0 -0.3538738\n140  1          Crip2 -0.2262740 8.717744e-06 -0.287197403        0 -0.2328728\n141  1          Hsbp1 -0.2253209 9.566588e-06 -0.276267400        0 -0.2581882\n142  1          Rpl19 -0.2253162 9.566588e-06 -0.163326899        0 -0.3885120\n143  1          Rps11 -0.2251889 9.657436e-06 -0.157776150        0 -0.3842770\n144  1         Rpl23a -0.2250230 9.813642e-06 -0.149285057        0 -0.4333352\n145  1           Ubl5 -0.2248595 9.969336e-06 -0.287087026        0 -0.3088737\n146  1        Ndufab1 -0.2238181 1.114580e-05 -0.314875407        0 -0.3859670\n147  1         Atp5g1 -0.2231727 1.188843e-05 -0.250222398        0 -0.2660431\n148  1           Rps6 -0.2231526 1.188843e-05 -0.150980569        0 -0.3939822\n149  1          Eif3h -0.2230063 1.205170e-05 -0.232733733        0 -0.2308491\n150  1          Pdcd5 -0.2227795 1.232027e-05 -0.311874292        0 -0.3465369\n151  1         Zfp706 -0.2225782 1.248254e-05 -0.294529308        0 -0.2112568\n152  1         Abracl -0.2213980 1.419549e-05 -0.294523041        0 -0.2750669\n153  1          Pfdn6 -0.2209395 1.476171e-05 -0.304284285        0 -0.4071708\n154  1          Prdx5 -0.2209157 1.476171e-05 -0.299013395        0 -0.2559431\n155  1          Calm3 -0.2207705 1.494358e-05 -0.287426207        0 -0.2573251\n156  1         Rex1bd -0.2205505 1.528890e-05 -0.307047612        0 -0.4203590\n157  1            Esd -0.2203731 1.556032e-05 -0.304161420        0 -0.2975594\n158  1          Psma2 -0.2203299 1.557673e-05 -0.281528969        0 -0.2819089\n159  1         Dynll1 -0.2199227 1.610340e-05 -0.166597261        0 -0.3676117\n160  1          Rpl15 -0.2194056 1.680821e-05 -0.191938607        0 -0.2895195\n161  1          Glrx3 -0.2183435 1.868363e-05 -0.280170614        0 -0.1083442\n162  1        Selenow -0.2181378 1.885712e-05 -0.138831530        0 -0.3930863\n163  1           Gpx1 -0.2178310 1.949947e-05 -0.279371040        0 -0.5381608\n164  1         Ndufa2 -0.2176474 1.980926e-05 -0.300976478        0 -0.3264260\n165  1         Sec61b -0.2175938 1.983788e-05 -0.305219193        0 -0.3811968\n166  1         Mrpl58 -0.2174523 1.995077e-05 -0.293704298        0 -0.4914635\n167  1          Psma7 -0.2172906 2.020019e-05 -0.209183860        0 -0.2739562\n168  1          Bcas2 -0.2172874 2.020019e-05 -0.292976687        0 -0.3158613\n169  1          Srp14 -0.2170688 2.066579e-05 -0.271769744        0 -0.2990073\n170  1          Nop10 -0.2166143 2.148915e-05 -0.297121194        0 -0.3118031\n171  1         Rpl27a -0.2166118 2.148915e-05 -0.298383073        0 -0.2738241\n172  1         Eif2s2 -0.2163760 2.189740e-05 -0.292584825        0 -0.2296548\n173  1       Trappc2l -0.2156588 2.366951e-05 -0.301806692        0 -0.3406024\n174  1          H3f3a -0.2155267 2.374037e-05 -0.158685578        0 -0.3079225\n175  1         Gtf2h5 -0.2153756 2.409031e-05 -0.300293766        0 -0.3434282\n176  1           Sub1 -0.2151238 2.465546e-05 -0.267441868        0 -0.2508421\n177  1           Naca -0.2145087 2.636167e-05 -0.145045545        0 -0.3565910\n178  1           Rpl7 -0.2135409 2.888891e-05 -0.149749560        0 -0.3706477\n179  1          Ppdpf -0.2133283 2.942934e-05 -0.272195162        0 -0.3391216\n180  1          Rpl24 -0.2132538 2.959067e-05 -0.146932798        0 -0.4690503\n181  1        Gm10076 -0.2127651 3.115539e-05 -0.282965801        0 -0.4772046\n182  1         Ndufb2 -0.2126279 3.145520e-05 -0.299202768        0 -0.3525210\n183  1         Cox7a2 -0.2122745 3.258735e-05 -0.243328162        0 -0.2379424\n184  1          Rpl18 -0.2119888 3.360081e-05 -0.165256267        0 -0.2748972\n185  1           Rpl5 -0.2112880 3.615233e-05 -0.245086091        0 -0.2924973\n186  1           Jund -0.2110193 3.712070e-05 -0.289781906        0 -0.2279356\n187  1         Ndufc1 -0.2110091 3.712070e-05 -0.292312338        0 -0.3252872\n188  1         Ndufb4 -0.2104183 3.954536e-05 -0.285941769        0 -0.3979775\n189  1         Rps27a -0.2103446 3.976090e-05 -0.134015087        0 -0.4295827\n190  1          Slirp -0.2102817 3.992712e-05 -0.287017431        0 -0.4121032\n191  1            Fau -0.2100702 4.080285e-05 -0.144753143        0 -0.4027868\n192  1         Ndufb8 -0.2095109 4.343912e-05 -0.270642534        0 -0.2659853\n193  1        Txndc17 -0.2090668 4.521167e-05 -0.288566032        0 -0.3694520\n194  1          Rpl32 -0.2083948 4.832366e-05 -0.132268233        0 -0.5548520\n195  1          Ap2s1 -0.2082741 4.880111e-05 -0.286466016        0 -0.2605882\n196  1        Gabarap -0.2080173 4.988644e-05 -0.217033294        0 -0.2959616\n197  1        Smarcb1 -0.2080058 4.988644e-05 -0.289001130        0 -0.2851375\n198  1          H2afj -0.2078339 5.073976e-05 -0.287689727        0 -0.3315896\n199  1         Cacybp -0.2065095 5.741582e-05 -0.257972430        0 -0.2614856\n200  1           Grm8 -0.2057302 6.118469e-05 -0.285177863        0 -0.4215947\n201  1         Spock1  0.3251712 1.987472e-11  0.455886329        0  0.4817711\n202  1          Itfg1  0.2992721 8.834105e-10  0.415198329        0  0.3776583\n203  1        Serinc1  0.2965515 1.325342e-09  0.383066845        0  0.3825097\n204  1          Mdga2  0.2874687 5.199010e-09  0.406759633        0  0.4623846\n205  1           Ctsz  0.2824571 1.084179e-08  0.376190603        0  0.3565810\n206  1           Ryr3  0.2794415 1.619178e-08  0.393901553        0  0.4376830\n207  1          Ntrk3  0.2778532 2.002950e-08  0.383430383        0  0.3451647\n208  1          Mef2c  0.2768192 2.241673e-08  0.326245056        0  0.3636640\n209  1        Atp6ap2  0.2740521 3.223350e-08  0.366560745        0  0.3668009\n210  1         Sec11a  0.2731492 3.545140e-08  0.377852828        0  0.3837498\n211  1          Kat6b  0.2721583 4.007938e-08  0.333933141        0  0.4746228\n212  1        Atp6ap1  0.2712290 4.490246e-08  0.350049284        0  0.4142084\n213  1         Ctnnd2  0.2699332 5.314820e-08  0.213481416        0  0.3439896\n214  1           E2f7  0.2657007 9.256857e-08  0.146308864        0  0.8375014\n215  1           Sez6  0.2651659 9.898526e-08  0.372070656        0  0.3790612\n216  1         Tspan6  0.2641584 1.109053e-07  0.367899835        0  0.3765847\n217  1            App  0.2634301 1.217868e-07  0.362369757        0  0.3262137\n218  1          Mmp16  0.2632929 1.217868e-07  0.334724091        0  0.4886848\n219  1          Pcdh7  0.2605192 1.710786e-07  0.332881750        0  0.5049982\n220  1         Tspan3  0.2587958 2.134566e-07  0.265716677        0  0.2605555\n221  1          Aplp1  0.2586314 2.136606e-07  0.177853905        0  0.3496143\n222  1       Tmem131l  0.2581351 2.272127e-07  0.331972597        0  0.3784208\n223  1        Tspan14  0.2564934 2.745307e-07  0.290425465        0  0.3872160\n224  1         Igfbp2  0.2563489 2.748074e-07  0.280449328        0  0.3220609\n225  1         Arpp21  0.2559159 2.821614e-07  0.330819120        0  0.4396613\n226  1          Cadm1  0.2524424 4.414279e-07  0.307512491        0  0.4311111\n227  1         Slc1a3  0.2518736 4.739210e-07  0.278686993        0  0.5677610\n228  1          Qsox1  0.2518176 4.739210e-07  0.129720534        0  0.9440026\n229  1         Srgap1  0.2516320 4.824444e-07  0.351955260        0  0.3802237\n230  1          Dclk2  0.2499866 5.970152e-07  0.309765421        0  0.4091429\n231  1            Nin  0.2489162 6.763137e-07  0.348335654        0  0.3054527\n232  1        Txndc12  0.2468470 8.721894e-07  0.273446821        0  0.4258825\n233  1          Ssbp2  0.2459584 9.673892e-07  0.253548709        0  0.3774376\n234  1          Hspa5  0.2459273 9.673892e-07  0.341422616        0  0.3800562\n235  1            St7  0.2456147 1.002214e-06  0.275376258        0  0.4031442\n236  1           Rpn2  0.2451179 1.064678e-06  0.315955704        0  0.3923588\n237  1          Tusc3  0.2444387 1.142901e-06  0.342391280        0  0.3801631\n238  1          Tanc2  0.2438393 1.213928e-06  0.340481763        0  0.3503723\n239  1          Cntn1  0.2437268 1.224079e-06  0.256455525        0  0.4232511\n240  1        Kirrel3  0.2422930 1.455623e-06  0.229818229        0  0.4714545\n241  1          Stmn4  0.2398730 1.986851e-06  0.297274894        0  0.3311401\n242  1          Nfasc  0.2394718 2.068456e-06  0.319983683        0  0.4271409\n243  1           Copa  0.2370049 2.845753e-06  0.279773710        0  0.3776922\n244  1         Tmem59  0.2363463 3.029398e-06  0.258500737        0  0.2633921\n245  1           Psap  0.2354093 3.320500e-06  0.328368993        0  0.3226806\n246  1         Slc8a1  0.2351693 3.405560e-06  0.318002655        0  0.2340766\n247  1           Nrg3  0.2345848 3.588172e-06  0.232200827        0  0.3859916\n248  1           Cdh2  0.2342571 3.700757e-06  0.295915253        0  0.3735728\n249  1           Nptn  0.2336952 3.939102e-06  0.307107517        0  0.3492779\n250  1           Scg5  0.2327820 4.355076e-06  0.191574038        0  0.3128342\n251  1          Sgip1  0.2314536 4.999485e-06  0.324116505        0  0.3421051\n252  1        Arl6ip1  0.2302790 5.689163e-06  0.303617476        0  0.3017192\n253  1           Aig1  0.2299854 5.875742e-06  0.317866885        0  0.2858523\n254  1         Dnajc1  0.2298029 5.950542e-06  0.291526376        0  0.3192334\n255  1           Eya3  0.2295743 6.094840e-06  0.197034833        0  0.4881567\n256  1          Scn2a  0.2275217 7.673573e-06  0.275439488        0  0.3877597\n257  1          Neto2  0.2272724 7.854626e-06  0.317414065        0  0.3386953\n258  1          Ccnl2  0.2272571 7.854626e-06  0.315639010        0  0.2805397\n259  1           Snd1  0.2266029 8.489998e-06  0.234206269        0  0.4687846\n260  1           Itch  0.2264309 8.632912e-06  0.237678728        0  0.4055109\n261  1           Smg5  0.2258127 9.194418e-06  0.211790967        0  0.4186320\n262  1         Dhcr24  0.2257498 9.221748e-06  0.172139889        0  0.5983321\n263  1         Atp2b1  0.2256716 9.267149e-06  0.316569564        0  0.3856881\n264  1           Ctsb  0.2253026 9.566588e-06  0.309380340        0  0.3407802\n265  1           Nav3  0.2247291 1.008567e-05  0.093563556        0  0.2492735\n266  1        Fam214a  0.2245914 1.021286e-05  0.171890068        0  0.5798609\n267  1         Hs2st1  0.2245436 1.022577e-05  0.210938973        0  0.4343860\n268  1          Acvr1  0.2237108 1.124361e-05  0.245046415        0  0.4732941\n269  1        Gm43507  0.2233813 1.166148e-05  0.134423831        0  0.6365634\n270  1          Tmtc1  0.2227560 1.232027e-05  0.283396257        0  0.5203901\n271  1       Slc39a10  0.2227061 1.234105e-05  0.221046912        0  0.4692922\n272  1           Chga  0.2220755 1.322746e-05  0.258157620        0  0.4003207\n273  1          Nell2  0.2219452 1.338310e-05  0.262528105        0  0.3165228\n274  1            Tox  0.2217236 1.369482e-05  0.307961730        0  0.2845122\n275  1       Tmem185b  0.2212082 1.446869e-05  0.145000862        0  0.6700758\n276  1           Arnt  0.2211667 1.447939e-05  0.183920846        0  0.5088107\n277  1          Ttc17  0.2209047 1.476171e-05  0.200313856        0  0.4843724\n278  1         Anks1b  0.2202085 1.574453e-05  0.259525186        0  0.2459429\n279  1         Tmbim6  0.2201693 1.575400e-05  0.296723430        0  0.2638407\n280  1       Slc38a10  0.2199521 1.610340e-05  0.222647754        0  0.3700007\n281  1          Olfm2  0.2198541 1.617231e-05  0.288090883        0  0.3518482\n282  1          Kcnq5  0.2195847 1.664727e-05  0.286063007        0  0.4272948\n283  1         Kcnk10  0.2194963 1.675960e-05  0.304951569        0  0.3138762\n284  1           P3h4  0.2194473 1.679117e-05  0.096152381        0  0.8099715\n285  1        Tmem35a  0.2192435 1.707587e-05  0.282156334        0  0.4109415\n286  1            Boc  0.2191374 1.722917e-05  0.144001912        0  0.6010687\n287  1           Akt3  0.2187568 1.797847e-05  0.291269502        0  0.2628117\n288  1            Por  0.2186967 1.800140e-05  0.221583151        0  0.4889486\n289  1        Carmil1  0.2186805 1.800140e-05  0.172385718        0  0.2887406\n290  1           Mtdh  0.2182782 1.875823e-05  0.305198057        0  0.2807799\n291  1        Slc6a15  0.2181696 1.885712e-05  0.294708690        0  0.4716892\n292  1         Leprot  0.2181468 1.885712e-05  0.287771079        0  0.2951880\n293  1        Slc20a1  0.2176376 1.980926e-05  0.206485243        0  0.4314969\n294  1          Klf12  0.2175271 1.992265e-05  0.190113093        0  0.4983598\n295  1          H2.D1  0.2174530 1.995077e-05  0.236771996        0  0.3639213\n296  1          Saraf  0.2170315 2.068118e-05  0.301342370        0  0.3081942\n297  1       Tmem184c  0.2168042 2.118017e-05  0.293019454        0  0.3225185\n298  1          Fgf14  0.2165924 2.148915e-05  0.294990000        0  0.2876250\n299  1        Tmem108  0.2165529 2.151223e-05  0.203420751        0  0.3562990\n300  1          Lrp11  0.2160417 2.271805e-05  0.257692377        0  0.3773354\n301  1           Ldb2  0.2156172 2.366951e-05  0.246880825        0  0.2939618\n302  1           Syt1  0.2155833 2.366951e-05  0.302361146        0  0.3450811\n303  1        Cacna1c  0.2155815 2.366951e-05  0.302390808        0  0.3207911\n304  1          Csmd2  0.2151751 2.459131e-05  0.260495451        0  0.3452957\n305  1          Grik2  0.2145339 2.636167e-05  0.203671516        0  0.4514875\n306  1           Rcn2  0.2144294 2.652000e-05  0.298624694        0  0.2854721\n307  1         Grin2b  0.2143889 2.655527e-05  0.248868756        0  0.3129156\n308  1            Os9  0.2141573 2.720820e-05  0.248183496        0  0.3525981\n309  1         Fnbp1l  0.2141115 2.726253e-05  0.294970193        0  0.2614826\n310  1         Elovl5  0.2136834 2.859818e-05  0.192073021        0  0.5763508\n311  1         Rnf145  0.2135605 2.888891e-05  0.211109452        0  0.3942400\n312  1         Tnrc6c  0.2134860 2.897903e-05  0.296161168        0  0.2655012\n313  1         Ift172  0.2131423 2.988534e-05  0.125435960        0  0.7273950\n314  1         Setbp1  0.2126505 3.145520e-05  0.286783208        0  0.2808616\n315  1         Lrpap1  0.2123968 3.222429e-05  0.282556149        0  0.2556996\n316  1          Cdkl5  0.2119231 3.375163e-05  0.202749827        0  0.3911032\n317  1        Tmem63b  0.2116532 3.473486e-05  0.257901365        0  0.3875314\n318  1         Clstn2  0.2109563 3.723062e-05  0.297033125        0  0.3872830\n319  1           Calr  0.2092966 4.440350e-05  0.283686135        0  0.2802238\n320  1         Cdc14b  0.2092583 4.446097e-05  0.140147627        0  0.7198813\n321  1          Dock3  0.2090612 4.521167e-05  0.272536204        0  0.3741515\n322  1          Ddx50  0.2090289 4.523908e-05  0.291792171        0  0.2860189\n323  1         Ormdl3  0.2087933 4.635939e-05  0.248034498        0  0.3832619\n324  1          Foxp2  0.2083850 4.832366e-05  0.176026483        0  0.5684095\n325  1          Ntrk2  0.2080868 4.972509e-05  0.206305761        0  0.5329103\n326  1          Magi1  0.2076794 5.148581e-05  0.244371184        0  0.4553671\n327  1           Rgma  0.2076559 5.148581e-05  0.188299997        0  0.5780725\n328  1         Ergic2  0.2075656 5.187083e-05  0.275484245        0  0.2655840\n329  1         Zfp846  0.2071862 5.404855e-05  0.255703669        0  0.2995412\n330  1           Sybu  0.2070890 5.449645e-05  0.289333389        0  0.3264942\n331  1        Dync1i1  0.2069879 5.481618e-05  0.254837280        0  0.3032658\n332  1          Camkv  0.2069864 5.481618e-05  0.195381942        0  0.4211762\n333  1          Llgl1  0.2068048 5.581613e-05  0.195630229        0  0.4266499\n334  1           Alg6  0.2066856 5.642350e-05  0.093541750        0  0.9009502\n335  1           Lnpk  0.2063438 5.814647e-05  0.230628755        0  0.3247704\n336  1        Gm20517  0.2063231 5.814647e-05  0.065489099        0  1.1410193\n337  1          Spon1  0.2063231 5.814647e-05  0.065489099        0  1.0616953\n338  1          Trpm3  0.2061229 5.929493e-05  0.133769079        0  0.6898117\n339  1         Pgrmc1  0.2061031 5.929493e-05  0.252666488        0  0.3026805\n340  1           Ctsl  0.2060444 5.952276e-05  0.238140162        0  0.2874709\n341  1        B3galt1  0.2059271 6.015918e-05  0.279044596        0  0.3441872\n342  1        B3galt2  0.2057494 6.118469e-05  0.247277559        0  0.3838402\n343  1        Ldlrad4  0.2054385 6.309715e-05  0.259502176        0  0.3296407\n344  1            Cpe  0.2052019 6.465516e-05  0.269442478        0  0.3516827\n345  1           Emc3  0.2049225 6.619369e-05  0.266401991        0  0.3590846\n346  1          Ttc19  0.2048293 6.671582e-05  0.201417863        0  0.4082099\n347  1       Adamts18  0.2044224 6.971209e-05  0.254236134        0  0.3869474\n348  1         Scube1  0.2040749 7.193151e-05  0.230460171        0  0.4709928\n349  1            Fry  0.2033546 7.767694e-05  0.264472630        0  0.2718307\n350  1          Csmd3  0.2030060 8.037958e-05  0.155816648        0  0.5650582\n351  1          Cd200  0.2028440 8.133106e-05  0.258922487        0  0.2797321\n352  1          Flrt2  0.2028171 8.133106e-05  0.276986088        0  0.4293102\n353  1         Atraid  0.2028083 8.133106e-05  0.258958193        0  0.3129678\n354  1         Alkbh1  0.2026368 8.267641e-05  0.229879087        0  0.4014083\n355  1        Gm26835  0.2023977 8.449163e-05  0.185215890        0  0.4222330\n356  1        Phactr1  0.2021293 8.687322e-05  0.173431445        0  0.2632504\n357  1          Foxp1  0.2015481 9.229412e-05  0.281778139        0  0.2580225\n358  1        Cacna1e  0.2014218 9.336938e-05  0.219810953        0  0.3844196\n359  1           Ssr2  0.2012809 9.461454e-05  0.276623311        0  0.2615975\n360  1         Dopey1  0.2009499 9.769588e-05  0.172183755        0  0.3199163\n361  1         Hivep2  0.2003740 1.034248e-04  0.232538737        0  0.3244790\n362  1          Gdpd1  0.1999223 1.085345e-04  0.261281586        0  0.2925950\n363  1       Tmem132a  0.1998304 1.093707e-04  0.248241945        0  0.2428495\n364  1           Ssh2  0.1996881 1.108396e-04  0.264780436        0  0.3329310\n365  1          Cxadr  0.1995267 1.124015e-04  0.269612813        0  0.3356759\n366  1        Zdhhc20  0.1994962 1.124015e-04  0.256883165        0  0.3232686\n367  1          Cspg5  0.1994202 1.128686e-04  0.209863044        0  0.5253050\n368  1          Ascc3  0.1988958 1.180109e-04  0.193849276        0  0.3602826\n369  1          Myo9a  0.1987511 1.196295e-04  0.242816497        0  0.3474970\n370  1         Nedd4l  0.1981704 1.269985e-04  0.220281568        0  0.2870636\n371  1          Scaf8  0.1978388 1.307762e-04  0.214682928        0  0.3909157\n372  1           Rbl2  0.1974549 1.356099e-04  0.114691514        0  0.7665457\n373  1          Nemp1  0.1974446 1.356099e-04  0.125570923        0  0.5981904\n374  1       B3galnt1  0.1973052 1.373818e-04  0.211457295        0  0.4204007\n375  1        Slitrk5  0.1971875 1.388396e-04  0.154081834        0  0.4541803\n376  1           Fat3  0.1970097 1.409003e-04  0.277771751        0  0.2584599\n377  1          Pdia6  0.1960866 1.555464e-04  0.256779913        0  0.2786742\n378  1         Rnf215  0.1960722 1.555464e-04  0.162111030        0  0.4738305\n379  1       Serpini1  0.1960223 1.556320e-04  0.275652471        0  0.3356833\n380  1         Plppr1  0.1957434 1.597088e-04  0.267040572        0  0.2795475\n381  1           Sbf2  0.1955265 1.623747e-04  0.269545721        0  0.3006908\n382  1         Rnf112  0.1954556 1.632493e-04  0.078266198        0  0.8890006\n383  1           Trio  0.1952968 1.653238e-04  0.256882694        0  0.2908840\n384  1        Slc38a9  0.1947229 1.752457e-04  0.242759189        0  0.3353488\n385  1           Meg3  0.1946101 1.770021e-04  0.255066294        0  0.3784197\n386  1          Adcy3  0.1943568 1.811160e-04  0.119432950        0  0.5909601\n387  1          Epha7  0.1943252 1.813108e-04  0.186747182        0  0.4107213\n388  1           St7l  0.1940574 1.849371e-04  0.183347676        0  0.3886257\n389  1         Arxes1  0.1939779 1.860660e-04  0.222317738        0  0.4383596\n390  1         Lrrtm3  0.1939585 1.860660e-04  0.225249076        0  0.5679511\n391  1         R3hdm4  0.1936969 1.905676e-04  0.271025511        0  0.2734504\n392  1           Tia1  0.1936105 1.919255e-04  0.260114544        0  0.2339791\n393  1            Dst  0.1934045 1.958332e-04  0.253123736        0  0.2589698\n394  1         Mycbp2  0.1933357 1.968488e-04  0.270575906        0  0.2335223\n395  1          Mgat2  0.1927568 2.086952e-04  0.228367943        0  0.2780917\n396  1           Gpc6  0.1926176 2.112865e-04  0.123634593        0  0.5501739\n397  1          Trpv2  0.1925152 2.127680e-04  0.048926008        0  1.1914960\n398  1          Lamp1  0.1923454 2.157697e-04  0.263435942        0  0.2363786\n399  1           Ktn1  0.1923440 2.157697e-04  0.267593249        0  0.3159114\n400  1         Tmem9b  0.1918165 2.269125e-04  0.248450921        0  0.3040203\n401  2         Spock1 -0.3251727 1.986918e-11 -0.083077886        0 -0.4817711\n402  2          Itfg1 -0.2992747 8.830343e-10 -0.075663448        0 -0.3776583\n403  2        Serinc1 -0.2965425 1.327300e-09 -0.069805254        0 -0.3825097\n404  2          Mdga2 -0.2874719 5.196375e-09 -0.074125811        0 -0.4623846\n405  2           Ctsz -0.2824553 1.084481e-08 -0.068553871        0 -0.3565810\n406  2           Ryr3 -0.2794362 1.620516e-08 -0.071780446        0 -0.4376830\n407  2          Ntrk3 -0.2778571 2.001761e-08 -0.069874603        0 -0.3451647\n408  2          Mef2c -0.2768284 2.238544e-08 -0.059454544        0 -0.3636640\n409  2        Atp6ap2 -0.2740471 3.225774e-08 -0.066798217        0 -0.3668009\n410  2         Sec11a -0.2731475 3.546047e-08 -0.068856788        0 -0.3837498\n411  2          Kat6b -0.2721645 4.004189e-08 -0.060854994        0 -0.4746228\n412  2        Atp6ap1 -0.2712336 4.487202e-08 -0.063791559        0 -0.4142084\n413  2         Ctnnd2 -0.2699454 5.305199e-08 -0.038905086        0 -0.3439896\n414  2           E2f7 -0.2656917 9.269129e-08 -0.026661384        0 -0.8375014\n415  2           Sez6 -0.2651659 9.898528e-08 -0.067803513        0 -0.3790612\n416  2         Tspan6 -0.2641542 1.109735e-07 -0.067042386        0 -0.3765847\n417  2            App -0.2634345 1.218616e-07 -0.066036813        0 -0.3262137\n418  2          Mmp16 -0.2632887 1.218616e-07 -0.060996767        0 -0.4886848\n419  2          Pcdh7 -0.2605182 1.711040e-07 -0.060661767        0 -0.5049982\n420  2         Tspan3 -0.2587857 2.135807e-07 -0.048420428        0 -0.2605555\n421  2          Aplp1 -0.2586243 2.138782e-07 -0.032409943        0 -0.3496143\n422  2       Tmem131l -0.2581374 2.271400e-07 -0.060496852        0 -0.3784208\n423  2        Tspan14 -0.2564871 2.746660e-07 -0.052923765        0 -0.3872160\n424  2         Igfbp2 -0.2563473 2.748693e-07 -0.051106778        0 -0.3220609\n425  2         Arpp21 -0.2559070 2.825174e-07 -0.060284033        0 -0.4396613\n426  2          Cadm1 -0.2524469 4.411479e-07 -0.056039898        0 -0.4311111\n427  2         Slc1a3 -0.2518730 4.741182e-07 -0.050785813        0 -0.5677610\n428  2          Qsox1 -0.2517963 4.753354e-07 -0.023637347        0 -0.9440026\n429  2         Srgap1 -0.2516370 4.821080e-07 -0.064139100        0 -0.3802237\n430  2          Dclk2 -0.2499856 5.967449e-07 -0.056449240        0 -0.4091429\n431  2            Nin -0.2489245 6.755454e-07 -0.063480313        0 -0.3054527\n432  2        Txndc12 -0.2468445 8.724833e-07 -0.049830511        0 -0.4258825\n433  2          Ssbp2 -0.2459592 9.670182e-07 -0.046205058        0 -0.3774376\n434  2          Hspa5 -0.2459301 9.670182e-07 -0.062219143        0 -0.3800562\n435  2            St7 -0.2456164 1.001978e-06 -0.050182966        0 -0.4031442\n436  2           Rpn2 -0.2451161 1.064941e-06 -0.057577098        0 -0.3923588\n437  2          Tusc3 -0.2444311 1.144088e-06 -0.062393005        0 -0.3801631\n438  2          Tanc2 -0.2438380 1.214142e-06 -0.062046648        0 -0.3503723\n439  2          Cntn1 -0.2437246 1.224446e-06 -0.046734210        0 -0.4232511\n440  2        Kirrel3 -0.2422936 1.455520e-06 -0.041880532        0 -0.4714545\n441  2          Stmn4 -0.2398701 1.987621e-06 -0.054172609        0 -0.3311401\n442  2          Nfasc -0.2394724 2.068306e-06 -0.058311686        0 -0.4271409\n443  2           Copa -0.2370107 2.844142e-06 -0.050985213        0 -0.3776922\n444  2         Tmem59 -0.2363461 3.029473e-06 -0.047107301        0 -0.2633921\n445  2           Psap -0.2354175 3.316905e-06 -0.059841733        0 -0.3226806\n446  2         Slc8a1 -0.2351684 3.405950e-06 -0.057950330        0 -0.2340766\n447  2           Nrg3 -0.2345814 3.589783e-06 -0.042314010        0 -0.3859916\n448  2           Cdh2 -0.2342556 3.701484e-06 -0.053925148        0 -0.3735728\n449  2           Nptn -0.2336996 3.937207e-06 -0.055966145        0 -0.3492779\n450  2           Scg5 -0.2327845 4.353659e-06 -0.034911468        0 -0.3128342\n451  2          Sgip1 -0.2314531 4.999791e-06 -0.059064569        0 -0.3421051\n452  2        Arl6ip1 -0.2302800 5.688491e-06 -0.055329313        0 -0.3017192\n453  2           Aig1 -0.2299782 5.881194e-06 -0.057923983        0 -0.2858523\n454  2         Dnajc1 -0.2298092 5.945769e-06 -0.053127144        0 -0.3192334\n455  2           Eya3 -0.2295670 6.100529e-06 -0.035905089        0 -0.4881567\n456  2          Scn2a -0.2275122 7.682828e-06 -0.050192042        0 -0.3877597\n457  2          Neto2 -0.2272673 7.854185e-06 -0.057841995        0 -0.3386953\n458  2          Ccnl2 -0.2272576 7.854185e-06 -0.057519923        0 -0.2805397\n459  2           Snd1 -0.2266094 8.483010e-06 -0.042681313        0 -0.4687846\n460  2           Itch -0.2264373 8.625908e-06 -0.043314112        0 -0.4055109\n461  2           Smg5 -0.2258205 9.185318e-06 -0.038596624        0 -0.4186320\n462  2         Dhcr24 -0.2257463 9.225802e-06 -0.031369066        0 -0.5983321\n463  2         Atp2b1 -0.2256641 9.275968e-06 -0.057687459        0 -0.3856881\n464  2           Ctsb -0.2253017 9.567604e-06 -0.056379065        0 -0.3407802\n465  2           Nav3 -0.2247205 1.009659e-05 -0.017049704        0 -0.2492735\n466  2        Fam214a -0.2245869 1.021576e-05 -0.031323399        0 -0.5798609\n467  2         Hs2st1 -0.2245514 1.021576e-05 -0.038441356        0 -0.4343860\n468  2          Acvr1 -0.2237028 1.125479e-05 -0.044653931        0 -0.4732941\n469  2        Gm43507 -0.2233956 1.164069e-05 -0.024498012        0 -0.6365634\n470  2          Tmtc1 -0.2227576 1.231783e-05 -0.051644490        0 -0.5203901\n471  2       Slc39a10 -0.2227101 1.233483e-05 -0.040282752        0 -0.4692922\n472  2           Chga -0.2220672 1.324119e-05 -0.047043040        0 -0.4003207\n473  2          Nell2 -0.2219414 1.338939e-05 -0.047840442        0 -0.3165228\n474  2            Tox -0.2217279 1.368759e-05 -0.056121838        0 -0.2845122\n475  2       Tmem185b -0.2212111 1.446357e-05 -0.026424269        0 -0.6700758\n476  2           Arnt -0.2211700 1.447350e-05 -0.033516928        0 -0.5088107\n477  2          Ttc17 -0.2209115 1.475035e-05 -0.036504908        0 -0.4843724\n478  2         Anks1b -0.2201991 1.575077e-05 -0.047292013        0 -0.2459429\n479  2         Tmbim6 -0.2201709 1.575077e-05 -0.054073180        0 -0.2638407\n480  2       Slc38a10 -0.2199636 1.609008e-05 -0.040575862        0 -0.3700007\n481  2          Olfm2 -0.2198471 1.618613e-05 -0.052497978        0 -0.3518482\n482  2          Kcnq5 -0.2195901 1.663637e-05 -0.052131357        0 -0.4272948\n483  2         Kcnk10 -0.2195041 1.674338e-05 -0.055574205        0 -0.3138762\n484  2           P3h4 -0.2194235 1.681993e-05 -0.017520224        0 -0.8099715\n485  2        Tmem35a -0.2192482 1.706599e-05 -0.051419273        0 -0.4109415\n486  2            Boc -0.2191264 1.725252e-05 -0.026240563        0 -0.6010687\n487  2           Akt3 -0.2187650 1.796032e-05 -0.053080888        0 -0.2628117\n488  2            Por -0.2187058 1.800550e-05 -0.040381419        0 -0.4889486\n489  2        Carmil1 -0.2186786 1.800550e-05 -0.031414081        0 -0.2887406\n490  2           Mtdh -0.2182809 1.875207e-05 -0.055617811        0 -0.2807799\n491  2        Slc6a15 -0.2181638 1.884053e-05 -0.053704199        0 -0.4716892\n492  2         Leprot -0.2181450 1.884053e-05 -0.052440925        0 -0.2951880\n493  2        Slc20a1 -0.2176394 1.980493e-05 -0.037628714        0 -0.4314969\n494  2          Klf12 -0.2175232 1.993214e-05 -0.034644237        0 -0.4983598\n495  2          H2.D1 -0.2174584 1.994929e-05 -0.043148707        0 -0.3639213\n496  2          Saraf -0.2170244 2.069912e-05 -0.054912688        0 -0.3081942\n497  2       Tmem184c -0.2167978 2.119660e-05 -0.053396211        0 -0.3225185\n498  2          Fgf14 -0.2165954 2.148125e-05 -0.053757635        0 -0.2876250\n499  2        Tmem108 -0.2165627 2.148689e-05 -0.037071617        0 -0.3562990\n500  2          Lrp11 -0.2160405 2.272142e-05 -0.046959762        0 -0.3773354\n501  2           Ldb2 -0.2156147 2.367654e-05 -0.044989290        0 -0.2939618\n502  2        Cacna1c -0.2155847 2.367654e-05 -0.055106373        0 -0.3207911\n503  2           Syt1 -0.2155790 2.367654e-05 -0.055099039        0 -0.3450811\n504  2          Csmd2 -0.2151655 2.462000e-05 -0.047468707        0 -0.3452957\n505  2          Grik2 -0.2145322 2.631314e-05 -0.037115343        0 -0.4514875\n506  2           Rcn2 -0.2144319 2.651186e-05 -0.054419892        0 -0.2854721\n507  2         Grin2b -0.2143914 2.654737e-05 -0.045352599        0 -0.3129156\n508  2            Os9 -0.2141584 2.720479e-05 -0.045227418        0 -0.3525981\n509  2         Fnbp1l -0.2141045 2.728537e-05 -0.053751521        0 -0.2614826\n510  2         Elovl5 -0.2136772 2.861939e-05 -0.035001009        0 -0.5763508\n511  2         Rnf145 -0.2135561 2.893633e-05 -0.038470294        0 -0.3942400\n512  2         Tnrc6c -0.2134906 2.896283e-05 -0.053971490        0 -0.2655012\n513  2         Ift172 -0.2131292 2.993213e-05 -0.022857154        0 -0.7273950\n514  2         Setbp1 -0.2126523 3.147019e-05 -0.052261774        0 -0.2808616\n515  2         Lrpap1 -0.2123979 3.222011e-05 -0.051491290        0 -0.2556996\n516  2          Cdkl5 -0.2119296 3.372541e-05 -0.036948829        0 -0.3911032\n517  2        Tmem63b -0.2116461 3.476450e-05 -0.046996517        0 -0.3875314\n518  2         Clstn2 -0.2109588 3.721956e-05 -0.054129851        0 -0.3872830\n519  2           Calr -0.2093031 4.436976e-05 -0.051698545        0 -0.2802238\n520  2         Cdc14b -0.2092744 4.437711e-05 -0.025541470        0 -0.7198813\n521  2          Dock3 -0.2090558 4.523928e-05 -0.049663776        0 -0.3741515\n522  2          Ddx50 -0.2090289 4.523928e-05 -0.053174124        0 -0.2860189\n523  2         Ormdl3 -0.2087976 4.633580e-05 -0.045200985        0 -0.3832619\n524  2          Foxp2 -0.2083742 4.838465e-05 -0.032076156        0 -0.5684095\n525  2          Ntrk2 -0.2080832 4.974629e-05 -0.037595038        0 -0.5329103\n526  2          Magi1 -0.2076817 5.144462e-05 -0.044532956        0 -0.4553671\n527  2           Rgma -0.2076627 5.144462e-05 -0.034315588        0 -0.5780725\n528  2         Ergic2 -0.2075678 5.185736e-05 -0.050202831        0 -0.2655840\n529  2         Zfp846 -0.2071885 5.403425e-05 -0.046598132        0 -0.2995412\n530  2           Sybu -0.2070879 5.450360e-05 -0.052725775        0 -0.3264942\n531  2        Dync1i1 -0.2069837 5.486586e-05 -0.046438782        0 -0.3032658\n532  2          Camkv -0.2069786 5.486586e-05 -0.035603677        0 -0.4211762\n533  2          Llgl1 -0.2068022 5.583319e-05 -0.035649810        0 -0.4266499\n534  2           Alg6 -0.2066740 5.649948e-05 -0.017045428        0 -0.9009502\n535  2           Lnpk -0.2063485 5.810123e-05 -0.042029123        0 -0.3247704\n536  2        Gm20517 -0.2063298 5.810123e-05 -0.011934657        0 -1.1410193\n537  2          Spon1 -0.2063298 5.810123e-05 -0.011934657        0 -1.0616953\n538  2          Trpm3 -0.2061208 5.923166e-05 -0.024376879        0 -0.6898117\n539  2         Pgrmc1 -0.2061123 5.923166e-05 -0.046046206        0 -0.3026805\n540  2           Ctsl -0.2060428 5.953423e-05 -0.043396621        0 -0.2874709\n541  2        B3galt1 -0.2059237 6.018295e-05 -0.050850262        0 -0.3441872\n542  2        B3galt2 -0.2057491 6.121111e-05 -0.045062037        0 -0.3838402\n543  2        Ldlrad4 -0.2054362 6.311424e-05 -0.047289294        0 -0.3296407\n544  2            Cpe -0.2051983 6.468208e-05 -0.049100420        0 -0.3516827\n545  2           Emc3 -0.2049214 6.620182e-05 -0.048546954        0 -0.3590846\n546  2          Ttc19 -0.2048220 6.677153e-05 -0.036703662        0 -0.4082099\n547  2       Adamts18 -0.2044280 6.966750e-05 -0.046331449        0 -0.3869474\n548  2         Scube1 -0.2040851 7.184739e-05 -0.041999523        0 -0.4709928\n549  2            Fry -0.2033530 7.769159e-05 -0.048195223        0 -0.2718307\n550  2          Csmd3 -0.2030058 8.038151e-05 -0.028394890        0 -0.5650582\n551  2          Cd200 -0.2028380 8.131483e-05 -0.047182811        0 -0.2797321\n552  2          Flrt2 -0.2028239 8.131483e-05 -0.050477664        0 -0.4293102\n553  2         Atraid -0.2028083 8.131483e-05 -0.047190701        0 -0.3129678\n554  2         Alkbh1 -0.2026408 8.263928e-05 -0.041892347        0 -0.4014083\n555  2        Gm26835 -0.2023891 8.457433e-05 -0.033750995        0 -0.4222330\n556  2        Phactr1 -0.2021275 8.689090e-05 -0.031604635        0 -0.2632504\n557  2          Foxp1 -0.2015461 9.231480e-05 -0.051348744        0 -0.2580225\n558  2        Cacna1e -0.2014118 9.347565e-05 -0.040054791        0 -0.3844196\n559  2           Ssr2 -0.2012752 9.467585e-05 -0.050408436        0 -0.2615975\n560  2         Dopey1 -0.2009604 9.757977e-05 -0.031379186        0 -0.3199163\n561  2         Hivep2 -0.2003663 1.035141e-04 -0.042374589        0 -0.3244790\n562  2          Gdpd1 -0.1999246 1.085061e-04 -0.047614655        0 -0.2925950\n563  2       Tmem132a -0.1998393 1.092617e-04 -0.045239855        0 -0.2428495\n564  2           Ssh2 -0.1996800 1.109416e-04 -0.048249730        0 -0.3329310\n565  2          Cxadr -0.1995205 1.125124e-04 -0.049130784        0 -0.3356759\n566  2        Zdhhc20 -0.1994903 1.125124e-04 -0.046811183        0 -0.3232686\n567  2          Cspg5 -0.1994159 1.127918e-04 -0.038243122        0 -0.5253050\n568  2          Ascc3 -0.1988892 1.180975e-04 -0.035324554        0 -0.3602826\n569  2          Myo9a -0.1987439 1.197252e-04 -0.044247565        0 -0.3474970\n570  2         Nedd4l -0.1981619 1.271194e-04 -0.040140822        0 -0.2870636\n571  2          Scaf8 -0.1978457 1.306755e-04 -0.039123657        0 -0.3909157\n572  2           Rbl2 -0.1974622 1.356527e-04 -0.020901341        0 -0.7665457\n573  2          Nemp1 -0.1974417 1.356527e-04 -0.022882824        0 -0.5981904\n574  2       B3galnt1 -0.1973076 1.373451e-04 -0.038534944        0 -0.4204007\n575  2        Slitrk5 -0.1971726 1.390696e-04 -0.028076658        0 -0.4541803\n576  2           Fat3 -0.1970110 1.408803e-04 -0.050619479        0 -0.2584599\n577  2          Pdia6 -0.1960923 1.555679e-04 -0.046795118        0 -0.2786742\n578  2         Rnf215 -0.1960710 1.555679e-04 -0.029541775        0 -0.4738305\n579  2       Serpini1 -0.1960175 1.557135e-04 -0.050231734        0 -0.3356833\n580  2         Plppr1 -0.1957489 1.596118e-04 -0.048664945        0 -0.2795475\n581  2           Sbf2 -0.1955199 1.624925e-04 -0.049118446        0 -0.3006908\n582  2         Rnf112 -0.1954497 1.633550e-04 -0.014262248        0 -0.8890006\n583  2           Trio -0.1952979 1.653021e-04 -0.046812764        0 -0.2908840\n584  2        Slc38a9 -0.1947198 1.753063e-04 -0.044237995        0 -0.3353488\n585  2           Meg3 -0.1946128 1.769487e-04 -0.046482126        0 -0.3784197\n586  2          Adcy3 -0.1943549 1.811538e-04 -0.021764399        0 -0.5909601\n587  2          Epha7 -0.1943130 1.815532e-04 -0.034029347        0 -0.4107213\n588  2           St7l -0.1940499 1.850877e-04 -0.033410698        0 -0.3886257\n589  2         Arxes1 -0.1939825 1.859845e-04 -0.040514574        0 -0.4383596\n590  2         Lrrtm3 -0.1939625 1.859845e-04 -0.041048639        0 -0.5679511\n591  2         R3hdm4 -0.1936960 1.905873e-04 -0.049389523        0 -0.2734504\n592  2           Tia1 -0.1936068 1.920028e-04 -0.047400525        0 -0.2339791\n593  2            Dst -0.1934066 1.957878e-04 -0.046127979        0 -0.2589698\n594  2         Mycbp2 -0.1933442 1.966651e-04 -0.049310013        0 -0.2335223\n595  2          Mgat2 -0.1927482 2.088898e-04 -0.041614303        0 -0.2780917\n596  2           Gpc6 -0.1926238 2.112472e-04 -0.022531012        0 -0.5501739\n597  2          Trpv2 -0.1925211 2.126335e-04 -0.008916197        0 -1.1914960\n598  2          Lamp1 -0.1923446 2.157594e-04 -0.048006487        0 -0.2363786\n599  2           Ktn1 -0.1923444 2.157594e-04 -0.048764404        0 -0.3159114\n600  2         Tmem9b -0.1918146 2.269600e-04 -0.045275476        0 -0.3040203\n601  2          Rps12  0.4631549 6.183206e-23  0.106500254        0  0.6825116\n602  2          Atp5e  0.4421521 5.489863e-21  0.108380812        0  0.6826112\n603  2          Rpl12  0.4249284 2.145813e-19  0.099120915        0  0.5752903\n604  2         Gm2000  0.4178124 8.261193e-19  0.104247356        0  0.7062262\n605  2          Rpl27  0.4101575 3.538517e-18  0.078872713        0  0.4851285\n606  2          Rpl35  0.4095728 3.538517e-18  0.073232148        0  0.6420850\n607  2          Rpl38  0.3944075 8.464359e-17  0.087674849        0  0.4901851\n608  2          Rpl34  0.3839933 6.784492e-16  0.082353483        0  0.5340951\n609  2         Rpl13a  0.3816079 9.934717e-16  0.067631259        0  0.4674161\n610  2          Rps27  0.3776182 2.046629e-15  0.066195204        0  0.5241613\n611  2           Rps3  0.3675068 1.460826e-14  0.067743533        0  0.5091646\n612  2          Rps21  0.3610482 4.853602e-14  0.084050328        0  0.4306092\n613  2          Rps13  0.3572064 9.536627e-14  0.062762560        0  0.4967312\n614  2          Rps29  0.3548155 1.411443e-13  0.074488820        0  0.4107293\n615  2          Uqcrh  0.3468014 6.147145e-13  0.077380961        0  0.4208264\n616  2         Rps15a  0.3458384 6.918806e-13  0.059330509        0  0.5734880\n617  2          Pfdn5  0.3412500 1.545294e-12  0.069639730        0  0.4357714\n618  2         Uqcr10  0.3369872 3.224794e-12  0.086176185        0  0.4964385\n619  2          Rps26  0.3311064 8.977031e-12  0.055419925        0  0.5340777\n620  2          Rps18  0.3305636 9.411567e-12  0.059888646        0  0.4596902\n621  2           Tpt1  0.3299694 9.825250e-12  0.061016443        0  0.4076206\n622  2           Pomp  0.3298004 9.825250e-12  0.076287261        0  0.4368943\n623  2          Uqcrq  0.3294012 1.010187e-11  0.076345062        0  0.4547596\n624  2          Rps10  0.3272417 1.428769e-11  0.061127915        0  0.4795864\n625  2         Timm8b  0.3243726 2.203535e-11  0.079917155        0  0.4229584\n626  2          Rps25  0.3237953 2.351562e-11  0.061673043        0  0.4375944\n627  2           Pfn1  0.3207365 3.896942e-11  0.063878640        0  0.4524917\n628  2       Atp6v1g1  0.3200504 4.245618e-11  0.069948285        0  0.3852555\n629  2         Snrpd2  0.3191388 4.805527e-11  0.076124607        0  0.4236104\n630  2      Hist3h2ba  0.3189649 4.805527e-11  0.068453286        0  0.4143786\n631  2          Rpl37  0.3182724 5.123125e-11  0.048807100        0  0.5620636\n632  2         Ndufs6  0.3181885 5.123125e-11  0.080581730        0  0.4034311\n633  2        Atp5o.1  0.3180715 5.123125e-11  0.061985424        0  0.4328550\n634  2         Snrpd1  0.3153652 7.971523e-11  0.076510259        0  0.4110424\n635  2        Dynlrb1  0.3138211 1.012249e-10  0.059196929        0  0.4016523\n636  2         Uqcr11  0.3127887 1.176600e-10  0.073601953        0  0.3977030\n637  2         Rpl35a  0.3107299 1.630574e-10  0.072769158        0  0.4733195\n638  2           Btf3  0.3105600 1.635550e-10  0.062272635        0  0.3262416\n639  2           Swi5  0.3089918 2.083158e-10  0.073375700        0  0.3992487\n640  2          Rps20  0.3085745 2.163595e-10  0.060114501        0  0.4357840\n641  2          Rps28  0.3084814 2.163595e-10  0.070649556        0  0.3976983\n642  2          Rpl31  0.3080905 2.258154e-10  0.052767731        0  0.3883420\n643  2         Ndufa7  0.3058712 3.210445e-10  0.076867243        0  0.3983718\n644  2           Tbca  0.3008336 7.280122e-10  0.074749926        0  0.4041754\n645  2          Snrpb  0.3004187 7.628240e-10  0.072788633        0  0.3556668\n646  2          Rplp2  0.2994367 8.780648e-10  0.053162990        0  0.3876488\n647  2          Rpl28  0.2980768 1.053428e-09  0.054178251        0  0.4146471\n648  2          Uqcc2  0.2963570 1.341309e-09  0.075619263        0  0.5371598\n649  2          Rpl36  0.2959874 1.397297e-09  0.047605870        0  0.3646947\n650  2           Edf1  0.2907784 3.182905e-09  0.070538266        0  0.3900142\n651  2          Fkbp3  0.2887636 4.310446e-09  0.067194418        0  0.3556366\n652  2          Rps24  0.2855186 6.949575e-09  0.044909040        0  0.4770224\n653  2           Gpx4  0.2835273 9.333670e-09  0.068701024        0  0.3245309\n654  2           Bex3  0.2811669 1.302731e-08  0.051125802        0  0.3180195\n655  2          Rps16  0.2797322 1.599726e-08  0.042142247        0  0.4247866\n656  2          Tomm7  0.2794532 1.620516e-08  0.070740371        0  0.4093449\n657  2          Hspe1  0.2791867 1.657357e-08  0.063227231        0  0.3462706\n658  2         Chchd1  0.2776050 2.048674e-08  0.070781588        0  0.4354694\n659  2          Rpl17  0.2772637 2.125977e-08  0.038187908        0  0.5191041\n660  2          Atp5k  0.2763011 2.390680e-08  0.070900347        0  0.4740455\n661  2           Svbp  0.2760304 2.455412e-08  0.053987963        0  0.3014819\n662  2         Atp5c1  0.2745608 3.026725e-08  0.055069073        0  0.2363772\n663  2          Eif3k  0.2733197 3.506397e-08  0.058419216        0  0.3840566\n664  2          Sumo1  0.2733121 3.506397e-08  0.061879483        0  0.2914956\n665  2         Timm13  0.2727683 3.704806e-08  0.068842122        0  0.3686286\n666  2         Mrpl30  0.2720637 4.012608e-08  0.069725533        0  0.4749261\n667  2           Sem1  0.2709451 4.626165e-08  0.063693670        0  0.3741535\n668  2          Usmg5  0.2698205 5.338295e-08  0.067731078        0  0.3823320\n669  2          Rpl22  0.2684403 6.476015e-08  0.061492178        0  0.3428325\n670  2          Snrpg  0.2676331 7.211655e-08  0.059191175        0  0.3005801\n671  2          Snrpf  0.2669184 7.920313e-08  0.066712857        0  0.3441404\n672  2           Txn1  0.2665795 8.228619e-08  0.066648652        0  0.3887734\n673  2         Rps3a1  0.2649696 1.007190e-07  0.037025236        0  0.4636491\n674  2           Nol7  0.2647710 1.025313e-07  0.067308244        0  0.4529087\n675  2         Myl12b  0.2633170 1.218616e-07  0.065702982        0  0.3769849\n676  2          Rpl7a  0.2628980 1.276278e-07  0.041876461        0  0.3803800\n677  2          Cirbp  0.2626801 1.303533e-07  0.053459872        0  0.2427524\n678  2         Ndufv3  0.2624191 1.339840e-07  0.067128743        0  0.3777157\n679  2         Rps27l  0.2612859 1.562914e-07  0.064285925        0  0.5679664\n680  2         Rpl37a  0.2606248 1.702086e-07  0.036846892        0  0.5219644\n681  2           Cycs  0.2595888 1.936645e-07  0.066405340        0  0.3851088\n682  2         Rpl36a  0.2587217 2.135807e-07  0.043963697        0  0.2850982\n683  2        Anapc13  0.2587014 2.135807e-07  0.065753436        0  0.4999552\n684  2          Smdt1  0.2574554 2.478030e-07  0.061975870        0  0.3049345\n685  2           Sdhb  0.2573959 2.478030e-07  0.060449809        0  0.3655544\n686  2         Mrpl52  0.2566472 2.731507e-07  0.064474421        0  0.3746260\n687  2         Ranbp1  0.2564576 2.746660e-07  0.058051435        0  0.2617357\n688  2 X0610012G03Rik  0.2564156 2.746660e-07  0.065697745        0  0.4450968\n689  2         Csnk2b  0.2562380 2.751587e-07  0.065277968        0  0.3913248\n690  2          Rps17  0.2562154 2.751587e-07  0.036881176        0  0.4469891\n691  2         Chchd2  0.2560482 2.793180e-07  0.035314782        0  0.4363077\n692  2          Rpl21  0.2552768 3.062727e-07  0.036748025        0  0.3799537\n693  2          Hmgb1  0.2548389 3.230834e-07  0.049189725        0  0.3340397\n694  2         Mrpl28  0.2536180 3.805588e-07  0.064795852        0  0.4316112\n695  2          Rtraf  0.2534456 3.866532e-07  0.059833416        0  0.2697156\n696  2          Cops9  0.2500709 5.947902e-07  0.062126694        0  0.3814245\n697  2          Atox1  0.2499329 5.967449e-07  0.063552806        0  0.4098502\n698  2          Rplp1  0.2493323 6.434789e-07  0.040878060        0  0.4307723\n699  2         Hnrnpc  0.2478592 7.764553e-07  0.060141263        0  0.2664530\n700  2         Mrps17  0.2474735 8.125236e-07  0.062322086        0  0.4752512\n701  2           Vapa  0.2468733 8.724833e-07  0.059319966        0  0.2749610\n702  2          Hmgn1  0.2467629 8.757159e-07  0.047683446        0  0.2649146\n703  2          Rps23  0.2450356 1.068941e-06  0.030686046        0  0.4578971\n704  2          Atp5h  0.2448179 1.093221e-06  0.052867429        0  0.3256882\n705  2        Tmem256  0.2442495 1.164388e-06  0.062445626        0  0.3865038\n706  2         Dctpp1  0.2439548 1.203424e-06  0.062451327        0  0.2977997\n707  2        Hnrnpab  0.2435671 1.242278e-06  0.055998413        0  0.2954051\n708  2          Pcbp2  0.2424629 1.432352e-06  0.060540190        0  0.3170388\n709  2         Tceal9  0.2415540 1.597013e-06  0.057304106        0  0.2648281\n710  2        Lamtor5  0.2396744 2.026684e-06  0.061123169        0  0.4350606\n711  2        Ndufb10  0.2369275 2.844142e-06  0.059351141        0  0.2863959\n712  2          Cox7c  0.2369225 2.844142e-06  0.043961608        0  0.2824851\n713  2           Oaz1  0.2366477 2.930192e-06  0.041833242        0  0.2739040\n714  2         Scand1  0.2362155 3.049012e-06  0.060415092        0  0.4189525\n715  2         Polr2j  0.2362011 3.049012e-06  0.059929630        0  0.2842206\n716  2          Rpl10  0.2359047 3.150343e-06  0.029037953        0  0.4748902\n717  2          Pfdn4  0.2355440 3.282597e-06  0.060087712        0  0.4199890\n718  2          Rps19  0.2350001 3.457301e-06  0.029353084        0  0.5025216\n719  2         Rpl10a  0.2349610 3.457301e-06  0.033382154        0  0.3144984\n720  2           Nme1  0.2348924 3.467459e-06  0.047791625        0  0.2836137\n721  2          Arpc3  0.2343591 3.673533e-06  0.057116704        0  0.3467814\n722  2            Ran  0.2336918 3.937207e-06  0.042791552        0  0.2541407\n723  2           Rnf7  0.2330433 4.258758e-06  0.059430206        0  0.3808571\n724  2           Bex2  0.2329252 4.299581e-06  0.041169321        0  0.2931452\n725  2         Snrpd3  0.2324127 4.521549e-06  0.059338302        0  0.4085823\n726  2        Gm10260  0.2324024 4.521549e-06  0.058545183        0  0.3556503\n727  2          Cox7b  0.2323608 4.521549e-06  0.057256017        0  0.2699185\n728  2          H2afz  0.2321811 4.601972e-06  0.059428432        0  0.3482270\n729  2          Ddah2  0.2317245 4.854571e-06  0.056463922        0  0.3249683\n730  2           Tbcb  0.2312379 5.112130e-06  0.053206995        0  0.2296635\n731  2         Atp5j2  0.2304200 5.634610e-06  0.050169374        0  0.2909852\n732  2         Cox6b1  0.2303965 5.634610e-06  0.041907250        0  0.2710346\n733  2          Atp5j  0.2299308 5.885226e-06  0.048610780        0  0.2785515\n734  2        Uqcrfs1  0.2295095 6.113070e-06  0.056262137        0  0.2729393\n735  2         Txnl4a  0.2284938 6.923514e-06  0.058460570        0  0.4264706\n736  2         Mrps24  0.2283968 6.972967e-06  0.057474281        0  0.4010231\n737  2 X1110004F10Rik  0.2278692 7.418587e-06  0.052439661        0  0.2576501\n738  2            Mif  0.2278012 7.444171e-06  0.032340632        0  0.3175502\n739  2         Mrpl18  0.2263135 8.717060e-06  0.057807952        0  0.3538738\n740  2          Crip2  0.2262746 8.717060e-06  0.052336959        0  0.2328728\n741  2          Hsbp1  0.2253249 9.567604e-06  0.050345909        0  0.2581882\n742  2          Rpl19  0.2253114 9.567604e-06  0.029762904        0  0.3885120\n743  2          Rps11  0.2251894 9.656863e-06  0.028752065        0  0.3842770\n744  2         Rpl23a  0.2250285 9.806820e-06  0.027205318        0  0.4333352\n745  2           Ubl5  0.2248612 9.967272e-06  0.052317084        0  0.3088737\n746  2        Ndufab1  0.2238209 1.114197e-05  0.057381361        0  0.3859670\n747  2         Atp5g1  0.2231648 1.188149e-05  0.045597127        0  0.2660431\n748  2           Rps6  0.2231573 1.188149e-05  0.027514205        0  0.3939822\n749  2          Eif3h  0.2229958 1.206753e-05  0.042409739        0  0.2308491\n750  2          Pdcd5  0.2227854 1.231783e-05  0.056835261        0  0.3465369\n751  2         Zfp706  0.2225725 1.249138e-05  0.053671558        0  0.2112568\n752  2         Abracl  0.2213934 1.420354e-05  0.053670676        0  0.2750669\n753  2          Pfdn6  0.2209369 1.475035e-05  0.055449950        0  0.4071708\n754  2          Prdx5  0.2209109 1.475035e-05  0.054488883        0  0.2559431\n755  2          Calm3  0.2207639 1.495591e-05  0.052376925        0  0.2573251\n756  2         Rex1bd  0.2205570 1.527669e-05  0.055955819        0  0.4203590\n757  2            Esd  0.2203737 1.555921e-05  0.055428362        0  0.2975594\n758  2          Psma2  0.2203365 1.556413e-05  0.051305369        0  0.2819089\n759  2         Dynll1  0.2199209 1.610702e-05  0.030359249        0  0.3676117\n760  2          Rpl15  0.2193999 1.681993e-05  0.034976623        0  0.2895195\n761  2          Glrx3  0.2183361 1.870043e-05  0.051054582        0  0.1083442\n762  2        Selenow  0.2181498 1.884053e-05  0.025301063        0  0.3930863\n763  2           Gpx1  0.2178309 1.949979e-05  0.050910563        0  0.5381608\n764  2         Ndufa2  0.2176492 1.980493e-05  0.054848285        0  0.3264260\n765  2         Sec61b  0.2175909 1.984489e-05  0.055620236        0  0.3811968\n766  2         Mrpl58  0.2174529 1.994929e-05  0.053522736        0  0.4914635\n767  2          Psma7  0.2172964 2.021002e-05  0.038121191        0  0.2739562\n768  2          Bcas2  0.2172834 2.021002e-05  0.053389009        0  0.3158613\n769  2          Srp14  0.2170597 2.068867e-05  0.049523310        0  0.2990073\n770  2          Nop10  0.2166123 2.148125e-05  0.054144750        0  0.3118031\n771  2         Rpl27a  0.2166058 2.148125e-05  0.054373704        0  0.2738241\n772  2         Eif2s2  0.2163714 2.190974e-05  0.053317435        0  0.2296548\n773  2       Trappc2l  0.2156572 2.367654e-05  0.054998706        0  0.3406024\n774  2          H3f3a  0.2155351 2.371636e-05  0.028918858        0  0.3079225\n775  2         Gtf2h5  0.2153738 2.409548e-05  0.054722951        0  0.3434282\n776  2           Sub1  0.2151160 2.467880e-05  0.048734928        0  0.2508421\n777  2           Naca  0.2145240 2.631314e-05  0.026433959        0  0.3565910\n778  2           Rpl7  0.2135255 2.894195e-05  0.027287338        0  0.3706477\n779  2          Ppdpf  0.2133232 2.944698e-05  0.049601748        0  0.3391216\n780  2          Rpl24  0.2132565 2.958106e-05  0.026776331        0  0.4690503\n781  2        Gm10076  0.2127650 3.115580e-05  0.051565651        0  0.4772046\n782  2         Ndufb2  0.2126237 3.147088e-05  0.054523515        0  0.3525210\n783  2         Cox7a2  0.2122685 3.261049e-05  0.044341150        0  0.2379424\n784  2          Rpl18  0.2119882 3.360348e-05  0.030115034        0  0.2748972\n785  2           Rpl5  0.2112951 3.612182e-05  0.044664255        0  0.2924973\n786  2           Jund  0.2110174 3.713592e-05  0.052807317        0  0.2279356\n787  2         Ndufc1  0.2110056 3.713592e-05  0.053268050        0  0.3252872\n788  2         Ndufb4  0.2104104 3.958197e-05  0.052106056        0  0.3979775\n789  2         Rps27a  0.2103616 3.968123e-05  0.024423931        0  0.4295827\n790  2          Slirp  0.2102777 3.994578e-05  0.052303033        0  0.4121032\n791  2            Fau  0.2100576 4.086342e-05  0.026377204        0  0.4027868\n792  2         Ndufb8  0.2095178 4.340397e-05  0.049321594        0  0.2659853\n793  2        Txndc17  0.2090594 4.523928e-05  0.052584368        0  0.3694520\n794  2          Rpl32  0.2084089 4.834087e-05  0.024105251        0  0.5548520\n795  2          Ap2s1  0.2082742 4.880084e-05  0.052203544        0  0.2605882\n796  2        Gabarap  0.2080185 4.986800e-05  0.039550822        0  0.2959616\n797  2        Smarcb1  0.2080089 4.986800e-05  0.052666315        0  0.2851375\n798  2          H2afj  0.2078390 5.070994e-05  0.052427803        0  0.3315896\n799  2         Cacybp  0.2065126 5.739543e-05  0.047011760        0  0.2614856\n800  2           Grm8  0.2057265 6.121111e-05  0.051967845        0  0.4215947"
  },
  {
    "objectID": "NonCT_clusters.html#cluster-184-e15.0",
    "href": "NonCT_clusters.html#cluster-184-e15.0",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Cluster 184 e15.0",
    "text": "Cluster 184 e15.0\n\n\n  OriginalCluster CellNumber COTANClusterNumber          Accuracy\n1      Cl525E15.0        826                  3 0.786585365853659\n2      Cl511E15.0        540                  2 0.916666666666667\n3      Cl184E15.0        322                  2              &lt;NA&gt;\n         Clusters\n1 316 - 176 - 334\n2       143 - 397\n3        94 - 228\n\n\n\ncells &lt;- getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]][getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]] == \"184\"]\n\ncells &lt;-names(cells)\n\ncl184 &lt;-  automaticCOTANObjectCreation(raw = getRawData(e15.0)[,cells],\n                                       GEO = \"Loom\",\n                                       sequencingMethod = \"10X\",\n                                       sampleCondition = \"cl184\",\n                                       cores = 10,saveObj = T,\n                                       outDir = \"Data/MouseCortexFromLoom/NotCTSingleClusters/\",\n                                       calcCoex = T)\n\n\ncl184GDI &lt;- calculateGDI(cl184)\n\nsubsetGDIcl184 &lt;- cl184GDI[cl184GDI$sum.raw.norm &gt; 7,]\ntop.GDI.genes &lt;- rownames(subsetGDIcl184[order(subsetGDIcl184$GDI,decreasing = T),])[1:50]\n\nGDIPlot(cl184,genes = \"\",GDIIn = cl184GDI)\n\n\n\n\n\nlist.cl.CT &lt;- cellsUniformClustering(cl184, GDIThreshold = 1.43, cores = 10L,\n                         saveObj = TRUE, outDir = outDir)\n\ncl184 &lt;- addClusterization(cl184, clName = \"split\",\n                              clusters = list.cl.CT$clusters,\n                              coexDF = list.cl.CT$coex, override = TRUE)\n\ntable(list.cl.CT$clusters)\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cl184, clusters = list.cl.CT$clusters,\n                            GDIThreshold = 1.43, batchSize = 4L, cores = 10L,\n                            saveObj = TRUE, outDir = outDir)\n\ncl184 &lt;- addClusterization(cl184, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\nsaveRDS(cl184,paste0(outDir,\"cl184.cotan.RDS\"))\n\ntable(str_split(names(mergedClusters),pattern = \"_\",simplify = T)[,1],mergedClusters)\n\n\ndata &lt;- getNormalizedData(cl184)\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cl184)[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)-1\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                              Tfap2c     Gpc4      Psph    Pbdc1      Mcm6\n10X64_3_A_1:CTGTAACTGTGTTGx 9.921146 9.921146  9.515705 0.000000  0.000000\n10X74_4_A_1:ATCAAATGTCTCCGx 9.214393 9.214393  9.214393 9.214393 10.312939\n10X73_3_A_1:ACAACCGACCCACTx 0.000000 9.799638  9.106546 0.000000  0.000000\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303 0.000000  0.000000 9.258303  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000 0.000000  0.000000 0.000000  9.878809\n10X64_3_A_1:GAAACAGATCTCTAx 0.000000 0.000000 10.225911 0.000000  9.127371\n                                Cdca7   Nmral1     Tipin     Fbxl7     Btg2\n10X64_3_A_1:CTGTAACTGTGTTGx  9.921146 9.515705  9.921146  8.822632 8.822632\n10X74_4_A_1:ATCAAATGTCTCCGx  0.000000 9.214393  0.000000  9.907490 0.000000\n10X73_3_A_1:ACAACCGACCCACTx  9.106546 0.000000  0.000000  0.000000 9.106546\n10X64_3_A_1:AAACATTGGGTCTAx  9.258303 9.951403  9.258303 10.356852 0.000000\n10X64_3_A_1:TTGGTACTAGCGTTx 10.284257 9.185713 10.571931 10.795069 9.878809\n10X64_3_A_1:GAAACAGATCTCTAx  9.127371 9.820464 10.225911 10.225911 0.000000\n                               Nrarp     Ier2      Rgcc     Rlbp1   Gm29260\n10X64_3_A_1:CTGTAACTGTGTTGx 9.921146 9.921146  9.921146 10.208816  8.822632\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 9.214393 10.600612 10.312939 10.823751\n10X73_3_A_1:ACAACCGACCCACTx 9.799638 0.000000 10.492757  9.106546 10.715895\n10X64_3_A_1:AAACATTGGGTCTAx 9.951403 0.000000  9.258303  9.258303  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx 9.185713 9.878809  0.000000  0.000000  9.185713\n10X64_3_A_1:GAAACAGATCTCTAx 0.000000 9.127371 11.324499  0.000000 11.206718\n                               Rgs20     Sfrp1       Nes     Msi1   Pantr1\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632  9.921146  0.000000 0.000000 10.20882\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 11.006069  0.000000 0.000000 10.82375\n10X73_3_A_1:ACAACCGACCCACTx 0.000000 11.052361 10.205084 0.000000 11.05236\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303 10.644526  0.000000 9.258303 10.86766\n10X64_3_A_1:TTGGTACTAGCGTTx 9.185713  0.000000  0.000000 0.000000 10.28426\n10X64_3_A_1:GAAACAGATCTCTAx 9.127371 10.919040  9.127371 0.000000 10.91904\n                                Cyr61   Zfp536   Pitpnc1    Polr3h     Csmd1\n10X64_3_A_1:CTGTAACTGTGTTGx  8.822632 9.515705  0.000000  8.822632  8.822632\n10X74_4_A_1:ATCAAATGTCTCCGx  9.907490 9.214393  9.214393  9.214393  9.214393\n10X73_3_A_1:ACAACCGACCCACTx 10.205084 9.799638  9.106546  0.000000 10.205084\n10X64_3_A_1:AAACATTGGGTCTAx  9.951403 0.000000  0.000000  0.000000 10.867665\n10X64_3_A_1:TTGGTACTAGCGTTx 10.795069 0.000000  0.000000  9.185713  9.185713\n10X64_3_A_1:GAAACAGATCTCTAx 11.206718 9.127371 10.919040 10.225911 10.919040\n                                  Mt3   Sncaip CT025619.1   Slc1a3   Rnf180\n10X64_3_A_1:CTGTAACTGTGTTGx  8.822632 9.921146   0.000000 9.515705 0.000000\n10X74_4_A_1:ATCAAATGTCTCCGx  9.214393 9.214393   9.907490 9.214393 9.214393\n10X73_3_A_1:ACAACCGACCCACTx  9.106546 0.000000   9.106546 9.106546 0.000000\n10X64_3_A_1:AAACATTGGGTCTAx 10.356852 0.000000   0.000000 0.000000 0.000000\n10X64_3_A_1:TTGGTACTAGCGTTx  9.185713 9.878809   9.185713 0.000000 0.000000\n10X64_3_A_1:GAAACAGATCTCTAx 11.073188 0.000000   0.000000 0.000000 9.820464\n                                  Ptn    Aldoc   Fgfbp3      Hes5    Mfge8\n10X64_3_A_1:CTGTAACTGTGTTGx  9.515705 10.20882 9.921146 11.125084 0.000000\n10X74_4_A_1:ATCAAATGTCTCCGx 11.516888 11.98689 0.000000  9.214393 9.214393\n10X73_3_A_1:ACAACCGACCCACTx 10.898213 10.20508 0.000000  9.106546 9.799638\n10X64_3_A_1:AAACATTGGGTCTAx 12.349254 11.33766 9.258303 10.356852 9.951403\n10X64_3_A_1:TTGGTACTAGCGTTx 10.795069 10.57193 9.878809  9.878809 9.185713\n10X64_3_A_1:GAAACAGATCTCTAx 11.835320 11.69222 0.000000  0.000000 0.000000\n                               Maml2    Lpar1     Cadm2    Sema5a       Qk\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632 0.000000  0.000000  0.000000 0.000000\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 0.000000  9.214393 10.600612 0.000000\n10X73_3_A_1:ACAACCGACCCACTx 0.000000 9.799638  0.000000 10.492757 9.799638\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303 0.000000 10.356852 10.644526 9.951403\n10X64_3_A_1:TTGGTACTAGCGTTx 9.185713 0.000000  0.000000  0.000000 0.000000\n10X64_3_A_1:GAAACAGATCTCTAx 9.127371 9.127371 10.225911  9.127371 0.000000\n                              Nkain2     Hes6    Rhbdl3  Neurog2     Chd7\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632 8.822632  9.515705 9.515705 0.000000\n10X74_4_A_1:ATCAAATGTCTCCGx 9.907490 0.000000  9.907490 0.000000 0.000000\n10X73_3_A_1:ACAACCGACCCACTx 9.106546 9.799638 10.205084 0.000000 0.000000\n10X64_3_A_1:AAACATTGGGTCTAx 0.000000 0.000000  0.000000 0.000000 0.000000\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000 9.185713  9.185713 0.000000 9.878809\n10X64_3_A_1:GAAACAGATCTCTAx 9.820464 0.000000  9.127371 0.000000 0.000000\n                               Msmo1  Igfbpl1    Zmiz1     Kat6b      Nfib\n10X64_3_A_1:CTGTAACTGTGTTGx 0.000000 11.22039 9.515705  0.000000 11.125084\n10X74_4_A_1:ATCAAATGTCTCCGx 9.214393  0.00000 9.214393 10.600612 10.600612\n10X73_3_A_1:ACAACCGACCCACTx 0.000000  0.00000 0.000000 10.492757  9.799638\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303  0.00000 0.000000  0.000000  9.951403\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000  0.00000 9.185713  9.185713  9.878809\n10X64_3_A_1:GAAACAGATCTCTAx 9.127371  0.00000 0.000000  0.000000 10.225911\n                               Fezf2     Dok5     Tenm2     Meis2   Mpped2\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632 9.515705  9.921146  9.515705 11.81822\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 9.214393  0.000000 10.823751 11.00607\n10X73_3_A_1:ACAACCGACCCACTx 0.000000 9.106546  0.000000 10.205084 10.49276\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303 9.951403 10.356852 11.049983  0.00000\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000 0.000000  0.000000  9.878809 11.13154\n10X64_3_A_1:GAAACAGATCTCTAx 9.127371 9.820464  0.000000 11.206718 10.51358\n                             Gm17750    Kcnh7  Mir670hg      Gpc6      Dab1\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632 0.000000  9.515705  0.000000 10.208816\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 9.907490 10.312939  0.000000  0.000000\n10X73_3_A_1:ACAACCGACCCACTx 9.799638 9.799638  0.000000  9.106546  0.000000\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303 9.951403  0.000000  9.258303  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx 9.185713 0.000000  0.000000 10.795069  9.185713\n10X64_3_A_1:GAAACAGATCTCTAx 0.000000 9.127371  9.820464  0.000000  9.127371\n                            Hist3h2ba     Scrn1     Ank2    Bach2    Rbbp7\n10X64_3_A_1:CTGTAACTGTGTTGx  8.822632  8.822632 8.822632 10.43195 9.515705\n10X74_4_A_1:ATCAAATGTCTCCGx  9.214393  9.214393 9.214393  9.90749 0.000000\n10X73_3_A_1:ACAACCGACCCACTx  0.000000  9.106546 9.106546  0.00000 0.000000\n10X64_3_A_1:AAACATTGGGTCTAx  0.000000  9.258303 9.951403  0.00000 0.000000\n10X64_3_A_1:TTGGTACTAGCGTTx  0.000000  0.000000 0.000000  0.00000 0.000000\n10X64_3_A_1:GAAACAGATCTCTAx  0.000000 10.736722 0.000000  0.00000 9.820464\n                               Rpl26   Serbp1     Prmt1     Rack1  Hsp90aa1\n10X64_3_A_1:CTGTAACTGTGTTGx  0.00000 10.76842 10.208816 10.431952 11.019725\n10X74_4_A_1:ATCAAATGTCTCCGx 11.61220 10.82375 10.600612 10.312939  9.214393\n10X73_3_A_1:ACAACCGACCCACTx 11.50434 10.71590 11.303672 10.898213 10.715895\n10X64_3_A_1:AAACATTGGGTCTAx  0.00000 10.64453 10.356852 11.049983 10.867665\n10X64_3_A_1:TTGGTACTAGCGTTx  0.00000 10.28426 11.265065  0.000000 10.795069\n10X64_3_A_1:GAAACAGATCTCTAx  0.00000 10.22591  9.127371  9.127371 10.736722\n                               Ddx39      Cct5     H2afx     Lsm3     Ntmt1\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632 10.208816  9.921146 9.515705 10.208816\n10X74_4_A_1:ATCAAATGTCTCCGx 9.214393 10.600612  9.907490 9.214393  9.214393\n10X73_3_A_1:ACAACCGACCCACTx 0.000000 10.898213  0.000000 0.000000  9.106546\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303 10.644526  0.000000 9.258303  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000  9.878809  9.185713 9.185713  9.878809\n10X64_3_A_1:GAAACAGATCTCTAx 0.000000 10.919040 10.513584 9.820464  0.000000\n                               Hmgb3  Snrnp70      Rfc2   Tuba1b     Snrpb\n10X64_3_A_1:CTGTAACTGTGTTGx 10.76842 8.822632  0.000000 10.61427 10.208816\n10X74_4_A_1:ATCAAATGTCTCCGx  9.90749 9.907490 10.312939 11.16022 10.823751\n10X73_3_A_1:ACAACCGACCCACTx 10.49276 9.799638  9.106546 10.89821 10.715895\n10X64_3_A_1:AAACATTGGGTCTAx 10.35685 9.258303  0.000000 11.56080  9.951403\n10X64_3_A_1:TTGGTACTAGCGTTx 10.57193 0.000000  9.185713 11.67053 10.571931\n10X64_3_A_1:GAAACAGATCTCTAx 10.91904 0.000000  9.820464 11.52517 10.225911\n                               Psma7    Pmpcb    Srsf3   Rbmxl1      Cdk4\n10X64_3_A_1:CTGTAACTGTGTTGx 10.61427 0.000000 10.20882 0.000000  9.515705\n10X74_4_A_1:ATCAAATGTCTCCGx  9.90749 9.214393 10.82375 0.000000 11.160217\n10X73_3_A_1:ACAACCGACCCACTx 10.49276 0.000000  0.00000 9.106546 11.591351\n10X64_3_A_1:AAACATTGGGTCTAx 10.86766 9.258303 11.04998 9.258303 10.644526\n10X64_3_A_1:TTGGTACTAGCGTTx 11.13154 0.000000 10.57193 0.000000 11.131536\n10X64_3_A_1:GAAACAGATCTCTAx 11.07319 0.000000  0.00000 0.000000 10.736722\n                              Nap1l4   Fam133b    Cdc123    Dnajc9     Rpl12\n10X64_3_A_1:CTGTAACTGTGTTGx 9.921146  8.822632  9.515705  8.822632 10.768416\n10X74_4_A_1:ATCAAATGTCTCCGx 9.214393  9.907490  9.907490  9.907490 10.823751\n10X73_3_A_1:ACAACCGACCCACTx 0.000000  9.799638 10.205084  9.106546 11.185891\n10X64_3_A_1:AAACATTGGGTCTAx 0.000000  0.000000  9.258303  0.000000 11.049983\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000 10.284257  9.878809  0.000000  9.878809\n10X64_3_A_1:GAAACAGATCTCTAx 9.820464  9.127371  9.127371 10.225911 10.225911\n                                Rpl22     Hspe1     Cks1b    Snrpg      Ppia\n10X64_3_A_1:CTGTAACTGTGTTGx 10.768416 10.208816 10.431952 11.22039 10.208816\n10X74_4_A_1:ATCAAATGTCTCCGx  9.214393  9.214393  9.214393 10.60061 10.600612\n10X73_3_A_1:ACAACCGACCCACTx  9.799638 10.205084 10.205084 11.18589 10.715895\n10X64_3_A_1:AAACATTGGGTCTAx 10.644526 11.743122  9.258303 10.35685  9.951403\n10X64_3_A_1:TTGGTACTAGCGTTx 10.284257 10.284257  0.000000 10.28426 11.131536\n10X64_3_A_1:GAAACAGATCTCTAx 10.225911 10.225911  9.820464 10.73672 10.513584\n                                 Cnbp      Sub1     Psip1     Eprs      Jun\n10X64_3_A_1:CTGTAACTGTGTTGx  9.515705  9.921146 10.431952 9.515705 10.61427\n10X74_4_A_1:ATCAAATGTCTCCGx 11.006069  9.907490  9.214393 0.000000 10.31294\n10X73_3_A_1:ACAACCGACCCACTx 11.303672 10.492757 11.185891 0.000000 10.20508\n10X64_3_A_1:AAACATTGGGTCTAx 10.867665 10.356852  9.951403 0.000000 10.35685\n10X64_3_A_1:TTGGTACTAGCGTTx 10.977387 10.571931 11.131536 9.878809 11.58352\n10X64_3_A_1:GAAACAGATCTCTAx 10.736722  9.127371 10.225911 0.000000 11.07319\n                               Pgrmc1    Arl15     Dach1    Rps25    Dynll1\n10X64_3_A_1:CTGTAACTGTGTTGx 10.208816 9.515705 10.431952 11.30740 10.431952\n10X74_4_A_1:ATCAAATGTCTCCGx  0.000000 0.000000  0.000000 10.82375  9.907490\n10X73_3_A_1:ACAACCGACCCACTx  9.799638 9.799638  0.000000 10.71590 10.898213\n10X64_3_A_1:AAACATTGGGTCTAx  0.000000 0.000000  9.258303 11.04998  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx  9.878809 9.185713  9.878809 10.57193  9.185713\n10X64_3_A_1:GAAACAGATCTCTAx  0.000000 0.000000  0.000000 10.91904 10.736722\n                                 Sem1     Rps28     Eif3f   Tspan6    Rpl34\n10X64_3_A_1:CTGTAACTGTGTTGx 11.125084 10.768416 10.431952 9.515705 10.43195\n10X74_4_A_1:ATCAAATGTCTCCGx  0.000000  0.000000 10.823751 9.214393 11.00607\n10X73_3_A_1:ACAACCGACCCACTx 10.492757 10.492757 10.492757 9.106546 10.49276\n10X64_3_A_1:AAACATTGGGTCTAx 10.356852  9.951403 10.867665 0.000000 10.35685\n10X64_3_A_1:TTGGTACTAGCGTTx  9.878809 10.795069 10.284257 9.878809 10.79507\n10X64_3_A_1:GAAACAGATCTCTAx 10.225911  9.127371  9.820464 0.000000 10.22591\n                               Mrps17     Atp5j   Higd2a     Ddx50   Phf21a\n10X64_3_A_1:CTGTAACTGTGTTGx  9.515705  9.921146 9.515705 10.208816  0.00000\n10X74_4_A_1:ATCAAATGTCTCCGx  9.214393  9.907490 0.000000  9.907490  0.00000\n10X73_3_A_1:ACAACCGACCCACTx  9.799638  9.799638 9.106546  9.799638  0.00000\n10X64_3_A_1:AAACATTGGGTCTAx 10.644526 10.644526 9.258303  9.951403 10.35685\n10X64_3_A_1:TTGGTACTAGCGTTx  9.185713  9.878809 9.878809  0.000000  0.00000\n10X64_3_A_1:GAAACAGATCTCTAx  0.000000 10.225911 9.127371  0.000000  0.00000\n                               Baz2b      Elob     Btbd1      Ubb    H2afz\n10X64_3_A_1:CTGTAACTGTGTTGx 8.822632 11.019725  8.822632 10.76842 10.43195\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000  0.000000  0.000000 10.82375 11.29375\n10X73_3_A_1:ACAACCGACCCACTx 9.106546 10.492757  9.799638  0.00000 11.05236\n10X64_3_A_1:AAACATTGGGTCTAx 0.000000 10.356852 10.356852 10.35685 11.33766\n10X64_3_A_1:TTGGTACTAGCGTTx 9.878809 10.284257  9.185713 10.28426 10.28426\n10X64_3_A_1:GAAACAGATCTCTAx 0.000000  9.127371  9.127371 10.73672 11.07319\n                              Zfp609    Rpl35a   Nt5dc2    mt.Nd4    mt.Nd1\n10X64_3_A_1:CTGTAACTGTGTTGx 9.921146  8.822632 8.822632 10.208816 10.208816\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 10.823751 9.214393 10.312939  9.907490\n10X73_3_A_1:ACAACCGACCCACTx 0.000000 11.052361 0.000000  9.799638 10.715895\n10X64_3_A_1:AAACATTGGGTCTAx 0.000000  9.258303 9.258303  9.951403  9.951403\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000  0.000000 9.185713  9.878809  9.185713\n10X64_3_A_1:GAAACAGATCTCTAx 9.820464  0.000000 9.820464 10.736722  9.820464\n                                Pcm1      Hes1    Ndufc2      Pcna    Atp5f1\n10X64_3_A_1:CTGTAACTGTGTTGx 0.000000 10.208816 10.768416  0.000000  9.515705\n10X74_4_A_1:ATCAAATGTCTCCGx 9.907490  9.214393 10.600612  9.214393 10.312939\n10X73_3_A_1:ACAACCGACCCACTx 9.106546 10.715895  9.799638  0.000000 10.715895\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303  9.258303 10.356852  9.951403 10.356852\n10X64_3_A_1:TTGGTACTAGCGTTx 9.185713  9.185713  9.878809 10.284257 10.284257\n10X64_3_A_1:GAAACAGATCTCTAx 9.127371  9.127371 10.513584  9.820464  9.127371\n                                Gsk3b    Mtch1  Gpatch8     Map1b     Romo1\n10X64_3_A_1:CTGTAACTGTGTTGx  0.000000 0.000000 0.000000  9.921146  9.921146\n10X74_4_A_1:ATCAAATGTCTCCGx  0.000000 9.214393 9.214393  9.907490  0.000000\n10X73_3_A_1:ACAACCGACCCACTx 10.715895 9.106546 0.000000 10.205084  9.106546\n10X64_3_A_1:AAACATTGGGTCTAx  9.258303 9.258303 9.258303 10.867665 10.644526\n10X64_3_A_1:TTGGTACTAGCGTTx  0.000000 0.000000 9.185713 10.284257  0.000000\n10X64_3_A_1:GAAACAGATCTCTAx  9.127371 9.127371 9.127371  9.820464  9.820464\n                                Xist    Fdft1    Hmgcs1     Eif1b      Sox4\n10X64_3_A_1:CTGTAACTGTGTTGx  0.00000 8.822632  8.822632  9.515705 10.431952\n10X74_4_A_1:ATCAAATGTCTCCGx 10.60061 9.214393 10.312939 10.600612 10.600612\n10X73_3_A_1:ACAACCGACCCACTx  0.00000 9.799638  0.000000 10.492757 10.492757\n10X64_3_A_1:AAACATTGGGTCTAx  0.00000 9.258303  9.258303 11.204131  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx  0.00000 9.878809  0.000000  9.185713  0.000000\n10X64_3_A_1:GAAACAGATCTCTAx 10.73672 9.820464  9.127371  9.820464  9.127371\n                                Fxyd6      Eef2   Tubb2b      Rtn1     Acat1\n10X64_3_A_1:CTGTAACTGTGTTGx  0.000000 10.431952 10.90194  0.000000  0.000000\n10X74_4_A_1:ATCAAATGTCTCCGx 10.600612 11.411529 11.92235  9.907490  0.000000\n10X73_3_A_1:ACAACCGACCCACTx  9.106546 10.492757 10.20508  9.799638 10.205084\n10X64_3_A_1:AAACATTGGGTCTAx  9.951403 11.049983 11.74312  9.258303  0.000000\n10X64_3_A_1:TTGGTACTAGCGTTx  9.185713  9.878809 11.67053  0.000000  0.000000\n10X64_3_A_1:GAAACAGATCTCTAx  9.820464 10.513584 11.07319 10.919040  9.127371\n                               Glrx2    Ndufa4     Cox7c      Scg5\n10X64_3_A_1:CTGTAACTGTGTTGx 0.000000 10.431952 10.768416  9.515705\n10X74_4_A_1:ATCAAATGTCTCCGx 0.000000 10.600612  9.907490  0.000000\n10X73_3_A_1:ACAACCGACCCACTx 9.106546 10.715895 10.492757  0.000000\n10X64_3_A_1:AAACATTGGGTCTAx 9.258303  9.258303  9.258303  9.258303\n10X64_3_A_1:TTGGTACTAGCGTTx 0.000000 10.284257 10.571931 10.284257\n10X64_3_A_1:GAAACAGATCTCTAx 0.000000  9.127371 10.225911  0.000000\n                            COTAN_Cl.code\n10X64_3_A_1:CTGTAACTGTGTTGx             1\n10X74_4_A_1:ATCAAATGTCTCCGx             0\n10X73_3_A_1:ACAACCGACCCACTx             1\n10X64_3_A_1:AAACATTGGGTCTAx             0\n10X64_3_A_1:TTGGTACTAGCGTTx             0\n10X64_3_A_1:GAAACAGATCTCTAx             0\n\n\n\n# Fit the model\nmodel &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 50))\n# Summarize the model\nsummary(model)\n\n\nCall:\nglm(formula = COTAN_Cl.code ~ ., family = binomial, data = train.data, \n    control = list(maxit = 50))\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)  9.110e+01  1.100e+07       0        1\nTfap2c       1.269e+00  8.987e+04       0        1\nGpc4        -6.821e-02  9.506e+04       0        1\nPsph         1.573e-01  1.201e+05       0        1\nPbdc1        8.595e-01  1.087e+05       0        1\nMcm6        -4.889e-01  1.543e+05       0        1\nCdca7       -7.372e-01  1.271e+05       0        1\nNmral1       6.463e-01  9.466e+04       0        1\nTipin       -1.070e+00  1.682e+05       0        1\nFbxl7       -4.258e-01  7.749e+04       0        1\nBtg2         1.586e+00  9.758e+04       0        1\nNrarp       -7.463e-01  1.204e+05       0        1\nIer2        -8.686e-01  1.185e+05       0        1\nRgcc         8.656e-01  1.541e+05       0        1\nRlbp1       -6.125e-01  1.847e+05       0        1\nGm29260     -3.715e-01  1.893e+05       0        1\nRgs20       -1.391e+00  1.085e+05       0        1\nSfrp1        3.321e+00  1.832e+05       0        1\nNes          5.768e-01  1.546e+05       0        1\nMsi1        -2.990e-01  1.159e+05       0        1\nPantr1      -2.463e+00  3.393e+05       0        1\nCyr61        6.274e-02  1.076e+05       0        1\nZfp536       5.775e-01  9.432e+04       0        1\nPitpnc1     -4.029e-01  1.185e+05       0        1\nPolr3h       9.613e-01  9.686e+04       0        1\nCsmd1       -8.679e-01  1.555e+05       0        1\nMt3          6.199e-01  6.379e+04       0        1\nSncaip       5.435e-01  7.041e+04       0        1\nCT025619.1  -2.551e-01  8.493e+04       0        1\nSlc1a3       1.742e-02  9.355e+04       0        1\nRnf180      -1.199e-02  1.378e+05       0        1\nPtn          2.916e+00  3.358e+05       0        1\nAldoc       -7.125e-01  2.754e+05       0        1\nFgfbp3       6.299e-01  1.779e+05       0        1\nHes5        -4.311e-01  9.800e+04       0        1\nMfge8       -1.961e+00  1.023e+05       0        1\nMaml2        1.907e-02  5.771e+04       0        1\nLpar1        9.757e-01  9.494e+04       0        1\nCadm2       -3.372e+00  1.134e+05       0        1\nSema5a      -1.675e+00  1.458e+05       0        1\nQk           1.323e+00  1.343e+05       0        1\nNkain2      -9.102e-01  6.484e+04       0        1\nHes6         5.452e-02  6.297e+04       0        1\nRhbdl3      -9.056e-01  1.287e+05       0        1\nNeurog2      1.858e+00  1.775e+05       0        1\nChd7         1.672e+00  1.190e+05       0        1\nMsmo1       -1.116e+00  9.372e+04       0        1\nIgfbpl1     -1.102e+00  9.733e+04       0        1\nZmiz1       -8.943e-02  1.124e+05       0        1\nKat6b        1.046e-01  9.785e+04       0        1\nNfib         6.736e-01  1.481e+05       0        1\nFezf2       -4.256e-01  1.414e+05       0        1\nDok5        -2.646e-01  6.148e+04       0        1\nTenm2        6.249e-01  1.088e+05       0        1\nMeis2       -3.128e+00  4.298e+05       0        1\nMpped2      -1.662e+00  8.711e+04       0        1\nGm17750      8.710e-01  9.417e+04       0        1\nKcnh7       -2.218e+00  6.723e+04       0        1\nMir670hg    -3.468e-01  5.711e+04       0        1\nGpc6        -3.642e-01  1.059e+05       0        1\nDab1         1.157e+00  5.199e+04       0        1\nHist3h2ba    5.847e-02  8.058e+04       0        1\nScrn1        5.250e-01  1.096e+05       0        1\nAnk2         1.268e-01  7.979e+04       0        1\nBach2        9.614e-01  1.029e+05       0        1\nRbbp7       -8.930e-01  9.675e+04       0        1\nRpl26        8.709e-01  8.948e+04       0        1\nSerbp1       6.645e-01  2.959e+05       0        1\nPrmt1        1.329e+00  3.342e+05       0        1\nRack1        1.546e+00  1.748e+05       0        1\nHsp90aa1    -1.847e+00  2.365e+05       0        1\nDdx39        1.593e-01  8.123e+04       0        1\nCct5        -8.543e-01  1.388e+05       0        1\nH2afx       -1.026e+00  4.980e+04       0        1\nLsm3         5.727e-01  7.913e+04       0        1\nNtmt1        1.509e+00  7.867e+04       0        1\nHmgb3        1.084e+00  1.624e+05       0        1\nSnrnp70      2.391e-01  9.161e+04       0        1\nRfc2        -5.456e-02  1.359e+05       0        1\nTuba1b      -4.150e-01  3.443e+05       0        1\nSnrpb        1.624e+00  1.615e+05       0        1\nPsma7       -2.890e+00  2.978e+05       0        1\nPmpcb        3.020e-01  1.059e+05       0        1\nSrsf3        5.908e-01  1.061e+05       0        1\nRbmxl1       3.515e-01  1.152e+05       0        1\nCdk4        -2.678e+00  4.559e+05       0        1\nNap1l4      -1.278e+00  7.349e+04       0        1\nFam133b      1.006e-01  1.346e+05       0        1\nCdc123      -4.318e-01  6.492e+04       0        1\nDnajc9      -5.143e-01  1.678e+05       0        1\nRpl12        8.145e-01  1.663e+05       0        1\nRpl22       -1.353e+00  1.694e+05       0        1\nHspe1        1.330e+00  4.201e+05       0        1\nCks1b        1.058e-01  1.376e+05       0        1\nSnrpg        1.420e-01  2.873e+05       0        1\nPpia        -5.161e-01  1.577e+05       0        1\nCnbp         1.928e+00  3.159e+05       0        1\nSub1        -1.771e+00  2.784e+05       0        1\nPsip1       -4.159e-01  2.388e+05       0        1\nEprs         9.878e-02  8.837e+04       0        1\nJun         -2.926e-01  2.278e+05       0        1\nPgrmc1       5.101e-02  7.627e+04       0        1\nArl15        6.780e-01  7.922e+04       0        1\nDach1        1.080e+00  9.341e+04       0        1\nRps25        3.488e-01  2.584e+05       0        1\nDynll1      -6.168e-01  1.502e+05       0        1\nSem1         1.229e+00  1.703e+05       0        1\nRps28       -1.869e+00  2.408e+05       0        1\nEif3f        2.478e+00  2.076e+05       0        1\nTspan6      -2.873e-01  1.220e+05       0        1\nRpl34        1.559e+00  1.774e+05       0        1\nMrps17      -6.999e-01  7.009e+04       0        1\nAtp5j       -2.599e+00  1.580e+05       0        1\nHigd2a      -8.631e-01  8.685e+04       0        1\nDdx50        1.978e-01  6.112e+04       0        1\nPhf21a       4.734e-02  1.416e+05       0        1\nBaz2b        3.822e-01  1.065e+05       0        1\nElob         1.230e-01  2.714e+05       0        1\nBtbd1       -1.736e+00  1.589e+05       0        1\nUbb         -2.238e+00  2.281e+05       0        1\nH2afz       -3.049e-01  1.942e+05       0        1\nZfp609       8.505e-01  1.129e+05       0        1\nRpl35a       4.897e-01  8.416e+04       0        1\nNt5dc2      -1.427e+00  9.207e+04       0        1\nmt.Nd4      -7.327e-02  3.175e+05       0        1\nmt.Nd1      -1.908e+00  2.255e+05       0        1\nPcm1         5.611e-01  1.108e+05       0        1\nHes1         9.600e-01  1.061e+05       0        1\nNdufc2      -1.419e+00  2.676e+05       0        1\nPcna         4.616e-01  6.297e+04       0        1\nAtp5f1      -3.844e-01  1.011e+05       0        1\nGsk3b       -1.919e-01  7.113e+04       0        1\nMtch1        1.147e+00  1.202e+05       0        1\nGpatch8      4.568e-01  9.356e+04       0        1\nMap1b        1.551e+00  2.419e+05       0        1\nRomo1       -5.410e-01  1.238e+05       0        1\nXist        -1.305e-01  1.094e+05       0        1\nFdft1       -5.520e-01  7.836e+04       0        1\nHmgcs1      -7.972e-01  8.031e+04       0        1\nEif1b       -1.292e+00  1.656e+05       0        1\nSox4         3.599e-01  1.368e+05       0        1\nFxyd6       -1.258e+00  1.080e+05       0        1\nEef2         2.844e+00  3.756e+05       0        1\nTubb2b      -1.250e+00  2.711e+05       0        1\nRtn1        -7.304e-01  7.360e+04       0        1\nAcat1       -1.269e+00  1.311e+05       0        1\nGlrx2       -1.486e-01  8.741e+04       0        1\nNdufa4       1.511e+00  2.772e+05       0        1\nCox7c        2.185e+00  1.839e+05       0        1\nScg5        -3.069e-01  1.030e+05       0        1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 3.1622e+02  on 257  degrees of freedom\nResidual deviance: 5.5839e-10  on 108  degrees of freedom\nAIC: 300\n\nNumber of Fisher Scoring iterations: 27\n\n# Make predictions\nprobabilities &lt;- model %&gt;% predict(test.data, type = \"response\")\npredicted.classes &lt;- ifelse(probabilities &gt; 0.5, \"1\", \"0\")\n# Model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\nresult.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\n\naccuracy\n\n[1] 0.734375\n\n\nSo also in this case a logistic regression confirm the difference in cell population detected by COTAN.\n\ncl184ClsMarkers &lt;- findClustersMarkers(cl184,n = 200,method = \"BH\")\ncl184ClsMarkers\n\n    CL           Gene      Score      adjPVal         DEA IsMarker   logFoldCh\n1    1        Neurog2 -0.5831758 1.512459e-21 -0.40521543        0 -1.39130757\n2    1          Pttg1 -0.4033780 1.887999e-10 -0.26738827        0 -1.43150739\n3    1        Gadd45g -0.3900940 8.341062e-10 -0.24711117        0 -1.47879552\n4    1          Cenpa -0.3862799 1.224041e-09 -0.25774287        0 -1.29099095\n5    1          Ccnb2 -0.3567580 3.493105e-08 -0.21301149        0 -1.46159235\n6    1         Elavl4 -0.3468155 9.942177e-08 -0.23571157        0 -0.75589932\n7    1      Hist1h2bc -0.3466218 9.995550e-08 -0.22477269        0 -0.86447991\n8    1          Ascl1 -0.2878400 2.956244e-05 -0.15729031        0 -1.23580955\n9    1        Zc3h12c -0.2809135 5.174697e-05 -0.17641063        0 -0.71906028\n10   1          Rcor2 -0.2747659 8.379956e-05 -0.17144128        0 -0.68126225\n11   1            Bsg -0.2711846 1.124021e-04 -0.10787236        0 -0.16704556\n12   1           Chd7 -0.2689249 1.356518e-04 -0.18692276        0 -0.45825134\n13   1           Btg2 -0.2612303 2.603476e-04 -0.18206471        0 -0.57453573\n14   1           Dll1 -0.2579497 3.237474e-04 -0.12807222        0 -1.48812048\n15   1          Palld -0.2522358 4.924999e-04 -0.17390145        0 -0.39830033\n16   1          Ube2c -0.2475064 6.908938e-04 -0.14476906        0 -0.41115299\n17   1          Kdm7a -0.2447899 8.183800e-04 -0.12224509        0 -1.03349500\n18   1            Tpr -0.2430920 9.188377e-04 -0.14001102        0 -0.23402062\n19   1            Mt2 -0.2426674 9.402582e-04 -0.15708282        0 -0.21444711\n20   1           Hes6 -0.2422156 9.643956e-04 -0.16724256        0 -0.44197418\n21   1           Fgd4 -0.2419726 9.724992e-04 -0.15263834        0 -0.50218344\n22   1           Gpc4 -0.2400377 1.125518e-03 -0.16707837        0 -0.31960198\n23   1       Mir9.3hg -0.2365443 1.419164e-03 -0.13855582        0 -0.19384147\n24   1      Hist3h2ba -0.2311223 1.997610e-03 -0.16098394        0 -0.34933545\n25   1          Cenpe -0.2300613 2.152345e-03 -0.10572353        0 -1.45377818\n26   1           H1f0 -0.2288964 2.330474e-03 -0.11822983        0 -0.30932670\n27   1         Knstrn -0.2281237 2.450699e-03 -0.14047870        0 -0.68360700\n28   1         Atad2b -0.2266648 2.645925e-03 -0.14776898        0 -0.42532807\n29   1        Igfbpl1 -0.2250937 2.926312e-03 -0.15496158        0 -0.50257889\n30   1           Jam3 -0.2203988 3.798475e-03 -0.15216519        0 -0.41024029\n31   1       Slc25a27 -0.2169349 4.818073e-03 -0.13904215        0 -0.42497684\n32   1         Smim13 -0.2139037 5.765298e-03 -0.11227329        0 -0.60289476\n33   1           Gng2 -0.2137225 5.810446e-03 -0.12930214        0 -0.46536664\n34   1          Kdm5b -0.2121057 6.422646e-03 -0.14278592        0 -0.36398690\n35   1          Cdca3 -0.2100974 7.207400e-03 -0.11959810        0 -0.68499462\n36   1           Gja1 -0.2085117 7.958071e-03 -0.11187066        0 -0.64915425\n37   1           Usp3 -0.2070993 8.523113e-03 -0.14256286        0 -0.31011816\n38   1          Insm1 -0.2063698 8.944107e-03 -0.09389231        0 -0.80644302\n39   1         Rnf146 -0.2019032 1.166266e-02 -0.11831332        0 -0.49655832\n40   1          Prag1 -0.1999976 1.308082e-02 -0.11465689        0 -0.53173283\n41   1         Dmrta2 -0.1968723 1.539823e-02 -0.13674004        0 -0.28567311\n42   1           Eci2 -0.1959389 1.625165e-02 -0.13360156        0 -0.16442599\n43   1         mt.Nd2 -0.1957754 1.633172e-02 -0.12386308        0 -0.22039650\n44   1         Rhbdl3 -0.1944022 1.748583e-02 -0.13403725        0 -0.25720862\n45   1           Ssr2 -0.1936495 1.811995e-02 -0.10805984        0 -0.23702265\n46   1          Ccnb1 -0.1931041 1.868251e-02 -0.10155873        0 -0.80824955\n47   1           Nfix -0.1921514 1.954910e-02 -0.11209757        0 -0.17028655\n48   1         Ppp1cb -0.1918527 1.983731e-02 -0.13357780        0 -0.27439314\n49   1           Rnf5 -0.1918121 1.983731e-02 -0.13346374        0 -0.27232424\n50   1          Eomes -0.1913548 2.033188e-02 -0.07132408        0 -1.50008613\n51   1        Laptm4a -0.1897758 2.218633e-02 -0.09445862        0 -0.17299330\n52   1          Gdpd1 -0.1887891 2.340841e-02 -0.11850504        0 -0.23825994\n53   1          Timp2 -0.1885776 2.366913e-02 -0.11469108        0 -0.31062215\n54   1         Tmem59 -0.1880719 2.426355e-02 -0.11041120        0 -0.27392623\n55   1          Cenpf -0.1864043 2.619452e-02 -0.10956327        0 -0.41650568\n56   1        Tmem127 -0.1862853 2.619452e-02 -0.08483488        0 -0.68982733\n57   1         Arxes2 -0.1862756 2.619452e-02 -0.09291911        0 -0.68939246\n58   1          Lzts1 -0.1859740 2.664017e-02 -0.06700615        0 -1.50408762\n59   1          Jmjd6 -0.1853850 2.745645e-02 -0.11988754        0 -0.30428514\n60   1         Bckdha -0.1840007 2.910257e-02 -0.10976704        0 -0.51569540\n61   1          Slit2 -0.1830365 3.058326e-02 -0.10035377        0 -0.70007048\n62   1          Ddit4 -0.1830365 3.058326e-02 -0.12232626        0 -0.23056730\n63   1          Siah3 -0.1829564 3.058326e-02 -0.10908455        0 -0.50950870\n64   1          Asna1 -0.1828479 3.059255e-02 -0.12727282        0 -0.24053934\n65   1         Akap8l -0.1822234 3.140759e-02 -0.11024518        0 -0.43417761\n66   1            Os9 -0.1814048 3.229840e-02 -0.10356876        0 -0.40610196\n67   1           Odc1 -0.1814037 3.229840e-02 -0.07657200        0 -0.94708523\n68   1        Selenos -0.1799813 3.427183e-02 -0.12458178        0 -0.19306172\n69   1          Aamdc -0.1798102 3.448342e-02 -0.11018014        0 -0.40172927\n70   1         Agpat4 -0.1798102 3.448342e-02 -0.11018014        0 -0.37770129\n71   1          Nop53 -0.1796210 3.473608e-02 -0.10754518        0 -0.23849178\n72   1           Emc6 -0.1794437 3.496512e-02 -0.11258199        0 -0.18767018\n73   1           Mfng -0.1783335 3.681725e-02 -0.09108704        0 -0.54482185\n74   1         Zfp637 -0.1783185 3.681725e-02 -0.12373132        0 -0.19956155\n75   1        Fam168b -0.1779520 3.735993e-02 -0.11852972        0 -0.22485811\n76   1     AC154683.1 -0.1774342 3.837054e-02 -0.06125099        0 -1.49632113\n77   1           Bptf -0.1771338 3.872229e-02 -0.12265000        0 -0.34544312\n78   1            Jtb -0.1763457 4.028975e-02 -0.12252691        0 -0.19863647\n79   1          Psrc1 -0.1760624 4.091123e-02 -0.07318770        0 -0.93641309\n80   1          Ttc23 -0.1749525 4.342427e-02 -0.09435342        0 -0.42880194\n81   1          Reps1 -0.1746468 4.405682e-02 -0.06675208        0 -1.20006014\n82   1           Top1 -0.1745413 4.415475e-02 -0.07968339        0 -0.23557563\n83   1           Psd3 -0.1742261 4.487590e-02 -0.06654816        0 -1.13958202\n84   1           Cltc -0.1737510 4.566116e-02 -0.08436774        0 -0.68818990\n85   1           Ktn1 -0.1733267 4.666085e-02 -0.12061197        0 -0.22152324\n86   1          Wdr12 -0.1732132 4.688660e-02 -0.11679744        0 -0.34963288\n87   1         Pabpc1 -0.1729215 4.752748e-02 -0.06879410        0 -0.16464519\n88   1 X2610001J05Rik -0.1728352 4.767874e-02 -0.11771544        0 -0.17472798\n89   1           Lhx2 -0.1726654 4.797466e-02 -0.09793325        0 -0.28162939\n90   1          Foxp2 -0.1725622 4.817668e-02 -0.11965499        0 -0.25513168\n91   1          Srrm4 -0.1720733 4.928654e-02 -0.07115371        0 -1.03877312\n92   1           Eml5 -0.1718230 4.966763e-02 -0.11503058        0 -0.32448358\n93   1         Sh3rf1 -0.1714391 5.054485e-02 -0.11556065        0 -0.39969855\n94   1       Slc16a14 -0.1714257 5.054485e-02 -0.07956580        0 -0.72548528\n95   1         Rb1cc1 -0.1713383 5.062964e-02 -0.09431177        0 -0.42499406\n96   1          Lockd -0.1710020 5.145818e-02 -0.10972059        0 -0.36446249\n97   1         Txnrd1 -0.1707097 5.216199e-02 -0.11764120        0 -0.21117500\n98   1          Pfdn2 -0.1705995 5.224874e-02 -0.09243350        0 -0.08400791\n99   1        Rps27rt -0.1696927 5.489125e-02 -0.11726094        0 -0.19354428\n100  1           Mbd5 -0.1695000 5.520461e-02 -0.09760839        0 -0.48897472\n101  1          Itgb1 -0.1694991 5.520461e-02 -0.11785220        0 -0.19584190\n102  1          Ccnl2 -0.1692367 5.521501e-02 -0.11228767        0 -0.09177134\n103  1           Rmst -0.1682253 5.796607e-02 -0.06295267        0 -1.27032788\n104  1        Hnrnpa1 -0.1681509 5.811180e-02 -0.11413648        0 -0.14576877\n105  1         Ccdc12 -0.1677864 5.915468e-02 -0.11570439        0 -0.16906794\n106  1         Zfp157 -0.1673683 5.995028e-02 -0.08908238        0 -0.52026271\n107  1         Trip12 -0.1673291 5.995028e-02 -0.09383015        0 -0.34943156\n108  1        Laptm4b -0.1672823 5.995028e-02 -0.10415303        0 -0.33170170\n109  1        Akirin2 -0.1670714 6.045082e-02 -0.09579873        0 -0.40527418\n110  1           Tshr -0.1669968 6.055351e-02 -0.08013160        0 -0.55592360\n111  1          Eif2a -0.1667767 6.105751e-02 -0.11434877        0 -0.20248082\n112  1           Bfar -0.1663525 6.191719e-02 -0.10605650        0 -0.36167688\n113  1          Ap3s1 -0.1663194 6.192523e-02 -0.11177878        0 -0.33114029\n114  1           Dph1 -0.1659315 6.278121e-02 -0.05433612        0 -1.48371426\n115  1         Cfap36 -0.1658042 6.291256e-02 -0.11130889        0 -0.27506880\n116  1           Gpx8 -0.1647999 6.535431e-02 -0.11480127        0 -0.32579681\n117  1          Hif1a -0.1640060 6.789374e-02 -0.08673076        0 -0.48187187\n118  1       Aasdhppt -0.1636473 6.825505e-02 -0.10728422        0 -0.28623795\n119  1         Draxin -0.1634910 6.834541e-02 -0.08919554        0 -0.42253273\n120  1         Tmem33 -0.1634841 6.834541e-02 -0.11384067        0 -0.23757017\n121  1            H13 -0.1626389 7.044856e-02 -0.11279364        0 -0.32771944\n122  1           Fpgs -0.1621770 7.198537e-02 -0.06438063        0 -0.74272924\n123  1          Mdga1 -0.1610644 7.450494e-02 -0.05817788        0 -1.10884549\n124  1          Kdm6b -0.1609352 7.469519e-02 -0.07246017        0 -0.46530168\n125  1          Bach2 -0.1606601 7.572134e-02 -0.11198775        0 -0.29476183\n126  1        Ankrd37 -0.1606398 7.572134e-02 -0.06363572        0 -0.56885622\n127  1           Lig3 -0.1604600 7.620548e-02 -0.07220963        0 -0.57277632\n128  1           Lrp4 -0.1602753 7.633588e-02 -0.08190443        0 -0.54255835\n129  1           Ccz1 -0.1600856 7.704235e-02 -0.11144901        0 -0.13292645\n130  1        Slc2a13 -0.1599703 7.742686e-02 -0.08172763        0 -0.50855381\n131  1           Ptms -0.1597050 7.830579e-02 -0.09447461        0 -0.29259682\n132  1           Rab7 -0.1592093 7.995981e-02 -0.11054849        0 -0.12293605\n133  1         Lrrc51 -0.1589161 8.104420e-02 -0.04954440        0 -1.47316169\n134  1       Tnfrsf19 -0.1588692 8.113333e-02 -0.08368589        0 -0.45311955\n135  1        Serinc1 -0.1587851 8.126099e-02 -0.10632988        0 -0.21441979\n136  1 X1110004F10Rik -0.1587595 8.126099e-02 -0.08548148        0 -0.10430969\n137  1         Klhl24 -0.1586593 8.126226e-02 -0.09518752        0 -0.38142234\n138  1          Snrpa -0.1585852 8.131399e-02 -0.08701025        0 -0.17180810\n139  1          Tmed4 -0.1585087 8.141722e-02 -0.10841366        0 -0.28734854\n140  1          Syne2 -0.1581768 8.237897e-02 -0.10667021        0 -0.23440549\n141  1          Kcnrg -0.1578483 8.335872e-02 -0.04910457        0 -1.49462152\n142  1           Rnd2 -0.1578483 8.335872e-02 -0.04910457        0 -1.48697089\n143  1          Hmgn5 -0.1570710 8.645971e-02 -0.10880684        0 -0.24680033\n144  1           Mia2 -0.1568528 8.735149e-02 -0.10331185        0 -0.26692785\n145  1         Kif21a -0.1567768 8.759292e-02 -0.07535339        0 -0.11360722\n146  1           Cct2 -0.1566584 8.765398e-02 -0.09667493        0 -0.13234402\n147  1          Eef2k -0.1564831 8.812519e-02 -0.06963652        0 -0.57994616\n148  1          Ppm1b -0.1562277 8.912649e-02 -0.09762216        0 -0.31158233\n149  1         Cacnb4 -0.1560213 8.965318e-02 -0.06562973        0 -0.59596871\n150  1          Mex3a -0.1557274 9.097391e-02 -0.10473565        0 -0.24904478\n151  1          Paip2 -0.1554416 9.202663e-02 -0.07878332        0 -0.13123212\n152  1           Lsg1 -0.1553886 9.216399e-02 -0.09588605        0 -0.24220200\n153  1        Arhgef2 -0.1553111 9.236420e-02 -0.08125999        0 -0.52227443\n154  1          Hyal2 -0.1552934 9.236420e-02 -0.09279265        0 -0.28606082\n155  1          Samd8 -0.1552303 9.244166e-02 -0.05482046        0 -1.04246472\n156  1        Slc18b1 -0.1549973 9.350691e-02 -0.06031412        0 -0.89119608\n157  1          Clcn3 -0.1546560 9.501403e-02 -0.09657928        0 -0.27388620\n158  1         Igfbp2 -0.1545482 9.528203e-02 -0.09079298        0 -0.17183487\n159  1          Rps25 -0.1540559 9.709776e-02 -0.02609367        0 -0.08285596\n160  1          Tubb3 -0.1539727 9.730002e-02 -0.10532317        0 -0.28710293\n161  1          Trrap -0.1539668 9.730002e-02 -0.06406779        0 -0.69086779\n162  1          Rbm28 -0.1535993 9.900455e-02 -0.09697471        0 -0.17512792\n163  1          Igf1r -0.1532320 1.001737e-01 -0.10513847        0 -0.18565244\n164  1          Acsl4 -0.1524926 1.032971e-01 -0.04600308        0 -1.47648044\n165  1        Tmem178 -0.1522797 1.043592e-01 -0.09383843        0 -0.42984756\n166  1         Ndufa6 -0.1518572 1.062009e-01 -0.08936669        0 -0.13794099\n167  1          Alpk1 -0.1508881 1.105650e-01 -0.06254410        0 -0.77110477\n168  1           Wapl -0.1507023 1.113799e-01 -0.08452592        0 -0.37155075\n169  1          Usp22 -0.1503368 1.134450e-01 -0.08430167        0 -0.33912281\n170  1        Dnttip2 -0.1503071 1.134738e-01 -0.10206681        0 -0.20322647\n171  1           Lrp8 -0.1499898 1.146573e-01 -0.06913110        0 -0.53557896\n172  1          Masp1 -0.1497247 1.160696e-01 -0.09916386        0 -0.32132151\n173  1         Hilpda -0.1494661 1.160696e-01 -0.07955390        0 -0.40070065\n174  1          Rnf41 -0.1494661 1.160696e-01 -0.07955390        0 -0.23944894\n175  1          Pias1 -0.1493413 1.163868e-01 -0.09947275        0 -0.28687435\n176  1        Jakmip2 -0.1490263 1.179033e-01 -0.08147333        0 -0.45703951\n177  1         Crebbp -0.1483156 1.214410e-01 -0.10007339        0 -0.21721242\n178  1        Gm15545 -0.1476550 1.242196e-01 -0.04316407        0 -1.49398047\n179  1         Mboat2 -0.1476355 1.242196e-01 -0.08426940        0 -0.24453534\n180  1           Nle1 -0.1472637 1.260498e-01 -0.08403875        0 -0.29531402\n181  1          Mbtd1 -0.1470653 1.265774e-01 -0.10125229        0 -0.22167452\n182  1        Tmem35a -0.1469851 1.266466e-01 -0.04290350        0 -1.50611416\n183  1          Cebpz -0.1469835 1.266466e-01 -0.09784871        0 -0.17629012\n184  1           Emx1 -0.1468535 1.271638e-01 -0.09711144        0 -0.20501463\n185  1           Tsr3 -0.1467125 1.273525e-01 -0.09686229        0 -0.28468483\n186  1          Fezf2 -0.1462894 1.284581e-01 -0.10180650        0 -0.25237380\n187  1       Col4a3bp -0.1462746 1.284581e-01 -0.06343469        0 -0.53977782\n188  1          Ypel2 -0.1460369 1.293375e-01 -0.05964553        0 -0.59908155\n189  1         Zdhhc9 -0.1460369 1.293375e-01 -0.05964553        0 -0.82703245\n190  1       BC049730 -0.1458864 1.293375e-01 -0.05485118        0 -0.86594762\n191  1        Slc15a4 -0.1458146 1.293375e-01 -0.04927261        0 -0.81315673\n192  1          Mtus1 -0.1457745 1.293375e-01 -0.06647755        0 -0.46501331\n193  1        Slc30a6 -0.1457424 1.293375e-01 -0.06316490        0 -0.46955821\n194  1         mt.Nd5 -0.1455962 1.298816e-01 -0.08614849        0 -0.26450106\n195  1          Cdc40 -0.1455164 1.302707e-01 -0.09865010        0 -0.28549454\n196  1        Morf4l2 -0.1453907 1.306626e-01 -0.08942932        0 -0.11739701\n197  1        Slc35e2 -0.1452965 1.310604e-01 -0.05928589        0 -0.79268238\n198  1          Tmed9 -0.1452780 1.310604e-01 -0.08605981        0 -0.06663226\n199  1         Fbxo11 -0.1452515 1.310604e-01 -0.06919173        0 -0.49404543\n200  1       Ftl1.ps1 -0.1450887 1.319597e-01 -0.07882949        0 -0.32582298\n201  1            Tk1  0.5481229 4.762447e-19  0.30410246        0  1.23101921\n202  1            Ung  0.5184538 5.470494e-17  0.34845748        0  0.79295818\n203  1          Hells  0.5052264 3.338213e-16  0.34402425        0  0.67681838\n204  1           Rrm2  0.5045323 3.338213e-16  0.34103205        0  0.90657877\n205  1           Lig1  0.4999158 5.921905e-16  0.32503733        0  0.89100637\n206  1          Prim1  0.4947631 1.170238e-15  0.33785795        0  0.66506406\n207  1           Mcm3  0.4924806 1.478449e-15  0.33382698        0  0.72979998\n208  1          Dscc1  0.4904379 1.823075e-15  0.21760316        0  1.75567703\n209  1           Dhfr  0.4855447 3.574481e-15  0.31332784        0  0.85281521\n210  1          Ccne2  0.4813898 6.257065e-15  0.22841176        0  1.50581190\n211  1           Rmi2  0.4764947 1.232433e-14  0.23515048        0  1.21147155\n212  1           Cdt1  0.4716972 2.389760e-14  0.28179522        0  0.87079957\n213  1           Gmnn  0.4705496 2.647318e-14  0.31369734        0  0.79120719\n214  1           E2f1  0.4691825 3.047224e-14  0.29124704        0  0.77782890\n215  1           Mcm5  0.4661990 4.505093e-14  0.30954988        0  0.73973513\n216  1           Exo1  0.4629547 6.935804e-14  0.20243635        0  1.31188184\n217  1          Gins2  0.4586114 1.259294e-13  0.30346120        0  0.74222428\n218  1         Pkmyt1  0.4525524 2.939510e-13  0.18183416        0  1.76480458\n219  1           Rpa2  0.4483145 5.210920e-13  0.29443558        0  0.75795432\n220  1         Chaf1b  0.4330415 4.482742e-12  0.25682141        0  0.83861798\n221  1           Smc2  0.4298745 6.691337e-12  0.27491560        0  0.65332490\n222  1           Mcm6  0.4255158 1.164964e-11  0.29651935        0  0.53880518\n223  1           Rfc3  0.4252908 1.164964e-11  0.28791504        0  0.67977204\n224  1           Fen1  0.4241740 1.306249e-11  0.25035393        0  0.79956735\n225  1           Cdc6  0.4147952 4.555751e-11  0.18195868        0  1.30725721\n226  1          Tipin  0.4128253 5.730175e-11  0.28770767        0  0.55333545\n227  1           Rfc4  0.4055504 1.465941e-10  0.27622308        0  0.56606644\n228  1           Orc6  0.4031162 1.889336e-10  0.26932256        0  0.51696150\n229  1          Atad2  0.4027014 1.931419e-10  0.22765292        0  0.82256923\n230  1          Rad51  0.4015230 2.185635e-10  0.19046051        0  1.05155473\n231  1         Sorcs1  0.3998672 2.634664e-10  0.24963715        0  0.71056991\n232  1          Cdc45  0.3994626 2.696508e-10  0.16574666        0  1.38985555\n233  1           Pcna  0.3958584 4.192105e-10  0.27567820        0  0.62245412\n234  1          Prim2  0.3926569 6.167546e-10  0.21151884        0  0.76923210\n235  1          Gins1  0.3889994 9.068043e-10  0.21909049        0  0.75790737\n236  1           Tyms  0.3889452 9.068043e-10  0.26623512        0  0.63069038\n237  1           Rfc2  0.3888308 9.068043e-10  0.27099758        0  0.48689426\n238  1          Pold1  0.3840099 1.592402e-09  0.19186532        0  0.85763653\n239  1          Brca1  0.3809564 2.282924e-09  0.14857007        0  1.53371887\n240  1            Nrm  0.3746952 4.855518e-09  0.21595021        0  0.71752912\n241  1          Uhrf1  0.3741092 5.102867e-09  0.21050004        0  0.71774577\n242  1          Tcf19  0.3726651 5.960484e-09  0.16332381        0  1.09393659\n243  1          Clspn  0.3708249 7.305879e-09  0.14662707        0  1.21161664\n244  1           Mcm4  0.3705882 7.363143e-09  0.23313307        0  0.69221047\n245  1       Rad51ap1  0.3664869 1.183208e-08  0.13714543        0  1.51093976\n246  1         Fignl1  0.3663395 1.183208e-08  0.19587004        0  0.78739338\n247  1         Tubb2a  0.3584901 2.959921e-08  0.23864957        0  0.58301867\n248  1           Rfc5  0.3580495 3.057987e-08  0.20874484        0  0.65123397\n249  1          Dnmt1  0.3534086 5.073745e-08  0.20454959        0  0.64921891\n250  1         Mms22l  0.3523348 5.644314e-08  0.23343233        0  0.47476249\n251  1            Blm  0.3513156 6.239238e-08  0.15003287        0  1.09753554\n252  1          Cadm2  0.3494327 7.619531e-08  0.24346773        0  0.43100882\n253  1        Kbtbd11  0.3475093 9.340953e-08  0.21529294        0  0.53870228\n254  1          Asf1b  0.3456599 1.097336e-07  0.14097716        0  1.12574407\n255  1          Gins3  0.3437180 1.346525e-07  0.12375430        0  1.43953193\n256  1            Dtl  0.3420028 1.609066e-07  0.20411414        0  0.63666799\n257  1           Lrr1  0.3410244 1.768658e-07  0.12761695        0  1.34776091\n258  1           Plk4  0.3375183 2.579469e-07  0.12669410        0  1.27616216\n259  1          Cenph  0.3368739 2.729450e-07  0.17901219        0  0.72695469\n260  1          Fbxo5  0.3365915 2.774533e-07  0.13494901        0  1.06334486\n261  1          Ccne1  0.3364004 2.792425e-07  0.15671272        0  0.82221801\n262  1          Grik1  0.3344476 3.417014e-07  0.13834365        0  0.72816303\n263  1           Alad  0.3327220 4.074095e-07  0.22349426        0  0.48414721\n264  1          Eepd1  0.3274962 7.106262e-07  0.15409278        0  0.77762316\n265  1           Pole  0.3222971 1.225679e-06  0.13144868        0  1.03798408\n266  1           Mcm2  0.3201911 1.512491e-06  0.21914769        0  0.37595352\n267  1          Kntc1  0.3185664 1.771901e-06  0.11455797        0  1.10636461\n268  1          Pold3  0.3184197 1.775550e-06  0.18447091        0  0.56141552\n269  1          Pclaf  0.3180722 1.815112e-06  0.21181724        0  0.64644078\n270  1          Csmd1  0.3179611 1.815112e-06  0.21979390        0  0.51261398\n271  1         Dnajc9  0.3161577 2.165687e-06  0.21705880        0  0.43077793\n272  1         Sdf2l1  0.3111449 3.575833e-06  0.18561587        0  0.55112559\n273  1          Cenps  0.3110926 3.575833e-06  0.19173890        0  0.56140907\n274  1       Rnaseh2a  0.3106096 3.712066e-06  0.20913484        0  0.43128750\n275  1         Rad54l  0.3088625 4.388036e-06  0.12802552        0  0.90032432\n276  1          Mastl  0.3086734 4.420005e-06  0.09023467        0  1.78749970\n277  1           Rrm1  0.3076512 4.848783e-06  0.20137567        0  0.48997891\n278  1           Cdk1  0.3053396 6.062574e-06  0.15656711        0  0.42998209\n279  1          Tedc1  0.3015961 8.739604e-06  0.09382264        0  1.57988859\n280  1           Polq  0.3005893 9.554950e-06  0.08446045        0  1.79941491\n281  1          Syce2  0.2998356 1.018436e-05  0.18420553        0  0.57870336\n282  1          Fanca  0.2995940 1.020068e-05  0.08427902        0  1.76252131\n283  1          Mcm10  0.2995940 1.020068e-05  0.08427902        0  1.77431964\n284  1          Cenpk  0.2970192 1.302457e-05  0.12493989        0  0.92684790\n285  1          Atad5  0.2960161 1.422295e-05  0.15264415        0  0.66497600\n286  1          Hspa5  0.2957557 1.443540e-05  0.19258551        0  0.34857351\n287  1         Donson  0.2942344 1.658229e-05  0.13406345        0  0.70953315\n288  1         Topbp1  0.2931980 1.815752e-05  0.16426983        0  0.56767034\n289  1           Mcm7  0.2908473 2.258309e-05  0.19563303        0  0.47125498\n290  1           Prc1  0.2885362 2.793528e-05  0.12281538        0  0.87174887\n291  1         Mis18a  0.2874469 3.038777e-05  0.13813925        0  0.71322525\n292  1          Cenpu  0.2864857 3.250784e-05  0.11140853        0  0.90962079\n293  1          Pola2  0.2864550 3.250784e-05  0.15148403        0  0.57334202\n294  1          Aunip  0.2864298 3.250784e-05  0.07763375        0  1.76517410\n295  1         Mthfd2  0.2850154 3.650680e-05  0.14838444        0  0.54048861\n296  1           Etv4  0.2850083 3.650680e-05  0.07738223        0  1.75903148\n297  1           Mcm8  0.2831852 4.297835e-05  0.11764066        0  0.78050949\n298  1          Top2a  0.2829825 4.339581e-05  0.12484920        0  0.82979097\n299  1          Fxyd6  0.2813744 5.001967e-05  0.19602119        0  0.40426670\n300  1           Nav2  0.2797307 5.727431e-05  0.11368015        0  0.66779549\n301  1          Wdr76  0.2786202 6.294447e-05  0.13237935        0  0.71742684\n302  1            Pgp  0.2772259 7.099889e-05  0.18511927        0  0.41317974\n303  1          Alcam  0.2766013 7.455105e-05  0.18690184        0  0.39154940\n304  1          Rad18  0.2764652 7.482670e-05  0.09763524        0  1.07430737\n305  1           Eme1  0.2757315 7.936558e-05  0.10141552        0  0.95504349\n306  1        Psmc3ip  0.2755943 7.959986e-05  0.18052903        0  0.45749056\n307  1       Timeless  0.2754980 7.959986e-05  0.15877932        0  0.54988161\n308  1           Wwox  0.2754176 7.959986e-05  0.17513017        0  0.32227988\n309  1         Hspa14  0.2727729 9.972895e-05  0.18428853        0  0.40857579\n310  1        Fam111a  0.2725486 1.001077e-04  0.07095723        0  1.76316774\n311  1          Cenpi  0.2725486 1.001077e-04  0.07095723        0  1.83787774\n312  1          Ticrr  0.2709664 1.137171e-04  0.08429416        0  1.09466338\n313  1           Cltb  0.2659193 1.761443e-04  0.15011445        0  0.47464273\n314  1           Vrk1  0.2657271 1.777642e-04  0.17117264        0  0.39919978\n315  1          Esco2  0.2616524 2.528592e-04  0.07861077        0  1.13610777\n316  1         Prkab1  0.2609828 2.639917e-04  0.10835124        0  0.69817315\n317  1          Cenpn  0.2606012 2.708575e-04  0.11450734        0  0.60515605\n318  1          Haus6  0.2601831 2.787937e-04  0.10478058        0  0.67359863\n319  1          Gna14  0.2592081 2.989626e-04  0.07809726        0  1.24822818\n320  1          Brip1  0.2592081 2.989626e-04  0.07809726        0  1.16674243\n321  1          Nup93  0.2587342 3.092151e-04  0.13575384        0  0.53491483\n322  1        Fam181b  0.2580633 3.230401e-04  0.16813054        0  0.35332726\n323  1         Shisa9  0.2580595 3.230401e-04  0.06428414        0  1.73879040\n324  1          Tex30  0.2578102 3.253080e-04  0.15077465        0  0.51878228\n325  1           Rfc1  0.2562919 3.680646e-04  0.17843541        0  0.31382899\n326  1          Ccnd1  0.2562135 3.680646e-04  0.15388234        0  0.49886167\n327  1           Manf  0.2558539 3.769365e-04  0.17161656        0  0.30846644\n328  1           Nsd2  0.2551691 3.960768e-04  0.16981850        0  0.36592805\n329  1           Rgcc  0.2551131 3.960768e-04  0.16943748        0  0.35209128\n330  1          Siva1  0.2545418 4.130557e-04  0.14624191        0  0.30396703\n331  1           Lsm2  0.2532311 4.587805e-04  0.16970304        0  0.27714384\n332  1           Nsl1  0.2524604 4.865060e-04  0.08092586        0  0.73228120\n333  1        Tnfaip8  0.2515013 5.205927e-04  0.12311161        0  0.53773780\n334  1         Tubb4b  0.2500445 5.847639e-04  0.16132053        0  0.32728177\n335  1        St8sia1  0.2494842 6.088915e-04  0.08810675        0  0.74123396\n336  1           Mtbp  0.2489993 6.299863e-04  0.09857475        0  0.74784551\n337  1          Gins4  0.2486660 6.435753e-04  0.16028888        0  0.35407544\n338  1           Hat1  0.2482886 6.567606e-04  0.16763642        0  0.39901499\n339  1          Cand2  0.2482675 6.567606e-04  0.09834846        0  0.84060034\n340  1            Dut  0.2480137 6.665157e-04  0.15027595        0  0.37622944\n341  1        Tmem201  0.2472057 7.039173e-04  0.10437174        0  0.67399836\n342  1          Rbbp7  0.2469684 7.134225e-04  0.16961302        0  0.25999405\n343  1        Zscan22  0.2462672 7.503276e-04  0.09088686        0  0.86018446\n344  1           Xbp1  0.2462103 7.503276e-04  0.14694325        0  0.49134064\n345  1          Ywhah  0.2461228 7.510983e-04  0.17018051        0  0.32825814\n346  1          Haus4  0.2458835 7.598680e-04  0.13076066        0  0.53385523\n347  1          Usp51  0.2458340 7.598680e-04  0.07166155        0  1.19671799\n348  1         Mrps26  0.2448680 8.180747e-04  0.15690099        0  0.40447865\n349  1          Cyr61  0.2441632 8.543449e-04  0.16864855        0  0.17814705\n350  1           Nrg1  0.2441222 8.543449e-04  0.14680487        0  0.27984683\n351  1            Dek  0.2435911 8.871954e-04  0.14066109        0  0.34892341\n352  1          Fstl5  0.2427873 9.365412e-04  0.16247775        0  0.33185528\n353  1          Kif24  0.2424962 9.479911e-04  0.07097259        0  1.15680175\n354  1           Nrg3  0.2421038 9.676553e-04  0.14679605        0  0.45766554\n355  1        Flywch2  0.2411600 1.033238e-03  0.10858097        0  0.58361314\n356  1          Chek1  0.2391718 1.200473e-03  0.07450064        0  0.91292776\n357  1         Trim37  0.2379107 1.321544e-03  0.15937038        0  0.28132708\n358  1         Chaf1a  0.2376088 1.346492e-03  0.10165124        0  0.68231148\n359  1         Pdzph1  0.2374147 1.360093e-03  0.11288849        0  0.57366634\n360  1          Haus8  0.2370510 1.392666e-03  0.12249989        0  0.49203394\n361  1           Hmbs  0.2369100 1.400802e-03  0.14394595        0  0.45776455\n362  1       Pcna.ps2  0.2367286 1.409097e-03  0.08879734        0  0.85437301\n363  1          Etaa1  0.2367006 1.409097e-03  0.14976924        0  0.36956284\n364  1        Tmem121  0.2362380 1.446582e-03  0.14521992        0  0.47909447\n365  1          Cdca2  0.2359494 1.472437e-03  0.06142875        0  1.34225876\n366  1        Irf2bpl  0.2356720 1.497428e-03  0.15515403        0  0.36188008\n367  1          Pde4b  0.2349984 1.571644e-03  0.11714433        0  0.45709381\n368  1           Mlf1  0.2346168 1.594202e-03  0.06118993        0  1.29851946\n369  1       Mis18bp1  0.2346168 1.594202e-03  0.06118993        0  1.21482781\n370  1          Spag5  0.2346168 1.594202e-03  0.06118993        0  1.34384480\n371  1          Zmym1  0.2345570 1.594202e-03  0.08114126        0  0.89458503\n372  1          Shmt1  0.2344105 1.600521e-03  0.12815325        0  0.52870919\n373  1          Tssc4  0.2343779 1.600521e-03  0.15635528        0  0.32770961\n374  1           Rhoc  0.2342239 1.611970e-03  0.13414303        0  0.36469101\n375  1          Cdca7  0.2338301 1.654677e-03  0.16293099        0  0.28447965\n376  1          Tfdp1  0.2335707 1.680510e-03  0.15057237        0  0.39952713\n377  1         Ncapg2  0.2327668 1.778155e-03  0.06540349        0  1.11538303\n378  1         Pradc1  0.2327289 1.778155e-03  0.10852693        0  0.53613567\n379  1           Slbp  0.2314104 1.962668e-03  0.12480165        0  0.51848583\n380  1          Hmga2  0.2300276 2.152345e-03  0.10793416        0  0.65705685\n381  1          Bard1  0.2299802 2.152345e-03  0.05141937        0  1.76615471\n382  1         Phlda1  0.2283316 2.423158e-03  0.10727100        0  0.55121094\n383  1           E2f6  0.2280089 2.457285e-03  0.09881927        0  0.59038008\n384  1           Cdk2  0.2279660 2.457285e-03  0.12123217        0  0.52067649\n385  1            Tnc  0.2276578 2.504683e-03  0.10188945        0  0.56151444\n386  1          Cks1b  0.2274528 2.532731e-03  0.15655625        0  0.27702256\n387  1           Glrb  0.2272253 2.565546e-03  0.09572922        0  0.52831459\n388  1         Trmt2a  0.2268055 2.637598e-03  0.12484329        0  0.46322401\n389  1          Hjurp  0.2266443 2.645925e-03  0.08642631        0  0.74464188\n390  1           Ect2  0.2257246 2.826640e-03  0.07211215        0  0.71038020\n391  1          Sall3  0.2255011 2.862344e-03  0.12454112        0  0.28170195\n392  1           Aars  0.2252039 2.914917e-03  0.11337869        0  0.47260875\n393  1          Hmgb2  0.2249976 2.933452e-03  0.12219093        0  0.07133909\n394  1          Htra2  0.2249440 2.933452e-03  0.11578979        0  0.61829587\n395  1          Ube2t  0.2248532 2.940696e-03  0.07190499        0  0.93571480\n396  1         Klhl29  0.2231737 3.316738e-03  0.08214502        0  0.77157230\n397  1           Slf1  0.2231390 3.316738e-03  0.13853706        0  0.13283425\n398  1           Msh6  0.2230983 3.316738e-03  0.11027547        0  0.49912847\n399  1         Tsen15  0.2229020 3.351720e-03  0.13840215        0  0.23835610\n400  1         Cep192  0.2226956 3.389717e-03  0.08524020        0  0.66700755\n401  2            Tk1 -0.5481345 4.752571e-19 -0.14704245        0 -1.23101921\n402  2            Ung -0.5184663 5.458905e-17 -0.16848991        0 -0.79295818\n403  2          Hells -0.5052327 3.334608e-16 -0.16634434        0 -0.67681838\n404  2           Rrm2 -0.5045389 3.334608e-16 -0.16489764        0 -0.90657877\n405  2           Lig1 -0.4999139 5.923731e-16 -0.15716114        0 -0.89100637\n406  2          Prim1 -0.4947496 1.172798e-15 -0.16335628        0 -0.66506406\n407  2           Mcm3 -0.4924667 1.481750e-15 -0.16140715        0 -0.72979998\n408  2          Dscc1 -0.4904266 1.826358e-15 -0.10521286        0 -1.75567703\n409  2           Dhfr -0.4855568 3.567640e-15 -0.15150375        0 -0.85281521\n410  2          Ccne2 -0.4813782 6.268432e-15 -0.11043879        0 -1.50581190\n411  2           Rmi2 -0.4764904 1.233260e-14 -0.11369871        0 -1.21147155\n412  2           Cdt1 -0.4716974 2.389675e-14 -0.13625342        0 -0.87079957\n413  2           Gmnn -0.4705553 2.644993e-14 -0.15168048        0 -0.79120719\n414  2           E2f1 -0.4691944 3.041640e-14 -0.14082708        0 -0.77782890\n415  2           Mcm5 -0.4661965 4.506787e-14 -0.14967247        0 -0.73973513\n416  2           Exo1 -0.4629639 6.926220e-14 -0.09788376        0 -1.31188184\n417  2          Gins2 -0.4586213 1.257432e-13 -0.14673243        0 -0.74222428\n418  2         Pkmyt1 -0.4525684 2.932596e-13 -0.08792337        0 -1.76480458\n419  2           Rpa2 -0.4483032 5.219558e-13 -0.14236162        0 -0.75795432\n420  2         Chaf1b -0.4330365 4.485871e-12 -0.12417663        0 -0.83861798\n421  2           Smc2 -0.4298835 6.682888e-12 -0.13292970        0 -0.65332490\n422  2           Mcm6 -0.4255162 1.166768e-11 -0.14337287        0 -0.53880518\n423  2           Rfc3 -0.4252797 1.166768e-11 -0.13920877        0 -0.67977204\n424  2           Fen1 -0.4241640 1.308063e-11 -0.12104804        0 -0.79956735\n425  2           Cdc6 -0.4147942 4.556424e-11 -0.08798025        0 -1.30725721\n426  2          Tipin -0.4128119 5.740520e-11 -0.13910764        0 -0.55333545\n427  2           Rfc4 -0.4055386 1.468243e-10 -0.13355523        0 -0.56606644\n428  2           Orc6 -0.4031072 1.891601e-10 -0.13021966        0 -0.51696150\n429  2          Atad2 -0.4026975 1.932413e-10 -0.11007346        0 -0.82256923\n430  2          Rad51 -0.4015229 2.185669e-10 -0.09209126        0 -1.05155473\n431  2         Sorcs1 -0.3998704 2.633575e-10 -0.12070527        0 -0.71056991\n432  2          Cdc45 -0.3994418 2.703861e-10 -0.08013750        0 -1.38985555\n433  2           Pcna -0.3958588 4.191910e-10 -0.13329578        0 -0.62245412\n434  2          Prim2 -0.3926493 6.173534e-10 -0.10227142        0 -0.76923210\n435  2          Gins1 -0.3890007 9.079434e-10 -0.10593478        0 -0.75790737\n436  2           Tyms -0.3889389 9.079434e-10 -0.12872764        0 -0.63069038\n437  2           Rfc2 -0.3888210 9.079434e-10 -0.13102918        0 -0.48689426\n438  2          Pold1 -0.3840017 1.594052e-09 -0.09276855        0 -0.85763653\n439  2          Brca1 -0.3809559 2.283052e-09 -0.07183637        0 -1.53371887\n440  2            Nrm -0.3746927 4.857066e-09 -0.10441532        0 -0.71752912\n441  2          Uhrf1 -0.3741173 5.097731e-09 -0.10178301        0 -0.71774577\n442  2          Tcf19 -0.3726637 5.961525e-09 -0.07896987        0 -1.09393659\n443  2          Clspn -0.3708075 7.321364e-09 -0.07089366        0 -1.21161664\n444  2           Mcm4 -0.3706020 7.350728e-09 -0.11272849        0 -0.69221047\n445  2       Rad51ap1 -0.3664745 1.182065e-08 -0.06631018        0 -1.51093976\n446  2         Fignl1 -0.3663475 1.182065e-08 -0.09470897        0 -0.78739338\n447  2         Tubb2a -0.3585003 2.956364e-08 -0.11539489        0 -0.58301867\n448  2           Rfc5 -0.3580409 3.061082e-08 -0.10092969        0 -0.65123397\n449  2          Dnmt1 -0.3534185 5.067871e-08 -0.09890640        0 -0.64921891\n450  2         Mms22l -0.3523472 5.636179e-08 -0.11287296        0 -0.47476249\n451  2            Blm -0.3513021 6.248984e-08 -0.07254097        0 -1.09753554\n452  2          Cadm2 -0.3494273 7.624308e-08 -0.11771945        0 -0.43100882\n453  2        Kbtbd11 -0.3475166 9.333162e-08 -0.10410042        0 -0.53870228\n454  2          Asf1b -0.3456630 1.096947e-07 -0.06816576        0 -1.12574407\n455  2          Gins3 -0.3437142 1.347095e-07 -0.05983691        0 -1.43953193\n456  2            Dtl -0.3419938 1.610699e-07 -0.09869048        0 -0.63666799\n457  2           Lrr1 -0.3410120 1.771134e-07 -0.06170298        0 -1.34776091\n458  2           Plk4 -0.3375145 2.580565e-07 -0.06125832        0 -1.27616216\n459  2          Cenph -0.3368874 2.725359e-07 -0.08655926        0 -0.72695469\n460  2          Fbxo5 -0.3365765 2.779176e-07 -0.06524750        0 -1.06334486\n461  2          Ccne1 -0.3363932 2.794664e-07 -0.07577196        0 -0.82221801\n462  2          Grik1 -0.3344500 3.416098e-07 -0.06689227        0 -0.72816303\n463  2           Alad -0.3327345 4.068515e-07 -0.10806778        0 -0.48414721\n464  2          Eepd1 -0.3275144 7.092294e-07 -0.07451093        0 -0.77762316\n465  2           Pole -0.3223002 1.225272e-06 -0.06355856        0 -1.03798408\n466  2           Mcm2 -0.3201906 1.512578e-06 -0.10596190        0 -0.37595352\n467  2          Kntc1 -0.3185619 1.772754e-06 -0.05539017        0 -1.10636461\n468  2          Pold3 -0.3184306 1.773505e-06 -0.08919825        0 -0.56141552\n469  2          Pclaf -0.3180640 1.813334e-06 -0.10241504        0 -0.64644078\n470  2          Csmd1 -0.3179704 1.813334e-06 -0.10627764        0 -0.51261398\n471  2         Dnajc9 -0.3161624 2.164628e-06 -0.10495361        0 -0.43077793\n472  2         Sdf2l1 -0.3111584 3.574428e-06 -0.08975270        0 -0.55112559\n473  2          Cenps -0.3110964 3.574428e-06 -0.09271055        0 -0.56140907\n474  2       Rnaseh2a -0.3106038 3.714273e-06 -0.10111880        0 -0.43128750\n475  2         Rad54l -0.3088671 4.385964e-06 -0.06190370        0 -0.90032432\n476  2          Mastl -0.3086693 4.421875e-06 -0.04362960        0 -1.78749970\n477  2           Rrm1 -0.3076603 4.844291e-06 -0.09737184        0 -0.48997891\n478  2           Cdk1 -0.3053578 6.051432e-06 -0.07570768        0 -0.42998209\n479  2          Tedc1 -0.3016261 8.713351e-06 -0.04536955        0 -1.57988859\n480  2           Polq -0.3005773 9.566400e-06 -0.04083661        0 -1.79941491\n481  2          Syce2 -0.2998414 1.017840e-05 -0.08906863        0 -0.57870336\n482  2          Fanca -0.2995808 1.021407e-05 -0.04074872        0 -1.76252131\n483  2          Mcm10 -0.2995808 1.021407e-05 -0.04074872        0 -1.77431964\n484  2          Cenpk -0.2970270 1.301446e-05 -0.06041241        0 -0.92684790\n485  2          Atad5 -0.2960144 1.422540e-05 -0.07380592        0 -0.66497600\n486  2          Hspa5 -0.2957514 1.444147e-05 -0.09311742        0 -0.34857351\n487  2         Donson -0.2942376 1.657710e-05 -0.06482293        0 -0.70953315\n488  2         Topbp1 -0.2932021 1.815025e-05 -0.07942870        0 -0.56767034\n489  2           Mcm7 -0.2908434 2.259163e-05 -0.09459102        0 -0.47125498\n490  2           Prc1 -0.2885447 2.791246e-05 -0.05938533        0 -0.87174887\n491  2         Mis18a -0.2874603 3.034868e-05 -0.06679608        0 -0.71322525\n492  2          Cenpu -0.2864638 3.255471e-05 -0.05386403        0 -0.90962079\n493  2          Pola2 -0.2864380 3.255471e-05 -0.07324105        0 -0.57334202\n494  2          Aunip -0.2864147 3.255471e-05 -0.03753542        0 -1.76517410\n495  2           Etv4 -0.2850162 3.653865e-05 -0.03741683        0 -1.75903148\n496  2         Mthfd2 -0.2849991 3.653865e-05 -0.07174260        0 -0.54048861\n497  2           Mcm8 -0.2831930 4.294694e-05 -0.05688305        0 -0.78050949\n498  2          Top2a -0.2829765 4.342063e-05 -0.06036567        0 -0.82979097\n499  2          Fxyd6 -0.2813864 4.996331e-05 -0.09478402        0 -0.40426670\n500  2           Nav2 -0.2797154 5.735616e-05 -0.05496351        0 -0.66779549\n501  2          Wdr76 -0.2786260 6.291080e-05 -0.06400926        0 -0.71742684\n502  2            Pgp -0.2772129 7.108394e-05 -0.08950452        0 -0.41317974\n503  2          Alcam -0.2765884 7.464013e-05 -0.09036638        0 -0.39154940\n504  2          Rad18 -0.2764641 7.483439e-05 -0.04720831        0 -1.07430737\n505  2           Eme1 -0.2757416 7.929175e-05 -0.04903813        0 -0.95504349\n506  2        Psmc3ip -0.2756039 7.960615e-05 -0.08729227        0 -0.45749056\n507  2       Timeless -0.2754954 7.966689e-05 -0.07677210        0 -0.54988161\n508  2           Wwox -0.2754084 7.966689e-05 -0.08467596        0 -0.32227988\n509  2         Hspa14 -0.2727748 9.971178e-05 -0.08910763        0 -0.40857579\n510  2        Fam111a -0.2725442 1.001479e-04 -0.03430862        0 -1.76316774\n511  2          Cenpi -0.2725442 1.001479e-04 -0.03430862        0 -1.83787774\n512  2          Ticrr -0.2709964 1.134080e-04 -0.04076235        0 -1.09466338\n513  2           Cltb -0.2659064 1.763467e-04 -0.07257968        0 -0.47464273\n514  2           Vrk1 -0.2657318 1.776896e-04 -0.08276670        0 -0.39919978\n515  2          Esco2 -0.2616651 2.525769e-04 -0.03801165        0 -1.13610777\n516  2         Prkab1 -0.2609871 2.638929e-04 -0.05239074        0 -0.69817315\n517  2          Cenpn -0.2606049 2.707702e-04 -0.05536726        0 -0.60515605\n518  2          Haus6 -0.2601783 2.789102e-04 -0.05066247        0 -0.67359863\n519  2          Gna14 -0.2591830 2.996177e-04 -0.03775785        0 -1.24822818\n520  2          Brip1 -0.2591830 2.996177e-04 -0.03775785        0 -1.16674243\n521  2          Nup93 -0.2587405 3.090453e-04 -0.06564117        0 -0.53491483\n522  2         Shisa9 -0.2580660 3.231057e-04 -0.03108340        0 -1.73879040\n523  2        Fam181b -0.2580571 3.231057e-04 -0.08129237        0 -0.35332726\n524  2          Tex30 -0.2578000 3.255957e-04 -0.07289953        0 -0.51878228\n525  2           Rfc1 -0.2562782 3.679706e-04 -0.08627232        0 -0.31382899\n526  2          Ccnd1 -0.2562164 3.679706e-04 -0.07440590        0 -0.49886167\n527  2           Manf -0.2558507 3.770416e-04 -0.08297882        0 -0.30846644\n528  2           Nsd2 -0.2551829 3.961463e-04 -0.08211493        0 -0.36592805\n529  2           Rgcc -0.2551111 3.961463e-04 -0.08192559        0 -0.35209128\n530  2          Siva1 -0.2545297 4.134846e-04 -0.07070738        0 -0.30396703\n531  2           Lsm2 -0.2532381 4.585073e-04 -0.08205692        0 -0.27714384\n532  2           Nsl1 -0.2524423 4.872552e-04 -0.03912639        0 -0.73228120\n533  2        Tnfaip8 -0.2515080 5.202976e-04 -0.05952840        0 -0.53773780\n534  2         Tubb4b -0.2500482 5.845826e-04 -0.07800270        0 -0.32728177\n535  2        St8sia1 -0.2494831 6.089485e-04 -0.04260110        0 -0.74123396\n536  2           Mtbp -0.2490175 6.290258e-04 -0.04766625        0 -0.74784551\n537  2          Gins4 -0.2486622 6.437783e-04 -0.07750155        0 -0.35407544\n538  2           Hat1 -0.2482794 6.567812e-04 -0.08105242        0 -0.39901499\n539  2          Cand2 -0.2482671 6.567812e-04 -0.04755328        0 -0.84060034\n540  2            Dut -0.2480184 6.662547e-04 -0.07266266        0 -0.37622944\n541  2        Tmem201 -0.2472088 7.037353e-04 -0.05046636        0 -0.67399836\n542  2          Rbbp7 -0.2469797 7.127525e-04 -0.08201487        0 -0.25999405\n543  2        Zscan22 -0.2462507 7.508874e-04 -0.04394258        0 -0.86018446\n544  2           Xbp1 -0.2462013 7.508874e-04 -0.07104727        0 -0.49134064\n545  2          Ywhah -0.2461255 7.509325e-04 -0.08228640        0 -0.32825814\n546  2          Haus4 -0.2458945 7.607330e-04 -0.06322811        0 -0.53385523\n547  2          Usp51 -0.2458027 7.618395e-04 -0.03464532        0 -1.19671799\n548  2         Mrps26 -0.2448711 8.178595e-04 -0.07586559        0 -0.40447865\n549  2          Cyr61 -0.2441738 8.535357e-04 -0.08154835        0 -0.17814705\n550  2           Nrg1 -0.2441337 8.535357e-04 -0.07098629        0 -0.27984683\n551  2            Dek -0.2435837 8.877308e-04 -0.06801026        0 -0.34892341\n552  2          Fstl5 -0.2427972 9.357863e-04 -0.07856427        0 -0.33185528\n553  2          Kif24 -0.2425030 9.474571e-04 -0.03431757        0 -1.15680175\n554  2           Nrg3 -0.2421109 9.670970e-04 -0.07098076        0 -0.45766554\n555  2        Flywch2 -0.2411415 1.034796e-03 -0.05249694        0 -0.58361314\n556  2          Chek1 -0.2391568 1.201924e-03 -0.03602023        0 -0.91292776\n557  2         Trim37 -0.2379087 1.321762e-03 -0.07705795        0 -0.28132708\n558  2         Chaf1a -0.2376221 1.345055e-03 -0.04915306        0 -0.68231148\n559  2         Pdzph1 -0.2374145 1.360119e-03 -0.05458368        0 -0.57366634\n560  2          Haus8 -0.2370465 1.393171e-03 -0.05922990        0 -0.49203394\n561  2           Hmbs -0.2368959 1.402389e-03 -0.06959646        0 -0.45776455\n562  2       Pcna.ps2 -0.2367291 1.410749e-03 -0.04293528        0 -0.85437301\n563  2          Etaa1 -0.2366860 1.410749e-03 -0.07241180        0 -0.36956284\n564  2        Tmem121 -0.2362287 1.447658e-03 -0.07021383        0 -0.47909447\n565  2          Cdca2 -0.2359450 1.472955e-03 -0.02970142        0 -1.34225876\n566  2        Irf2bpl -0.2356631 1.498498e-03 -0.07501708        0 -0.36188008\n567  2          Pde4b -0.2350038 1.570973e-03 -0.05664281        0 -0.45709381\n568  2           Mlf1 -0.2346278 1.593471e-03 -0.02958789        0 -1.29851946\n569  2       Mis18bp1 -0.2346278 1.593471e-03 -0.02958789        0 -1.21482781\n570  2          Spag5 -0.2346278 1.593471e-03 -0.02958789        0 -1.34384480\n571  2          Zmym1 -0.2345503 1.595050e-03 -0.03923222        0 -0.89458503\n572  2          Shmt1 -0.2344091 1.600590e-03 -0.06196417        0 -0.52870919\n573  2          Tssc4 -0.2343774 1.600590e-03 -0.07560058        0 -0.32770961\n574  2           Rhoc -0.2342307 1.611104e-03 -0.06486258        0 -0.36469101\n575  2          Cdca7 -0.2338417 1.653156e-03 -0.07878415        0 -0.28447965\n576  2          Tfdp1 -0.2335739 1.680076e-03 -0.07280563        0 -0.39952713\n577  2         Ncapg2 -0.2327548 1.776999e-03 -0.03162221        0 -1.11538303\n578  2         Pradc1 -0.2327371 1.776999e-03 -0.05247670        0 -0.53613567\n579  2           Slbp -0.2314011 1.964092e-03 -0.06034156        0 -0.51848583\n580  2          Hmga2 -0.2300230 2.153792e-03 -0.05218718        0 -0.65705685\n581  2          Bard1 -0.2299716 2.153792e-03 -0.02486131        0 -1.76615471\n582  2         Phlda1 -0.2283186 2.425602e-03 -0.05186462        0 -0.55121094\n583  2           E2f6 -0.2280026 2.455185e-03 -0.04777969        0 -0.59038008\n584  2           Cdk2 -0.2279771 2.455185e-03 -0.05862091        0 -0.52067649\n585  2            Tnc -0.2276397 2.508196e-03 -0.04926157        0 -0.56151444\n586  2          Cks1b -0.2274410 2.535035e-03 -0.07569401        0 -0.27702256\n587  2           Glrb -0.2272191 2.566777e-03 -0.04628563        0 -0.52831459\n588  2         Trmt2a -0.2268075 2.637197e-03 -0.06036463        0 -0.46322401\n589  2          Hjurp -0.2266469 2.645398e-03 -0.04178924        0 -0.74464188\n590  2           Ect2 -0.2257472 2.821738e-03 -0.03487110        0 -0.71038020\n591  2          Sall3 -0.2254999 2.862601e-03 -0.06021769        0 -0.28170195\n592  2           Aars -0.2252047 2.914742e-03 -0.05482095        0 -0.47260875\n593  2          Hmgb2 -0.2249984 2.933925e-03 -0.05908186        0 -0.07133909\n594  2          Htra2 -0.2249419 2.933925e-03 -0.05598604        0 -0.61829587\n595  2          Ube2t -0.2248689 2.937173e-03 -0.03476986        0 -0.93571480\n596  2         Klhl29 -0.2231829 3.320246e-03 -0.03972033        0 -0.77157230\n597  2           Slf1 -0.2231241 3.320246e-03 -0.06698082        0 -0.13283425\n598  2           Msh6 -0.2230844 3.320246e-03 -0.05331696        0 -0.49912847\n599  2         Tsen15 -0.2228915 3.354395e-03 -0.06691692        0 -0.23835610\n600  2         Cep192 -0.2227014 3.388223e-03 -0.04121634        0 -0.66700755\n601  2        Neurog2  0.5831705 1.513990e-21  0.19592758        0  1.39130757\n602  2          Pttg1  0.4033662 1.890949e-10  0.12928354        0  1.43150739\n603  2        Gadd45g  0.3900987 8.335976e-10  0.11948442        0  1.47879552\n604  2          Cenpa  0.3862762 1.224608e-09  0.12462241        0  1.29099095\n605  2          Ccnb2  0.3567634 3.490893e-08  0.10299667        0  1.46159235\n606  2         Elavl4  0.3468110 9.947233e-08  0.11396957        0  0.75589932\n607  2      Hist1h2bc  0.3466351 9.980272e-08  0.10868607        0  0.86447991\n608  2          Ascl1  0.2878236 2.960890e-05  0.07604853        0  1.23580955\n609  2        Zc3h12c  0.2809180 5.172512e-05  0.08529927        0  0.71906028\n610  2          Rcor2  0.2747655 8.380291e-05  0.08289499        0  0.68126225\n611  2            Bsg  0.2711735 1.125159e-04  0.05215620        0  0.16704556\n612  2           Chd7  0.2689165 1.357545e-04  0.09037789        0  0.45825134\n613  2           Btg2  0.2612244 2.604819e-04  0.08802977        0  0.57453573\n614  2           Dll1  0.2579554 3.235874e-04  0.06192673        0  1.48812048\n615  2          Palld  0.2522486 4.919641e-04  0.08408894        0  0.39830033\n616  2          Ube2c  0.2475209 6.900588e-04  0.07000270        0  0.41115299\n617  2          Kdm7a  0.2447976 8.178595e-04  0.05910969        0  1.03349500\n618  2            Tpr  0.2430861 9.192848e-04  0.06769634        0  0.23402062\n619  2            Mt2  0.2426740 9.397476e-04  0.07595461        0  0.21444711\n620  2           Hes6  0.2422195 9.640875e-04  0.08086626        0  0.44197418\n621  2           Fgd4  0.2419872 9.713416e-04  0.07380799        0  0.50218344\n622  2           Gpc4  0.2400295 1.126267e-03  0.08078281        0  0.31960198\n623  2       Mir9.3hg  0.2365568 1.417750e-03  0.06699790        0  0.19384147\n624  2      Hist3h2ba  0.2311144 1.998848e-03  0.07783614        0  0.34933545\n625  2          Cenpe  0.2300522 2.153792e-03  0.05111731        0  1.45377818\n626  2           H1f0  0.2288871 2.332162e-03  0.05716405        0  0.30932670\n627  2         Knstrn  0.2281380 2.447995e-03  0.06792837        0  0.68360700\n628  2         Atad2b  0.2266654 2.645398e-03  0.07144932        0  0.42532807\n629  2        Igfbpl1  0.2250901 2.927116e-03  0.07492568        0  0.50257889\n630  2           Jam3  0.2204014 3.797733e-03  0.07357563        0  0.41024029\n631  2       Slc25a27  0.2169481 4.813378e-03  0.06723361        0  0.42497684\n632  2         Smim13  0.2139058 5.764408e-03  0.05428681        0  0.60289476\n633  2           Gng2  0.2137151 5.815854e-03  0.06251788        0  0.46536664\n634  2          Kdm5b  0.2120960 6.427188e-03  0.06903654        0  0.36398690\n635  2          Cdca3  0.2100817 7.215511e-03  0.05782365        0  0.68499462\n636  2           Gja1  0.2085036 7.962702e-03  0.05408948        0  0.64915425\n637  2           Usp3  0.2070938 8.526446e-03  0.06893002        0  0.31011816\n638  2          Insm1  0.2063884 8.932343e-03  0.04540281        0  0.80644302\n639  2         Rnf146  0.2019070 1.165956e-02  0.05720783        0  0.49655832\n640  2          Prag1  0.2000067 1.308501e-02  0.05544131        0  0.53173283\n641  2         Dmrta2  0.1968664 1.540434e-02  0.06611445        0  0.28567311\n642  2           Eci2  0.1959468 1.624300e-02  0.06460149        0  0.16442599\n643  2         mt.Nd2  0.1957873 1.631856e-02  0.05989381        0  0.22039650\n644  2         Rhbdl3  0.1944032 1.748468e-02  0.06480989        0  0.25720862\n645  2           Ssr2  0.1936514 1.811766e-02  0.05224950        0  0.23702265\n646  2          Ccnb1  0.1931207 1.866173e-02  0.04910982        0  0.80824955\n647  2           Nfix  0.1921382 1.954309e-02  0.05419758        0  0.17028655\n648  2         Ppp1cb  0.1918466 1.983806e-02  0.06458535        0  0.27439314\n649  2           Rnf5  0.1918116 1.983806e-02  0.06453207        0  0.27232424\n650  2          Eomes  0.1913350 2.035845e-02  0.03448300        0  1.50008613\n651  2        Laptm4a  0.1897594 2.221036e-02  0.04566858        0  0.17299330\n652  2          Gdpd1  0.1887921 2.340382e-02  0.05730035        0  0.23825994\n653  2          Timp2  0.1885731 2.367619e-02  0.05545398        0  0.31062215\n654  2         Tmem59  0.1880633 2.427720e-02  0.05338347        0  0.27392623\n655  2          Cenpf  0.1864141 2.620852e-02  0.05297872        0  0.41650568\n656  2        Tmem127  0.1862794 2.620852e-02  0.04101800        0  0.68982733\n657  2         Arxes2  0.1862673 2.620852e-02  0.04492616        0  0.68939246\n658  2          Lzts1  0.1859711 2.664518e-02  0.03239824        0  1.50408762\n659  2          Jmjd6  0.1853788 2.746733e-02  0.05796599        0  0.30428514\n660  2         Bckdha  0.1839872 2.912772e-02  0.05307056        0  0.51569540\n661  2          Slit2  0.1830418 3.056483e-02  0.04852434        0  0.70007048\n662  2          Ddit4  0.1830287 3.056483e-02  0.05914457        0  0.23056730\n663  2          Siah3  0.1829428 3.056483e-02  0.05274052        0  0.50950870\n664  2          Asna1  0.1828525 3.056483e-02  0.06154038        0  0.24053934\n665  2         Akap8l  0.1822160 3.142236e-02  0.05330347        0  0.43417761\n666  2            Os9  0.1814018 3.232165e-02  0.05007664        0  0.40610196\n667  2           Odc1  0.1813924 3.232165e-02  0.03702170        0  0.94708523\n668  2        Selenos  0.1799740 3.428738e-02  0.06023524        0  0.19306172\n669  2          Aamdc  0.1797952 3.446034e-02  0.05326976        0  0.40172927\n670  2         Agpat4  0.1797952 3.446034e-02  0.05326976        0  0.37770129\n671  2          Nop53  0.1796128 3.475395e-02  0.05199777        0  0.23849178\n672  2           Emc6  0.1794405 3.497203e-02  0.05443458        0  0.18767018\n673  2         Zfp637  0.1783292 3.682671e-02  0.05983004        0  0.19956155\n674  2           Mfng  0.1783260 3.682671e-02  0.04404046        0  0.54482185\n675  2        Fam168b  0.1779487 3.736772e-02  0.05731029        0  0.22485811\n676  2     AC154683.1  0.1774403 3.835202e-02  0.02961703        0  1.49632113\n677  2           Bptf  0.1771458 3.874950e-02  0.05930763        0  0.34544312\n678  2            Jtb  0.1763424 4.029795e-02  0.05924299        0  0.19863647\n679  2          Psrc1  0.1760528 4.093552e-02  0.03538571        0  0.93641309\n680  2          Ttc23  0.1749617 4.339970e-02  0.04562408        0  0.42880194\n681  2          Reps1  0.1746310 4.409934e-02  0.03227299        0  1.20006014\n682  2           Top1  0.1745432 4.414974e-02  0.03852884        0  0.23557563\n683  2           Psd3  0.1742178 4.488840e-02  0.03217578        0  1.13958202\n684  2           Cltc  0.1737330 4.571130e-02  0.04078918        0  0.68818990\n685  2           Ktn1  0.1733240 4.666851e-02  0.05831728        0  0.22152324\n686  2          Wdr12  0.1732151 4.688129e-02  0.05647439        0  0.34963288\n687  2         Pabpc1  0.1729144 4.754789e-02  0.03326190        0  0.16464519\n688  2 X2610001J05Rik  0.1728402 4.766428e-02  0.05691930        0  0.17472798\n689  2           Lhx2  0.1726749 4.794708e-02  0.04735519        0  0.28162939\n690  2          Foxp2  0.1725655 4.816722e-02  0.05785656        0  0.25513168\n691  2          Srrm4  0.1720562 4.928818e-02  0.03440074        0  1.03877312\n692  2           Eml5  0.1718234 4.966616e-02  0.05561964        0  0.32448358\n693  2         Sh3rf1  0.1714332 5.051673e-02  0.05587385        0  0.39969855\n694  2       Slc16a14  0.1714196 5.051673e-02  0.03847020        0  0.72548528\n695  2         Rb1cc1  0.1713363 5.063565e-02  0.04560101        0  0.42499406\n696  2          Lockd  0.1709997 5.147271e-02  0.05305127        0  0.36446249\n697  2         Txnrd1  0.1707174 5.213788e-02  0.05688433        0  0.21117500\n698  2          Pfdn2  0.1705926 5.225422e-02  0.04469156        0  0.08400791\n699  2        Rps27rt  0.1696975 5.487550e-02  0.05669950        0  0.19354428\n700  2           Mbd5  0.1695074 5.518622e-02  0.04719758        0  0.48897472\n701  2          Itgb1  0.1695047 5.518622e-02  0.05698566        0  0.19584190\n702  2          Ccnl2  0.1692338 5.522438e-02  0.05429231        0  0.09177134\n703  2           Rmst  0.1682377 5.792345e-02  0.03044106        0  1.27032788\n704  2        Hnrnpa1  0.1681490 5.811857e-02  0.05518651        0  0.14576877\n705  2         Ccdc12  0.1677730 5.920151e-02  0.05594081        0  0.16906794\n706  2         Zfp157  0.1673699 5.989724e-02  0.04307345        0  0.52026271\n707  2         Trip12  0.1673163 5.989724e-02  0.04536520        0  0.34943156\n708  2        Laptm4b  0.1672896 5.989724e-02  0.05036216        0  0.33170170\n709  2        Akirin2  0.1670726 6.044633e-02  0.04632086        0  0.40527418\n710  2           Tshr  0.1669986 6.056937e-02  0.03874556        0  0.55592360\n711  2          Eif2a  0.1667874 6.101892e-02  0.05529337        0  0.20248082\n712  2           Bfar  0.1663484 6.190643e-02  0.05127907        0  0.36167688\n713  2          Ap3s1  0.1663118 6.190643e-02  0.05404471        0  0.33114029\n714  2           Dph1  0.1659134 6.284806e-02  0.02626967        0  1.48371426\n715  2         Cfap36  0.1658016 6.292215e-02  0.05381912        0  0.27506880\n716  2           Gpx8  0.1648038 6.531965e-02  0.05550994        0  0.32579681\n717  2          Hif1a  0.1640067 6.786081e-02  0.04193614        0  0.48187187\n718  2       Aasdhppt  0.1636368 6.827705e-02  0.05187066        0  0.28623795\n719  2         Draxin  0.1635003 6.834423e-02  0.04313019        0  0.42253273\n720  2         Tmem33  0.1634844 6.834423e-02  0.05504423        0  0.23757017\n721  2            H13  0.1626499 7.040415e-02  0.05454155        0  0.32771944\n722  2           Fpgs  0.1621757 7.199101e-02  0.03112900        0  0.74272924\n723  2          Mdga1  0.1610562 7.453807e-02  0.02812869        0  1.10884549\n724  2          Kdm6b  0.1609537 7.461636e-02  0.03503990        0  0.46530168\n725  2          Bach2  0.1606667 7.571972e-02  0.05415045        0  0.29476183\n726  2        Ankrd37  0.1606402 7.571972e-02  0.03076915        0  0.56885622\n727  2           Lig3  0.1604519 7.623253e-02  0.03491296        0  0.57277632\n728  2           Lrp4  0.1602715 7.635252e-02  0.03960140        0  0.54255835\n729  2           Ccz1  0.1600780 7.707543e-02  0.05388517        0  0.13292645\n730  2        Slc2a13  0.1599666 7.744285e-02  0.03951597        0  0.50855381\n731  2           Ptms  0.1596970 7.829392e-02  0.04567797        0  0.29259682\n732  2           Rab7  0.1592068 7.997150e-02  0.05345143        0  0.12293605\n733  2         Lrrc51  0.1589303 8.097922e-02  0.02395780        0  1.47316169\n734  2       Tnfrsf19  0.1588611 8.117062e-02  0.04046165        0  0.45311955\n735  2        Serinc1  0.1587842 8.122104e-02  0.05141224        0  0.21441979\n736  2 X1110004F10Rik  0.1587624 8.122104e-02  0.04133267        0  0.10430969\n737  2         Klhl24  0.1586645 8.122104e-02  0.04602649        0  0.38142234\n738  2          Snrpa  0.1586010 8.124152e-02  0.04207531        0  0.17180810\n739  2          Tmed4  0.1585172 8.137816e-02  0.05242289        0  0.28734854\n740  2          Syne2  0.1581705 8.240131e-02  0.05157505        0  0.23440549\n741  2          Kcnrg  0.1578183 8.349924e-02  0.02373848        0  1.49462152\n742  2           Rnd2  0.1578183 8.349924e-02  0.02373848        0  1.48697089\n743  2          Hmgn5  0.1570720 8.651970e-02  0.05261051        0  0.24680033\n744  2           Mia2  0.1568596 8.731838e-02  0.04995541        0  0.26692785\n745  2         Kif21a  0.1567786 8.758423e-02  0.03643521        0  0.11360722\n746  2           Cct2  0.1566585 8.765486e-02  0.04674420        0  0.13234402\n747  2          Eef2k  0.1564710 8.818496e-02  0.03366796        0  0.57994616\n748  2          Ppm1b  0.1562393 8.906899e-02  0.04720568        0  0.31158233\n749  2         Cacnb4  0.1560135 8.967001e-02  0.03173163        0  0.59596871\n750  2          Mex3a  0.1557236 9.099315e-02  0.05064044        0  0.24904478\n751  2          Paip2  0.1554324 9.207324e-02  0.03809100        0  0.13123212\n752  2           Lsg1  0.1553801 9.220718e-02  0.04636021        0  0.24220200\n753  2          Hyal2  0.1553093 9.233458e-02  0.04487159        0  0.28606082\n754  2        Arhgef2  0.1553032 9.233458e-02  0.03928875        0  0.52227443\n755  2          Samd8  0.1552314 9.243597e-02  0.02650693        0  1.04246472\n756  2        Slc18b1  0.1549956 9.351537e-02  0.02916272        0  0.89119608\n757  2          Clcn3  0.1546511 9.503981e-02  0.04669644        0  0.27388620\n758  2         Igfbp2  0.1545469 9.523666e-02  0.04389977        0  0.17183487\n759  2          Rps25  0.1540116 9.721140e-02  0.01261316        0  0.08285596\n760  2          Trrap  0.1539845 9.721140e-02  0.03098157        0  0.69086779\n761  2          Tubb3  0.1539833 9.721140e-02  0.05092929        0  0.28710293\n762  2          Rbm28  0.1536014 9.899314e-02  0.04688976        0  0.17512792\n763  2          Igf1r  0.1532369 1.001473e-01  0.05083805        0  0.18565244\n764  2          Acsl4  0.1524843 1.033439e-01  0.02224215        0  1.47648044\n765  2        Tmem178  0.1522769 1.043748e-01  0.04537185        0  0.42984756\n766  2         Ndufa6  0.1518733 1.061080e-01  0.04321508        0  0.13794099\n767  2          Alpk1  0.1508835 1.104910e-01  0.03024034        0  0.77110477\n768  2           Wapl  0.1507020 1.113812e-01  0.04086983        0  0.37155075\n769  2          Usp22  0.1503240 1.135232e-01  0.04075800        0  0.33912281\n770  2        Dnttip2  0.1502964 1.135389e-01  0.04934775        0  0.20322647\n771  2           Lrp8  0.1500065 1.145543e-01  0.03342993        0  0.53557896\n772  2          Masp1  0.1497192 1.161822e-01  0.04794583        0  0.32132151\n773  2         Hilpda  0.1494678 1.162472e-01  0.03846624        0  0.40070065\n774  2          Rnf41  0.1494678 1.162472e-01  0.03846624        0  0.23944894\n775  2          Pias1  0.1493379 1.164078e-01  0.04809589        0  0.28687435\n776  2        Jakmip2  0.1490277 1.178946e-01  0.03939427        0  0.45703951\n777  2         Crebbp  0.1483029 1.214373e-01  0.04838327        0  0.21721242\n778  2        Gm15545  0.1476591 1.241770e-01  0.02087123        0  1.49398047\n779  2         Mboat2  0.1476419 1.241770e-01  0.04074764        0  0.24453534\n780  2           Nle1  0.1472636 1.260502e-01  0.04063432        0  0.29531402\n781  2          Mbtd1  0.1470658 1.265740e-01  0.04895758        0  0.22167452\n782  2        Tmem35a  0.1469877 1.266961e-01  0.02074503        0  1.50611416\n783  2          Cebpz  0.1469761 1.266961e-01  0.04730933        0  0.17629012\n784  2           Emx1  0.1468458 1.271813e-01  0.04695278        0  0.20501463\n785  2           Tsr3  0.1467142 1.274341e-01  0.04683528        0  0.28468483\n786  2          Fezf2  0.1463003 1.285268e-01  0.04922906        0  0.25237380\n787  2       Col4a3bp  0.1462571 1.285268e-01  0.03066821        0  0.53977782\n788  2          Ypel2  0.1460458 1.293656e-01  0.02884150        0  0.59908155\n789  2         Zdhhc9  0.1460458 1.293656e-01  0.02884150        0  0.82703245\n790  2       BC049730  0.1458932 1.293656e-01  0.02652281        0  0.86594762\n791  2        Slc15a4  0.1458330 1.293656e-01  0.02382724        0  0.81315673\n792  2          Mtus1  0.1457899 1.293656e-01  0.03214657        0  0.46501331\n793  2        Slc30a6  0.1457487 1.293656e-01  0.03054274        0  0.46955821\n794  2         mt.Nd5  0.1456056 1.298175e-01  0.04165712        0  0.26450106\n795  2          Cdc40  0.1455259 1.302056e-01  0.04770232        0  0.28549454\n796  2        Morf4l2  0.1453975 1.306164e-01  0.04324279        0  0.11739701\n797  2        Slc35e2  0.1452838 1.310349e-01  0.02866335        0  0.79268238\n798  2          Tmed9  0.1452656 1.310349e-01  0.04160800        0  0.06663226\n799  2         Fbxo11  0.1452456 1.310349e-01  0.03345416        0  0.49404543\n800  2       Ftl1.ps1  0.1450878 1.319654e-01  0.03811534        0  0.32582298"
  },
  {
    "objectID": "NonCT_clusters.html#cluster-432-e13.5",
    "href": "NonCT_clusters.html#cluster-432-e13.5",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Cluster 432 e13.5",
    "text": "Cluster 432 e13.5\n\n\n  OriginalCluster CellNumber COTANClusterNumber          Accuracy\n1      Cl525E15.0        826                  3 0.786585365853659\n2      Cl511E15.0        540                  2 0.916666666666667\n3      Cl184E15.0        322                  2          0.734375\n4      Cl432E13.5        536                  2              &lt;NA&gt;\n         Clusters\n1 316 - 176 - 334\n2       143 - 397\n3        94 - 228\n4       247 - 289\n\n\n\ne13.5 &lt;- readRDS(paste0(inDir,\"e13.5_ForebrainDorsal.cotan.RDS\"))\n\ncells &lt;- getClusterizationData(e13.5,clName = \"original.clusters\")[[1]][getClusterizationData(e13.5,clName = \"original.clusters\")[[1]] == \"432\"]\n\ncells &lt;-names(cells)\n\ncl432 &lt;-  automaticCOTANObjectCreation(raw = getRawData(e13.5)[,cells],\n                                       GEO = \"Loom\",\n                                       sequencingMethod = \"10X\",\n                                       sampleCondition = \"cl432\",\n                                       cores = 10,saveObj = T,\n                                       outDir = \"Data/MouseCortexFromLoom/NotCTSingleClusters/\",\n                                       calcCoex = T)\n\n\ncl432GDI &lt;- calculateGDI(cl432)\n\nsubsetGDIcl432 &lt;- cl432GDI[cl432GDI$sum.raw.norm &gt; 5,]\ntop.GDI.genes &lt;- rownames(subsetGDIcl432[order(subsetGDIcl432$GDI,decreasing = T),])[1:25]\n\nGDIPlot(cl432,genes = list(\"topGDI\"=top.GDI.genes),GDIIn = cl432GDI)\n\n\n\n\n\nlist.cl.CT &lt;- cellsUniformClustering(cl432, GDIThreshold = 1.43, cores = 10L,\n                         saveObj = TRUE, outDir = outDir)\n\ncl432 &lt;- addClusterization(cl432, clName = \"split\",\n                              clusters = list.cl.CT$clusters,\n                              coexDF = list.cl.CT$coex, override = TRUE)\n\ntable(list.cl.CT$clusters)\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cl432, clusters = list.cl.CT$clusters,\n                            GDIThreshold = 1.43, batchSize = 4L, cores = 10L,\n                            saveObj = TRUE, outDir = outDir)\n\ncl432 &lt;- addClusterization(cl432, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\nsaveRDS(cl432,paste0(outDir,\"cl432.cotan.RDS\"))\n\ntable(str_split(names(mergedClusters),pattern = \"_\",simplify = T)[,1],mergedClusters)\n\n\ndata &lt;- getNormalizedData(cl432)\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cl432)[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)-1\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                              Slc8a1    Csrp2   Rpl22l1   Sec61g      Pgk1\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000 0.000000 10.423023 0.000000  0.000000\n10X12_3_A_1:CAAGCATGAATCGCx 9.076224 9.076224  0.000000 0.000000  0.000000\n10X12_3_A_1:GTGATCGACCAATGx 0.000000 9.411567  0.000000 9.411567  9.411567\n10X12_3_A_1:CTGGATGAACAGCTx 0.000000 0.000000  0.000000 0.000000 10.748672\n10X14_4_A_1:ATTCAAGATCCCACx 0.000000 0.000000  0.000000 0.000000  0.000000\n10X12_3_A_1:CGATCCACCCGAATx 0.000000 9.132491  9.132491 9.132491  9.132491\n                              Gm10076  Rpl36al    Mfap4     Ier2     Ptprk\n10X14_4_A_1:AAGAACGAGGTAAAx  9.729905  0.00000 9.729905 9.729905 10.423023\n10X12_3_A_1:CAAGCATGAATCGCx  9.769314  0.00000 9.076224 0.000000  9.076224\n10X12_3_A_1:GTGATCGACCAATGx 10.510124  0.00000 0.000000 0.000000 10.104673\n10X12_3_A_1:CTGGATGAACAGCTx 10.343218  0.00000 9.650103 0.000000  9.650103\n10X14_4_A_1:ATTCAAGATCCCACx  0.000000  0.00000 9.866303 9.866303 10.271751\n10X12_3_A_1:CGATCCACCCGAATx 10.518705 10.23103 0.000000 0.000000  0.000000\n                                Cadps    Uba52    Pantr1 Mir9.3hg   Tmem108\n10X14_4_A_1:AAGAACGAGGTAAAx  9.729905  0.00000 11.521615 0.000000 10.423023\n10X12_3_A_1:CAAGCATGAATCGCx  9.076224 10.68557  9.076224 0.000000 10.685571\n10X12_3_A_1:GTGATCGACCAATGx  0.000000 11.60872  0.000000 9.411567  0.000000\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000 11.59596 10.748672 9.650103  0.000000\n10X14_4_A_1:ATTCAAGATCCCACx 10.559424  0.00000  9.173208 9.866303  9.866303\n10X12_3_A_1:CGATCCACCCGAATx  9.132491 11.21184  0.000000 0.000000  9.825584\n                               Klhl29    Dusp14   Adgrb3    Alcam    Nell2\n10X14_4_A_1:AAGAACGAGGTAAAx  0.000000  9.729905 0.000000 0.000000 0.000000\n10X12_3_A_1:CAAGCATGAATCGCx  9.076224  0.000000 9.076224 9.769314 9.769314\n10X12_3_A_1:GTGATCGACCAATGx 10.104673  9.411567 0.000000 0.000000 9.411567\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000  0.000000 0.000000 0.000000 0.000000\n10X14_4_A_1:ATTCAAGATCCCACx  9.866303 10.271751 9.173208 9.866303 9.866303\n10X12_3_A_1:CGATCCACCCGAATx  0.000000  9.825584 9.132491 9.825584 0.000000\n                                Fabp7       Ptn  Rasgef1b    Nckap5    Nfasc\n10X14_4_A_1:AAGAACGAGGTAAAx  0.000000 10.423023  0.000000  0.000000 9.729905\n10X12_3_A_1:CAAGCATGAATCGCx  0.000000  0.000000  0.000000  0.000000 9.769314\n10X12_3_A_1:GTGATCGACCAATGx 10.104673  9.411567 10.104673  0.000000 0.000000\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000  9.650103  0.000000 10.343218 9.650103\n10X14_4_A_1:ATTCAAGATCCCACx  0.000000  0.000000  0.000000  0.000000 9.866303\n10X12_3_A_1:CGATCCACCCGAATx  9.132491  0.000000  9.132491  9.825584 0.000000\n                              Frmd4a   Nkain2    Tcf12 Ppp1r14a    Stmn2\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000 9.729905 9.729905 0.000000  0.00000\n10X12_3_A_1:CAAGCATGAATCGCx 9.076224 0.000000 0.000000 9.076224 10.68557\n10X12_3_A_1:GTGATCGACCAATGx 0.000000 0.000000 0.000000 0.000000  0.00000\n10X12_3_A_1:CTGGATGAACAGCTx 9.650103 0.000000 9.650103 0.000000  0.00000\n10X14_4_A_1:ATTCAAGATCCCACx 9.173208 9.173208 0.000000 0.000000  0.00000\n10X12_3_A_1:CGATCCACCCGAATx 0.000000 9.132491 0.000000 0.000000  0.00000\n                                Cadm1     Msmo1    Dpysl5    Sema6d      Ina\n10X14_4_A_1:AAGAACGAGGTAAAx  9.729905  9.729905  9.729905  0.000000 0.000000\n10X12_3_A_1:CAAGCATGAATCGCx 10.685571  0.000000  0.000000  0.000000 9.076224\n10X12_3_A_1:GTGATCGACCAATGx  0.000000  0.000000  9.411567  9.411567 0.000000\n10X12_3_A_1:CTGGATGAACAGCTx 10.748672  0.000000 10.343218  9.650103 0.000000\n10X14_4_A_1:ATTCAAGATCCCACx  9.866303 10.559424  0.000000  9.173208 9.173208\n10X12_3_A_1:CGATCCACCCGAATx  0.000000 10.518705  9.825584 10.231032 0.000000\n                                 Pak7     Unc5d     Sstr2      Aff2     Epha4\n10X14_4_A_1:AAGAACGAGGTAAAx 10.423023 11.521615 10.423023  0.000000  0.000000\n10X12_3_A_1:CAAGCATGAATCGCx  0.000000 10.462433  0.000000 10.462433  9.076224\n10X12_3_A_1:GTGATCGACCAATGx 10.104673  0.000000  9.411567  9.411567 10.104673\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000  9.650103  9.650103  0.000000 10.343218\n10X14_4_A_1:ATTCAAGATCCCACx  0.000000 10.964881  9.173208  9.866303 10.964881\n10X12_3_A_1:CGATCCACCCGAATx  9.132491  0.000000  0.000000  0.000000  9.132491\n                            Zfpm2  Bhlhe22    Kcnq3     Nrp1    Satb2    Cdh13\n10X14_4_A_1:AAGAACGAGGTAAAx     0 0.000000 0.000000 0.000000 0.000000 0.000000\n10X12_3_A_1:CAAGCATGAATCGCx     0 9.076224 9.076224 9.076224 9.076224 0.000000\n10X12_3_A_1:GTGATCGACCAATGx     0 0.000000 9.411567 0.000000 0.000000 0.000000\n10X12_3_A_1:CTGGATGAACAGCTx     0 0.000000 0.000000 9.650103 0.000000 0.000000\n10X14_4_A_1:ATTCAAGATCCCACx     0 9.173208 0.000000 0.000000 9.173208 0.000000\n10X12_3_A_1:CGATCCACCCGAATx     0 9.132491 9.132491 0.000000 0.000000 9.825584\n                              Mpped2   Phactr1     Nol4     Cnr1  Runx1t1\n10X14_4_A_1:AAGAACGAGGTAAAx  0.00000 11.116155 0.000000  0.00000 0.000000\n10X12_3_A_1:CAAGCATGAATCGCx 10.17476  9.769314 9.769314  0.00000 9.769314\n10X12_3_A_1:GTGATCGACCAATGx  0.00000  9.411567 0.000000  0.00000 0.000000\n10X12_3_A_1:CTGGATGAACAGCTx  0.00000  0.000000 9.650103  0.00000 0.000000\n10X14_4_A_1:ATTCAAGATCCCACx  0.00000  9.173208 9.866303  0.00000 0.000000\n10X12_3_A_1:CGATCCACCCGAATx  0.00000  9.132491 9.825584 10.23103 0.000000\n                               Grik2 Mir124.2hg     Tbr1  B3galt1     Kcnb2\n10X14_4_A_1:AAGAACGAGGTAAAx 9.729905   9.729905 0.000000 0.000000  9.729905\n10X12_3_A_1:CAAGCATGAATCGCx 9.076224   0.000000 9.076224 9.076224  0.000000\n10X12_3_A_1:GTGATCGACCAATGx 0.000000   9.411567 9.411567 0.000000  9.411567\n10X12_3_A_1:CTGGATGAACAGCTx 0.000000  11.036349 0.000000 0.000000 11.036349\n10X14_4_A_1:ATTCAAGATCCCACx 9.173208   0.000000 9.173208 0.000000  0.000000\n10X12_3_A_1:CGATCCACCCGAATx 9.132491   9.132491 9.132491 9.132491  9.132491\n                                Ly6h    Negr1  Smarcd3     Ppm1e     Lmo4\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000 10.42302 9.729905  9.729905 9.729905\n10X12_3_A_1:CAAGCATGAATCGCx 0.000000  0.00000 0.000000 10.462433 9.076224\n10X12_3_A_1:GTGATCGACCAATGx 9.411567  0.00000 0.000000  0.000000 0.000000\n10X12_3_A_1:CTGGATGAACAGCTx 0.000000 11.44181 0.000000 10.343218 9.650103\n10X14_4_A_1:ATTCAAGATCCCACx 0.000000  0.00000 9.173208 10.271751 0.000000\n10X12_3_A_1:CGATCCACCCGAATx 0.000000  0.00000 9.825584  9.825584 0.000000\n                                 Dab1  Serpini1    Pcdh7     Robo2    Nrxn1\n10X14_4_A_1:AAGAACGAGGTAAAx  9.729905 10.423023  0.00000 11.339295  0.00000\n10X12_3_A_1:CAAGCATGAATCGCx  0.000000  9.769314  0.00000 10.867888  0.00000\n10X12_3_A_1:GTGATCGACCAATGx  0.000000  0.000000  0.00000  9.411567  0.00000\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000  0.000000  0.00000 11.036349  0.00000\n10X14_4_A_1:ATTCAAGATCCCACx 10.964881  0.000000  0.00000 10.782562 10.27175\n10X12_3_A_1:CGATCCACCCGAATx 10.231032  9.825584 10.23103 11.078309  0.00000\n                               Hecw1    Stmn4  Galnt17     Acot7     Parp6\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000  0.00000 0.000000  0.000000  0.000000\n10X12_3_A_1:CAAGCATGAATCGCx 9.076224 10.46243 0.000000  0.000000  9.076224\n10X12_3_A_1:GTGATCGACCAATGx 9.411567  0.00000 0.000000 10.104673  9.411567\n10X12_3_A_1:CTGGATGAACAGCTx 0.000000  0.00000 0.000000  0.000000  9.650103\n10X14_4_A_1:ATTCAAGATCCCACx 9.866303  0.00000 0.000000  0.000000 10.271751\n10X12_3_A_1:CGATCCACCCGAATx 9.132491  0.00000 9.132491  9.132491  9.825584\n                             Tmem176b     Nrn1     Pcdh9      Cdh4     Nav3\n10X14_4_A_1:AAGAACGAGGTAAAx  0.000000 9.729905  0.000000  0.000000 9.729905\n10X12_3_A_1:CAAGCATGAATCGCx  0.000000 9.076224 11.155566  9.076224 9.769314\n10X12_3_A_1:GTGATCGACCAATGx 10.104673 0.000000  9.411567  0.000000 0.000000\n10X12_3_A_1:CTGGATGAACAGCTx 10.343218 9.650103  0.000000  0.000000 0.000000\n10X14_4_A_1:ATTCAAGATCCCACx  0.000000 9.173208  0.000000 10.271751 9.866303\n10X12_3_A_1:CGATCCACCCGAATx  9.132491 9.825584  0.000000  0.000000 0.000000\n                                 Nrg1    Ppfia2    Robo1      Cdh8    Lrpap1\n10X14_4_A_1:AAGAACGAGGTAAAx 11.116155  0.000000 0.000000 11.116155  0.000000\n10X12_3_A_1:CAAGCATGAATCGCx  9.769314  9.769314 0.000000  9.769314  9.076224\n10X12_3_A_1:GTGATCGACCAATGx  9.411567 10.104673 0.000000  9.411567  9.411567\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000  0.000000 0.000000  9.650103  0.000000\n10X14_4_A_1:ATTCAAGATCCCACx 10.559424 10.559424 0.000000  9.866303 10.271751\n10X12_3_A_1:CGATCCACCCGAATx  0.000000  0.000000 9.825584  0.000000  0.000000\n                            X2010107E04Rik     Ssbp3    Srsf4      Mtf2\n10X14_4_A_1:AAGAACGAGGTAAAx        0.00000  0.000000 9.729905  9.729905\n10X12_3_A_1:CAAGCATGAATCGCx       10.46243  9.769314 9.076224 10.174760\n10X12_3_A_1:GTGATCGACCAATGx        0.00000  9.411567 9.411567  0.000000\n10X12_3_A_1:CTGGATGAACAGCTx        0.00000  0.000000 9.650103  9.650103\n10X14_4_A_1:ATTCAAGATCCCACx        0.00000  0.000000 0.000000  0.000000\n10X12_3_A_1:CGATCCACCCGAATx        0.00000 10.231032 0.000000  0.000000\n                              Gtf2a2      Canx      Phf6   Higd1a    Dctpp1\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000  0.000000  0.000000 0.000000  0.000000\n10X12_3_A_1:CAAGCATGAATCGCx 0.000000  9.769314  0.000000 9.076224  9.076224\n10X12_3_A_1:GTGATCGACCAATGx 0.000000  9.411567  9.411567 0.000000 10.510124\n10X12_3_A_1:CTGGATGAACAGCTx 0.000000  9.650103  9.650103 9.650103  0.000000\n10X14_4_A_1:ATTCAAGATCCCACx 9.173208  9.866303  9.173208 0.000000  0.000000\n10X12_3_A_1:CGATCCACCCGAATx 9.825584 10.231032 10.924161 9.825584  9.132491\n                                Srek1      Mdk     Prdx6       Jun   Tspan14\n10X14_4_A_1:AAGAACGAGGTAAAx  0.000000  0.00000  0.000000  0.000000  9.729905\n10X12_3_A_1:CAAGCATGAATCGCx  9.076224  0.00000  0.000000  9.769314  0.000000\n10X12_3_A_1:GTGATCGACCAATGx  0.000000  0.00000 10.104673 11.203258 10.510124\n10X12_3_A_1:CTGGATGAACAGCTx  9.650103 10.74867  9.650103  0.000000  0.000000\n10X14_4_A_1:ATTCAAGATCCCACx 10.782562  0.00000  0.000000  9.173208  0.000000\n10X12_3_A_1:CGATCCACCCGAATx  0.000000  0.00000  0.000000  9.825584  9.132491\n                             Prkar1a   Phf21a   Mrps21       Ubc Fam114a2\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000 9.729905 9.729905  0.000000 0.000000\n10X12_3_A_1:CAAGCATGAATCGCx 9.769314 0.000000 0.000000 10.174760 9.076224\n10X12_3_A_1:GTGATCGACCAATGx 0.000000 0.000000 0.000000  0.000000 9.411567\n10X12_3_A_1:CTGGATGAACAGCTx 9.650103 9.650103 0.000000  0.000000 0.000000\n10X14_4_A_1:ATTCAAGATCCCACx 0.000000 9.173208 9.173208  0.000000 9.866303\n10X12_3_A_1:CGATCCACCCGAATx 9.132491 9.825584 9.825584  9.132491 0.000000\n                               Large1     Gmcl1  Gpatch8  Csnk2a1     Xist\n10X14_4_A_1:AAGAACGAGGTAAAx  0.000000 10.423023 0.000000 0.000000  0.00000\n10X12_3_A_1:CAAGCATGAATCGCx  0.000000  0.000000 9.076224 0.000000 11.02204\n10X12_3_A_1:GTGATCGACCAATGx 10.104673 10.510124 0.000000 9.411567  0.00000\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000  9.650103 0.000000 0.000000 11.44181\n10X14_4_A_1:ATTCAAGATCCCACx  0.000000  9.173208 9.866303 9.173208 10.55942\n10X12_3_A_1:CGATCCACCCGAATx  9.825584  0.000000 9.132491 9.132491  0.00000\n                                 Fdps     Phip     Sqle    Zbtb20   Fnbp1l\n10X14_4_A_1:AAGAACGAGGTAAAx  0.000000 0.000000 9.729905  0.000000 9.729905\n10X12_3_A_1:CAAGCATGAATCGCx 10.174760 9.076224 9.769314  0.000000 0.000000\n10X12_3_A_1:GTGATCGACCAATGx  9.411567 9.411567 9.411567 10.104673 9.411567\n10X12_3_A_1:CTGGATGAACAGCTx  0.000000 9.650103 0.000000  9.650103 9.650103\n10X14_4_A_1:ATTCAAGATCCCACx  0.000000 9.173208 9.173208  0.000000 9.173208\n10X12_3_A_1:CGATCCACCCGAATx 10.518705 9.132491 9.132491  0.000000 9.132491\n                              Tubb2a     Ncam1    Dclk1     Klc1 COTAN_Cl.code\n10X14_4_A_1:AAGAACGAGGTAAAx 0.000000  0.000000 9.729905 0.000000             0\n10X12_3_A_1:CAAGCATGAATCGCx 0.000000 10.174760 9.769314 0.000000             1\n10X12_3_A_1:GTGATCGACCAATGx 0.000000 10.510124 0.000000 0.000000             1\n10X12_3_A_1:CTGGATGAACAGCTx 0.000000  0.000000 0.000000 0.000000             1\n10X14_4_A_1:ATTCAAGATCCCACx 9.866303  9.866303 9.866303 9.173208             0\n10X12_3_A_1:CGATCCACCCGAATx 0.000000  0.000000 9.132491 0.000000             1\n\n\n\n# Fit the model\nmodel &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 50))\n# Summarize the model\nsummary(model)\n\n\nCall:\nglm(formula = COTAN_Cl.code ~ ., family = binomial, data = train.data, \n    control = list(maxit = 50))\n\nCoefficients:\n                 Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)    -5.161e+01  3.060e+06       0        1\nSlc8a1          7.693e-01  1.171e+05       0        1\nCsrp2           1.426e+00  7.682e+04       0        1\nRpl22l1        -2.862e-01  1.063e+05       0        1\nSec61g          1.296e+00  8.025e+04       0        1\nPgk1            1.829e+00  1.253e+05       0        1\nGm10076         9.697e-01  1.833e+05       0        1\nRpl36al         1.583e+00  1.728e+05       0        1\nMfap4           5.115e-01  1.249e+05       0        1\nIer2            7.954e-02  1.269e+05       0        1\nPtprk           1.319e+00  1.251e+05       0        1\nCadps           8.187e-01  9.443e+04       0        1\nUba52           7.255e+00  9.522e+04       0        1\nPantr1          1.752e+00  8.892e+04       0        1\nMir9.3hg       -4.958e-01  9.292e+04       0        1\nTmem108        -7.053e-01  9.884e+04       0        1\nKlhl29         -1.855e-01  9.946e+04       0        1\nDusp14         -1.196e+00  1.034e+05       0        1\nAdgrb3          1.743e-01  1.773e+05       0        1\nAlcam          -5.075e-01  1.555e+05       0        1\nNell2           4.394e-01  1.578e+05       0        1\nFabp7           1.186e+00  1.018e+05       0        1\nPtn             9.612e-01  1.517e+05       0        1\nRasgef1b       -7.001e-01  1.122e+05       0        1\nNckap5         -1.163e+00  1.047e+05       0        1\nNfasc           8.546e-01  6.054e+04       0        1\nFrmd4a         -6.578e-01  1.720e+05       0        1\nNkain2          4.318e-01  1.652e+05       0        1\nTcf12           7.042e-01  1.195e+05       0        1\nPpp1r14a       -2.636e-01  1.283e+05       0        1\nStmn2           9.936e-01  8.753e+04       0        1\nCadm1           1.011e+00  8.722e+04       0        1\nMsmo1          -1.956e-01  1.085e+05       0        1\nDpysl5         -5.631e-01  8.174e+04       0        1\nSema6d          1.209e+00  1.182e+05       0        1\nIna            -1.725e-01  1.004e+05       0        1\nPak7            1.784e-02  7.803e+04       0        1\nUnc5d          -9.328e-01  1.065e+05       0        1\nSstr2          -1.249e+00  9.338e+04       0        1\nAff2           -5.563e-01  5.025e+04       0        1\nEpha4           9.871e-01  1.085e+05       0        1\nZfpm2           3.716e+00  6.581e+04       0        1\nBhlhe22        -4.104e-02  9.431e+04       0        1\nKcnq3           8.499e-01  5.114e+04       0        1\nNrp1           -6.156e-01  2.355e+05       0        1\nSatb2           3.264e-01  1.145e+05       0        1\nCdh13           1.995e+00  2.566e+05       0        1\nMpped2          1.031e-01  2.213e+05       0        1\nPhactr1        -2.101e-01  1.566e+05       0        1\nNol4           -2.159e-01  1.206e+05       0        1\nCnr1           -1.690e+00  1.296e+05       0        1\nRunx1t1        -1.049e+00  1.793e+05       0        1\nGrik2           7.952e-01  9.668e+04       0        1\nMir124.2hg      3.016e-01  8.916e+04       0        1\nTbr1            3.688e-01  7.522e+04       0        1\nB3galt1        -5.395e-01  8.938e+04       0        1\nKcnb2           6.570e-01  1.125e+05       0        1\nLy6h            9.767e-01  1.810e+05       0        1\nNegr1           1.996e+00  1.346e+05       0        1\nSmarcd3         5.877e-01  6.313e+04       0        1\nPpm1e          -3.705e-04  1.134e+05       0        1\nLmo4            3.436e-01  1.531e+05       0        1\nDab1           -7.583e-01  9.049e+04       0        1\nSerpini1       -8.662e-01  7.453e+04       0        1\nPcdh7          -1.879e+00  9.777e+04       0        1\nRobo2          -3.806e+00  1.643e+05       0        1\nNrxn1           8.571e-01  7.508e+04       0        1\nHecw1           4.333e-01  1.495e+05       0        1\nStmn4          -1.913e+00  1.210e+05       0        1\nGalnt17         2.192e+00  1.638e+05       0        1\nAcot7           1.937e+00  1.024e+05       0        1\nParp6           5.778e-01  1.053e+05       0        1\nTmem176b       -4.505e-01  7.658e+04       0        1\nNrn1            1.895e+00  7.471e+04       0        1\nPcdh9           6.794e-01  9.677e+04       0        1\nCdh4            6.568e-01  1.501e+05       0        1\nNav3           -7.964e-01  8.285e+04       0        1\nNrg1           -5.768e-01  1.066e+05       0        1\nPpfia2         -1.026e+00  1.075e+05       0        1\nRobo1           3.440e-01  4.997e+04       0        1\nCdh8            3.917e-02  1.486e+05       0        1\nLrpap1         -2.107e-01  9.521e+04       0        1\nX2010107E04Rik -1.419e-01  1.283e+05       0        1\nSsbp3           6.578e-01  8.910e+04       0        1\nSrsf4           5.215e-01  7.464e+04       0        1\nMtf2            4.725e-01  8.384e+04       0        1\nGtf2a2         -1.462e+00  8.082e+04       0        1\nCanx           -1.029e+00  8.597e+04       0        1\nPhf6           -1.989e-01  1.017e+05       0        1\nHigd1a         -5.775e-01  9.319e+04       0        1\nDctpp1         -4.058e-01  7.024e+04       0        1\nSrek1           3.479e-01  6.937e+04       0        1\nMdk            -2.930e-01  7.334e+04       0        1\nPrdx6           6.210e-02  8.068e+04       0        1\nJun            -6.216e-01  5.076e+04       0        1\nTspan14         6.353e-01  9.293e+04       0        1\nPrkar1a         3.660e-01  1.070e+05       0        1\nPhf21a          5.023e-01  1.530e+05       0        1\nMrps21         -1.200e+00  1.308e+05       0        1\nUbc             1.663e-01  8.846e+04       0        1\nFam114a2        3.522e-01  4.596e+04       0        1\nLarge1         -3.051e-01  1.731e+05       0        1\nGmcl1          -1.071e+00  1.252e+05       0        1\nGpatch8         1.671e-01  7.485e+04       0        1\nCsnk2a1        -1.901e+00  1.483e+05       0        1\nXist            9.840e-01  6.415e+04       0        1\nFdps            1.136e+00  9.151e+04       0        1\nPhip            2.852e-01  1.443e+05       0        1\nSqle           -4.126e-01  8.765e+04       0        1\nZbtb20          3.140e-01  1.013e+05       0        1\nFnbp1l          7.334e-01  9.184e+04       0        1\nTubb2a         -1.487e-01  9.100e+04       0        1\nNcam1          -1.924e-01  1.362e+05       0        1\nDclk1          -1.084e+00  7.479e+04       0        1\nKlc1           -1.020e-01  7.647e+04       0        1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 5.9080e+02  on 428  degrees of freedom\nResidual deviance: 2.4052e-10  on 314  degrees of freedom\nAIC: 230\n\nNumber of Fisher Scoring iterations: 29\n\n# Make predictions\nprobabilities &lt;- model %&gt;% predict(test.data, type = \"response\")\npredicted.classes &lt;- ifelse(probabilities &gt; 0.5, \"1\", \"0\")\n# Model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\nresult.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\n\naccuracy\n\n[1] 0.8878505\n\n\nSo also in this case a logistic regression confirm the difference in cell population detected by COTAN.\n\ncl432ClsMarkers &lt;- findClustersMarkers(cl432,n = 200,method = \"BH\")\ncl432ClsMarkers\n\n    CL           Gene      Score      adjPVal         DEA IsMarker   logFoldCh\n1    1          Uba52 -0.8106586 1.621708e-74 -0.48470245        0 -1.53792300\n2    1           Pgk1 -0.5238207 4.456029e-30 -0.29375478        0 -1.25344098\n3    1         Sec61g -0.4973970 4.322781e-27 -0.28709639        0 -0.94392234\n4    1            Erh -0.4763866 8.139496e-25 -0.26720187        0 -0.66616044\n5    1          Atp5l -0.4636196 1.667637e-23 -0.27268925        0 -0.72958798\n6    1        Gm10076 -0.4404727 3.985478e-21 -0.25427996        0 -0.64435861\n7    1        Gm10260 -0.4297397 4.276949e-20 -0.24067438        0 -0.55876061\n8    1          Stmn1 -0.3970492 5.657414e-17 -0.18760045        0 -0.62877743\n9    1        Rpl36al -0.3734641 6.959301e-15 -0.22278193        0 -0.60240089\n10   1           Nme2 -0.3595564 9.986587e-14 -0.15767502        0 -1.48759648\n11   1           Raly -0.3384064 4.257980e-12 -0.15740417        0 -1.02907857\n12   1         Rpl27a -0.3273853 2.917431e-11 -0.18277567        0 -0.39318812\n13   1        Hnrnpa1 -0.3204800 8.642931e-11 -0.16911717        0 -0.42371612\n14   1          Rpl15 -0.3142968 2.373219e-10 -0.12142812        0 -0.60150822\n15   1           Glo1 -0.3060652 9.036242e-10 -0.17815569        0 -0.50825182\n16   1           Ppia -0.2990938 2.575683e-09 -0.12306368        0 -0.61119720\n17   1          Gstp1 -0.2987705 2.586162e-09 -0.15071685        0 -0.67817495\n18   1         Gm9844 -0.2873804 1.405859e-08 -0.13198547        0 -0.72485194\n19   1           Gnb2 -0.2863104 1.596675e-08 -0.12365916        0 -0.89089883\n20   1           Gps1 -0.2841718 2.144394e-08 -0.11573123        0 -1.02113299\n21   1           Fdps -0.2786077 4.870749e-08 -0.16653572        0 -0.35290526\n22   1         mt.Co1 -0.2701456 1.621212e-07 -0.15333281        0 -0.45083061\n23   1          Pcdh9 -0.2600888 6.783712e-07 -0.15476386        0 -0.33568931\n24   1           Eno1 -0.2521273 1.953908e-06 -0.14754748        0 -0.34261648\n25   1         Tomm20 -0.2464009 4.161634e-06 -0.14130319        0 -0.38429325\n26   1          Fopnl -0.2445309 5.059678e-06 -0.11448165        0 -0.54335800\n27   1        Bloc1s1 -0.2445235 5.059678e-06 -0.11414586        0 -0.68382633\n28   1           Nme1 -0.2368368 1.294655e-05 -0.10931856        0 -0.31943344\n29   1           Mea1 -0.2358888 1.427839e-05 -0.07845097        0 -1.22670712\n30   1         Polr2k -0.2314427 2.413075e-05 -0.09433302        0 -0.74896109\n31   1       Tpm3.rs7 -0.2256287 4.917877e-05 -0.13336304        0 -0.38346143\n32   1           Lsm7 -0.2247260 5.376587e-05 -0.13206369        0 -0.29980444\n33   1          Rwdd1 -0.2236509 5.872473e-05 -0.13355334        0 -0.25680432\n34   1         Ppp1cc -0.2216835 7.169717e-05 -0.11533580        0 -0.42313946\n35   1           Tln1 -0.2176354 1.150343e-04 -0.09015595        0 -0.60121336\n36   1           Cap1 -0.2167206 1.240952e-04 -0.12684027        0 -0.28472756\n37   1        Lamtor3 -0.2166690 1.240952e-04 -0.11300415        0 -0.43463703\n38   1           Btf3 -0.2147496 1.528275e-04 -0.07063004        0 -0.27400311\n39   1         Ndufs5 -0.2128721 1.842585e-04 -0.10011568        0 -0.48320512\n40   1         Tarbp2 -0.2123358 1.926960e-04 -0.06909164        0 -0.98975553\n41   1         Ifitm2 -0.2075714 3.124845e-04 -0.07304836        0 -0.93419770\n42   1           Btg1 -0.2074439 3.124845e-04 -0.10190855        0 -0.48968203\n43   1         Atp5g2 -0.2050227 4.059691e-04 -0.06471935        0 -1.00411870\n44   1            Ubb -0.2041784 4.397309e-04 -0.05542827        0 -0.73394166\n45   1           Pop4 -0.2030165 4.858863e-04 -0.11082433        0 -0.31795136\n46   1         Mrps33 -0.2024224 5.115751e-04 -0.11981217        0 -0.31275401\n47   1           Xist -0.2015720 5.428791e-04 -0.11940650        0 -0.20099999\n48   1          Zfpm2 -0.2013996 5.428791e-04 -0.09984038        0 -0.48028351\n49   1          Serf2 -0.1979161 7.529353e-04 -0.11553985        0 -0.33563043\n50   1       Serpini1 -0.1971836 7.943739e-04 -0.11781674        0 -0.20380776\n51   1         Mrps36 -0.1953705 9.081659e-04 -0.06740603        0 -0.77800701\n52   1          Sap18 -0.1946831 9.667589e-04 -0.11574924        0 -0.25178663\n53   1           Psap -0.1940358 1.024567e-03 -0.11026872        0 -0.25725676\n54   1          Ube2s -0.1919582 1.251923e-03 -0.07770086        0 -0.61258722\n55   1        Cntnap2 -0.1901799 1.479238e-03 -0.11249284        0 -0.27548961\n56   1         mt.Nd5 -0.1870497 1.990702e-03 -0.10197987        0 -0.37227982\n57   1          Naa10 -0.1863570 2.070267e-03 -0.07022389        0 -0.60095155\n58   1           Gpx4 -0.1857669 2.178201e-03 -0.10070938        0 -0.20008708\n59   1          Stmn2 -0.1841842 2.487140e-03 -0.11010284        0 -0.28112428\n60   1         Rnf114 -0.1828209 2.825226e-03 -0.10532029        0 -0.24970003\n61   1           Rbm3 -0.1815005 3.114980e-03 -0.07919884        0 -0.34334621\n62   1         Mrpl23 -0.1774233 4.525958e-03 -0.08396158        0 -0.33564600\n63   1          Kpna2 -0.1765228 4.858883e-03 -0.06510032        0 -0.63216478\n64   1         Mettl2 -0.1754189 5.322398e-03 -0.08588078        0 -0.33267933\n65   1         Grcc10 -0.1746312 5.649315e-03 -0.04760128        0 -0.93197938\n66   1          Ap3s1 -0.1737918 6.027032e-03 -0.10030727        0 -0.20527616\n67   1         Psenen -0.1731937 6.217071e-03 -0.10109094        0 -0.25801194\n68   1           Dstn -0.1729203 6.217071e-03 -0.09707998        0 -0.27449226\n69   1 X4833439L19Rik -0.1727385 6.217071e-03 -0.10229853        0 -0.22690981\n70   1            Ndn -0.1726871 6.217071e-03 -0.09398312        0 -0.21869226\n71   1          Lrfn5 -0.1699586 7.843473e-03 -0.07329077        0 -0.47692581\n72   1        Trmt112 -0.1689513 8.504892e-03 -0.10045291        0 -0.22881986\n73   1         Exosc9 -0.1686363 8.697021e-03 -0.07896346        0 -0.35186517\n74   1         Apopt1 -0.1682036 8.924860e-03 -0.09293154        0 -0.26016106\n75   1           Gpx1 -0.1674662 9.501605e-03 -0.09933962        0 -0.17772780\n76   1         Polr2l -0.1668766 9.897726e-03 -0.07060799        0 -0.38342945\n77   1          Rtl8a -0.1664545 1.014883e-02 -0.08204694        0 -0.43148510\n78   1           Lhx9 -0.1655502 1.097174e-02 -0.07701172        0 -0.39696671\n79   1         Ube2d3 -0.1647669 1.172338e-02 -0.07345882        0 -0.11304321\n80   1        Gadd45g -0.1635794 1.291070e-02 -0.09461911        0 -0.19430562\n81   1        Gm10320 -0.1634505 1.297320e-02 -0.03583471        0 -1.48259469\n82   1        Fam171b -0.1633075 1.305369e-02 -0.08499417        0 -0.26127670\n83   1          Cdca4 -0.1630273 1.330377e-02 -0.07335094        0 -0.39779613\n84   1         Hnrnpl -0.1614933 1.511836e-02 -0.09484619        0 -0.24555980\n85   1         Prkag2 -0.1598483 1.721999e-02 -0.07849060        0 -0.31107620\n86   1          Rpl35 -0.1576980 1.984815e-02 -0.03113499        0 -0.35494978\n87   1         Kansl2 -0.1569664 2.092858e-02 -0.07003583        0 -0.30446483\n88   1         Akr1b3 -0.1564546 2.177240e-02 -0.03677648        0 -0.95812276\n89   1           Wtap -0.1550175 2.362290e-02 -0.09019257        0 -0.24636895\n90   1        Tmem50a -0.1546376 2.415018e-02 -0.09187137        0 -0.20486681\n91   1          Btbd9 -0.1544588 2.416976e-02 -0.09207321        0 -0.16390100\n92   1         Churc1 -0.1542854 2.439997e-02 -0.05129088        0 -0.59272102\n93   1           Stx7 -0.1539896 2.490030e-02 -0.09164951        0 -0.15631767\n94   1          Tenm1 -0.1538699 2.493781e-02 -0.06015493        0 -0.58258836\n95   1           Tma7 -0.1530726 2.587660e-02 -0.07119560        0 -0.17778596\n96   1          Ncam2 -0.1529851 2.587660e-02 -0.05153780        0 -0.55049454\n97   1          Taf13 -0.1514154 2.900826e-02 -0.08553656        0 -0.20711175\n98   1           Cd81 -0.1507704 3.035059e-02 -0.09006970        0 -0.14194102\n99   1          Rpl29 -0.1498042 3.281749e-02 -0.03954371        0 -0.81233384\n100  1           Ly6h -0.1495588 3.313048e-02 -0.08230097        0 -0.31738241\n101  1            Pts -0.1495101 3.313048e-02 -0.06863988        0 -0.33479576\n102  1           Emc8 -0.1490463 3.411955e-02 -0.03005535        0 -1.53338622\n103  1          Ntan1 -0.1487829 3.454074e-02 -0.08749528        0 -0.14776099\n104  1          Ift46 -0.1486239 3.467576e-02 -0.08559085        0 -0.19087506\n105  1           Rhob -0.1486181 3.467576e-02 -0.08376697        0 -0.24365623\n106  1         Pabpc1 -0.1473347 3.781523e-02 -0.07940218        0 -0.12731174\n107  1           Rpn1 -0.1473172 3.781523e-02 -0.07489675        0 -0.29685829\n108  1          Cd164 -0.1470407 3.806987e-02 -0.03602915        0 -0.95510002\n109  1         Ndufs3 -0.1469968 3.806987e-02 -0.08682723        0 -0.19286496\n110  1         Faap20 -0.1457849 4.079903e-02 -0.06261655        0 -0.40722095\n111  1         Rpp25l -0.1455277 4.090874e-02 -0.08106238        0 -0.20533516\n112  1           Ctps -0.1453366 4.137977e-02 -0.08373857        0 -0.20157322\n113  1          Gstm7 -0.1441713 4.459168e-02 -0.06568874        0 -0.27771035\n114  1          Rwdd3 -0.1440951 4.467529e-02 -0.07389868        0 -0.19818151\n115  1         Uqcrc1 -0.1423990 5.007439e-02 -0.08135538        0 -0.17200440\n116  1        Fdxacb1 -0.1422882 5.009805e-02 -0.03416495        0 -0.76452548\n117  1 X1300002E11Rik -0.1422882 5.009805e-02 -0.03416495        0 -0.96681879\n118  1           Gdi1 -0.1416844 5.219774e-02 -0.07524225        0 -0.12858017\n119  1            Sms -0.1415853 5.240009e-02 -0.08446845        0 -0.16537841\n120  1          Rgs17 -0.1402212 5.759560e-02 -0.04327613        0 -0.60867803\n121  1         Insig1 -0.1397145 5.951638e-02 -0.07418150        0 -0.24820691\n122  1          Nop16 -0.1390305 6.187597e-02 -0.05822697        0 -0.36967027\n123  1          Lrrn2 -0.1388253 6.231933e-02 -0.04122864        0 -0.59551504\n124  1         Marcks -0.1387912 6.231933e-02 -0.07900344        0 -0.16704611\n125  1         Supt4a -0.1385152 6.346419e-02 -0.08258003        0 -0.10278269\n126  1          Tusc2 -0.1380959 6.511624e-02 -0.07272225        0 -0.30700412\n127  1        Gm17231 -0.1377187 6.658470e-02 -0.04535655        0 -0.48697134\n128  1          Gapdh -0.1372482 6.859523e-02 -0.05186252        0 -0.24637523\n129  1          Hmga1 -0.1370103 6.963649e-02 -0.03219436        0 -0.88024187\n130  1           Rprm -0.1361143 7.391134e-02 -0.06478038        0 -0.17727408\n131  1           Ebf1 -0.1357991 7.491177e-02 -0.02829303        0 -0.84978663\n132  1           Dad1 -0.1354080 7.638830e-02 -0.07876268        0 -0.09449466\n133  1          Zbed4 -0.1351557 7.711751e-02 -0.05269811        0 -0.36013105\n134  1          Cdk16 -0.1351448 7.711751e-02 -0.07078380        0 -0.24855976\n135  1          Snrpe -0.1345307 7.942293e-02 -0.05497322        0 -0.15794122\n136  1          Smim7 -0.1344885 7.942293e-02 -0.08023470        0 -0.16480519\n137  1        Aldh1a7 -0.1341285 8.110384e-02 -0.02445281        0 -1.51622445\n138  1           Acp1 -0.1336584 8.329023e-02 -0.05473860        0 -0.35086645\n139  1          Gipc1 -0.1330803 8.675737e-02 -0.07904142        0 -0.15192410\n140  1      Eef1akmt2 -0.1327564 8.833701e-02 -0.07789506        0 -0.11416905\n141  1       Cacna2d3 -0.1325698 8.914832e-02 -0.03996363        0 -0.63717391\n142  1         Rbmxl1 -0.1325473 8.914832e-02 -0.07712356        0 -0.18170969\n143  1        Gm44790 -0.1321926 9.032299e-02 -0.04306947        0 -0.52945025\n144  1          Rtn4r -0.1321600 9.032299e-02 -0.02744283        0 -1.14607846\n145  1         Golga7 -0.1321165 9.032299e-02 -0.07842238        0 -0.13871035\n146  1           Arf2 -0.1317252 9.207863e-02 -0.06607219        0 -0.21418581\n147  1          Tnpo3 -0.1312512 9.442935e-02 -0.07491400        0 -0.18232415\n148  1        Tspan13 -0.1312214 9.442935e-02 -0.07071957        0 -0.12403069\n149  1          Pcbp2 -0.1308196 9.663177e-02 -0.06804306        0 -0.06080126\n150  1         Mrpl42 -0.1302949 9.871472e-02 -0.07677408        0 -0.11762894\n151  1          Rnf11 -0.1300110 9.957040e-02 -0.06825207        0 -0.16489141\n152  1         Coro1a -0.1297707 1.009205e-01 -0.06278915        0 -0.21200976\n153  1         Asnsd1 -0.1296167 1.009205e-01 -0.03748531        0 -0.59351386\n154  1        Zmynd19 -0.1295814 1.009205e-01 -0.03585524        0 -0.61218867\n155  1        Ndufaf1 -0.1294409 1.016811e-01 -0.04340320        0 -0.41922942\n156  1          Copz1 -0.1292181 1.027647e-01 -0.07713123        0 -0.06069248\n157  1          Kcnq5 -0.1289435 1.045958e-01 -0.06661049        0 -0.21905449\n158  1           Lipa -0.1288125 1.049142e-01 -0.02258531        0 -1.48389373\n159  1         Lgals1 -0.1287626 1.049142e-01 -0.03155050        0 -0.77507374\n160  1           Cycs -0.1283205 1.066272e-01 -0.07348886        0 -0.19111465\n161  1         Nap1l5 -0.1280920 1.078207e-01 -0.03452303        0 -0.74166992\n162  1          Ndel1 -0.1279612 1.082311e-01 -0.06359557        0 -0.21950820\n163  1           Emc4 -0.1277823 1.090392e-01 -0.07092471        0 -0.18197192\n164  1        Ankrd40 -0.1275914 1.095144e-01 -0.02574826        0 -1.04874102\n165  1          Cetn3 -0.1275658 1.095144e-01 -0.07142014        0 -0.12402363\n166  1            Ddt -0.1274910 1.098060e-01 -0.07018577        0 -0.21534417\n167  1         Ube2d1 -0.1274394 1.099072e-01 -0.07362188        0 -0.05989198\n168  1          Lztr1 -0.1267043 1.154370e-01 -0.04670318        0 -0.35554758\n169  1          Hdhd3 -0.1261863 1.187789e-01 -0.02542774        0 -1.03765416\n170  1          Prmt2 -0.1260355 1.195789e-01 -0.07248339        0 -0.15842919\n171  1           Gng2 -0.1257934 1.203993e-01 -0.07055076        0 -0.05703520\n172  1         Ccdc71 -0.1257889 1.203993e-01 -0.05001913        0 -0.29402403\n173  1        Sult4a1 -0.1256195 1.211950e-01 -0.06672936        0 -0.19724735\n174  1         Dazap1 -0.1253577 1.218730e-01 -0.05639706        0 -0.07491903\n175  1         Pagr1b -0.1251951 1.226600e-01 -0.06812141        0 -0.09772905\n176  1          Med29 -0.1250112 1.231010e-01 -0.04969554        0 -0.31959522\n177  1          H2afz -0.1249504 1.231010e-01 -0.06242896        0 -0.13517372\n178  1         Pgrmc1 -0.1249224 1.231010e-01 -0.07361453        0 -0.12353972\n179  1          F13a1 -0.1247344 1.238026e-01 -0.02099776        0 -1.52270746\n180  1         Rpl35a -0.1246453 1.242499e-01 -0.06470613        0 -0.22888981\n181  1          Jagn1 -0.1246119 1.242499e-01 -0.07154021        0 -0.16362032\n182  1           Ugp2 -0.1243514 1.263105e-01 -0.05471853        0 -0.26457037\n183  1          Slit1 -0.1242172 1.265399e-01 -0.02434624        0 -1.24170259\n184  1         Akr1e1 -0.1241699 1.266415e-01 -0.05171855        0 -0.26869253\n185  1         Zbtb18 -0.1241108 1.268546e-01 -0.06979252        0 -0.02494936\n186  1          Skp1a -0.1236131 1.292788e-01 -0.07268699        0 -0.08361736\n187  1           Alg8 -0.1233992 1.298407e-01 -0.03803696        0 -0.29004950\n188  1 X4933404O12Rik -0.1232871 1.302624e-01 -0.02071746        0 -1.53093894\n189  1        Gm48551 -0.1232842 1.302624e-01 -0.02959282        0 -0.65149996\n190  1         Rwdd4a -0.1230208 1.314840e-01 -0.06257140        0 -0.16272864\n191  1           Gcat -0.1227368 1.335001e-01 -0.02402297        0 -0.90784266\n192  1          Psmg3 -0.1224230 1.358870e-01 -0.02054979        0 -1.45761797\n193  1        Gm16973 -0.1224230 1.358870e-01 -0.02054979        0 -1.52662646\n194  1          Trib1 -0.1220789 1.375852e-01 -0.02387795        0 -1.12151004\n195  1          Rrp7a -0.1220364 1.376667e-01 -0.05836408        0 -0.27596938\n196  1           Gpi1 -0.1214913 1.414366e-01 -0.07034535        0 -0.13377824\n197  1          Psma3 -0.1213696 1.416416e-01 -0.04680288        0 -0.03872378\n198  1        Gm36198 -0.1213099 1.419073e-01 -0.02370862        0 -1.12334271\n199  1          Cyb5a -0.1212517 1.421581e-01 -0.06585455        0 -0.14287255\n200  1         Txndc9 -0.1211333 1.430268e-01 -0.06729099        0 -0.03272968\n201  1        Gm11808  0.3484559 7.691635e-13  0.19870910        0  0.49651641\n202  1          Traf5  0.3460910 1.102236e-12  0.17469233        0  0.61862023\n203  1           Grm8  0.3222584 6.750370e-11  0.19184051        0  0.36130888\n204  1        Gm12166  0.3031504 1.390566e-09  0.12975254        0  0.70766903\n205  1          Akap9  0.2963933 3.634612e-09  0.14149300        0  0.30684159\n206  1         Pdzrn3  0.2936841 5.383420e-09  0.12644245        0  0.58043775\n207  1        Csnk2a1  0.2760060 6.976655e-08  0.16442503        0  0.36399007\n208  1      Rpl10.ps3  0.2547755 1.393615e-06  0.14376478        0  0.40532835\n209  1          Txlng  0.2416229 7.259525e-06  0.08977941        0  0.65886271\n210  1        Rps27rt  0.2371948 1.268722e-05  0.13271789        0  0.34513991\n211  1         Hbb.bs  0.2344874 1.670480e-05  0.13568437        0  0.38981282\n212  1     Rpl13a.ps1  0.2243530 5.504190e-05  0.09493883        0  0.52788210\n213  1         Mrps28  0.2230924 6.156462e-05  0.13120088        0  0.27976541\n214  1         Tuba1a  0.2146050 1.528275e-04  0.09079113        0  0.50226547\n215  1          Rab39  0.2108862 2.244275e-04  0.09954231        0  0.44863682\n216  1           Vmp1  0.2086942 2.847840e-04  0.11951611        0  0.27843562\n217  1        Selenos  0.2078679 3.079542e-04  0.11990156        0  0.31692245\n218  1           Nrg1  0.2031470 4.858863e-04  0.07955478        0  0.24385197\n219  1       Aurkaip1  0.2016231 5.428791e-04  0.12018444        0  0.22703384\n220  1        Gm11361  0.2013583 5.428791e-04  0.09389299        0  0.41707948\n221  1            Pnn  0.2011177 5.496875e-04  0.11982391        0  0.25610844\n222  1           Fez1  0.2000549 6.103992e-04  0.09551600        0  0.15608070\n223  1         Gtf2a2  0.1980148 7.529353e-04  0.11817752        0  0.20731297\n224  1          Kalrn  0.1977169 7.591726e-04  0.09728564        0  0.25084516\n225  1        Cox7a2l  0.1960664 8.863459e-04  0.07613566        0  0.13539672\n226  1         Gm2000  0.1957360 9.069722e-04  0.06755370        0  0.35095049\n227  1          Rps29  0.1955730 9.081659e-04  0.04431362        0  0.26074972\n228  1      Nutf2.ps1  0.1954743 9.081659e-04  0.09414401        0  0.34815392\n229  1        Morf4l1  0.1935647 1.065207e-03  0.11391898        0  0.28841746\n230  1          Srpk1  0.1915643 1.290557e-03  0.11347315        0  0.27646069\n231  1        Gm10131  0.1888895 1.677258e-03  0.10842489        0  0.25190947\n232  1         Gtpbp4  0.1883130 1.762401e-03  0.11234595        0  0.26483373\n233  1           Rdh5  0.1867587 2.029449e-03  0.09112528        0  0.35676065\n234  1         Nedd4l  0.1864298 2.070267e-03  0.08161653        0  0.17374290\n235  1         Ndufb4  0.1846130 2.430047e-03  0.11017055        0  0.20375478\n236  1           Smc3  0.1842032 2.487140e-03  0.10713231        0  0.17446696\n237  1           Nsg2  0.1827488 2.825226e-03  0.08397999        0  0.15724921\n238  1        Gm10282  0.1823049 2.927000e-03  0.07792377        0  0.44216637\n239  1          Eif3m  0.1819904 2.992458e-03  0.10359866        0  0.15506031\n240  1           Rsf1  0.1801963 3.522809e-03  0.10573046        0  0.21615777\n241  1          Nop58  0.1795542 3.723095e-03  0.09769639        0  0.23662780\n242  1          Evi5l  0.1778623 4.373030e-03  0.07612176        0  0.39856473\n243  1          Prex1  0.1767249 4.807246e-03  0.09713288        0  0.21728572\n244  1           Pcm1  0.1758301 5.157203e-03  0.10380615        0  0.21233798\n245  1           Cbx3  0.1753131 5.329132e-03  0.09980707        0  0.23293264\n246  1        Ankrd12  0.1741340 5.879860e-03  0.10269042        0  0.26085483\n247  1           Rtf1  0.1734383 6.184841e-03  0.08189331        0  0.18667602\n248  1          Bend5  0.1732811 6.217071e-03  0.07252243        0  0.39412137\n249  1         Zfp131  0.1728544 6.217071e-03  0.08461350        0  0.32729559\n250  1         Ppp4r2  0.1728279 6.217071e-03  0.06829719        0  0.38181828\n251  1          Rsrc2  0.1727728 6.217071e-03  0.09519593        0  0.16424777\n252  1         Fam98b  0.1721118 6.522381e-03  0.08086768        0  0.33362966\n253  1          Robo2  0.1714409 6.905846e-03  0.07883858        0  0.17950207\n254  1         Tnrc18  0.1711932 7.016900e-03  0.09993154        0  0.23993018\n255  1          Tmed2  0.1692618 8.320781e-03  0.09959627        0  0.14006620\n256  1         Hba.a1  0.1682890 8.920983e-03  0.10013342        0  0.31612082\n257  1         Zfp326  0.1672114 9.660837e-03  0.09773860        0  0.20378968\n258  1          Rufy1  0.1667597 9.933330e-03  0.06379536        0  0.51521168\n259  1          Rsbn1  0.1641105 1.237573e-02  0.09369865        0  0.24213388\n260  1          Setd7  0.1621521 1.432645e-02  0.06761973        0  0.36853389\n261  1          Ubxn4  0.1604211 1.656725e-02  0.09563565        0  0.17550433\n262  1          Strn3  0.1600254 1.705995e-02  0.08754126        0  0.29537780\n263  1         Ly6g6e  0.1592500 1.806167e-02  0.04966269        0  0.61922904\n264  1           Mtdh  0.1591180 1.815719e-02  0.08591199        0  0.19389366\n265  1       Adamtsl3  0.1586308 1.885146e-02  0.08710608        0  0.20107630\n266  1         Dusp14  0.1584301 1.904970e-02  0.09445127        0  0.13102267\n267  1          Pttg1  0.1583690 1.904970e-02  0.04515475        0  0.55526647\n268  1          Pibf1  0.1581988 1.921884e-02  0.06207135        0  0.41003624\n269  1          Appl1  0.1577189 1.984815e-02  0.08321188        0  0.29426390\n270  1          H2afy  0.1574882 2.009731e-02  0.07747060        0  0.16285027\n271  1          Calm3  0.1562708 2.199430e-02  0.07962942        0  0.16070424\n272  1         Ino80b  0.1559814 2.242948e-02  0.06766564        0  0.34168188\n273  1          Bod1l  0.1553064 2.362290e-02  0.09267181        0  0.18358382\n274  1           Iws1  0.1552566 2.362290e-02  0.07598740        0  0.27071531\n275  1          Kif1a  0.1551482 2.362290e-02  0.09143490        0  0.22522502\n276  1          Alcam  0.1550095 2.362290e-02  0.09267148        0  0.16601032\n277  1          Sept6  0.1549856 2.362290e-02  0.04092562        0  0.58960723\n278  1         Zfp692  0.1546016 2.415018e-02  0.06150079        0  0.37221216\n279  1          Rock1  0.1545226 2.416976e-02  0.09110170        0  0.28766305\n280  1         Eif2b4  0.1538415 2.493781e-02  0.07982801        0  0.27560319\n281  1         Fnbp1l  0.1536705 2.517196e-02  0.09164374        0  0.17377379\n282  1           Ktn1  0.1534778 2.545738e-02  0.09165362        0  0.17307918\n283  1          Tcea1  0.1533702 2.555425e-02  0.07997942        0  0.33471381\n284  1         Zfp397  0.1532373 2.570944e-02  0.08318884        0  0.25674657\n285  1       Cdk5rap2  0.1529732 2.587660e-02  0.06577292        0  0.45056901\n286  1          Kdm2a  0.1526865 2.638960e-02  0.07174706        0  0.21137933\n287  1           Smg1  0.1521638 2.747340e-02  0.06930432        0  0.27114108\n288  1        Rabgap1  0.1517848 2.824278e-02  0.08532235        0  0.21136886\n289  1        Tmem267  0.1510929 2.967221e-02  0.06522267        0  0.31464961\n290  1        Gm43518  0.1496645 3.303897e-02  0.05685168        0  0.45701413\n291  1          Kdm5b  0.1492795 3.361768e-02  0.08430019        0  0.16632349\n292  1           Tpm3  0.1489575 3.420303e-02  0.08774522        0  0.20175765\n293  1          Dcaf5  0.1484868 3.489011e-02  0.05256998        0  0.36801821\n294  1          Kcnd2  0.1476244 3.736397e-02  0.06479505        0  0.33926994\n295  1          Lrch2  0.1473071 3.781523e-02  0.06999044        0  0.24954469\n296  1            Ncl  0.1471834 3.802584e-02  0.07637307        0  0.12797966\n297  1         Gm3550  0.1470355 3.806987e-02  0.07701168        0  0.21855095\n298  1           Abl2  0.1465309 3.937628e-02  0.07245704        0  0.29724249\n299  1        Dync1h1  0.1464838 3.937628e-02  0.08647383        0  0.20306988\n300  1             Ik  0.1462807 3.986552e-02  0.08405986        0  0.18514602\n301  1       Rpl9.ps6  0.1461052 4.026736e-02  0.06148283        0  0.22611091\n302  1        Zfand2b  0.1458493 4.079903e-02  0.05574576        0  0.32873114\n303  1           Atrx  0.1457394 4.079903e-02  0.08460782        0  0.13942252\n304  1           Gfm2  0.1456779 4.079903e-02  0.05248225        0  0.40499451\n305  1         Serbp1  0.1456699 4.079903e-02  0.04934033        0  0.14969501\n306  1         Gm9008  0.1455408 4.090874e-02  0.02089049        0  1.76164484\n307  1     CT025619.1  0.1449154 4.267056e-02  0.08399577        0  0.19392534\n308  1         Zc3h18  0.1447141 4.319791e-02  0.05893598        0  0.37215313\n309  1  A330084C13Rik  0.1443574 4.430262e-02  0.04854193        0  0.56562469\n310  1         Mycbp2  0.1441810 4.459168e-02  0.08587289        0  0.16615709\n311  1         Scaf11  0.1439549 4.499877e-02  0.07434210        0  0.20986198\n312  1          Nuak1  0.1435553 4.631266e-02  0.08551008        0  0.17576114\n313  1           Cul1  0.1434988 4.632527e-02  0.07996890        0  0.15170703\n314  1         Zfand5  0.1434020 4.649383e-02  0.08291694        0  0.13026238\n315  1          Mrps5  0.1431078 4.743323e-02  0.08546122        0  0.15458456\n316  1           Nrp1  0.1420521 5.086195e-02  0.08012971        0  0.06606303\n317  1           Ddx5  0.1408348 5.548305e-02  0.02489984        0  0.21826847\n318  1           Fat3  0.1403539 5.739234e-02  0.07761003        0  0.19218385\n319  1        Zcchc11  0.1403161 5.739234e-02  0.07334986        0  0.25537927\n320  1          Vgll4  0.1401097 5.787786e-02  0.08164691        0  0.13805112\n321  1        L3mbtl3  0.1395875 5.988395e-02  0.05444420        0  0.34384398\n322  1         Cep85l  0.1391752 6.166041e-02  0.07119497        0  0.26278821\n323  1          Lrch3  0.1390308 6.187597e-02  0.06230864        0  0.34368877\n324  1          Ddx24  0.1388622 6.231933e-02  0.08277930        0  0.12106951\n325  1           Chd7  0.1383650 6.397851e-02  0.07188340        0  0.23358757\n326  1       Ftl1.ps1  0.1379283 6.573575e-02  0.07802523        0  0.21973182\n327  1          Pde4d  0.1376638 6.661487e-02  0.06060054        0  0.03943154\n328  1        Gm45736  0.1366509 7.137961e-02  0.06494600        0  0.30265555\n329  1            Zfr  0.1361690 7.387710e-02  0.07826883        0  0.22322110\n330  1        Gm13402  0.1360212 7.417222e-02  0.01828013        0  1.78501126\n331  1           Cdh4  0.1358588 7.484470e-02  0.06720156        0  0.24472568\n332  1           Eml4  0.1355148 7.632325e-02  0.07499964        0  0.26994997\n333  1          Ptov1  0.1354443 7.638830e-02  0.05076813        0  0.15583284\n334  1         Map3k3  0.1352940 7.678851e-02  0.04791014        0  0.32635471\n335  1          Ddx3y  0.1348404 7.869394e-02  0.05552688        0  0.24123454\n336  1          Klf13  0.1347567 7.891962e-02  0.07491405        0  0.19762500\n337  1         Golgb1  0.1346709 7.916026e-02  0.07873186        0  0.16523988\n338  1           Bcor  0.1345941 7.934645e-02  0.06090951        0  0.18264437\n339  1          Pde9a  0.1344332 7.947821e-02  0.07046079        0  0.27008760\n340  1          Nop56  0.1336623 8.329023e-02  0.07980429        0  0.16798515\n341  1        Gm26848  0.1336498 8.329023e-02  0.03865168        0  0.52469205\n342  1           Chd2  0.1328581 8.795434e-02  0.07270594        0  0.32331614\n343  1       Slc38a10  0.1322315 9.032299e-02  0.06306565        0  0.24505316\n344  1           Lias  0.1321528 9.032299e-02  0.06447450        0  0.25865768\n345  1        Ccdc191  0.1321080 9.032299e-02  0.04354789        0  0.44177446\n346  1          Srrm4  0.1319044 9.143870e-02  0.05516257        0  0.14104522\n347  1          Hmgb1  0.1318126 9.177330e-02  0.03126311        0  0.22391249\n348  1           Aff2  0.1314396 9.380595e-02  0.07774838        0  0.16314267\n349  1          Tor2a  0.1312504 9.442935e-02  0.06319992        0  0.23475385\n350  1         Oxnad1  0.1310417 9.542021e-02  0.04176790        0  0.35324940\n351  1         Vps13a  0.1307438 9.663177e-02  0.03505991        0  0.48735806\n352  1           Opa1  0.1307054 9.663177e-02  0.05528287        0  0.34119936\n353  1           Apip  0.1307031 9.663177e-02  0.05528204        0  0.30031728\n354  1           Usp3  0.1306567 9.665538e-02  0.07804275        0  0.14793247\n355  1           Leo1  0.1305854 9.686486e-02  0.05798176        0  0.30054292\n356  1         Clasp1  0.1301527 9.932987e-02  0.07733380        0  0.11674027\n357  1         Prrc2c  0.1301279 9.932987e-02  0.07638132        0  0.17458086\n358  1         Iqgap2  0.1300294 9.957040e-02  0.04055954        0  0.39929966\n359  1          Znrf3  0.1297207 1.009205e-01  0.02917821        0  0.58115486\n360  1       Epm2aip1  0.1297036 1.009205e-01  0.05121653        0  0.34196457\n361  1          Lrrc7  0.1295886 1.009205e-01  0.07439816        0  0.14819548\n362  1           Jak1  0.1292634 1.027347e-01  0.05105058        0  0.30284988\n363  1        Ccdc186  0.1288669 1.048750e-01  0.06016707        0  0.13494288\n364  1           Sltm  0.1287386 1.049142e-01  0.07616827        0  0.13242058\n365  1           Rybp  0.1286916 1.049623e-01  0.04016716        0  0.36975968\n366  1          Gdpd5  0.1283864 1.066272e-01  0.05258647        0  0.31617136\n367  1          Igsf3  0.1283846 1.066272e-01  0.06268773        0  0.19494614\n368  1          Hdac4  0.1283498 1.066272e-01  0.04349642        0  0.44260801\n369  1  C530008M17Rik  0.1281383 1.077726e-01  0.07282735        0  0.24586000\n370  1         Agpat4  0.1279918 1.082311e-01  0.06912599        0  0.24201463\n371  1           Nek3  0.1278735 1.086200e-01  0.03743525        0  0.46543654\n372  1        Ccdc85c  0.1276971 1.092591e-01  0.02236710        0  0.86417579\n373  1         Rhbdl3  0.1276760 1.092591e-01  0.04407797        0  0.43639431\n374  1          Baz1b  0.1273824 1.100538e-01  0.06951351        0  0.20240472\n375  1         Frmd4a  0.1264058 1.176893e-01  0.07538539        0  0.23490660\n376  1          Pelp1  0.1263596 1.177511e-01  0.05684210        0  0.25685839\n377  1           Ezh2  0.1261647 1.187789e-01  0.06186517        0  0.11801844\n378  1           Ngef  0.1258210 1.203993e-01  0.01566952        0  1.69694386\n379  1       BC055324  0.1258210 1.203993e-01  0.01566952        0  1.66490323\n380  1           Bcl9  0.1256579 1.211950e-01  0.06900347        0  0.22112673\n381  1          Unc5d  0.1255533 1.211950e-01  0.07148927        0  0.12876094\n382  1            Bbx  0.1255469 1.211950e-01  0.07223607        0  0.18950593\n383  1          Synrg  0.1254709 1.215360e-01  0.06379367        0  0.19347041\n384  1        Hnrnph3  0.1254295 1.215670e-01  0.05922674        0  0.15967412\n385  1           Il10  0.1252627 1.223894e-01  0.05270485        0  0.25691673\n386  1        Gm10184  0.1250609 1.231010e-01  0.01902197        0  1.23840587\n387  1           Unkl  0.1250609 1.231010e-01  0.01902197        0  1.16904644\n388  1          Ywhae  0.1249717 1.231010e-01  0.02019279        0  0.10178118\n389  1         Ccdc34  0.1247871 1.236635e-01  0.07429462        0  0.09210400\n390  1        Plekha5  0.1247865 1.236635e-01  0.06446436        0  0.23105713\n391  1         Ppfia2  0.1242970 1.263882e-01  0.07409766        0  0.19928589\n392  1           Dnm3  0.1242700 1.263882e-01  0.03050584        0  0.68369775\n393  1         Diablo  0.1239599 1.279252e-01  0.06123676        0  0.20538381\n394  1          Eno1b  0.1238235 1.285838e-01  0.04795132        0  0.34441883\n395  1           Nt5m  0.1238176 1.285838e-01  0.04231272        0  0.30888221\n396  1          Odf2l  0.1237296 1.290743e-01  0.04379519        0  0.32395824\n397  1           Brd3  0.1236466 1.292788e-01  0.07156550        0  0.12744106\n398  1           Wnk3  0.1236006 1.292788e-01  0.04588193        0  0.30950183\n399  1          Ccar1  0.1234892 1.298407e-01  0.07369790        0  0.09869740\n400  1           Epg5  0.1234448 1.298407e-01  0.02704576        0  0.59491318\n401  2        Gm11808 -0.3484518 7.697548e-13 -0.14187724        0 -0.49651641\n402  2          Traf5 -0.3460862 1.103237e-12 -0.12472910        0 -0.61862023\n403  2           Grm8 -0.3222594 6.749210e-11 -0.13697511        0 -0.36130888\n404  2        Gm12166 -0.3031474 1.391247e-09 -0.09264279        0 -0.70766903\n405  2          Akap9 -0.2964012 3.629973e-09 -0.10102911        0 -0.30684159\n406  2         Pdzrn3 -0.2936781 5.388553e-09 -0.09027846        0 -0.58043775\n407  2        Csnk2a1 -0.2760001 6.982889e-08 -0.11739745        0 -0.36399007\n408  2      Rpl10.ps3 -0.2547703 1.394645e-06 -0.10264636        0 -0.40532835\n409  2          Txlng -0.2416189 7.263440e-06 -0.06410169        0 -0.65886271\n410  2        Rps27rt -0.2371900 1.269524e-05 -0.09475904        0 -0.34513991\n411  2         Hbb.bs -0.2344950 1.668837e-05 -0.09688218        0 -0.38981282\n412  2     Rpl13a.ps1 -0.2243523 5.504692e-05 -0.06778638        0 -0.52788210\n413  2         Mrps28 -0.2230893 6.158832e-05 -0.09367651        0 -0.27976541\n414  2         Tuba1a -0.2146021 1.528810e-04 -0.06482425        0 -0.50226547\n415  2          Rab39 -0.2108843 2.244774e-04 -0.07107287        0 -0.44863682\n416  2           Vmp1 -0.2086986 2.846360e-04 -0.08533669        0 -0.27843562\n417  2        Selenos -0.2078726 3.077870e-04 -0.08561201        0 -0.31692245\n418  2           Nrg1 -0.2031443 4.858960e-04 -0.05680158        0 -0.24385197\n419  2       Aurkaip1 -0.2016202 5.428977e-04 -0.08581080        0 -0.22703384\n420  2        Gm11361 -0.2013580 5.428977e-04 -0.06703978        0 -0.41707948\n421  2            Pnn -0.2011202 5.495292e-04 -0.08555572        0 -0.25610844\n422  2           Fez1 -0.2000574 6.102337e-04 -0.06819953        0 -0.15608070\n423  2         Gtf2a2 -0.1980178 7.533692e-04 -0.08438041        0 -0.20731297\n424  2          Kalrn -0.1977204 7.588850e-04 -0.06946344        0 -0.25084516\n425  2        Cox7a2l -0.1960558 8.873832e-04 -0.05435813        0 -0.13539672\n426  2         Gm2000 -0.1957453 9.060456e-04 -0.04823584        0 -0.35095049\n427  2          Rps29 -0.1955583 9.080899e-04 -0.03163768        0 -0.26074972\n428  2      Nutf2.ps1 -0.1954740 9.080899e-04 -0.06721903        0 -0.34815392\n429  2        Morf4l1 -0.1935622 1.065489e-03 -0.08133747        0 -0.28841746\n430  2          Srpk1 -0.1915667 1.290231e-03 -0.08102117        0 -0.27646069\n431  2        Gm10131 -0.1888901 1.677144e-03 -0.07741595        0 -0.25190947\n432  2         Gtpbp4 -0.1883153 1.761979e-03 -0.08021631        0 -0.26483373\n433  2           Rdh5 -0.1867627 2.028606e-03 -0.06506510        0 -0.35676065\n434  2         Nedd4l -0.1864228 2.067776e-03 -0.05827226        0 -0.17374290\n435  2         Ndufb4 -0.1846059 2.431827e-03 -0.07865910        0 -0.20375478\n436  2           Smc3 -0.1842010 2.488602e-03 -0.07649187        0 -0.17446696\n437  2           Nsg2 -0.1827508 2.824646e-03 -0.05996262        0 -0.15724921\n438  2        Gm10282 -0.1823008 2.928218e-03 -0.05563657        0 -0.44216637\n439  2          Eif3m -0.1819981 2.990112e-03 -0.07397286        0 -0.15506031\n440  2           Rsf1 -0.1801900 3.525046e-03 -0.07548925        0 -0.21615777\n441  2          Nop58 -0.1795474 3.725645e-03 -0.06975289        0 -0.23662780\n442  2          Evi5l -0.1778636 4.372422e-03 -0.05435159        0 -0.39856473\n443  2          Prex1 -0.1767190 4.810053e-03 -0.06935087        0 -0.21728572\n444  2           Pcm1 -0.1758333 5.155561e-03 -0.07411925        0 -0.21233798\n445  2           Cbx3 -0.1753203 5.325344e-03 -0.07126546        0 -0.23293264\n446  2        Ankrd12 -0.1741269 5.883987e-03 -0.07331827        0 -0.26085483\n447  2           Rtf1 -0.1734301 6.189829e-03 -0.05846930        0 -0.18667602\n448  2          Bend5 -0.1732906 6.214230e-03 -0.05178406        0 -0.39412137\n449  2         Zfp131 -0.1728609 6.214230e-03 -0.06041659        0 -0.32729559\n450  2         Ppp4r2 -0.1728226 6.214230e-03 -0.04876290        0 -0.38181828\n451  2          Rsrc2 -0.1727732 6.214230e-03 -0.06797032        0 -0.16424777\n452  2         Fam98b -0.1721113 6.522691e-03 -0.05773960        0 -0.33362966\n453  2          Robo2 -0.1714317 6.911986e-03 -0.05628798        0 -0.17950207\n454  2         Tnrc18 -0.1711863 7.021606e-03 -0.07134854        0 -0.23993018\n455  2          Tmed2 -0.1692572 8.324481e-03 -0.07111009        0 -0.14006620\n456  2         Hba.a1 -0.1682859 8.923616e-03 -0.07149425        0 -0.31612082\n457  2         Zfp326 -0.1672118 9.660406e-03 -0.06978585        0 -0.20378968\n458  2          Rufy1 -0.1667701 9.923580e-03 -0.04555291        0 -0.51521168\n459  2          Rsbn1 -0.1641050 1.238200e-02 -0.06689891        0 -0.24213388\n460  2          Setd7 -0.1621581 1.431852e-02 -0.04828248        0 -0.36853389\n461  2          Ubxn4 -0.1604206 1.656794e-02 -0.06828395        0 -0.17550433\n462  2          Strn3 -0.1600201 1.706826e-02 -0.06250264        0 -0.29537780\n463  2         Ly6g6e -0.1592551 1.805340e-02 -0.03546043        0 -0.61922904\n464  2           Mtdh -0.1591228 1.814915e-02 -0.06134330        0 -0.19389366\n465  2       Adamtsl3 -0.1586315 1.885016e-02 -0.06219430        0 -0.20107630\n466  2         Dusp14 -0.1584262 1.903247e-02 -0.06743683        0 -0.13102267\n467  2          Pttg1 -0.1583790 1.903247e-02 -0.03224266        0 -0.55526647\n468  2          Pibf1 -0.1582008 1.921533e-02 -0.04431970        0 -0.41003624\n469  2          Appl1 -0.1577168 1.981484e-02 -0.05941272        0 -0.29426390\n470  2          H2afy -0.1574831 2.010660e-02 -0.05531243        0 -0.16285027\n471  2          Calm3 -0.1562729 2.199016e-02 -0.05685641        0 -0.16070424\n472  2         Ino80b -0.1559776 2.243697e-02 -0.04831231        0 -0.34168188\n473  2          Bod1l -0.1553121 2.363774e-02 -0.06617037        0 -0.18358382\n474  2           Iws1 -0.1552531 2.363774e-02 -0.05425398        0 -0.27071531\n475  2          Kif1a -0.1551444 2.364238e-02 -0.06528322        0 -0.22522502\n476  2          Alcam -0.1550037 2.364238e-02 -0.06616524        0 -0.16601032\n477  2          Sept6 -0.1549763 2.364238e-02 -0.02921926        0 -0.58960723\n478  2         Zfp692 -0.1546065 2.413978e-02 -0.04391313        0 -0.37221216\n479  2          Rock1 -0.1545208 2.417674e-02 -0.06504614        0 -0.28766305\n480  2         Eif2b4 -0.1538404 2.494024e-02 -0.05699703        0 -0.27560319\n481  2         Fnbp1l -0.1536734 2.516567e-02 -0.06543511        0 -0.17377379\n482  2           Ktn1 -0.1534807 2.545074e-02 -0.06544222        0 -0.17307918\n483  2          Tcea1 -0.1533759 2.554144e-02 -0.05710767        0 -0.33471381\n484  2         Zfp397 -0.1532392 2.570503e-02 -0.05939783        0 -0.25674657\n485  2       Cdk5rap2 -0.1529680 2.588837e-02 -0.04696047        0 -0.45056901\n486  2          Kdm2a -0.1526938 2.637271e-02 -0.05123007        0 -0.21137933\n487  2           Smg1 -0.1521631 2.747503e-02 -0.04948327        0 -0.27114108\n488  2        Rabgap1 -0.1517827 2.824798e-02 -0.06091957        0 -0.21136886\n489  2        Tmem267 -0.1510996 2.965487e-02 -0.04657125        0 -0.31464961\n490  2        Gm43518 -0.1496620 3.304610e-02 -0.04059159        0 -0.45701413\n491  2          Kdm5b -0.1492767 3.362564e-02 -0.06018948        0 -0.16632349\n492  2           Tpm3 -0.1489532 3.421561e-02 -0.06264854        0 -0.20175765\n493  2          Dcaf5 -0.1484826 3.490277e-02 -0.03753405        0 -0.36801821\n494  2          Kcnd2 -0.1476345 3.733185e-02 -0.04626703        0 -0.33926994\n495  2          Lrch2 -0.1472992 3.784038e-02 -0.04997072        0 -0.24954469\n496  2            Ncl -0.1471858 3.801824e-02 -0.05453147        0 -0.12797966\n497  2         Gm3550 -0.1470382 3.807706e-02 -0.05498758        0 -0.21855095\n498  2           Abl2 -0.1465348 3.939639e-02 -0.05173591        0 -0.29724249\n499  2        Dync1h1 -0.1464765 3.940062e-02 -0.06173949        0 -0.20306988\n500  2             Ik -0.1462855 3.984947e-02 -0.06002094        0 -0.18514602\n501  2       Rpl9.ps6 -0.1461088 4.025505e-02 -0.04390001        0 -0.22611091\n502  2        Zfand2b -0.1458378 4.081354e-02 -0.03979949        0 -0.32873114\n503  2           Atrx -0.1457391 4.081354e-02 -0.06041008        0 -0.13942252\n504  2           Gfm2 -0.1456801 4.081354e-02 -0.03747307        0 -0.40499451\n505  2         Serbp1 -0.1456656 4.081354e-02 -0.03522812        0 -0.14969501\n506  2         Gm9008 -0.1455257 4.091578e-02 -0.01491432        0 -1.76164484\n507  2     CT025619.1 -0.1449230 4.264367e-02 -0.05997634        0 -0.19392534\n508  2         Zc3h18 -0.1447176 4.318529e-02 -0.04208148        0 -0.37215313\n509  2  A330084C13Rik -0.1443521 4.432214e-02 -0.03465782        0 -0.56562469\n510  2         Mycbp2 -0.1441840 4.457820e-02 -0.06131478        0 -0.16615709\n511  2         Scaf11 -0.1439583 4.498619e-02 -0.05308172        0 -0.20986198\n512  2          Nuak1 -0.1435589 4.629872e-02 -0.06105600        0 -0.17576114\n513  2           Cul1 -0.1434946 4.634138e-02 -0.05709636        0 -0.15170703\n514  2         Zfand5 -0.1434052 4.648139e-02 -0.05920428        0 -0.13026238\n515  2          Mrps5 -0.1431042 4.744731e-02 -0.06101804        0 -0.15458456\n516  2           Nrp1 -0.1420546 5.085142e-02 -0.05721387        0 -0.06606303\n517  2           Ddx5 -0.1408325 5.549341e-02 -0.01777827        0 -0.21826847\n518  2           Fat3 -0.1403519 5.739409e-02 -0.05541299        0 -0.19218385\n519  2        Zcchc11 -0.1403158 5.739409e-02 -0.05237188        0 -0.25537927\n520  2          Vgll4 -0.1401099 5.787694e-02 -0.05829621        0 -0.13805112\n521  2        L3mbtl3 -0.1395909 5.986721e-02 -0.03887428        0 -0.34384398\n522  2         Cep85l -0.1391772 6.165036e-02 -0.05083416        0 -0.26278821\n523  2          Lrch3 -0.1390245 6.191587e-02 -0.04448653        0 -0.34368877\n524  2          Ddx24 -0.1388620 6.233519e-02 -0.05910459        0 -0.12106951\n525  2           Chd7 -0.1383698 6.395383e-02 -0.05132674        0 -0.23358757\n526  2       Ftl1.ps1 -0.1379344 6.570340e-02 -0.05571273        0 -0.21973182\n527  2          Pde4d -0.1376713 6.657474e-02 -0.04327133        0 -0.03943154\n528  2        Gm45736 -0.1366498 7.138544e-02 -0.04637129        0 -0.30265555\n529  2            Zfr -0.1361699 7.387152e-02 -0.05588457        0 -0.22322110\n530  2        Gm13402 -0.1360180 7.419125e-02 -0.01305175        0 -1.78501126\n531  2           Cdh4 -0.1358559 7.486189e-02 -0.04798109        0 -0.24472568\n532  2           Eml4 -0.1355109 7.634653e-02 -0.05354844        0 -0.26994997\n533  2          Ptov1 -0.1354485 7.638457e-02 -0.03624972        0 -0.15583284\n534  2         Map3k3 -0.1352972 7.676939e-02 -0.03420878        0 -0.32635471\n535  2          Ddx3y -0.1348408 7.869134e-02 -0.03964648        0 -0.24123454\n536  2          Klf13 -0.1347597 7.890145e-02 -0.05349002        0 -0.19762500\n537  2         Golgb1 -0.1346720 7.915368e-02 -0.05621523        0 -0.16523988\n538  2           Bcor -0.1345897 7.937393e-02 -0.04348815        0 -0.18264437\n539  2          Pde9a -0.1344377 7.945022e-02 -0.05031089        0 -0.27008760\n540  2          Nop56 -0.1336573 8.338971e-02 -0.05697836        0 -0.16798515\n541  2        Gm26848 -0.1336345 8.338971e-02 -0.02759425        0 -0.52469205\n542  2           Chd2 -0.1328623 8.792534e-02 -0.05191392        0 -0.32331614\n543  2       Slc38a10 -0.1322398 9.040119e-02 -0.04503189        0 -0.24505316\n544  2           Lias -0.1321459 9.040119e-02 -0.04603258        0 -0.25865768\n545  2        Ccdc191 -0.1320968 9.040119e-02 -0.03109069        0 -0.44177446\n546  2          Srrm4 -0.1319095 9.140254e-02 -0.03938777        0 -0.14104522\n547  2          Hmgb1 -0.1318259 9.167927e-02 -0.02232420        0 -0.22391249\n548  2           Aff2 -0.1314429 9.378199e-02 -0.05551397        0 -0.16314267\n549  2          Tor2a -0.1312494 9.444128e-02 -0.04512457        0 -0.23475385\n550  2         Oxnad1 -0.1310548 9.532378e-02 -0.02982540        0 -0.35324940\n551  2         Vps13a -0.1307479 9.665266e-02 -0.02503365        0 -0.48735806\n552  2           Apip -0.1307026 9.665266e-02 -0.03947140        0 -0.30031728\n553  2           Opa1 -0.1307003 9.665266e-02 -0.03947060        0 -0.34119936\n554  2           Usp3 -0.1306555 9.666486e-02 -0.05572221        0 -0.14793247\n555  2           Leo1 -0.1305852 9.686614e-02 -0.04139909        0 -0.30054292\n556  2         Clasp1 -0.1301519 9.933613e-02 -0.05521620        0 -0.11674027\n557  2         Prrc2c -0.1301271 9.933613e-02 -0.05453614        0 -0.17458086\n558  2         Iqgap2 -0.1300260 9.959059e-02 -0.02895887        0 -0.39929966\n559  2       Epm2aip1 -0.1297069 1.009396e-01 -0.03656968        0 -0.34196457\n560  2          Znrf3 -0.1297048 1.009396e-01 -0.02083077        0 -0.58115486\n561  2          Lrrc7 -0.1295880 1.010264e-01 -0.05312026        0 -0.14819548\n562  2           Jak1 -0.1292660 1.027148e-01 -0.03645099        0 -0.30284988\n563  2        Ccdc186 -0.1288590 1.049197e-01 -0.04295683        0 -0.13494288\n564  2           Sltm -0.1287321 1.049657e-01 -0.05438163        0 -0.13242058\n565  2           Rybp -0.1286835 1.050266e-01 -0.02867767        0 -0.36975968\n566  2          Gdpd5 -0.1283845 1.066594e-01 -0.03754634        0 -0.31617136\n567  2          Igsf3 -0.1283813 1.066594e-01 -0.04475807        0 -0.19494614\n568  2          Hdac4 -0.1283448 1.066594e-01 -0.03105537        0 -0.44260801\n569  2  C530008M17Rik -0.1281322 1.077066e-01 -0.05199649        0 -0.24586000\n570  2         Agpat4 -0.1279906 1.082208e-01 -0.04935568        0 -0.24201463\n571  2           Nek3 -0.1278641 1.086972e-01 -0.02672690        0 -0.46543654\n572  2        Ccdc85c -0.1276868 1.091727e-01 -0.01596889        0 -0.86417579\n573  2         Rhbdl3 -0.1276866 1.091727e-01 -0.03147440        0 -0.43639431\n574  2          Baz1b -0.1273785 1.100857e-01 -0.04963135        0 -0.20240472\n575  2         Frmd4a -0.1264096 1.176558e-01 -0.05382702        0 -0.23490660\n576  2          Pelp1 -0.1263606 1.177427e-01 -0.04058574        0 -0.25685839\n577  2           Ezh2 -0.1261583 1.188359e-01 -0.04416966        0 -0.11801844\n578  2           Ngef -0.1258276 1.203146e-01 -0.01118867        0 -1.69694386\n579  2       BC055324 -0.1258276 1.203146e-01 -0.01118867        0 -1.66490323\n580  2           Bcl9 -0.1256521 1.212058e-01 -0.04926639        0 -0.22112673\n581  2          Unc5d -0.1255478 1.212058e-01 -0.05104132        0 -0.12876094\n582  2            Bbx -0.1255457 1.212058e-01 -0.05157628        0 -0.18950593\n583  2          Synrg -0.1254746 1.215027e-01 -0.04555021        0 -0.19347041\n584  2        Hnrnph3 -0.1254333 1.215329e-01 -0.04228934        0 -0.15967412\n585  2           Il10 -0.1252729 1.222976e-01 -0.03763448        0 -0.25691673\n586  2        Gm10184 -0.1250318 1.230558e-01 -0.01357858        0 -1.23840587\n587  2           Unkl -0.1250318 1.230558e-01 -0.01357858        0 -1.16904644\n588  2          Ywhae -0.1249512 1.230558e-01 -0.01441535        0 -0.10178118\n589  2         Ccdc34 -0.1247844 1.237110e-01 -0.05304541        0 -0.09210400\n590  2        Plekha5 -0.1247813 1.237110e-01 -0.04602582        0 -0.23105713\n591  2         Ppfia2 -0.1242922 1.264621e-01 -0.05290393        0 -0.19928589\n592  2           Dnm3 -0.1242606 1.264621e-01 -0.02177963        0 -0.68369775\n593  2         Diablo -0.1239611 1.279141e-01 -0.04372365        0 -0.20538381\n594  2           Nt5m -0.1238218 1.285887e-01 -0.03021244        0 -0.30888221\n595  2          Eno1b -0.1238171 1.285887e-01 -0.03423560        0 -0.34441883\n596  2          Odf2l -0.1237346 1.290265e-01 -0.03127118        0 -0.32395824\n597  2           Brd3 -0.1236467 1.292792e-01 -0.05109802        0 -0.12744106\n598  2           Wnk3 -0.1236005 1.292792e-01 -0.03275982        0 -0.30950183\n599  2          Ccar1 -0.1234960 1.297591e-01 -0.05262341        0 -0.09869740\n600  2           Epg5 -0.1234494 1.297591e-01 -0.01931148        0 -0.59491318\n601  2          Uba52  0.8106578 1.622319e-74  0.34607863        0  1.53792300\n602  2           Pgk1  0.5238239 4.452013e-30  0.20974306        0  1.25344098\n603  2         Sec61g  0.4973904 4.330414e-27  0.20498497        0  0.94392234\n604  2            Erh  0.4763877 8.137141e-25  0.19078338        0  0.66616044\n605  2          Atp5l  0.4636140 1.669979e-23  0.19469858        0  0.72958798\n606  2        Gm10076  0.4404746 3.983630e-21  0.18155745        0  0.64435861\n607  2        Gm10260  0.4297455 4.271154e-20  0.17184456        0  0.55876061\n608  2          Stmn1  0.3970580 5.646794e-17  0.13395022        0  0.62877743\n609  2        Rpl36al  0.3734641 6.959234e-15  0.15906698        0  0.60240089\n610  2           Nme2  0.3595523 9.994733e-14  0.11257913        0  1.48759648\n611  2           Raly  0.3384072 4.257342e-12  0.11238732        0  1.02907857\n612  2         Rpl27a  0.3273849 2.917626e-11  0.13050223        0  0.39318812\n613  2        Hnrnpa1  0.3204802 8.642714e-11  0.12075021        0  0.42371612\n614  2          Rpl15  0.3143006 2.371646e-10  0.08670110        0  0.60150822\n615  2           Glo1  0.3060682 9.031637e-10  0.12720496        0  0.50825182\n616  2           Ppia  0.2990919 2.576494e-09  0.08786727        0  0.61119720\n617  2          Gstp1  0.2987705 2.586181e-09  0.10761226        0  0.67817495\n618  2         Gm9844  0.2873811 1.405713e-08  0.09423824        0  0.72485194\n619  2           Gnb2  0.2863184 1.594659e-08  0.08829549        0  0.89089883\n620  2           Gps1  0.2841683 2.145561e-08  0.08263143        0  1.02113299\n621  2           Fdps  0.2786061 4.871945e-08  0.11890632        0  0.35290526\n622  2         mt.Co1  0.2701407 1.622385e-07  0.10947811        0  0.45083061\n623  2          Pcdh9  0.2600918 6.780802e-07  0.11050313        0  0.33568931\n624  2           Eno1  0.2521340 1.952078e-06  0.10535216        0  0.34261648\n625  2         Tomm20  0.2464028 4.160546e-06  0.10089169        0  0.38429325\n626  2          Fopnl  0.2445296 5.066179e-06  0.08173979        0  0.54335800\n627  2        Bloc1s1  0.2445140 5.066179e-06  0.08149731        0  0.68382633\n628  2           Nme1  0.2368440 1.293442e-05  0.07805614        0  0.31943344\n629  2           Mea1  0.2358807 1.429343e-05  0.05601231        0  1.22670712\n630  2         Polr2k  0.2314505 2.410659e-05  0.06735633        0  0.74896109\n631  2       Tpm3.rs7  0.2256353 4.913834e-05  0.09522438        0  0.38346143\n632  2           Lsm7  0.2247241 5.377900e-05  0.09429304        0  0.29980444\n633  2          Rwdd1  0.2236545 5.869821e-05  0.09535904        0  0.25680432\n634  2         Ppp1cc  0.2216787 7.173969e-05  0.08234831        0  0.42313946\n635  2           Tln1  0.2176258 1.151688e-04  0.06436876        0  0.60121336\n636  2           Cap1  0.2167225 1.241571e-04  0.09056516        0  0.28472756\n637  2        Lamtor3  0.2166648 1.241571e-04  0.08068376        0  0.43463703\n638  2           Btf3  0.2147536 1.528810e-04  0.05043102        0  0.27400311\n639  2         Ndufs5  0.2128700 1.843052e-04  0.07148218        0  0.48320512\n640  2         Tarbp2  0.2123420 1.925531e-04  0.04933310        0  0.98975553\n641  2         Ifitm2  0.2075667 3.122521e-04  0.05215556        0  0.93419770\n642  2           Btg1  0.2074504 3.122521e-04  0.07276526        0  0.48968203\n643  2         Atp5g2  0.2050316 4.055558e-04  0.04621182        0  1.00411870\n644  2            Ubb  0.2041761 4.398443e-04  0.03957551        0  0.73394166\n645  2           Pop4  0.2030163 4.858960e-04  0.07912884        0  0.31795136\n646  2         Mrps33  0.2024270 5.113065e-04  0.08554821        0  0.31275401\n647  2           Xist  0.2015710 5.428977e-04  0.08525618        0  0.20099999\n648  2          Zfpm2  0.2014001 5.428977e-04  0.07128647        0  0.48028351\n649  2          Serf2  0.1979109 7.533692e-04  0.08249363        0  0.33563043\n650  2       Serpini1  0.1971857 7.941919e-04  0.08412239        0  0.20380776\n651  2         Mrps36  0.1953713 9.080899e-04  0.04812830        0  0.77800701\n652  2          Sap18  0.1946847 9.665871e-04  0.08264600        0  0.25178663\n653  2           Psap  0.1940357 1.024577e-03  0.07873215        0  0.25725676\n654  2          Ube2s  0.1919584 1.251890e-03  0.05547872        0  0.61258722\n655  2        Cntnap2  0.1901810 1.479072e-03  0.08032067        0  0.27548961\n656  2         mt.Nd5  0.1870468 1.991312e-03  0.07281280        0  0.37227982\n657  2          Naa10  0.1863685 2.067776e-03  0.05014316        0  0.60095155\n658  2           Gpx4  0.1857663 2.178322e-03  0.07190659        0  0.20008708\n659  2          Stmn2  0.1841786 2.488602e-03  0.07861134        0  0.28112428\n660  2         Rnf114  0.1828246 2.824646e-03  0.07520051        0  0.24970003\n661  2           Rbm3  0.1815099 3.111986e-03  0.05655114        0  0.34334621\n662  2         Mrpl23  0.1774163 4.529131e-03  0.05994646        0  0.33564600\n663  2          Kpna2  0.1765308 4.855019e-03  0.04648392        0  0.63216478\n664  2         Mettl2  0.1754197 5.321950e-03  0.06131943        0  0.33267933\n665  2         Grcc10  0.1746264 5.652006e-03  0.03398652        0  0.93197938\n666  2          Ap3s1  0.1737990 6.022744e-03  0.07162267        0  0.20527616\n667  2         Psenen  0.1731957 6.214230e-03  0.07218009        0  0.25801194\n668  2           Dstn  0.1729236 6.214230e-03  0.06931671        0  0.27449226\n669  2 X4833439L19Rik  0.1727312 6.214230e-03  0.07303837        0  0.22690981\n670  2            Ndn  0.1726918 6.214230e-03  0.06710605        0  0.21869226\n671  2          Lrfn5  0.1699571 7.844594e-03  0.05232937        0  0.47692581\n672  2        Trmt112  0.1689505 8.505539e-03  0.07172334        0  0.22881986\n673  2         Exosc9  0.1686346 8.698411e-03  0.05637959        0  0.35186517\n674  2         Apopt1  0.1682024 8.925929e-03  0.06635290        0  0.26016106\n675  2           Gpx1  0.1674659 9.501882e-03  0.07092866        0  0.17772780\n676  2         Polr2l  0.1668801 9.894426e-03  0.05041538        0  0.38342945\n677  2          Rtl8a  0.1664593 1.014425e-02  0.05858344        0  0.43148510\n678  2           Lhx9  0.1655589 1.096274e-02  0.05498949        0  0.39696671\n679  2         Ube2d3  0.1647657 1.172467e-02  0.05244944        0  0.11304321\n680  2        Gadd45g  0.1635806 1.290916e-02  0.06755886        0  0.19430562\n681  2        Gm10320  0.1634424 1.298299e-02  0.02558482        0  1.48259469\n682  2        Fam171b  0.1633003 1.306246e-02  0.06068341        0  0.26127670\n683  2          Cdca4  0.1630280 1.330295e-02  0.05237300        0  0.39779613\n684  2         Hnrnpl  0.1614943 1.511702e-02  0.06772087        0  0.24555980\n685  2         Prkag2  0.1598511 1.721559e-02  0.05604351        0  0.31107620\n686  2          Rpl35  0.1577167 1.981484e-02  0.02223310        0  0.35494978\n687  2         Kansl2  0.1569738 2.091460e-02  0.05000816        0  0.30446483\n688  2         Akr1b3  0.1564470 2.178729e-02  0.02625724        0  0.95812276\n689  2           Wtap  0.1550206 2.364238e-02  0.06439906        0  0.24636895\n690  2        Tmem50a  0.1546371 2.413978e-02  0.06559621        0  0.20486681\n691  2          Btbd9  0.1544556 2.417674e-02  0.06573916        0  0.16390100\n692  2         Churc1  0.1542868 2.439696e-02  0.03662217        0  0.59272102\n693  2           Stx7  0.1539892 2.490119e-02  0.06543785        0  0.15631767\n694  2          Tenm1  0.1538810 2.494024e-02  0.04295388        0  0.58258836\n695  2           Tma7  0.1530701 2.588837e-02  0.05083305        0  0.17778596\n696  2          Ncam2  0.1529851 2.588837e-02  0.03679815        0  0.55049454\n697  2          Taf13  0.1514087 2.902505e-02  0.06107067        0  0.20711175\n698  2           Cd81  0.1507769 3.033349e-02  0.06431281        0  0.14194102\n699  2          Rpl29  0.1498115 3.279706e-02  0.02823569        0  0.81233384\n700  2           Ly6h  0.1495575 3.313462e-02  0.05876261        0  0.31738241\n701  2            Pts  0.1495086 3.313462e-02  0.04900860        0  0.33479576\n702  2           Emc8  0.1490372 3.414610e-02  0.02145830        0  1.53338622\n703  2          Ntan1  0.1487883 3.452461e-02  0.06247418        0  0.14776099\n704  2          Ift46  0.1486298 3.468291e-02  0.06111452        0  0.19087506\n705  2           Rhob  0.1486157 3.468291e-02  0.05980889        0  0.24365623\n706  2         Pabpc1  0.1473271 3.784038e-02  0.05669046        0  0.12731174\n707  2           Rpn1  0.1473114 3.784038e-02  0.05347437        0  0.29685829\n708  2          Cd164  0.1470494 3.807706e-02  0.02572644        0  0.95510002\n709  2         Ndufs3  0.1469945 3.807706e-02  0.06199396        0  0.19286496\n710  2         Faap20  0.1457802 4.081354e-02  0.04470695        0  0.40722095\n711  2         Rpp25l  0.1455308 4.091578e-02  0.05788002        0  0.20533516\n712  2           Ctps  0.1453310 4.139907e-02  0.05978730        0  0.20157322\n713  2          Gstm7  0.1441749 4.457820e-02  0.04690314        0  0.27771035\n714  2          Rwdd3  0.1441006 4.465475e-02  0.05276590        0  0.19818151\n715  2         Uqcrc1  0.1423919 5.010399e-02  0.05808506        0  0.17200440\n716  2        Fdxacb1  0.1422729 5.016131e-02  0.02439125        0  0.76452548\n717  2 X1300002E11Rik  0.1422729 5.016131e-02  0.02439125        0  0.96681879\n718  2           Gdi1  0.1416790 5.222127e-02  0.05372111        0  0.12858017\n719  2            Sms  0.1415829 5.241051e-02  0.06030970        0  0.16537841\n720  2          Rgs17  0.1402121 5.763811e-02  0.03089729        0  0.60867803\n721  2         Insig1  0.1397114 5.953162e-02  0.05296462        0  0.24820691\n722  2          Nop16  0.1390225 6.191587e-02  0.04157184        0  0.36967027\n723  2          Lrrn2  0.1388287 6.233519e-02  0.02943809        0  0.59551504\n724  2         Marcks  0.1387880 6.233519e-02  0.05640741        0  0.16704611\n725  2         Supt4a  0.1385178 6.345086e-02  0.05896350        0  0.10278269\n726  2          Tusc2  0.1380995 6.509740e-02  0.05192526        0  0.30700412\n727  2        Gm17231  0.1377162 6.657474e-02  0.03238412        0  0.48697134\n728  2          Gapdh  0.1372508 6.858074e-02  0.03703071        0  0.24637523\n729  2          Hmga1  0.1370253 6.955328e-02  0.02298939        0  0.88024187\n730  2           Rprm  0.1361056 7.396247e-02  0.04625042        0  0.17727408\n731  2           Ebf1  0.1357785 7.503423e-02  0.02019824        0  0.84978663\n732  2           Dad1  0.1354086 7.638457e-02  0.05623704        0  0.09449466\n733  2          Zbed4  0.1351606 7.713798e-02  0.03762798        0  0.36013105\n734  2          Cdk16  0.1351414 7.713798e-02  0.05053858        0  0.24855976\n735  2          Snrpe  0.1345382 7.940378e-02  0.03925321        0  0.15794122\n736  2          Smim7  0.1344905 7.941072e-02  0.05728865        0  0.16480519\n737  2        Aldh1a7  0.1341357 8.105790e-02  0.01746032        0  1.51622445\n738  2           Acp1  0.1336555 8.338971e-02  0.03908270        0  0.35086645\n739  2          Gipc1  0.1330729 8.680719e-02  0.05643268        0  0.15192410\n740  2      Eef1akmt2  0.1327587 8.832132e-02  0.05561826        0  0.11416905\n741  2       Cacna2d3  0.1325827 8.917601e-02  0.02853692        0  0.63717391\n742  2         Rbmxl1  0.1325433 8.917601e-02  0.05506479        0  0.18170969\n743  2        Gm44790  0.1321837 9.040119e-02  0.03074965        0  0.52945025\n744  2          Rtn4r  0.1321604 9.040119e-02  0.01959433        0  1.14607846\n745  2         Golga7  0.1321158 9.040119e-02  0.05599355        0  0.13871035\n746  2           Arf2  0.1317292 9.204989e-02  0.04717719        0  0.21418581\n747  2          Tnpo3  0.1312581 9.444128e-02  0.05349164        0  0.18232415\n748  2        Tspan13  0.1312197 9.444128e-02  0.05049335        0  0.12403069\n749  2          Pcbp2  0.1308219 9.665266e-02  0.04858381        0  0.06080126\n750  2         Mrpl42  0.1302880 9.876728e-02  0.05481399        0  0.11762894\n751  2          Rnf11  0.1300084 9.959059e-02  0.04873118        0  0.16489141\n752  2         Coro1a  0.1297722 1.009396e-01  0.04483213        0  0.21200976\n753  2         Asnsd1  0.1296320 1.010264e-01  0.02676778        0  0.59351386\n754  2        Zmynd19  0.1295676 1.010264e-01  0.02559802        0  0.61218867\n755  2        Ndufaf1  0.1294306 1.017604e-01  0.03098756        0  0.41922942\n756  2          Copz1  0.1292179 1.027661e-01  0.05507185        0  0.06069248\n757  2          Kcnq5  0.1289381 1.046382e-01  0.04755811        0  0.21905449\n758  2           Lipa  0.1288200 1.049197e-01  0.01612692        0  1.48389373\n759  2         Lgals1  0.1287713 1.049657e-01  0.02252868        0  0.77507374\n760  2           Cycs  0.1283165 1.066594e-01  0.05246963        0  0.19111465\n761  2         Nap1l5  0.1281061 1.077066e-01  0.02465226        0  0.74166992\n762  2          Ndel1  0.1279625 1.082208e-01  0.04540788        0  0.21950820\n763  2           Emc4  0.1277865 1.090053e-01  0.05064210        0  0.18197192\n764  2        Ankrd40  0.1275889 1.095669e-01  0.01838397        0  1.04874102\n765  2          Cetn3  0.1275594 1.095669e-01  0.05099164        0  0.12402363\n766  2            Ddt  0.1274969 1.097573e-01  0.05011517        0  0.21534417\n767  2         Ube2d1  0.1274425 1.098818e-01  0.05256752        0  0.05989198\n768  2          Lztr1  0.1267036 1.154428e-01  0.03334604        0  0.35554758\n769  2          Hdhd3  0.1262039 1.187774e-01  0.01815801        0  1.03765416\n770  2          Prmt2  0.1260393 1.195454e-01  0.05175490        0  0.15842919\n771  2           Gng2  0.1257989 1.203146e-01  0.05037566        0  0.05703520\n772  2         Ccdc71  0.1257984 1.203146e-01  0.03571651        0  0.29402403\n773  2        Sult4a1  0.1256188 1.212058e-01  0.04764473        0  0.19724735\n774  2         Dazap1  0.1253540 1.219067e-01  0.04026647        0  0.07491903\n775  2         Pagr1b  0.1251957 1.226547e-01  0.04863912        0  0.09772905\n776  2          Med29  0.1250203 1.230558e-01  0.03548534        0  0.31959522\n777  2          H2afz  0.1249464 1.230558e-01  0.04457303        0  0.13517372\n778  2         Pgrmc1  0.1249274 1.230558e-01  0.05256309        0  0.12353972\n779  2          F13a1  0.1247282 1.238593e-01  0.01499172        0  1.52270746\n780  2         Rpl35a  0.1246474 1.242606e-01  0.04620116        0  0.22888981\n781  2          Jagn1  0.1246057 1.243068e-01  0.05107737        0  0.16362032\n782  2           Ugp2  0.1243442 1.263772e-01  0.03906693        0  0.26457037\n783  2          Slit1  0.1242256 1.264621e-01  0.01738447        0  1.24170259\n784  2         Akr1e1  0.1241721 1.266214e-01  0.03692784        0  0.26869253\n785  2         Zbtb18  0.1241083 1.268779e-01  0.04983106        0  0.02494936\n786  2          Skp1a  0.1236075 1.292792e-01  0.05189638        0  0.08361736\n787  2           Alg8  0.1234078 1.297591e-01  0.02716040        0  0.29004950\n788  2 X4933404O12Rik  0.1232963 1.302453e-01  0.01479343        0  1.53093894\n789  2        Gm48551  0.1232860 1.302453e-01  0.02112967        0  0.65149996\n790  2         Rwdd4a  0.1230171 1.315205e-01  0.04467482        0  0.16272864\n791  2           Gcat  0.1227221 1.336424e-01  0.01715042        0  0.90784266\n792  2          Psmg3  0.1224162 1.359546e-01  0.01467179        0  1.45761797\n793  2        Gm16973  0.1224162 1.359546e-01  0.01467179        0  1.52662646\n794  2          Trib1  0.1220832 1.375425e-01  0.01704953        0  1.12151004\n795  2          Rrp7a  0.1220344 1.376864e-01  0.04167145        0  0.27596938\n796  2           Gpi1  0.1214876 1.413714e-01  0.05022525        0  0.13377824\n797  2          Psma3  0.1213763 1.415736e-01  0.03341923        0  0.03872378\n798  2        Gm36198  0.1213158 1.418467e-01  0.01692885        0  1.12334271\n799  2          Cyb5a  0.1212564 1.421096e-01  0.04702218        0  0.14287255\n800  2         Txndc9  0.1211408 1.429497e-01  0.04804895        0  0.03272968"
  },
  {
    "objectID": "NonCT_clusters.html#cluster-432-e15.0",
    "href": "NonCT_clusters.html#cluster-432-e15.0",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Cluster 432 e15.0",
    "text": "Cluster 432 e15.0\n\n\n  OriginalCluster CellNumber COTANClusterNumber          Accuracy\n1      Cl525E15.0        826                  3 0.786585365853659\n2      Cl511E15.0        540                  2 0.916666666666667\n3      Cl184E15.0        322                  2          0.734375\n4      Cl432E13.5        536                  2  0.88785046728972\n5      Cl432E15.0        586                  2              &lt;NA&gt;\n         Clusters\n1 316 - 176 - 334\n2       143 - 397\n3        94 - 228\n4       247 - 289\n5       183 - 403\n\n\n\ncells &lt;- getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]][getClusterizationData(e15.0,clName = \"CL_original.clusters\")[[1]] == \"432\"]\n\ncells &lt;-names(cells)\n\ncl432e15.0 &lt;-  automaticCOTANObjectCreation(raw = getRawData(e15.0)[,cells],\n                                       GEO = \"Loom\",\n                                       sequencingMethod = \"10X\",\n                                       sampleCondition = \"cl432e15.0\",\n                                       cores = 10,saveObj = T,\n                                       outDir = \"Data/MouseCortexFromLoom/NotCTSingleClusters/\",\n                                       calcCoex = T)\n\n\ncl432e15.0GDI &lt;- calculateGDI(cl432e15.0)\n\nsubsetGDIcl432e15.0 &lt;- cl432e15.0GDI[cl432e15.0GDI$sum.raw.norm &gt; 5,]\ntop.GDI.genes &lt;- rownames(subsetGDIcl432e15.0[order(subsetGDIcl432e15.0$GDI,decreasing = T),])[1:25]\n\nGDIPlot(cl432e15.0,genes = list(\"topGDI\"=top.GDI.genes),GDIIn = cl432e15.0GDI)\n\n\n\n\n\nlist.cl.CT &lt;- cellsUniformClustering(cl432e15.0, GDIThreshold = 1.43, cores = 10L,\n                         saveObj = TRUE, outDir = outDir)\n\ncl432e15.0 &lt;- addClusterization(cl432e15.0, clName = \"split\",\n                              clusters = list.cl.CT$clusters,\n                              coexDF = list.cl.CT$coex, override = TRUE)\n\ntable(list.cl.CT$clusters)\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cl432e15.0, clusters = list.cl.CT$clusters,\n                            GDIThreshold = 1.43, batchSize = 4L, cores = 10L,\n                            saveObj = TRUE, outDir = outDir)\n\ncl432e15.0 &lt;- addClusterization(cl432e15.0, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\nsaveRDS(cl432e15.0,paste0(outDir,\"cl432e15.0.cotan.RDS\"))\n\n\ntable(getClusterizationData(cl432e15.0)[1])\n\nclusters\n  1   2 \n183 403 \n\n\n\ndata &lt;- getNormalizedData(cl432e15.0)\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cl432e15.0)[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)-1\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                               Slc8a1    Csrp2    Mfap4       Vim    Limch1\n10X64_3_A_1:ACGAACACCTTCGCx  0.000000  0.00000  0.00000  9.366781 10.059885\n10X73_3_A_1:TCCTATGACGTGATx 10.101591  0.00000  0.00000  0.000000  9.408485\n10X64_3_A_1:AGATTCCTACGTGTx  0.000000  0.00000 10.96361  9.865034  9.171939\n10X64_3_A_1:CAGATGACAGGAGCx  0.000000 10.61809  0.00000 10.394957  9.008755\n10X74_4_A_1:TGAGACACGTGCATx  0.000000  0.00000 11.49095  0.000000  0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx  9.267822  0.00000  0.00000  0.000000  0.000000\n                               Cadps    Pantr1   Zfp521    Frmd5   Tmem108\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000  9.366781 9.366781 0.000000  0.000000\n10X73_3_A_1:TCCTATGACGTGATx 0.000000 11.200176 0.000000 9.408485  0.000000\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000  9.171939 0.000000 9.171939  0.000000\n10X64_3_A_1:CAGATGACAGGAGCx 9.008755  0.000000 0.000000 9.701841  9.701841\n10X74_4_A_1:TGAGACACGTGCATx 0.000000  9.293808 0.000000 9.293808  0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx 9.267822  9.960922 0.000000 0.000000 10.366372\n                               Klhl29   Dusp14     Alcam CT025619.1     Fabp7\n10X64_3_A_1:ACGAACACCTTCGCx  9.366781 0.000000 10.059885   9.366781  0.000000\n10X73_3_A_1:TCCTATGACGTGATx 10.507043 0.000000  0.000000   9.408485  0.000000\n10X64_3_A_1:AGATTCCTACGTGTx  0.000000 9.865034  9.171939   9.865034  0.000000\n10X64_3_A_1:CAGATGACAGGAGCx  9.008755 9.008755 10.107286   9.008755  9.701841\n10X74_4_A_1:TGAGACACGTGCATx  9.986909 9.293808  0.000000   9.293808 10.392359\n10X64_3_A_1:TGAGCAACTTGTCTx  9.267822 0.000000 10.877185   9.267822  0.000000\n                              Ralgps2   Ctnnd2       Ptn   Ptprz1     Nfasc\n10X64_3_A_1:ACGAACACCTTCGCx  0.000000 9.366781  9.366781 0.000000 10.059885\n10X73_3_A_1:TCCTATGACGTGATx 10.101591 9.408485 10.101591 0.000000 10.507043\n10X64_3_A_1:AGATTCCTACGTGTx  0.000000 0.000000  0.000000 0.000000  0.000000\n10X64_3_A_1:CAGATGACAGGAGCx 10.107286 0.000000  0.000000 9.701841  9.008755\n10X74_4_A_1:TGAGACACGTGCATx  0.000000 0.000000  0.000000 0.000000  9.293808\n10X64_3_A_1:TGAGCAACTTGTCTx  9.267822 0.000000 10.366372 0.000000  0.000000\n                                 Hes6     Tcf12     Stmn2    Cadm1      Klf7\n10X64_3_A_1:ACGAACACCTTCGCx  0.000000  9.366781  0.000000 0.000000  9.366781\n10X73_3_A_1:TCCTATGACGTGATx 10.101591  9.408485  0.000000 0.000000 10.507043\n10X64_3_A_1:AGATTCCTACGTGTx  9.171939  9.865034  0.000000 0.000000  9.171939\n10X64_3_A_1:CAGATGACAGGAGCx  9.008755  9.008755  9.008755 0.000000  0.000000\n10X74_4_A_1:TGAGACACGTGCATx  0.000000  0.000000  0.000000 9.293808  0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx  9.960922 10.654046 10.366372 0.000000  9.960922\n                               Msmo1    Dpysl5    Sema6d Ina      Vat1     Pak7\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000  0.000000  0.000000   0 10.059885 9.366781\n10X73_3_A_1:TCCTATGACGTGATx 0.000000 10.101591  0.000000   0  0.000000 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000  0.000000  9.171939   0 10.270482 9.171939\n10X64_3_A_1:CAGATGACAGGAGCx 9.008755  0.000000 10.618095   0  9.008755 0.000000\n10X74_4_A_1:TGAGACACGTGCATx 0.000000  0.000000  0.000000   0  9.986909 9.293808\n10X64_3_A_1:TGAGCAACTTGTCTx 9.267822  9.267822 10.654046   0  9.960922 9.267822\n                                Unc5d     Sstr2     Emx1     Ptpn4     Aff2\n10X64_3_A_1:ACGAACACCTTCGCx  9.366781  9.366781 0.000000 10.059885 0.000000\n10X73_3_A_1:TCCTATGACGTGATx 11.806306 12.047466 9.408485  0.000000 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx 11.251289  0.000000 9.171939  0.000000 9.171939\n10X64_3_A_1:CAGATGACAGGAGCx  9.701841  0.000000 9.701841  0.000000 9.008755\n10X74_4_A_1:TGAGACACGTGCATx 11.239640  9.293808 9.986909  9.986909 9.986909\n10X64_3_A_1:TGAGCAACTTGTCTx 11.059503  9.267822 0.000000  0.000000 9.960922\n                               Ntrk3     Epha4    Zfpm2   Bhlhe22    Kcnq3\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000  9.366781 0.000000  0.000000 0.000000\n10X73_3_A_1:TCCTATGACGTGATx 9.408485 10.101591 0.000000  0.000000 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx 9.171939  0.000000 9.171939 10.270482 0.000000\n10X64_3_A_1:CAGATGACAGGAGCx 0.000000  0.000000 9.701841  9.008755 9.008755\n10X74_4_A_1:TGAGACACGTGCATx 0.000000  9.986909 0.000000  0.000000 0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx 0.000000  9.267822 0.000000  0.000000 0.000000\n                                 Nrp1     Fezf2    Satb2  Macrod2     Msra\n10X64_3_A_1:ACGAACACCTTCGCx 10.059885  9.366781 9.366781 0.000000 0.000000\n10X73_3_A_1:TCCTATGACGTGATx 10.101591 10.101591 9.408485 9.408485 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx  9.865034  9.171939 9.865034 9.171939 0.000000\n10X64_3_A_1:CAGATGACAGGAGCx  0.000000  0.000000 9.008755 0.000000 9.008755\n10X74_4_A_1:TGAGACACGTGCATx  9.986909  0.000000 0.000000 9.293808 0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx 10.366372 10.654046 9.960922 0.000000 0.000000\n                               Cdh13    Lrrc7     Cnr1      Sez6   Map2k6\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000 10.75301 0.000000  0.000000 0.000000\n10X73_3_A_1:TCCTATGACGTGATx 0.000000  0.00000 0.000000  0.000000 9.408485\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000  0.00000 9.171939 10.270482 0.000000\n10X64_3_A_1:CAGATGACAGGAGCx 9.008755  0.00000 9.701841  0.000000 0.000000\n10X74_4_A_1:TGAGACACGTGCATx 0.000000  0.00000 9.986909  0.000000 0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx 0.000000  0.00000 0.000000  9.267822 9.267822\n                            Runx1t1     Grik2 Mir124.2hg    Wnt7b      Tbr1\n10X64_3_A_1:ACGAACACCTTCGCx       0  9.366781   9.366781 9.366781 10.465336\n10X73_3_A_1:TCCTATGACGTGATx       0  9.408485   0.000000 0.000000  9.408485\n10X64_3_A_1:AGATTCCTACGTGTx       0 10.781293   0.000000 9.171939 10.270482\n10X64_3_A_1:CAGATGACAGGAGCx       0  0.000000   0.000000 0.000000  0.000000\n10X74_4_A_1:TGAGACACGTGCATx       0  0.000000   0.000000 0.000000  9.293808\n10X64_3_A_1:TGAGCAACTTGTCTx       0  0.000000   9.267822 9.267822  9.960922\n                             B3galt1    Kcnb2      Fat3    Kcnh7      Chl1\n10X64_3_A_1:ACGAACACCTTCGCx  0.00000 0.000000  9.366781  0.00000  0.000000\n10X73_3_A_1:TCCTATGACGTGATx 11.01786 9.408485  9.408485  0.00000 10.101591\n10X64_3_A_1:AGATTCCTACGTGTx  0.00000 9.865034 10.270482  0.00000 10.270482\n10X64_3_A_1:CAGATGACAGGAGCx 10.80041 0.000000  0.000000 10.39496  9.008755\n10X74_4_A_1:TGAGACACGTGCATx  0.00000 0.000000  9.293808 11.08549  0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx  0.00000 0.000000  9.960922  0.00000  0.000000\n                                  Pam     Ly6h     Negr1  Smarcd3     Lmo4\n10X64_3_A_1:ACGAACACCTTCGCx  0.000000 9.366781 10.059885 0.000000 0.000000\n10X73_3_A_1:TCCTATGACGTGATx 11.200176 0.000000 10.507043 9.408485 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx  9.171939 0.000000  9.171939 9.171939 0.000000\n10X64_3_A_1:CAGATGACAGGAGCx  9.701841 0.000000  0.000000 0.000000 9.008755\n10X74_4_A_1:TGAGACACGTGCATx  9.293808 0.000000  0.000000 9.986909 9.293808\n10X64_3_A_1:TGAGCAACTTGTCTx  0.000000 9.267822  0.000000 9.267822 9.267822\n                                Masp1     Dab1     Pcdh7     Robo2 Nrxn1\n10X64_3_A_1:ACGAACACCTTCGCx  9.366781 0.000000  0.000000 10.059885     0\n10X73_3_A_1:TCCTATGACGTGATx  0.000000 0.000000  9.408485 10.101591     0\n10X64_3_A_1:AGATTCCTACGTGTx 10.558155 0.000000 11.251289 11.369071     0\n10X64_3_A_1:CAGATGACAGGAGCx  9.008755 9.008755  9.701841  9.008755     0\n10X74_4_A_1:TGAGACACGTGCATx  0.000000 0.000000 10.680034  9.986909     0\n10X64_3_A_1:TGAGCAACTTGTCTx 10.366372 0.000000 10.877185 11.665632     0\n                               Hecw1    Stmn4   Galnt17      Rprm     Bach2\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000 9.366781 10.059885  0.000000  0.000000\n10X73_3_A_1:TCCTATGACGTGATx 0.000000 0.000000  9.408485  0.000000  0.000000\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000 0.000000  0.000000 10.558155  9.171939\n10X64_3_A_1:CAGATGACAGGAGCx 9.008755 9.008755  9.008755  9.701841  9.701841\n10X74_4_A_1:TGAGACACGTGCATx 0.000000 0.000000  0.000000  9.293808  0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx 9.267822 0.000000  9.267822  9.267822 10.654046\n                             Khdrbs2      Gng3    Cntn2 Tmem176b    Prkce\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000  9.366781 0.000000        0 0.000000\n10X73_3_A_1:TCCTATGACGTGATx 0.000000  9.408485 0.000000        0 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000  9.171939 0.000000        0 0.000000\n10X64_3_A_1:CAGATGACAGGAGCx 9.701841  0.000000 9.701841        0 0.000000\n10X74_4_A_1:TGAGACACGTGCATx 9.986909  0.000000 0.000000        0 0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx 0.000000 11.059503 0.000000        0 9.267822\n                                Nrn1    Pcdh9     Neo1    Ppfia2    Robo1\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000  0.00000 9.366781  0.000000  0.00000\n10X73_3_A_1:TCCTATGACGTGATx 0.000000  0.00000 0.000000  9.408485  0.00000\n10X64_3_A_1:AGATTCCTACGTGTx 9.171939  0.00000 9.171939  0.000000 10.27048\n10X64_3_A_1:CAGATGACAGGAGCx 9.701841 10.10729 9.008755  0.000000 11.40654\n10X74_4_A_1:TGAGACACGTGCATx 9.293808  0.00000 0.000000  0.000000  0.00000\n10X64_3_A_1:TGAGCAACTTGTCTx 9.960922  0.00000 9.267822 10.366372  0.00000\n                                 Cdh8    Rpl26     Ldha     Eif6      Brd3\n10X64_3_A_1:ACGAACACCTTCGCx 10.465336  0.00000 9.366781 0.000000  9.366781\n10X73_3_A_1:TCCTATGACGTGATx 10.101591 10.50704 0.000000 9.408485  0.000000\n10X64_3_A_1:AGATTCCTACGTGTx  0.000000  0.00000 0.000000 0.000000  9.865034\n10X64_3_A_1:CAGATGACAGGAGCx  9.008755  0.00000 0.000000 9.008755 10.107286\n10X74_4_A_1:TGAGACACGTGCATx  0.000000 11.08549 0.000000 0.000000  0.000000\n10X64_3_A_1:TGAGCAACTTGTCTx  9.267822  0.00000 0.000000 9.267822  9.267822\n                                Rpl39      Mdk    Pde4d   Tspan6       H13\n10X64_3_A_1:ACGAACACCTTCGCx  0.000000  0.00000 0.000000 0.000000  9.366781\n10X73_3_A_1:TCCTATGACGTGATx 10.101591  0.00000 0.000000 0.000000  0.000000\n10X64_3_A_1:AGATTCCTACGTGTx  9.171939 10.96361 9.171939 0.000000  0.000000\n10X64_3_A_1:CAGATGACAGGAGCx  9.008755 10.10729 9.008755 0.000000  9.008755\n10X74_4_A_1:TGAGACACGTGCATx  0.000000 10.90317 0.000000 9.293808 10.392359\n10X64_3_A_1:TGAGCAACTTGTCTx  9.960922  0.00000 0.000000 0.000000  0.000000\n                               Vti1b    Mbtd1     Btbd9    Rpl35a     Exoc4\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000 0.000000 10.059885  0.000000 10.059885\n10X73_3_A_1:TCCTATGACGTGATx 0.000000 0.000000  0.000000  9.408485 10.101591\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000 9.865034  9.171939  9.171939 10.270482\n10X64_3_A_1:CAGATGACAGGAGCx 9.008755 9.701841  0.000000  9.701841  0.000000\n10X74_4_A_1:TGAGACACGTGCATx 9.293808 0.000000  9.986909 10.903173  9.293808\n10X64_3_A_1:TGAGCAACTTGTCTx 9.960922 0.000000  9.267822  0.000000  0.000000\n                                Pcm1 X4930402H24Rik  Fam114a2 X4833439L19Rik\n10X64_3_A_1:ACGAACACCTTCGCx 9.366781       9.366781  0.000000      10.059885\n10X73_3_A_1:TCCTATGACGTGATx 9.408485      10.101591  0.000000      10.101591\n10X64_3_A_1:AGATTCCTACGTGTx 9.171939       9.865034 10.781293       0.000000\n10X64_3_A_1:CAGATGACAGGAGCx 9.008755       9.008755  0.000000      10.107286\n10X74_4_A_1:TGAGACACGTGCATx 9.293808       0.000000 10.903173      10.392359\n10X64_3_A_1:TGAGCAACTTGTCTx 0.000000       0.000000  9.267822       9.267822\n                               Dapk1     Srpk2      Xist     Phip Hmgcs1\n10X64_3_A_1:ACGAACACCTTCGCx 0.000000  0.000000  0.000000 0.000000      0\n10X73_3_A_1:TCCTATGACGTGATx 9.408485  0.000000 10.101591 0.000000      0\n10X64_3_A_1:AGATTCCTACGTGTx 0.000000  0.000000  0.000000 0.000000      0\n10X64_3_A_1:CAGATGACAGGAGCx 0.000000 10.107286  9.701841 0.000000      0\n10X74_4_A_1:TGAGACACGTGCATx 0.000000  9.986909 11.085491 0.000000      0\n10X64_3_A_1:TGAGCAACTTGTCTx 9.267822  9.960922 10.877185 9.267822      0\n                                Ptbp2     Sqle    Fnbp1l   Tubb2a   Mycbp2\n10X64_3_A_1:ACGAACACCTTCGCx 10.059885 0.000000  9.366781 0.000000 0.000000\n10X73_3_A_1:TCCTATGACGTGATx  0.000000 0.000000 10.507043 9.408485 0.000000\n10X64_3_A_1:AGATTCCTACGTGTx  0.000000 0.000000  9.171939 0.000000 0.000000\n10X64_3_A_1:CAGATGACAGGAGCx  0.000000 9.008755  9.008755 9.008755 9.008755\n10X74_4_A_1:TGAGACACGTGCATx  9.293808 0.000000  0.000000 0.000000 9.293808\n10X64_3_A_1:TGAGCAACTTGTCTx  9.960922 0.000000  0.000000 0.000000 0.000000\n                               Actr1a COTAN_Cl.code\n10X64_3_A_1:ACGAACACCTTCGCx  9.366781             1\n10X73_3_A_1:TCCTATGACGTGATx 10.101591             1\n10X64_3_A_1:AGATTCCTACGTGTx  9.171939             1\n10X64_3_A_1:CAGATGACAGGAGCx 10.394957             0\n10X74_4_A_1:TGAGACACGTGCATx  9.293808             1\n10X64_3_A_1:TGAGCAACTTGTCTx  0.000000             1\n\n\n\n# Fit the model\nmodel &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 50))\n# Summarize the model\nsummary(model)\n\n\nCall:\nglm(formula = COTAN_Cl.code ~ ., family = binomial, data = train.data, \n    control = list(maxit = 50))\n\nCoefficients:\n                 Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)     1.573e+02  7.814e+06       0        1\nSlc8a1          4.804e-01  2.063e+05       0        1\nCsrp2          -3.287e+00  1.447e+05       0        1\nMfap4          -1.793e+00  1.835e+05       0        1\nVim            -3.006e+00  1.589e+05       0        1\nLimch1         -3.085e-03  1.291e+05       0        1\nCadps           2.863e+00  2.156e+05       0        1\nPantr1          4.710e+00  2.827e+05       0        1\nZfp521         -5.325e+00  1.772e+05       0        1\nFrmd5          -3.632e+00  2.417e+05       0        1\nTmem108         2.732e+00  2.348e+05       0        1\nKlhl29         -5.494e+00  2.222e+05       0        1\nDusp14         -1.249e+00  1.473e+05       0        1\nAlcam          -2.015e+00  2.425e+05       0        1\nCT025619.1      8.231e+00  1.772e+05       0        1\nFabp7          -1.745e+00  2.448e+05       0        1\nRalgps2         2.226e+00  2.194e+05       0        1\nCtnnd2          4.154e+00  3.399e+05       0        1\nPtn             4.607e+00  1.755e+05       0        1\nPtprz1          6.824e+00  2.469e+05       0        1\nNfasc           8.380e+00  1.140e+05       0        1\nHes6           -1.246e+00  2.017e+05       0        1\nTcf12           6.325e+00  1.296e+05       0        1\nStmn2          -4.522e+00  1.756e+05       0        1\nCadm1           2.029e+00  2.020e+05       0        1\nKlf7           -8.964e-01  2.358e+05       0        1\nMsmo1          -2.061e+00  1.570e+05       0        1\nDpysl5          8.230e+00  2.640e+05       0        1\nSema6d         -4.444e+00  3.118e+05       0        1\nIna            -6.471e+00  1.479e+05       0        1\nVat1           -6.401e+00  2.073e+05       0        1\nPak7           -1.777e+00  2.016e+05       0        1\nUnc5d           2.817e-01  3.139e+05       0        1\nSstr2           3.451e+00  2.524e+05       0        1\nEmx1           -5.713e+00  1.388e+05       0        1\nPtpn4           7.888e-01  1.735e+05       0        1\nAff2            1.446e+00  1.996e+05       0        1\nNtrk3           2.392e+00  1.957e+05       0        1\nEpha4          -5.963e+00  1.920e+05       0        1\nZfpm2          -3.757e-01  3.791e+05       0        1\nBhlhe22         3.889e+00  2.647e+05       0        1\nKcnq3           1.011e+00  1.969e+05       0        1\nNrp1            1.005e+00  3.022e+05       0        1\nFezf2          -6.156e+00  2.532e+05       0        1\nSatb2           4.793e+00  3.066e+05       0        1\nMacrod2        -4.749e+00  1.996e+05       0        1\nMsra            2.592e+00  3.182e+05       0        1\nCdh13          -6.718e+00  1.348e+05       0        1\nLrrc7           2.129e+00  1.792e+05       0        1\nCnr1            3.053e+00  2.254e+05       0        1\nSez6           -7.922e-01  1.562e+05       0        1\nMap2k6          9.936e-01  2.202e+05       0        1\nRunx1t1         6.195e-01  2.024e+05       0        1\nGrik2          -3.919e+00  1.539e+05       0        1\nMir124.2hg     -5.815e+00  2.545e+05       0        1\nWnt7b           1.791e+00  1.867e+05       0        1\nTbr1            1.033e-02  2.256e+05       0        1\nB3galt1         5.282e+00  1.757e+05       0        1\nKcnb2           3.368e+00  2.610e+05       0        1\nFat3           -6.279e+00  2.160e+05       0        1\nKcnh7           2.959e-01  1.539e+05       0        1\nChl1           -1.565e+00  1.412e+05       0        1\nPam             2.337e+00  1.756e+05       0        1\nLy6h           -6.620e-01  1.749e+05       0        1\nNegr1           7.208e+00  2.050e+05       0        1\nSmarcd3        -3.175e+00  1.445e+05       0        1\nLmo4           -4.353e+00  1.687e+05       0        1\nMasp1          -5.664e+00  2.268e+05       0        1\nDab1           -4.233e+00  2.051e+05       0        1\nPcdh7           2.611e+00  2.047e+05       0        1\nRobo2           3.905e+00  2.501e+05       0        1\nNrxn1          -5.374e+00  2.454e+05       0        1\nHecw1          -2.908e-01  2.782e+05       0        1\nStmn4          -7.734e+00  2.075e+05       0        1\nGalnt17        -6.149e+00  1.862e+05       0        1\nRprm           -1.518e+00  2.750e+05       0        1\nBach2          -6.782e-01  2.729e+05       0        1\nKhdrbs2        -3.374e+00  2.378e+05       0        1\nGng3            3.402e+00  1.616e+05       0        1\nCntn2          -3.558e+00  1.413e+05       0        1\nTmem176b       -1.181e+00  2.196e+05       0        1\nPrkce          -2.940e+00  1.955e+05       0        1\nNrn1           -3.108e+00  1.043e+05       0        1\nPcdh9          -3.112e+00  2.147e+05       0        1\nNeo1            5.423e+00  2.422e+05       0        1\nPpfia2          4.420e+00  1.841e+05       0        1\nRobo1          -6.643e+00  2.043e+05       0        1\nCdh8           -3.935e-01  2.085e+05       0        1\nRpl26           8.416e+00  2.118e+05       0        1\nLdha            4.754e+00  2.727e+05       0        1\nEif6           -3.815e-01  2.043e+05       0        1\nBrd3           -7.198e+00  2.427e+05       0        1\nRpl39           2.730e+00  2.145e+05       0        1\nMdk            -4.621e-01  1.544e+05       0        1\nPde4d          -2.140e+00  2.544e+05       0        1\nTspan6          2.202e+00  2.037e+05       0        1\nH13             7.243e-01  1.895e+05       0        1\nVti1b          -1.997e+00  1.583e+05       0        1\nMbtd1           2.580e+00  2.496e+05       0        1\nBtbd9          -5.172e+00  1.670e+05       0        1\nRpl35a          1.032e+01  2.376e+05       0        1\nExoc4          -5.696e+00  1.755e+05       0        1\nPcm1            3.775e-01  1.483e+05       0        1\nX4930402H24Rik -3.752e-01  2.605e+05       0        1\nFam114a2        6.659e+00  3.016e+05       0        1\nX4833439L19Rik  1.542e+00  2.088e+05       0        1\nDapk1           6.275e-01  2.883e+05       0        1\nSrpk2           4.840e+00  1.966e+05       0        1\nXist            1.293e+00  1.508e+05       0        1\nPhip            3.629e-01  1.595e+05       0        1\nHmgcs1          2.396e-01  1.815e+05       0        1\nPtbp2          -1.269e+00  1.732e+05       0        1\nSqle            2.722e+00  2.331e+05       0        1\nFnbp1l          1.907e+00  1.817e+05       0        1\nTubb2a         -4.737e+00  2.114e+05       0        1\nMycbp2         -5.352e-01  1.818e+05       0        1\nActr1a          3.988e-01  1.627e+05       0        1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 5.8483e+02  on 468  degrees of freedom\nResidual deviance: 2.5092e-10  on 352  degrees of freedom\nAIC: 234\n\nNumber of Fisher Scoring iterations: 31\n\n# Make predictions\nprobabilities &lt;- model %&gt;% predict(test.data, type = \"response\")\npredicted.classes &lt;- ifelse(probabilities &gt; 0.5, \"1\", \"0\")\n# Model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\nresult.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\n\naccuracy\n\n[1] 0.8119658\n\n\nSo also in this case a logistic regression confirm the difference in cell population detected by COTAN.\n\ncl432e15.0ClsMarkers &lt;- findClustersMarkers(cl432e15.0,n = 200,method = \"BH\")\ncl432e15.0ClsMarkers\n\n    CL           Gene      Score      adjPVal          DEA IsMarker   logFoldCh\n1    1         Pantr1 -0.4890447 2.894875e-28 -0.292546159        0 -0.84149731\n2    1           Nrp1 -0.4312514 9.600943e-22 -0.212460848        0 -0.40052904\n3    1          Unc5d -0.3808743 1.161853e-16 -0.185185999        0 -0.49560563\n4    1         Rpl35a -0.3747640 3.424588e-16 -0.227479218        0 -0.87788117\n5    1          Rpl26 -0.3698511 8.105913e-16 -0.223118745        0 -0.98086311\n6    1          Robo2 -0.3536129 2.205585e-14 -0.160351197        0 -0.36839139\n7    1          Lsamp -0.3361442 6.779800e-13 -0.188574197        0 -0.86455974\n8    1          Ptprk -0.3267720 3.764810e-12 -0.194086021        0 -0.60017021\n9    1          Sstr2 -0.3153991 2.943355e-11 -0.191953115        0 -0.63584052\n10   1         Pdzrn3 -0.2976590 5.650916e-10 -0.161261601        0 -0.75461545\n11   1         Kif21a -0.2814851 7.289573e-09 -0.139762867        0 -0.25594602\n12   1          Satb2 -0.2751104 1.893202e-08 -0.165565953        0 -0.41561508\n13   1         Frmd4a -0.2733523 2.386421e-08 -0.141648494        0 -0.53044437\n14   1     CT025619.1 -0.2619635 1.334930e-07 -0.159183005        0 -0.39756649\n15   1         Pou3f2 -0.2500552 7.571899e-07 -0.116202141        0 -0.83729778\n16   1          Rai14 -0.2483394 8.975778e-07 -0.121900421        0 -0.69802855\n17   1         Pou3f3 -0.2461984 1.184808e-06 -0.128880728        0 -0.60825719\n18   1         Plxna2 -0.2407984 2.514164e-06 -0.111849116        0 -0.22277718\n19   1            Ptn -0.2332901 6.826433e-06 -0.141211303        0 -0.58584948\n20   1        Tspan14 -0.2325632 7.299975e-06 -0.140797394        0 -0.34035130\n21   1          Trim2 -0.2297333 9.819001e-06 -0.105833023        0 -0.26937091\n22   1        Dscaml1 -0.2285373 1.090475e-05 -0.113288780        0 -0.64161981\n23   1         Tagln3 -0.2243316 1.831291e-05 -0.022500292        0 -0.09746322\n24   1         Sema3c -0.2239030 1.888379e-05 -0.117563130        0 -0.60053318\n25   1       Fam114a2 -0.2218011 2.378409e-05 -0.132911960        0 -0.29090997\n26   1           Cux2 -0.2200536 2.929365e-05 -0.102470376        0 -0.77331733\n27   1          Palmd -0.2183041 3.604904e-05 -0.118084676        0 -0.44541701\n28   1        Fam171b -0.2175242 3.900672e-05 -0.122710367        0 -0.41614907\n29   1 X2600014E21Rik -0.2144625 5.688388e-05 -0.084624481        0 -0.95664283\n30   1          Uba52 -0.2108445 8.865975e-05 -0.109448109        0 -0.50255134\n31   1          Cldn3 -0.2080565 1.235892e-04 -0.100610327        0 -0.63701954\n32   1          Mllt3 -0.2051633 1.666286e-04 -0.094143558        0 -0.27300689\n33   1         Zfp608 -0.2043831 1.798846e-04 -0.123771313        0 -0.33779587\n34   1        Tmem158 -0.2021994 2.264349e-04 -0.113297841        0 -0.47753272\n35   1           Gng3 -0.1976975 3.505926e-04 -0.115343384        0 -0.26787056\n36   1         Cited2 -0.1972860 3.569463e-04 -0.090163789        0 -0.34191751\n37   1           Cdh8 -0.1946889 4.696127e-04 -0.117686995        0 -0.34911086\n38   1  A930024E05Rik -0.1899212 7.837381e-04 -0.082108300        0 -0.60572250\n39   1         Fnbp1l -0.1897223 7.897053e-04 -0.114115318        0 -0.20542271\n40   1           Tia1 -0.1894615 8.016279e-04 -0.113119838        0 -0.33716471\n41   1         Ly6g6e -0.1861085 1.160972e-03 -0.081588132        0 -0.64639289\n42   1          Nr2f1 -0.1854468 1.215502e-03 -0.107349915        0 -0.38140285\n43   1          Baz2b -0.1844240 1.326452e-03 -0.111495911        0 -0.31264397\n44   1          Negr1 -0.1837990 1.403637e-03 -0.108670219        0 -0.34683043\n45   1            F2r -0.1829733 1.498609e-03 -0.104829349        0 -0.26422018\n46   1        Plekhf2 -0.1796966 2.074109e-03 -0.097283588        0 -0.30599245\n47   1          Myt1l -0.1776090 2.510679e-03 -0.039225491        0 -0.19926017\n48   1           Nav2 -0.1763334 2.780419e-03 -0.095863504        0 -0.45117461\n49   1           Mfng -0.1759984 2.829678e-03 -0.077403172        0 -0.67499945\n50   1        Slc17a6 -0.1747960 3.168466e-03 -0.094493537        0 -0.37080224\n51   1         Pou3f1 -0.1734247 3.587055e-03 -0.075424616        0 -0.53412722\n52   1          Hdac9 -0.1721525 4.061454e-03 -0.086107152        0 -0.35361584\n53   1          Epha7 -0.1717386 4.105336e-03 -0.087650397        0 -0.40815137\n54   1         H2afy2 -0.1714365 4.148527e-03 -0.067605491        0 -0.07975479\n55   1         Lrpap1 -0.1696476 4.853194e-03 -0.093284390        0 -0.28501627\n56   1          Ccng2 -0.1691982 4.986559e-03 -0.102710748        0 -0.24200199\n57   1          Afap1 -0.1691934 4.986559e-03 -0.082292020        0 -0.37569353\n58   1            Ust -0.1680711 5.549053e-03 -0.070115585        0 -0.69496741\n59   1           Btg1 -0.1669027 6.080321e-03 -0.074126503        0 -0.49406556\n60   1         Zbtb20 -0.1659239 6.473531e-03 -0.095139759        0 -0.20301974\n61   1           Smox -0.1640572 7.619875e-03 -0.068497867        0 -0.47672727\n62   1        Gm17750 -0.1636679 7.855599e-03 -0.094966975        0 -0.33967818\n63   1         Hpcal1 -0.1633414 7.976133e-03 -0.056587216        0 -0.66333877\n64   1         Rnf146 -0.1632118 8.010500e-03 -0.098633612        0 -0.21301557\n65   1        Gramd1a -0.1627442 8.325021e-03 -0.095401411        0 -0.21225707\n66   1         Plxna4 -0.1624203 8.527171e-03 -0.068372909        0 -0.21104875\n67   1          Flrt3 -0.1622758 8.578191e-03 -0.086783823        0 -0.41370801\n68   1           Lrp8 -0.1610228 9.252307e-03 -0.092813724        0 -0.31434246\n69   1         Osbpl6 -0.1595944 1.039340e-02 -0.056784877        0 -0.81545583\n70   1         Podxl2 -0.1595327 1.039340e-02 -0.054886666        0 -0.14982664\n71   1           Cd81 -0.1581437 1.173610e-02 -0.091468027        0 -0.24511860\n72   1          Mfap3 -0.1577099 1.205985e-02 -0.093066945        0 -0.27382249\n73   1         Limch1 -0.1572844 1.233376e-02 -0.093611225        0 -0.13781314\n74   1         Shisa2 -0.1572496 1.233376e-02 -0.069014753        0 -0.47937057\n75   1       Slc38a10 -0.1570968 1.242662e-02 -0.080680886        0 -0.32418782\n76   1          Gstp1 -0.1562948 1.324154e-02 -0.069395739        0 -0.45961736\n77   1           Nrp2 -0.1558468 1.362056e-02 -0.069390115        0 -0.39148915\n78   1       Slc25a27 -0.1557814 1.362056e-02 -0.090317426        0 -0.28571362\n79   1       Cdc42ep3 -0.1551697 1.424831e-02 -0.079634779        0 -0.32679425\n80   1  E130006D01Rik -0.1546758 1.463492e-02 -0.058981103        0 -0.45547867\n81   1           Pdk2 -0.1542795 1.499741e-02 -0.047029600        0 -0.90151407\n82   1          Rlbp1 -0.1541753 1.504609e-02 -0.082341712        0 -0.30270967\n83   1 X5730522E02Rik -0.1537692 1.542355e-02 -0.088667110        0 -0.19541301\n84   1         Sncaip -0.1537081 1.542355e-02 -0.093309496        0 -0.19962335\n85   1          Nfasc -0.1532584 1.589168e-02 -0.092022628        0 -0.18781881\n86   1        Gm28175 -0.1520769 1.764987e-02 -0.054975680        0 -0.76078576\n87   1          Plcl1 -0.1518243 1.775270e-02 -0.085842996        0 -0.33067579\n88   1         Cxcl12 -0.1503772 1.958771e-02 -0.047947253        0 -0.94111517\n89   1           Wdr6 -0.1503203 1.958771e-02 -0.070087351        0 -0.33293338\n90   1         Klhl24 -0.1493773 2.088830e-02 -0.089399371        0 -0.26839011\n91   1       Arhgap12 -0.1483278 2.276309e-02 -0.069771452        0 -0.37271674\n92   1           Gpn1 -0.1476069 2.405297e-02 -0.075651257        0 -0.24170170\n93   1          Numbl -0.1446284 3.056054e-02 -0.068560040        0 -0.34085918\n94   1        Fam107b -0.1445603 3.056054e-02 -0.078989740        0 -0.28351052\n95   1         Gprc5b -0.1441445 3.103667e-02 -0.059371224        0 -0.48709797\n96   1          Stox2 -0.1440313 3.118591e-02 -0.085661525        0 -0.26427094\n97   1         Setbp1 -0.1431351 3.363053e-02 -0.060375637        0 -0.10951444\n98   1           Parg -0.1429286 3.407711e-02 -0.065174881        0 -0.36848714\n99   1           Dvl3 -0.1422247 3.534799e-02 -0.054206094        0 -0.46619277\n100  1           Nek6 -0.1419030 3.619007e-02 -0.057232001        0 -0.24825111\n101  1          Ttll1 -0.1414675 3.740797e-02 -0.079865450        0 -0.16606964\n102  1          Abcd2 -0.1413995 3.740797e-02 -0.070054335        0 -0.29049909\n103  1          Tcf12 -0.1412797 3.740797e-02 -0.085717315        0 -0.23598095\n104  1           Nrg1 -0.1412756 3.740797e-02 -0.047206644        0 -0.29416826\n105  1           Klf3 -0.1412007 3.740797e-02 -0.062324353        0 -0.42928170\n106  1 X2610008E11Rik -0.1411864 3.740797e-02 -0.061156523        0 -0.32879479\n107  1         Polr2a -0.1406936 3.812028e-02 -0.083130654        0 -0.19876763\n108  1  A330008L17Rik -0.1404679 3.869824e-02 -0.062162737        0 -0.37239250\n109  1          Ndst3 -0.1403252 3.899872e-02 -0.076505167        0 -0.20042069\n110  1          Tbpl1 -0.1401237 3.950688e-02 -0.084359706        0 -0.22806047\n111  1          Ip6k2 -0.1400137 3.969981e-02 -0.078517190        0 -0.12617003\n112  1         Sh3rf3 -0.1394742 4.123484e-02 -0.061867139        0 -0.45572059\n113  1          Ccnd2 -0.1393444 4.150962e-02 -0.072955280        0 -0.21103987\n114  1  C530008M17Rik -0.1392417 4.168752e-02 -0.084474035        0 -0.19049391\n115  1          Plcg1 -0.1390465 4.220817e-02 -0.072112108        0 -0.23165513\n116  1        Gm29260 -0.1384664 4.419996e-02 -0.046508757        0 -0.78330932\n117  1          Qser1 -0.1381314 4.515167e-02 -0.073683221        0 -0.28690721\n118  1         Topors -0.1375471 4.700587e-02 -0.068429568        0 -0.30094351\n119  1          Zfp37 -0.1372436 4.799627e-02 -0.045733108        0 -0.61492084\n120  1          Natd1 -0.1372013 4.799627e-02 -0.056655823        0 -0.39269829\n121  1          Pcdh8 -0.1370092 4.838384e-02 -0.082239582        0 -0.22350428\n122  1         Cep350 -0.1369637 4.838384e-02 -0.050460450        0 -0.63928346\n123  1          Sorl1 -0.1367149 4.894408e-02 -0.045532772        0 -0.74118788\n124  1          Btbd9 -0.1355915 5.251194e-02 -0.081814827        0 -0.22090913\n125  1           Gps1 -0.1350828 5.414623e-02 -0.046103694        0 -0.49339771\n126  1         Map3k5 -0.1345511 5.553047e-02 -0.035738040        0 -0.92608052\n127  1          Ntrk3 -0.1338422 5.830698e-02 -0.080560741        0 -0.15283526\n128  1        Phf20l1 -0.1335044 5.947378e-02 -0.060790763        0 -0.15339697\n129  1         Pex11b -0.1334869 5.947378e-02 -0.039689017        0 -0.69244300\n130  1        Tmem108 -0.1332594 6.013518e-02 -0.080997889        0 -0.22978445\n131  1        Pde4dip -0.1322990 6.390285e-02 -0.066926104        0 -0.27087086\n132  1           Fzd1 -0.1316001 6.643114e-02 -0.068929274        0 -0.24453339\n133  1         Eif4a2 -0.1312883 6.765474e-02 -0.062718612        0 -0.09821267\n134  1          Socs6 -0.1311978 6.790353e-02 -0.054757647        0 -0.38975579\n135  1         Armcx1 -0.1308210 6.904544e-02 -0.067626557        0 -0.28183870\n136  1          G6pc3 -0.1307779 6.904544e-02 -0.031413460        0 -0.19586215\n137  1         Camta1 -0.1307157 6.908005e-02 -0.076284460        0 -0.12108856\n138  1           Rere -0.1301748 7.197255e-02 -0.061481067        0 -0.13538699\n139  1     Mir124.2hg -0.1301307 7.197255e-02 -0.078972605        0 -0.26478670\n140  1         Strip1 -0.1290026 7.641202e-02 -0.073539805        0 -0.15580435\n141  1         Bnip3l -0.1289411 7.652081e-02 -0.068625785        0 -0.12977174\n142  1           Aff3 -0.1285146 7.896172e-02 -0.051045930        0 -0.16914252\n143  1           Syn2 -0.1284233 7.919070e-02 -0.069043350        0 -0.19289876\n144  1          Vgll4 -0.1283914 7.919070e-02 -0.076768454        0 -0.14079029\n145  1          Foxn3 -0.1281063 8.038168e-02 -0.073836099        0 -0.18243106\n146  1         Mad1l1 -0.1278768 8.142699e-02 -0.053060366        0 -0.27527031\n147  1            Wiz -0.1276296 8.254203e-02 -0.057538365        0 -0.35723724\n148  1          Igsf3 -0.1276228 8.254203e-02 -0.071005702        0 -0.20100324\n149  1           Irf2 -0.1275807 8.254203e-02 -0.029512481        0 -1.08177457\n150  1          Mbtd1 -0.1275065 8.275300e-02 -0.077419033        0 -0.13343296\n151  1         Rnf157 -0.1271309 8.393766e-02 -0.053670227        0 -0.23863206\n152  1        Specc1l -0.1271193 8.393766e-02 -0.059884427        0 -0.18583770\n153  1           Pld3 -0.1270453 8.415564e-02 -0.062411674        0 -0.29594908\n154  1          Upf3a -0.1265552 8.726763e-02 -0.066259082        0 -0.23381885\n155  1           Glo1 -0.1264460 8.774336e-02 -0.074071582        0 -0.20475691\n156  1           H1f0 -0.1263455 8.815997e-02 -0.050372401        0 -0.20191541\n157  1           Cux1 -0.1262861 8.828587e-02 -0.074418393        0 -0.25711921\n158  1           Gmip -0.1258509 9.022364e-02 -0.065577254        0 -0.29551338\n159  1          Arpc5 -0.1257508 9.065278e-02 -0.052916871        0 -0.07498502\n160  1         Mfap1b -0.1255641 9.141828e-02 -0.064016651        0 -0.22840670\n161  1        Slc18b1 -0.1252056 9.316802e-02 -0.033982014        0 -0.73484217\n162  1        Arhgef1 -0.1251142 9.338717e-02 -0.051625252        0 -0.38538683\n163  1         Fam84a -0.1250549 9.338717e-02 -0.047237033        0 -0.43659035\n164  1         B3glct -0.1240801 9.965818e-02 -0.055034589        0 -0.38838424\n165  1         Hivep3 -0.1236269 1.029171e-01 -0.048998958        0 -0.44720192\n166  1        Galnt10 -0.1234016 1.041775e-01 -0.037877169        0 -0.72072410\n167  1          Scaf8 -0.1232941 1.047375e-01 -0.064482157        0 -0.21964655\n168  1          Zfhx4 -0.1230894 1.054517e-01 -0.035474231        0 -0.61874350\n169  1          Pcid2 -0.1227379 1.067554e-01 -0.053409489        0 -0.31503451\n170  1         Vangl2 -0.1225551 1.079718e-01 -0.073674955        0 -0.16979799\n171  1         Zbtb8a -0.1224053 1.084800e-01 -0.040454556        0 -0.48010081\n172  1          Tshz1 -0.1223794 1.084800e-01 -0.023827613        0 -1.47368559\n173  1          Scrt2 -0.1221888 1.094536e-01 -0.070697839        0 -0.21545672\n174  1        Gm35835 -0.1221393 1.095494e-01 -0.030658632        0 -0.97733022\n175  1          Deaf1 -0.1218241 1.116207e-01 -0.054591821        0 -0.33673990\n176  1  C130071C03Rik -0.1216459 1.121844e-01 -0.051217110        0 -0.12818459\n177  1        Cbfa2t2 -0.1214183 1.132163e-01 -0.073646345        0 -0.17896173\n178  1         Appbp2 -0.1214157 1.132163e-01 -0.071096885        0 -0.18869897\n179  1         Tecpr1 -0.1209776 1.154182e-01 -0.064874453        0 -0.13802143\n180  1          Magi1 -0.1209738 1.154182e-01 -0.058147676        0 -0.31160286\n181  1          Nrxn2 -0.1204943 1.185086e-01 -0.069582729        0 -0.20543530\n182  1           Xist -0.1199682 1.218302e-01 -0.073078886        0 -0.14122851\n183  1         Slc4a4 -0.1198023 1.222365e-01 -0.026884818        0 -1.18020119\n184  1          Leng8 -0.1195863 1.239453e-01 -0.052416888        0 -0.32764235\n185  1        Smarcd3 -0.1193345 1.256736e-01 -0.071021436        0 -0.17092158\n186  1           Rem2 -0.1191781 1.261460e-01 -0.048984085        0 -0.07919203\n187  1           Psap -0.1185272 1.304555e-01 -0.071578364        0 -0.15246368\n188  1         Ambra1 -0.1183895 1.307990e-01 -0.064033305        0 -0.30996167\n189  1          Sbno1 -0.1183872 1.307990e-01 -0.069246657        0 -0.23242632\n190  1         Cnot10 -0.1177100 1.355526e-01 -0.049729202        0 -0.27827031\n191  1           Clpb -0.1176525 1.357887e-01 -0.048836163        0 -0.23580850\n192  1          Tekt2 -0.1175768 1.362146e-01 -0.033324888        0 -0.61445937\n193  1           Cdh4 -0.1175116 1.365331e-01 -0.058521376        0 -0.45895468\n194  1        Carmil3 -0.1172867 1.385212e-01 -0.058854663        0 -0.32924366\n195  1           Nono -0.1171757 1.393290e-01 -0.061696882        0 -0.09578328\n196  1        Gpr137c -0.1169755 1.407252e-01 -0.056733751        0 -0.22429899\n197  1         Ttc39c -0.1169015 1.407267e-01 -0.037880046        0 -0.44151720\n198  1          Gstm7 -0.1168731 1.407267e-01 -0.051921381        0 -0.23254394\n199  1        Adamts2 -0.1167373 1.411330e-01 -0.021875740        0 -1.49660070\n200  1          Lrp12 -0.1167155 1.411330e-01 -0.051076606        0 -0.29329307\n201  1          Cdh13  0.3110730 5.939589e-11  0.186810199        0  0.40662578\n202  1          Ncam2  0.3050682 1.626833e-10  0.115878965        0  0.90931630\n203  1          Lrfn5  0.2879535 2.847536e-09  0.100746805        0  1.02427908\n204  1          Zfpm2  0.2813513 7.289573e-09  0.137130478        0  0.61780944\n205  1           Dab1  0.2812084 7.289573e-09  0.170549889        0  0.34927222\n206  1           Cnr1  0.2627178 1.247907e-07  0.158182354        0  0.35781980\n207  1            Dcc  0.2549210 3.791117e-07  0.122646576        0  0.29425926\n208  1          Robo1  0.2491441 8.303886e-07  0.151293648        0  0.45921655\n209  1          Ackr3  0.2389217 3.175321e-06  0.116531140        0  0.42148913\n210  1        Khdrbs2  0.2316119 8.062532e-06  0.138569090        0  0.27383151\n211  1 X6530403H02Rik  0.2304474 9.178291e-06  0.062084088        0  1.25772998\n212  1          Csrp2  0.2292676 1.015619e-05  0.139482847        0  0.27972831\n213  1          Pcdh9  0.2258703 1.527741e-05  0.137402246        0  0.20380555\n214  1          Kcnh7  0.2222925 2.285055e-05  0.135054370        0  0.30928115\n215  1          Slit1  0.2066754 1.438852e-04  0.039933968        0  1.70325354\n216  1         Crabp1  0.2056742 1.596538e-04  0.083331220        0  0.62306658\n217  1        Runx1t1  0.2032429 2.030619e-04  0.119850481        0  0.34862302\n218  1          Stmn2  0.2012329 2.477052e-04  0.122539764        0  0.18179332\n219  1          Kcnq5  0.2011549 2.477052e-04  0.109173571        0  0.32708080\n220  1         Stxbp6  0.1992755 3.057527e-04  0.059618545        0  0.75136270\n221  1         Zfp521  0.1985008 3.297471e-04  0.102198529        0  0.38166292\n222  1      Hist1h2bc  0.1981588 3.375316e-04  0.090299893        0  0.39112662\n223  1        Akirin2  0.1972620 3.569463e-04  0.118766719        0  0.21132013\n224  1          Nell2  0.1949991 4.601450e-04  0.114954324        0  0.19100473\n225  1           Snca  0.1939845 5.023073e-04  0.075815544        0  0.51923438\n226  1           Ldha  0.1908844 7.117242e-04  0.112912140        0  0.27242983\n227  1          Bach2  0.1854721 1.215502e-03  0.110414987        0  0.18164411\n228  1          Pde4b  0.1847716 1.293518e-03  0.083749216        0  0.34180188\n229  1       Ppp1r14a  0.1832431 1.473783e-03  0.108679907        0  0.38810640\n230  1       Tmem178b  0.1821296 1.625153e-03  0.107117566        0  0.25380905\n231  1         Sh3gl2  0.1805569 1.910617e-03  0.060729545        0  0.47224871\n232  1          Islr2  0.1794695 2.099488e-03  0.072445951        0  0.42000871\n233  1           Gng2  0.1784371 2.322138e-03  0.103201321        0  0.18956106\n234  1            Bid  0.1774218 2.530869e-03  0.078776247        0  0.33850251\n235  1         Homer2  0.1764151 2.780419e-03  0.061849184        0  0.56883819\n236  1          Cyb5a  0.1759517 2.829678e-03  0.103597851        0  0.17521829\n237  1          Rspo3  0.1736888 3.527251e-03  0.066036886        0  0.43329107\n238  1           Zeb2  0.1719697 4.077238e-03  0.085022397        0  0.18066806\n239  1           Ly6h  0.1719065 4.077238e-03  0.103516282        0  0.29899586\n240  1         Bcl11b  0.1716207 4.112186e-03  0.074301090        0  0.17391123\n241  1          Nrxn1  0.1699733 4.788984e-03  0.103063024        0  0.27174027\n242  1           Vrk2  0.1698066 4.822710e-03  0.084762992        0  0.33284784\n243  1          Fras1  0.1679065 5.588803e-03  0.051592972        0  0.67487111\n244  1          Cnih2  0.1675685 5.731425e-03  0.092270450        0  0.14694526\n245  1          Ptpro  0.1666022 6.211385e-03  0.064592798        0  0.45206100\n246  1          Hecw1  0.1661759 6.428204e-03  0.100578299        0  0.19172045\n247  1           Ppa1  0.1660309 6.463143e-03  0.095876446        0  0.19696546\n248  1         Anp32b  0.1656183 6.617853e-03  0.094904974        0  0.27320793\n249  1          Cabp1  0.1649391 7.028966e-03  0.096456735        0  0.23989787\n250  1          Kcnt2  0.1635225 7.901098e-03  0.056530614        0  0.42635386\n251  1          Fsip1  0.1621282 8.632736e-03  0.025347628        0  1.77178577\n252  1          Stmn4  0.1617323 8.907425e-03  0.097440395        0  0.21876778\n253  1         Zfp523  0.1616095 8.942667e-03  0.051131643        0  0.55376781\n254  1         Suclg2  0.1613563 9.042957e-03  0.036165199        0  0.80077841\n255  1        Epb41l3  0.1613332 9.042957e-03  0.071488595        0  0.23232299\n256  1          Mef2c  0.1605871 9.585635e-03  0.077144997        0  0.38364037\n257  1       Tpm3.rs7  0.1602148 9.868098e-03  0.083189318        0  0.29792819\n258  1          Nyap2  0.1590424 1.082495e-02  0.075847209        0  0.27488530\n259  1         Cdkn1c  0.1578150 1.202795e-02  0.085243286        0  0.14292380\n260  1         Acvr1c  0.1575300 1.218150e-02  0.046676793        0  0.64741997\n261  1           Gar1  0.1569321 1.253535e-02  0.092281977        0  0.24752454\n262  1          Fbln1  0.1561330 1.335409e-02  0.043730995        0  0.63556916\n263  1         Eif4a1  0.1556394 1.371141e-02  0.045425574        0  0.23415259\n264  1         Minos1  0.1549754 1.435415e-02  0.082658806        0  0.14775683\n265  1         Adgrl3  0.1549483 1.435415e-02  0.087529439        0  0.18079836\n266  1           Lhx9  0.1545848 1.466272e-02  0.070586376        0  0.29921704\n267  1      Eef1akmt1  0.1539203 1.531561e-02  0.092047379        0  0.18986152\n268  1            Vim  0.1535911 1.549490e-02  0.093458085        0  0.25996583\n269  1           St18  0.1520207 1.764987e-02  0.065929752        0  0.35311259\n270  1          Dact1  0.1518387 1.775270e-02  0.040369543        0  0.62082175\n271  1         Adgrb3  0.1513578 1.843718e-02  0.089880755        0  0.22891452\n272  1          Eral1  0.1511557 1.867444e-02  0.053960054        0  0.46082656\n273  1            Ckb  0.1509270 1.896263e-02  0.077687023        0  0.28304154\n274  1         Actl6b  0.1505147 1.958771e-02  0.090081183        0  0.17000268\n275  1          Klhl2  0.1503414 1.958771e-02  0.053699094        0  0.45531881\n276  1           Pigv  0.1499422 2.017261e-02  0.031148263        0  0.84264545\n277  1         Hnrnpd  0.1496860 2.053816e-02  0.081086386        0  0.29356535\n278  1         Dnajc6  0.1494621 2.084756e-02  0.050436866        0  0.46782065\n279  1        Prkar2b  0.1491181 2.127362e-02  0.085971924        0  0.13975183\n280  1           Txn1  0.1479446 2.344912e-02  0.083806594        0  0.14740148\n281  1           Sfr1  0.1465154 2.644547e-02  0.075492496        0  0.07718316\n282  1         Hs3st4  0.1459999 2.756678e-02  0.025959830        0  1.25959295\n283  1         Tubb2a  0.1458198 2.786490e-02  0.088083793        0  0.12015183\n284  1        S100a10  0.1448898 3.016014e-02  0.037795554        0  0.64751687\n285  1          Cntn2  0.1444736 3.056054e-02  0.083040927        0  0.09129826\n286  1           Ubl3  0.1444464 3.056054e-02  0.067023240        0  0.23566933\n287  1            Mif  0.1444363 3.056054e-02  0.044160647        0  0.20528719\n288  1         Elovl6  0.1443326 3.067976e-02  0.085475974        0  0.15813349\n289  1          Prkce  0.1426564 3.473367e-02  0.082120410        0  0.24348747\n290  1      Nipsnap3b  0.1424593 3.505426e-02  0.086409506        0  0.19402567\n291  1          Rpl38  0.1424004 3.505426e-02  0.046558896        0  0.11643889\n292  1       Cacna2d3  0.1423765 3.505426e-02  0.042186733        0  0.55888419\n293  1          Alcam  0.1410563 3.756067e-02  0.083769997        0  0.08991110\n294  1           Rpa3  0.1409974 3.756067e-02  0.076924637        0  0.22008192\n295  1        Tram1l1  0.1409714 3.756067e-02  0.078698182        0  0.16585214\n296  1         Ptprz1  0.1406931 3.812028e-02  0.074547863        0  0.29636592\n297  1        Cacna1b  0.1397532 4.042736e-02  0.045025944        0  0.30493591\n298  1        Tmem218  0.1381155 4.515167e-02  0.052320833        0  0.10576665\n299  1            Nxn  0.1376153 4.694409e-02  0.035195092        0  0.66537989\n300  1           Cygb  0.1369189 4.838384e-02  0.060168341        0  0.26770619\n301  1          Reep5  0.1368996 4.838384e-02  0.077286657        0  0.19522207\n302  1         Arglu1  0.1362968 5.048090e-02  0.059277189        0  0.28123648\n303  1           Tbr1  0.1362539 5.048090e-02  0.082801303        0  0.14555638\n304  1          Arpc3  0.1361310 5.079360e-02  0.069346378        0  0.10149086\n305  1         Mrps15  0.1357194 5.218742e-02  0.081144264        0  0.15460267\n306  1         Ndufb4  0.1357144 5.218742e-02  0.081703218        0  0.14366575\n307  1           Calr  0.1354120 5.309612e-02  0.059601400        0  0.09589192\n308  1           Asph  0.1353224 5.327514e-02  0.055859457        0  0.30793014\n309  1         Lrrtm1  0.1349964 5.415595e-02  0.051039433        0  0.32261143\n310  1          Flrt2  0.1349807 5.415595e-02  0.069660288        0  0.22501870\n311  1          Kctd8  0.1346895 5.528540e-02  0.029310524        0  0.71941868\n312  1         Fam69a  0.1345387 5.553047e-02  0.061871556        0  0.26752237\n313  1        Gm28285  0.1341210 5.730072e-02  0.047379826        0  0.38993000\n314  1        Slc35c2  0.1338180 5.830698e-02  0.057466388        0  0.37495017\n315  1         Kif26a  0.1334089 5.962241e-02  0.020857568        0  1.13711538\n316  1          Surf6  0.1330057 6.118854e-02  0.041066206        0  0.43048188\n317  1       Adamts18  0.1328371 6.147825e-02  0.035697592        0  0.82482640\n318  1          Chadl  0.1328346 6.147825e-02  0.025811508        0  0.76762222\n319  1           Ntf3  0.1328061 6.147825e-02  0.016975218        0  1.70593179\n320  1         Prkab2  0.1319547 6.551514e-02  0.037535596        0  0.53453538\n321  1         Necab3  0.1317291 6.601214e-02  0.060097125        0  0.32697771\n322  1         Baiap2  0.1317249 6.601214e-02  0.042961701        0  0.45440127\n323  1 X1500009C09Rik  0.1317227 6.601214e-02  0.058940609        0  0.27071535\n324  1          Rrm2b  0.1313902 6.734353e-02  0.051512939        0  0.36155092\n325  1         Gtf3c6  0.1309263 6.904544e-02  0.077524741        0  0.16993868\n326  1       Ebna1bp2  0.1309018 6.904544e-02  0.075487829        0  0.06206457\n327  1        Galnt17  0.1307673 6.904544e-02  0.078881077        0  0.03891854\n328  1           Gcsh  0.1299318 7.289365e-02  0.058763665        0  0.26108146\n329  1       Tor1aip2  0.1296712 7.414863e-02  0.050150523        0  0.36138756\n330  1           Pnck  0.1295921 7.414863e-02  0.045063908        0  0.38449004\n331  1          Crip2  0.1295901 7.414863e-02  0.073094296        0  0.18509484\n332  1          Itsn1  0.1295298 7.424355e-02  0.077854154        0  0.15871258\n333  1         Rangrf  0.1293274 7.501257e-02  0.051675349        0  0.35745155\n334  1          Uqcrq  0.1293157 7.501257e-02  0.050039559        0  0.09356832\n335  1         Shisa6  0.1292013 7.544663e-02  0.031096522        0  0.65977024\n336  1        Gm10320  0.1283278 7.932010e-02  0.026658203        0  0.67701748\n337  1          Csmd1  0.1280783 8.038168e-02  0.054550886        0  0.33097430\n338  1          Atp5e  0.1273951 8.321669e-02  0.059356169        0  0.15881152\n339  1         Ptp4a3  0.1272700 8.357103e-02  0.049486046        0  0.40740369\n340  1        Slc43a2  0.1272578 8.357103e-02  0.043685875        0  0.34347793\n341  1        Ndufa11  0.1261849 8.871091e-02  0.063497991        0  0.15602456\n342  1          Klf13  0.1260723 8.922109e-02  0.074075445        0  0.13559483\n343  1           Hadh  0.1258581 9.022364e-02  0.041236294        0  0.42195283\n344  1           Sik3  0.1256602 9.101406e-02  0.056677810        0  0.23441919\n345  1           Lef1  0.1253144 9.296399e-02  0.057079093        0  0.30548879\n346  1        Gm10073  0.1252289 9.316802e-02  0.021677642        0  0.94470699\n347  1        Hspa12a  0.1250721 9.338717e-02  0.031501998        0  0.60885530\n348  1          Rab14  0.1250121 9.340642e-02  0.056379489        0  0.04553795\n349  1           Gpi1  0.1247699 9.476189e-02  0.067029244        0  0.17948623\n350  1           Dars  0.1247519 9.476189e-02  0.066845563        0  0.20110057\n351  1         Ptp4a1  0.1235950 1.029171e-01  0.042543746        0  0.40167526\n352  1        Anapc16  0.1231699 1.051928e-01  0.074732598        0  0.09198092\n353  1          Mcfd2  0.1231599 1.051928e-01  0.062553003        0  0.30149802\n354  1            Jun  0.1230212 1.056918e-01  0.068309898        0  0.22907929\n355  1          Cnih4  0.1228674 1.066514e-01  0.066278362        0  0.19313598\n356  1           Eps8  0.1227543 1.067554e-01  0.032179576        0  0.50629748\n357  1       Rpl9.ps6  0.1227378 1.067554e-01  0.042274953        0  0.38782156\n358  1        Stard10  0.1224993 1.081166e-01  0.018067107        0  1.18900518\n359  1         Mrps24  0.1222901 1.089140e-01  0.072971333        0  0.13388293\n360  1            Ina  0.1218720 1.115352e-01  0.069631094        0  0.20859827\n361  1        Abhd14a  0.1217543 1.118983e-01  0.044770129        0  0.19745090\n362  1         Nufip2  0.1216512 1.121844e-01  0.043764319        0  0.37782330\n363  1         Crabp2  0.1214922 1.132053e-01  0.024367189        0  0.77018328\n364  1           Grk3  0.1212291 1.145418e-01  0.022768742        0  0.77725256\n365  1            Ttr  0.1211777 1.146659e-01  0.043805644        0  0.41665535\n366  1        Carnmt1  0.1210729 1.152709e-01  0.040910627        0  0.41708915\n367  1          Fgfr1  0.1209450 1.154182e-01  0.067058791        0  0.16926316\n368  1           Bex1  0.1207409 1.169282e-01  0.071678832        0  0.21182035\n369  1            Bok  0.1205231 1.185086e-01  0.071912820        0  0.17592138\n370  1         Grin2b  0.1204163 1.188880e-01  0.037355286        0  0.49452557\n371  1         Pik3cd  0.1202277 1.199560e-01  0.017800271        0  1.00113105\n372  1          Mctp1  0.1202277 1.199560e-01  0.017800271        0  1.26372597\n373  1         Ablim1  0.1199543 1.218302e-01  0.024107366        0  0.69927844\n374  1          Nsdhl  0.1198577 1.222365e-01  0.068608716        0  0.20679825\n375  1         Cnksr2  0.1198321 1.222365e-01  0.064629204        0  0.27634946\n376  1        Gm11808  0.1193877 1.255072e-01  0.066796893        0  0.19187057\n377  1        Cacna1e  0.1192706 1.259438e-01  0.028098707        0  0.56351053\n378  1         Riiad1  0.1192020 1.261460e-01  0.026785562        0  0.52636513\n379  1           Tpmt  0.1189820 1.277104e-01  0.059110511        0  0.16596720\n380  1          Srxn1  0.1186175 1.299075e-01  0.013925703        0  1.75499785\n381  1        Gm46404  0.1186175 1.299075e-01  0.013925703        0  1.67877694\n382  1         Hrasls  0.1186175 1.299075e-01  0.013925703        0  1.76331161\n383  1        Mkln1os  0.1186175 1.299075e-01  0.013925703        0  1.68840475\n384  1         Polr2h  0.1184717 1.306566e-01  0.068624323        0  0.15472088\n385  1            Gns  0.1183232 1.310888e-01  0.041096901        0  0.30954153\n386  1          Kcnj3  0.1182259 1.317154e-01  0.054911647        0  0.22205580\n387  1          Hmgn2  0.1180982 1.323000e-01  0.052259799        0  0.28120409\n388  1           Mrrf  0.1180982 1.323000e-01  0.052259799        0  0.23589398\n389  1        Tmem258  0.1179747 1.331992e-01  0.067542528        0  0.12773835\n390  1           Pmm1  0.1170939 1.398309e-01  0.061239528        0  0.21163188\n391  1           Chd4  0.1168826 1.407267e-01  0.066943547        0  0.07997783\n392  1         Atp5g1  0.1167179 1.411330e-01  0.043462894        0  0.10572171\n393  1 X3110039M20Rik  0.1165640 1.411330e-01  0.061901834        0  0.13733148\n394  1          Pfdn6  0.1165404 1.411330e-01  0.070463905        0  0.10019316\n395  1          Pfdn4  0.1165327 1.411330e-01  0.070094762        0  0.17517078\n396  1          Tekt1  0.1165321 1.411330e-01  0.026268611        0  0.60591495\n397  1        Tmem14c  0.1164388 1.417742e-01  0.068856248        0  0.13888797\n398  1 X2310011J03Rik  0.1159056 1.457532e-01  0.049124342        0  0.24641475\n399  1        Txndc17  0.1158635 1.458537e-01  0.070189689        0  0.09890562\n400  1          Pebp1  0.1154651 1.488072e-01  0.033532857        0  0.09202716\n401  2          Cdh13 -0.3110709 5.941947e-11 -0.114524120        0 -0.40662578\n402  2          Ncam2 -0.3050617 1.628757e-10 -0.071038654        0 -0.90931630\n403  2          Lrfn5 -0.2879417 2.853308e-09 -0.061760799        0 -1.02427908\n404  2          Zfpm2 -0.2813515 7.297930e-09 -0.084068589        0 -0.61780944\n405  2           Dab1 -0.2812016 7.297930e-09 -0.104553913        0 -0.34927222\n406  2           Cnr1 -0.2627173 1.247999e-07 -0.096974294        0 -0.35781980\n407  2            Dcc -0.2549302 3.785788e-07 -0.075191794        0 -0.29425926\n408  2          Robo1 -0.2491501 8.296394e-07 -0.092753556        0 -0.45921655\n409  2          Ackr3 -0.2389131 3.179272e-06 -0.071437404        0 -0.42148913\n410  2        Khdrbs2 -0.2316178 8.055879e-06 -0.084952626        0 -0.27383151\n411  2 X6530403H02Rik -0.2304606 9.161533e-06 -0.038063124        0 -1.25772998\n412  2          Csrp2 -0.2292640 1.016134e-05 -0.085509277        0 -0.27972831\n413  2          Pcdh9 -0.2258753 1.526693e-05 -0.084236995        0 -0.20380555\n414  2          Kcnh7 -0.2222946 2.284389e-05 -0.082796551        0 -0.30928115\n415  2          Slit1 -0.2066681 1.440171e-04 -0.024480851        0 -1.70325354\n416  2         Crabp1 -0.2056705 1.597268e-04 -0.051085705        0 -0.62306658\n417  2        Runx1t1 -0.2032386 2.031699e-04 -0.073473372        0 -0.34862302\n418  2          Stmn2 -0.2012285 2.475481e-04 -0.075121973        0 -0.18179332\n419  2          Kcnq5 -0.2011601 2.475481e-04 -0.066931116        0 -0.32708080\n420  2         Stxbp6 -0.1992638 3.061868e-04 -0.036547299        0 -0.75136270\n421  2         Zfp521 -0.1985000 3.297800e-04 -0.062653049        0 -0.38166292\n422  2      Hist1h2bc -0.1981562 3.376360e-04 -0.055358077        0 -0.39112662\n423  2        Akirin2 -0.1972618 3.569523e-04 -0.072810468        0 -0.21132013\n424  2          Nell2 -0.1949992 4.601398e-04 -0.070473346        0 -0.19100473\n425  2           Snca -0.1939838 5.023520e-04 -0.046478911        0 -0.51923438\n426  2           Ldha -0.1908840 7.117551e-04 -0.069221206        0 -0.27242983\n427  2          Bach2 -0.1854646 1.215361e-03 -0.067687725        0 -0.18164411\n428  2          Pde4b -0.1847645 1.294559e-03 -0.051340894        0 -0.34180188\n429  2       Ppp1r14a -0.1832418 1.474001e-03 -0.066626273        0 -0.38810640\n430  2       Tmem178b -0.1821323 1.624663e-03 -0.065669922        0 -0.25380905\n431  2         Sh3gl2 -0.1805582 1.910347e-03 -0.037230809        0 -0.47224871\n432  2          Islr2 -0.1794622 2.101179e-03 -0.044411538        0 -0.42000871\n433  2           Gng2 -0.1784382 2.321861e-03 -0.063268462        0 -0.18956106\n434  2            Bid -0.1774215 2.530954e-03 -0.048294081        0 -0.33850251\n435  2         Homer2 -0.1764176 2.780133e-03 -0.037917476        0 -0.56883819\n436  2          Cyb5a -0.1759477 2.830912e-03 -0.063509717        0 -0.17521829\n437  2          Rspo3 -0.1736926 3.525803e-03 -0.040485131        0 -0.43329107\n438  2           Zeb2 -0.1719716 4.075744e-03 -0.052123950        0 -0.18066806\n439  2           Ly6h -0.1719100 4.075744e-03 -0.063462440        0 -0.29899586\n440  2         Bcl11b -0.1716120 4.115986e-03 -0.045548332        0 -0.17391123\n441  2          Nrxn1 -0.1699759 4.787692e-03 -0.063184248        0 -0.27174027\n442  2           Vrk2 -0.1698064 4.822783e-03 -0.051964324        0 -0.33284784\n443  2          Fras1 -0.1678979 5.593811e-03 -0.031627698        0 -0.67487111\n444  2          Cnih2 -0.1675623 5.735070e-03 -0.056564780        0 -0.14694526\n445  2          Ptpro -0.1665996 6.213052e-03 -0.039598313        0 -0.45206100\n446  2          Hecw1 -0.1661728 6.430271e-03 -0.061658860        0 -0.19172045\n447  2           Ppa1 -0.1660257 6.466618e-03 -0.058775673        0 -0.19696546\n448  2         Anp32b -0.1656241 6.613869e-03 -0.058184023        0 -0.27320793\n449  2          Cabp1 -0.1649330 7.033384e-03 -0.059131069        0 -0.23989787\n450  2          Kcnt2 -0.1635269 7.897522e-03 -0.034657317        0 -0.42635386\n451  2          Fsip1 -0.1621089 8.649508e-03 -0.015537637        0 -1.77178577\n452  2          Stmn4 -0.1617262 8.912862e-03 -0.059734066        0 -0.21876778\n453  2         Zfp523 -0.1616062 8.945611e-03 -0.031345868        0 -0.55376781\n454  2         Suclg2 -0.1613482 9.052095e-03 -0.022170137        0 -0.80077841\n455  2        Epb41l3 -0.1613231 9.052095e-03 -0.043823693        0 -0.23232299\n456  2          Mef2c -0.1605919 9.581050e-03 -0.047295532        0 -0.38364037\n457  2       Tpm3.rs7 -0.1602076 9.875170e-03 -0.050997327        0 -0.29792819\n458  2          Nyap2 -0.1590450 1.082217e-02 -0.046499262        0 -0.27488530\n459  2         Cdkn1c -0.1578097 1.203422e-02 -0.052257058        0 -0.14292380\n460  2         Acvr1c -0.1575427 1.216642e-02 -0.028617732        0 -0.64741997\n461  2           Gar1 -0.1569300 1.253798e-02 -0.056573144        0 -0.24752454\n462  2          Fbln1 -0.1561260 1.336315e-02 -0.026808302        0 -0.63556916\n463  2         Eif4a1 -0.1556512 1.369579e-02 -0.027850475        0 -0.23415259\n464  2         Minos1 -0.1549704 1.436355e-02 -0.050672768        0 -0.14775683\n465  2         Adgrl3 -0.1549416 1.436355e-02 -0.053658003        0 -0.18079836\n466  2           Lhx9 -0.1545805 1.466883e-02 -0.043272114        0 -0.29921704\n467  2      Eef1akmt1 -0.1539262 1.530703e-02 -0.056432239        0 -0.18986152\n468  2            Vim -0.1535891 1.549788e-02 -0.057294188        0 -0.25996583\n469  2           St18 -0.1520223 1.764724e-02 -0.040418976        0 -0.35311259\n470  2          Dact1 -0.1518550 1.774695e-02 -0.024751401        0 -0.62082175\n471  2         Adgrb3 -0.1513641 1.842610e-02 -0.055104153        0 -0.22891452\n472  2          Eral1 -0.1511571 1.867205e-02 -0.033080773        0 -0.46082656\n473  2            Ckb -0.1509258 1.896487e-02 -0.047626015        0 -0.28304154\n474  2         Actl6b -0.1505129 1.958625e-02 -0.055224054        0 -0.17000268\n475  2          Klhl2 -0.1503481 1.958625e-02 -0.032921969        0 -0.45531881\n476  2           Pigv -0.1499420 2.017284e-02 -0.019095580        0 -0.84264545\n477  2         Hnrnpd -0.1496822 2.054553e-02 -0.049709134        0 -0.29356535\n478  2         Dnajc6 -0.1494554 2.086055e-02 -0.030919190        0 -0.46782065\n479  2        Prkar2b -0.1491192 2.127134e-02 -0.052705915        0 -0.13975183\n480  2           Txn1 -0.1479400 2.345905e-02 -0.051376456        0 -0.14740148\n481  2           Sfr1 -0.1465219 2.642967e-02 -0.046283098        0 -0.07718316\n482  2         Hs3st4 -0.1460101 2.754086e-02 -0.015915921        0 -1.25959295\n483  2         Tubb2a -0.1458160 2.787442e-02 -0.053998819        0 -0.12015183\n484  2        S100a10 -0.1449038 3.012160e-02 -0.023172997        0 -0.64751687\n485  2          Cntn2 -0.1444695 3.057718e-02 -0.050907206        0 -0.09129826\n486  2           Ubl3 -0.1444508 3.057718e-02 -0.041090183        0 -0.23566933\n487  2            Mif -0.1444303 3.057718e-02 -0.027071777        0 -0.20528719\n488  2         Elovl6 -0.1443305 3.068547e-02 -0.052400720        0 -0.15813349\n489  2          Prkce -0.1426541 3.474080e-02 -0.050343513        0 -0.24348747\n490  2      Nipsnap3b -0.1424529 3.501460e-02 -0.052971389        0 -0.19402567\n491  2          Rpl38 -0.1423950 3.501460e-02 -0.028542081        0 -0.11643889\n492  2       Cacna2d3 -0.1423891 3.501460e-02 -0.025865079        0 -0.55888419\n493  2          Alcam -0.1410572 3.756658e-02 -0.051355947        0 -0.08991110\n494  2           Rpa3 -0.1410005 3.756658e-02 -0.047160083        0 -0.22008192\n495  2        Tram1l1 -0.1409696 3.756658e-02 -0.048245700        0 -0.16585214\n496  2         Ptprz1 -0.1406925 3.813110e-02 -0.045701713        0 -0.29636592\n497  2        Cacna1b -0.1397553 4.042016e-02 -0.027603775        0 -0.30493591\n498  2        Tmem218 -0.1381122 4.516463e-02 -0.032074779        0 -0.10576665\n499  2            Nxn -0.1376259 4.690101e-02 -0.021578179        0 -0.66537989\n500  2           Cygb -0.1369251 4.837730e-02 -0.036888149        0 -0.26770619\n501  2          Reep5 -0.1369012 4.837730e-02 -0.047381505        0 -0.19522207\n502  2         Arglu1 -0.1363014 5.045545e-02 -0.036341399        0 -0.28123648\n503  2           Tbr1 -0.1362597 5.045545e-02 -0.050763924        0 -0.14555638\n504  2          Arpc3 -0.1361260 5.081529e-02 -0.042511590        0 -0.10149086\n505  2         Mrps15 -0.1357234 5.219198e-02 -0.049747363        0 -0.15460267\n506  2         Ndufb4 -0.1357134 5.219198e-02 -0.050088183        0 -0.14366575\n507  2           Calr -0.1354155 5.308011e-02 -0.036539880        0 -0.09589192\n508  2           Asph -0.1353313 5.323434e-02 -0.034247176        0 -0.30793014\n509  2         Lrrtm1 -0.1349899 5.415880e-02 -0.031288470        0 -0.32261143\n510  2          Flrt2 -0.1349801 5.415880e-02 -0.042705387        0 -0.22501870\n511  2          Kctd8 -0.1346951 5.525860e-02 -0.017969718        0 -0.71941868\n512  2         Fam69a -0.1345321 5.556187e-02 -0.037928792        0 -0.26752237\n513  2        Gm28285 -0.1341278 5.726779e-02 -0.029047898        0 -0.38993000\n514  2        Slc35c2 -0.1338216 5.828911e-02 -0.035231001        0 -0.37495017\n515  2         Kif26a -0.1333896 5.971991e-02 -0.012784984        0 -1.13711538\n516  2          Surf6 -0.1330134 6.114868e-02 -0.025177300        0 -0.43048188\n517  2       Adamts18 -0.1328480 6.146414e-02 -0.021886385        0 -0.82482640\n518  2          Chadl -0.1328295 6.146414e-02 -0.015823262        0 -0.76762222\n519  2           Ntf3 -0.1328088 6.146414e-02 -0.010406954        0 -1.70593179\n520  2         Prkab2 -0.1319574 6.549993e-02 -0.023011864        0 -0.53453538\n521  2 X1500009C09Rik -0.1317313 6.599764e-02 -0.036136189        0 -0.27071535\n522  2         Necab3 -0.1317286 6.599764e-02 -0.036842704        0 -0.32697771\n523  2         Baiap2 -0.1317253 6.599764e-02 -0.026337961        0 -0.45440127\n524  2          Rrm2b -0.1313932 6.732669e-02 -0.031580980        0 -0.36155092\n525  2         Gtf3c6 -0.1309277 6.907768e-02 -0.047527413        0 -0.16993868\n526  2       Ebna1bp2 -0.1308953 6.907768e-02 -0.046275909        0 -0.06206457\n527  2        Galnt17 -0.1307617 6.907768e-02 -0.048356356        0 -0.03891854\n528  2           Gcsh -0.1299263 7.292710e-02 -0.036023816        0 -0.26108146\n529  2       Tor1aip2 -0.1296755 7.417734e-02 -0.030746037        0 -0.36138756\n530  2           Pnck -0.1295925 7.418447e-02 -0.027626735        0 -0.38449004\n531  2          Crip2 -0.1295843 7.418447e-02 -0.044808793        0 -0.18509484\n532  2          Itsn1 -0.1295259 7.426748e-02 -0.047727433        0 -0.15871258\n533  2         Rangrf -0.1293282 7.495293e-02 -0.031680023        0 -0.35745155\n534  2          Uqcrq -0.1293254 7.495293e-02 -0.030679286        0 -0.09356832\n535  2         Shisa6 -0.1292052 7.542282e-02 -0.019064441        0 -0.65977024\n536  2        Gm10320 -0.1283277 7.932091e-02 -0.016342926        0 -0.67701748\n537  2          Csmd1 -0.1280881 8.031710e-02 -0.033445255        0 -0.33097430\n538  2          Atp5e -0.1274040 8.315692e-02 -0.036391113        0 -0.15881152\n539  2        Slc43a2 -0.1272662 8.356398e-02 -0.026783603        0 -0.34347793\n540  2         Ptp4a3 -0.1272588 8.356398e-02 -0.030334996        0 -0.40740369\n541  2        Ndufa11 -0.1261791 8.875261e-02 -0.038925958        0 -0.15602456\n542  2          Klf13 -0.1260763 8.919254e-02 -0.045413744        0 -0.13559483\n543  2           Hadh -0.1258538 9.024808e-02 -0.025279243        0 -0.42195283\n544  2           Sik3 -0.1256679 9.095815e-02 -0.034748723        0 -0.23441919\n545  2           Lef1 -0.1253081 9.301144e-02 -0.034990842        0 -0.30548879\n546  2        Gm10073 -0.1252269 9.324596e-02 -0.013289373        0 -0.94470699\n547  2        Hspa12a -0.1250700 9.335750e-02 -0.019312123        0 -0.60885530\n548  2          Rab14 -0.1250048 9.346119e-02 -0.034561698        0 -0.04553795\n549  2           Gpi1 -0.1247697 9.480188e-02 -0.041092559        0 -0.17948623\n550  2           Dars -0.1247466 9.480188e-02 -0.040978266        0 -0.20110057\n551  2         Ptp4a1 -0.1235996 1.028796e-01 -0.026082622        0 -0.40167526\n552  2        Anapc16 -0.1231633 1.051983e-01 -0.045812716        0 -0.09198092\n553  2          Mcfd2 -0.1231593 1.051983e-01 -0.038348223        0 -0.30149802\n554  2            Jun -0.1230286 1.056303e-01 -0.041880226        0 -0.22907929\n555  2          Cnih4 -0.1228685 1.066422e-01 -0.040632634        0 -0.19313598\n556  2       Rpl9.ps6 -0.1227476 1.067744e-01 -0.025918937        0 -0.38782156\n557  2           Eps8 -0.1227377 1.067744e-01 -0.019725176        0 -0.50629748\n558  2        Stard10 -0.1225022 1.080918e-01 -0.011076392        0 -1.18900518\n559  2         Mrps24 -0.1222861 1.089484e-01 -0.044733965        0 -0.13388293\n560  2            Ina -0.1218694 1.115585e-01 -0.042686749        0 -0.20859827\n561  2        Abhd14a -0.1217468 1.119645e-01 -0.027444846        0 -0.19745090\n562  2         Nufip2 -0.1216631 1.121092e-01 -0.026832551        0 -0.37782330\n563  2         Crabp2 -0.1214939 1.131905e-01 -0.014938631        0 -0.77018328\n564  2           Grk3 -0.1212446 1.144029e-01 -0.013960279        0 -0.77725256\n565  2            Ttr -0.1211745 1.146947e-01 -0.026854551        0 -0.41665535\n566  2        Carnmt1 -0.1210689 1.153069e-01 -0.025079631        0 -0.41708915\n567  2          Fgfr1 -0.1209430 1.154364e-01 -0.041110031        0 -0.16926316\n568  2           Bex1 -0.1207406 1.169311e-01 -0.043942944        0 -0.21182035\n569  2            Bok -0.1205292 1.185251e-01 -0.044088735        0 -0.17592138\n570  2         Grin2b -0.1204129 1.189200e-01 -0.022900182        0 -0.49452557\n571  2         Pik3cd -0.1202010 1.202044e-01 -0.010910120        0 -1.00113105\n572  2          Mctp1 -0.1202010 1.202044e-01 -0.010910120        0 -1.26372597\n573  2         Ablim1 -0.1199486 1.218843e-01 -0.014778431        0 -0.69927844\n574  2          Nsdhl -0.1198589 1.222323e-01 -0.042061320        0 -0.20679825\n575  2         Cnksr2 -0.1198390 1.222323e-01 -0.039623519        0 -0.27634946\n576  2        Gm11808 -0.1193905 1.254806e-01 -0.040951108        0 -0.19187057\n577  2        Cacna1e -0.1192777 1.258751e-01 -0.017227073        0 -0.56351053\n578  2         Riiad1 -0.1191930 1.261098e-01 -0.016419782        0 -0.52636513\n579  2           Tpmt -0.1189891 1.276413e-01 -0.036240135        0 -0.16596720\n580  2          Srxn1 -0.1186189 1.298929e-01 -0.008537326        0 -1.75499785\n581  2        Gm46404 -0.1186189 1.298929e-01 -0.008537326        0 -1.67877694\n582  2         Hrasls -0.1186189 1.298929e-01 -0.008537326        0 -1.76331161\n583  2        Mkln1os -0.1186189 1.298929e-01 -0.008537326        0 -1.68840475\n584  2         Polr2h -0.1184716 1.306581e-01 -0.042070428        0 -0.15472088\n585  2            Gns -0.1183346 1.309752e-01 -0.025197073        0 -0.30954153\n586  2          Kcnj3 -0.1182231 1.317434e-01 -0.033663062        0 -0.22205580\n587  2          Hmgn2 -0.1181019 1.322623e-01 -0.032039140        0 -0.28120409\n588  2           Mrrf -0.1181019 1.322623e-01 -0.032039140        0 -0.23589398\n589  2        Tmem258 -0.1179760 1.331857e-01 -0.041407745        0 -0.12773835\n590  2           Pmm1 -0.1170998 1.397691e-01 -0.037545063        0 -0.21163188\n591  2           Chd4 -0.1168811 1.406691e-01 -0.041039542        0 -0.07997783\n592  2         Atp5g1 -0.1167241 1.411799e-01 -0.026646573        0 -0.10572171\n593  2 X3110039M20Rik -0.1165659 1.411799e-01 -0.037949838        0 -0.13733148\n594  2          Pfdn6 -0.1165415 1.411799e-01 -0.043198645        0 -0.10019316\n595  2          Pfdn4 -0.1165317 1.411799e-01 -0.042971560        0 -0.17517078\n596  2          Tekt1 -0.1165277 1.411799e-01 -0.016103492        0 -0.60591495\n597  2        Tmem14c -0.1164406 1.417543e-01 -0.042213336        0 -0.13888797\n598  2 X2310011J03Rik -0.1159067 1.457410e-01 -0.030116207        0 -0.24641475\n599  2        Txndc17 -0.1158607 1.458842e-01 -0.043029097        0 -0.09890562\n600  2          Pebp1 -0.1154718 1.487321e-01 -0.020558683        0 -0.09202716\n601  2         Pantr1  0.4890395 2.899274e-28  0.179344928        0  0.84149731\n602  2           Nrp1  0.4312523 9.598876e-22  0.130250420        0  0.40052904\n603  2          Unc5d  0.3808813 1.160027e-16  0.113531263        0  0.49560563\n604  2         Rpl35a  0.3747710 3.419280e-16  0.139459848        0  0.87788117\n605  2          Rpl26  0.3698442 8.118140e-16  0.136781500        0  0.98086311\n606  2          Robo2  0.3536178 2.203287e-14  0.098305468        0  0.36839139\n607  2          Lsamp  0.3361440 6.780115e-13  0.115606256        0  0.86455974\n608  2          Ptprk  0.3267757 3.762113e-12  0.118986729        0  0.60017021\n609  2          Sstr2  0.3153920 2.947266e-11  0.117675162        0  0.63584052\n610  2         Pdzrn3  0.2976577 5.652285e-10  0.098861763        0  0.75461545\n611  2         Kif21a  0.2814929 7.297930e-09  0.085684678        0  0.25594602\n612  2          Satb2  0.2751037 1.895301e-08  0.101498536        0  0.41561508\n613  2         Frmd4a  0.2733560 2.384966e-08  0.086839487        0  0.53044437\n614  2     CT025619.1  0.2619625 1.335141e-07  0.097587547        0  0.39756649\n615  2         Pou3f2  0.2500539 7.573380e-07  0.071237922        0  0.83729778\n616  2          Rai14  0.2483397 8.975432e-07  0.074731729        0  0.69802855\n617  2         Pou3f3  0.2462009 1.184370e-06  0.079011764        0  0.60825719\n618  2         Plxna2  0.2407982 2.514265e-06  0.068569571        0  0.22277718\n619  2            Ptn  0.2332918 6.824769e-06  0.086570924        0  0.58584948\n620  2        Tspan14  0.2325684 7.294651e-06  0.086318462        0  0.34035130\n621  2          Trim2  0.2297328 9.819665e-06  0.064881316        0  0.26937091\n622  2        Dscaml1  0.2285349 1.090848e-05  0.069451490        0  0.64161981\n623  2         Tagln3  0.2243262 1.832629e-05  0.013793583        0  0.09746322\n624  2         Sema3c  0.2238978 1.889685e-05  0.072071010        0  0.60053318\n625  2       Fam114a2  0.2218078 2.376285e-05  0.081484773        0  0.29090997\n626  2           Cux2  0.2200492 2.931068e-05  0.062818722        0  0.77331733\n627  2          Palmd  0.2183012 3.606273e-05  0.072391438        0  0.44541701\n628  2        Fam171b  0.2175229 3.901321e-05  0.075227756        0  0.41614907\n629  2 X2600014E21Rik  0.2144541 5.694591e-05  0.051877426        0  0.95664283\n630  2          Uba52  0.2108387 8.872542e-05  0.067095859        0  0.50255134\n631  2          Cldn3  0.2080565 1.235890e-04  0.061679658        0  0.63701954\n632  2          Mllt3  0.2051555 1.667912e-04  0.057712971        0  0.27300689\n633  2         Zfp608  0.2043812 1.799281e-04  0.075877889        0  0.33779587\n634  2        Tmem158  0.2022005 2.264047e-04  0.069458169        0  0.47753272\n635  2           Gng3  0.1976952 3.506914e-04  0.070710991        0  0.26787056\n636  2         Cited2  0.1972861 3.569523e-04  0.055275374        0  0.34191751\n637  2           Cdh8  0.1946946 4.692943e-04  0.072150704        0  0.34911086\n638  2  A930024E05Rik  0.1899290 7.830310e-04  0.050338956        0  0.60572250\n639  2         Fnbp1l  0.1897204 7.898813e-04  0.069958247        0  0.20542271\n640  2           Tia1  0.1894590 8.018605e-04  0.069347755        0  0.33716471\n641  2         Ly6g6e  0.1861057 1.161346e-03  0.050017245        0  0.64639289\n642  2          Nr2f1  0.1854478 1.215361e-03  0.065811755        0  0.38140285\n643  2          Baz2b  0.1844228 1.326624e-03  0.068352692        0  0.31264397\n644  2          Negr1  0.1837990 1.403635e-03  0.066620817        0  0.34683043\n645  2            F2r  0.1829669 1.499684e-03  0.064263901        0  0.26422018\n646  2        Plekhf2  0.1796933 2.074867e-03  0.059639082        0  0.30599245\n647  2          Myt1l  0.1776058 2.511547e-03  0.024046951        0  0.19926017\n648  2           Nav2  0.1763343 2.780133e-03  0.058769908        0  0.45117461\n649  2           Mfng  0.1759983 2.830912e-03  0.047452374        0  0.67499945\n650  2        Slc17a6  0.1747901 3.170473e-03  0.057927776        0  0.37080224\n651  2         Pou3f1  0.1734201 3.588821e-03  0.046238203        0  0.53412722\n652  2          Hdac9  0.1721535 4.061044e-03  0.052788704        0  0.35361584\n653  2          Epha7  0.1717346 4.107061e-03  0.053733265        0  0.40815137\n654  2         H2afy2  0.1714346 4.149369e-03  0.041445414        0  0.07975479\n655  2         Lrpap1  0.1696464 4.853782e-03  0.057188062        0  0.28501627\n656  2          Ccng2  0.1691943 4.989709e-03  0.062965869        0  0.24200199\n657  2          Afap1  0.1691874 4.989709e-03  0.050447725        0  0.37569353\n658  2            Ust  0.1680790 5.544513e-03  0.042986718        0  0.69496741\n659  2           Btg1  0.1668981 6.083192e-03  0.045442371        0  0.49406556\n660  2         Zbtb20  0.1659245 6.473109e-03  0.058326119        0  0.20301974\n661  2           Smox  0.1640522 7.623748e-03  0.041991673        0  0.47672727\n662  2        Gm17750  0.1636726 7.851901e-03  0.058221621        0  0.33967818\n663  2         Hpcal1  0.1633417 7.975881e-03  0.034691136        0  0.66333877\n664  2         Rnf146  0.1632136 8.009069e-03  0.060468474        0  0.21301557\n665  2        Gramd1a  0.1627440 8.325220e-03  0.058486217        0  0.21225707\n666  2         Plxna4  0.1624268 8.521566e-03  0.041918032        0  0.21104875\n667  2          Flrt3  0.1622817 8.573077e-03  0.053205191        0  0.41370801\n668  2           Lrp8  0.1610283 9.247256e-03  0.056901839        0  0.31434246\n669  2         Osbpl6  0.1595896 1.038510e-02  0.034811197        0  0.81545583\n670  2         Podxl2  0.1595407 1.038510e-02  0.033650239        0  0.14982664\n671  2           Cd81  0.1581403 1.174000e-02  0.056073723        0  0.24511860\n672  2          Mfap3  0.1577026 1.206858e-02  0.057052479        0  0.27382249\n673  2         Limch1  0.1572842 1.233145e-02  0.057388758        0  0.13781314\n674  2         Shisa2  0.1572515 1.233145e-02  0.042310347        0  0.47937057\n675  2       Slc38a10  0.1570997 1.242315e-02  0.049462712        0  0.32418782\n676  2          Gstp1  0.1562951 1.324115e-02  0.042543481        0  0.45961736\n677  2           Nrp2  0.1558466 1.361989e-02  0.042539896        0  0.39148915\n678  2       Slc25a27  0.1557819 1.361989e-02  0.055369722        0  0.28571362\n679  2       Cdc42ep3  0.1551708 1.424677e-02  0.048820844        0  0.32679425\n680  2  E130006D01Rik  0.1546725 1.463959e-02  0.036157881        0  0.45547867\n681  2           Pdk2  0.1542899 1.498233e-02  0.028833682        0  0.90151407\n682  2          Rlbp1  0.1541739 1.504802e-02  0.050479552        0  0.30270967\n683  2 X5730522E02Rik  0.1537753 1.541294e-02  0.054359975        0  0.19541301\n684  2         Sncaip  0.1537153 1.541294e-02  0.057206515        0  0.19962335\n685  2          Nfasc  0.1532514 1.590225e-02  0.056412364        0  0.18781881\n686  2        Gm28175  0.1520802 1.764724e-02  0.033703824        0  0.76078576\n687  2          Plcl1  0.1518278 1.774695e-02  0.052627654        0  0.33067579\n688  2         Cxcl12  0.1503857 1.958625e-02  0.029395966        0  0.94111517\n689  2           Wdr6  0.1503211 1.958625e-02  0.042967620        0  0.33293338\n690  2         Klhl24  0.1493783 2.088646e-02  0.054807067        0  0.26839011\n691  2       Arhgap12  0.1483189 2.278198e-02  0.042771156        0  0.37271674\n692  2           Gpn1  0.1476115 2.404288e-02  0.046379799        0  0.24170170\n693  2          Numbl  0.1446194 3.057718e-02  0.042028452        0  0.34085918\n694  2        Fam107b  0.1445608 3.057718e-02  0.048425212        0  0.28351052\n695  2         Gprc5b  0.1441533 3.101193e-02  0.036400043        0  0.48709797\n696  2          Stox2  0.1440328 3.118161e-02  0.052515774        0  0.26427094\n697  2         Setbp1  0.1431268 3.365568e-02  0.037011432        0  0.10951444\n698  2           Parg  0.1429378 3.404895e-02  0.039958351        0  0.36848714\n699  2           Dvl3  0.1422221 3.535622e-02  0.033230704        0  0.46619277\n700  2           Nek6  0.1419113 3.616308e-02  0.035088423        0  0.24825111\n701  2          Ttll1  0.1414659 3.741327e-02  0.048961365        0  0.16606964\n702  2          Abcd2  0.1414078 3.741327e-02  0.042949652        0  0.29049909\n703  2           Nrg1  0.1412799 3.741327e-02  0.028941143        0  0.29416826\n704  2          Tcf12  0.1412732 3.741327e-02  0.052547003        0  0.23598095\n705  2           Klf3  0.1411968 3.741327e-02  0.038207194        0  0.42928170\n706  2 X2610008E11Rik  0.1411848 3.741327e-02  0.037491883        0  0.32879479\n707  2         Polr2a  0.1406899 3.813110e-02  0.050962327        0  0.19876763\n708  2  A330008L17Rik  0.1404649 3.870829e-02  0.038108375        0  0.37239250\n709  2          Ndst3  0.1403214 3.901198e-02  0.046900584        0  0.20042069\n710  2          Tbpl1  0.1401223 3.951177e-02  0.051716614        0  0.22806047\n711  2          Ip6k2  0.1400082 3.971932e-02  0.048133435        0  0.12617003\n712  2         Sh3rf3  0.1394833 4.120196e-02  0.037930418        0  0.45572059\n713  2          Ccnd2  0.1393415 4.152036e-02  0.044724648        0  0.21103987\n714  2  C530008M17Rik  0.1392359 4.170906e-02  0.051785035        0  0.19049391\n715  2          Plcg1  0.1390541 4.218016e-02  0.044211086        0  0.23165513\n716  2        Gm29260  0.1384705 4.418409e-02  0.028513267        0  0.78330932\n717  2          Qser1  0.1381289 4.516463e-02  0.045171049        0  0.28690721\n718  2         Topors  0.1375499 4.699438e-02  0.041951940        0  0.30094351\n719  2          Zfp37  0.1372382 4.798110e-02  0.028035804        0  0.61492084\n720  2          Natd1  0.1372049 4.798110e-02  0.034734053        0  0.39269829\n721  2          Pcdh8  0.1370024 4.837730e-02  0.050414875        0  0.22350428\n722  2         Cep350  0.1369663 4.837730e-02  0.030935609        0  0.63928346\n723  2          Sorl1  0.1367190 4.892667e-02  0.027914929        0  0.74118788\n724  2          Btbd9  0.1355848 5.254211e-02  0.050154506        0  0.22090913\n725  2           Gps1  0.1350909 5.410851e-02  0.028265800        0  0.49339771\n726  2         Map3k5  0.1345522 5.556187e-02  0.021909570        0  0.92608052\n727  2          Ntrk3  0.1338477 5.828911e-02  0.049390197        0  0.15283526\n728  2        Phf20l1  0.1335116 5.941732e-02  0.037270098        0  0.15339697\n729  2         Pex11b  0.1334981 5.941732e-02  0.024333590        0  0.69244300\n730  2        Tmem108  0.1332548 6.015864e-02  0.049654435        0  0.22978445\n731  2        Pde4dip  0.1323023 6.388524e-02  0.041030393        0  0.27087086\n732  2           Fzd1  0.1315958 6.645541e-02  0.042256027        0  0.24453339\n733  2         Eif4a2  0.1312803 6.769999e-02  0.038447608        0  0.09821267\n734  2          Socs6  0.1312079 6.784618e-02  0.033572035        0  0.38975579\n735  2         Armcx1  0.1308279 6.907768e-02  0.041460976        0  0.28183870\n736  2          G6pc3  0.1307927 6.907768e-02  0.019260355        0  0.19586215\n737  2         Camta1  0.1307130 6.909532e-02  0.046765612        0  0.12108856\n738  2           Rere  0.1301732 7.195694e-02  0.037690807        0  0.13538699\n739  2     Mir124.2hg  0.1301333 7.195694e-02  0.048415516        0  0.26478670\n740  2         Strip1  0.1290017 7.641755e-02  0.045083630        0  0.15580435\n741  2         Bnip3l  0.1289375 7.654382e-02  0.042070181        0  0.12977174\n742  2           Aff3  0.1285148 7.896035e-02  0.031294009        0  0.16914252\n743  2           Syn2  0.1284260 7.919364e-02  0.042328284        0  0.19289876\n744  2          Vgll4  0.1283910 7.919364e-02  0.047063111        0  0.14079029\n745  2          Foxn3  0.1281048 8.031710e-02  0.045265055        0  0.18243106\n746  2         Mad1l1  0.1278740 8.144585e-02  0.032528196        0  0.27527031\n747  2            Wiz  0.1276334 8.252882e-02  0.035275208        0  0.35723724\n748  2          Igsf3  0.1276257 8.252882e-02  0.043531355        0  0.20100324\n749  2           Irf2  0.1275806 8.254239e-02  0.018092764        0  1.08177457\n750  2          Mbtd1  0.1274994 8.280117e-02  0.047459457        0  0.13343296\n751  2         Rnf157  0.1271242 8.396333e-02  0.032901080        0  0.23863206\n752  2        Specc1l  0.1271156 8.396333e-02  0.036711354        0  0.18583770\n753  2           Pld3  0.1270465 8.414699e-02  0.038262164        0  0.29594908\n754  2          Upf3a  0.1265476 8.732132e-02  0.040618015        0  0.23381885\n755  2           Glo1  0.1264480 8.772865e-02  0.045410691        0  0.20475691\n756  2           H1f0  0.1263445 8.816704e-02  0.030880805        0  0.20191541\n757  2           Cux1  0.1262809 8.832284e-02  0.045620688        0  0.25711921\n758  2           Gmip  0.1258476 9.024808e-02  0.040201383        0  0.29551338\n759  2          Arpc5  0.1257520 9.064367e-02  0.032441270        0  0.07498502\n760  2         Mfap1b  0.1255651 9.141119e-02  0.039246024        0  0.22840670\n761  2        Slc18b1  0.1251952 9.324596e-02  0.020831105        0  0.73484217\n762  2        Arhgef1  0.1251137 9.335750e-02  0.031649010        0  0.38538683\n763  2         Fam84a  0.1250589 9.335750e-02  0.028959814        0  0.43659035\n764  2         B3glct  0.1240738 9.970803e-02  0.033737515        0  0.38838424\n765  2         Hivep3  0.1236310 1.028796e-01  0.030040054        0  0.44720192\n766  2        Galnt10  0.1233935 1.042440e-01  0.023219267        0  0.72072410\n767  2          Scaf8  0.1232882 1.047858e-01  0.039529233        0  0.21964655\n768  2          Zfhx4  0.1230906 1.054414e-01  0.021747870        0  0.61874350\n769  2          Pcid2  0.1227356 1.067744e-01  0.032742331        0  0.31503451\n770  2         Vangl2  0.1225613 1.079194e-01  0.045169063        0  0.16979799\n771  2         Zbtb8a  0.1224061 1.083592e-01  0.024801022        0  0.48010081\n772  2          Tshz1  0.1223936 1.083592e-01  0.014609326        0  1.47368559\n773  2          Scrt2  0.1221920 1.094258e-01  0.043342803        0  0.21545672\n774  2        Gm35835  0.1221265 1.096601e-01  0.018793445        0  0.97733022\n775  2          Deaf1  0.1218178 1.116761e-01  0.033466043        0  0.33673990\n776  2  C130071C03Rik  0.1216544 1.121092e-01  0.031401112        0  0.12818459\n777  2         Appbp2  0.1214144 1.132293e-01  0.043585828        0  0.18869897\n778  2        Cbfa2t2  0.1214142 1.132293e-01  0.045147729        0  0.17896173\n779  2         Tecpr1  0.1209788 1.154364e-01  0.039771973        0  0.13802143\n780  2          Magi1  0.1209649 1.154364e-01  0.035645086        0  0.31160286\n781  2          Nrxn2  0.1204925 1.185251e-01  0.042657398        0  0.20543530\n782  2           Xist  0.1199717 1.218843e-01  0.044802688        0  0.14122851\n783  2         Slc4a4  0.1197972 1.222853e-01  0.016481158        0  1.18020119\n784  2          Leng8  0.1195839 1.239683e-01  0.032133785        0  0.32764235\n785  2        Smarcd3  0.1193313 1.257040e-01  0.043538892        0  0.17092158\n786  2           Rem2  0.1191819 1.261098e-01  0.030030873        0  0.07919203\n787  2           Psap  0.1185309 1.304184e-01  0.043882841        0  0.15246368\n788  2         Ambra1  0.1183892 1.308434e-01  0.039255848        0  0.30996167\n789  2          Sbno1  0.1183828 1.308434e-01  0.042450411        0  0.23242632\n790  2         Cnot10  0.1177046 1.356083e-01  0.030485332        0  0.27827031\n791  2           Clpb  0.1176509 1.358051e-01  0.029938844        0  0.23580850\n792  2          Tekt2  0.1175747 1.362358e-01  0.020429631        0  0.61445937\n793  2           Cdh4  0.1175203 1.364427e-01  0.035879478        0  0.45895468\n794  2        Carmil3  0.1172904 1.384824e-01  0.036082277        0  0.32924366\n795  2           Nono  0.1171745 1.393419e-01  0.037823181        0  0.09578328\n796  2        Gpr137c  0.1169729 1.406691e-01  0.034780146        0  0.22429899\n797  2         Ttc39c  0.1169048 1.406691e-01  0.023223210        0  0.44151720\n798  2          Gstm7  0.1168785 1.406691e-01  0.031832130        0  0.23254394\n799  2        Adamts2  0.1167363 1.411799e-01  0.013410913        0  1.49660070\n800  2          Lrp12  0.1167197 1.411799e-01  0.031313889        0  0.29329307"
  },
  {
    "objectID": "NonCT_clusters.html#cluster-186-e13.5",
    "href": "NonCT_clusters.html#cluster-186-e13.5",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Cluster 186 e13.5",
    "text": "Cluster 186 e13.5\n\n\n  OriginalCluster CellNumber COTANClusterNumber          Accuracy\n1      Cl525E15.0        826                  3 0.786585365853659\n2      Cl511E15.0        540                  2 0.916666666666667\n3      Cl184E15.0        322                  2          0.734375\n4      Cl432E13.5        536                  2  0.88785046728972\n5      Cl432E15.0        586                  2 0.811965811965812\n6      cl186e13.5        423                  2              &lt;NA&gt;\n         Clusters\n1 316 - 176 - 334\n2       143 - 397\n3        94 - 228\n4       247 - 289\n5       183 - 403\n6       246 - 177\n\n\n\ncells &lt;- getClusterizationData(e13.5,clName = \"CL_original.clusters\")[[1]][getClusterizationData(e13.5,clName = \"CL_original.clusters\")[[1]] == \"186\"]\n\ncells &lt;-names(cells)\n\ncl186e13.5 &lt;-  automaticCOTANObjectCreation(raw = getRawData(e13.5)[,cells],\n                                       GEO = \"Loom\",\n                                       sequencingMethod = \"10X\",\n                                       sampleCondition = \"cl186e13.5\",\n                                       cores = 10,saveObj = T,\n                                       outDir = \"Data/MouseCortexFromLoom/NotCTSingleClusters/\",\n                                       calcCoex = T)\n\n\ncl186e13.5GDI &lt;- calculateGDI(cl186e13.5)\n\nsubsetGDIcl186e13.5 &lt;- cl186e13.5GDI[cl186e13.5GDI$sum.raw.norm &gt; 5,]\ntop.GDI.genes &lt;- rownames(subsetGDIcl186e13.5[order(subsetGDIcl186e13.5$GDI,decreasing = T),])[1:25]\n\nGDIPlot(cl186e13.5,genes = list(\"topGDI\"=top.GDI.genes),GDIIn = cl186e13.5GDI)\n\n\n\n\n\nlist.cl.CT &lt;- cellsUniformClustering(cl186e13.5, GDIThreshold = 1.43, cores = 10L,\n                         saveObj = TRUE, outDir = outDir)\n\ncl186e13.5 &lt;- addClusterization(cl186e13.5, clName = \"split\",\n                              clusters = list.cl.CT$clusters,\n                              coexDF = list.cl.CT$coex, override = TRUE)\n\ntable(list.cl.CT$clusters)\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cl186e13.5, clusters = list.cl.CT$clusters,\n                            GDIThreshold = 1.43, batchSize = 4L, cores = 10L,\n                            saveObj = TRUE, outDir = outDir)\n\ncl186e13.5 &lt;- addClusterization(cl186e13.5, clName = \"merge\",\n                              clusters = mergedClusters,\n                              coexDF = mergedCoexDF,\n                              override = TRUE)\n\nsaveRDS(cl186e13.5,paste0(outDir,\"cl186e13.5.cotan.RDS\"))\n\ntable(str_split(names(mergedClusters),pattern = \"_\",simplify = T)[,1],mergedClusters)\n\n\ndata &lt;- getNormalizedData(cl186e13.5)\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- getClusterizationData(cl186e13.5)[[1]]\n#COTAN_Cl.code[COTAN_Cl.code == \"A549\"] &lt;- 0\n#COTAN_Cl.code[COTAN_Cl.code == \"CCL-185-IG\"] &lt;- 1\n\nCOTAN_Cl.code &lt;- as.numeric(COTAN_Cl.code)-1\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                                 Gpc4     Gcsh Spc24      Mcm6   Shroom3\n10X12_3_A_1:CCATTAACTCGTGAx  0.000000 0.000000     0  9.621451 10.314565\n10X12_3_A_1:AACATTGACCATAGx  0.000000 9.644715     0  9.644715  0.000000\n10X12_3_A_1:CTATGACTTTGGCAx 10.637115 9.538551     0  0.000000  0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 10.061177 0.000000     0  0.000000  0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx  0.000000 0.000000     0 10.366742  0.000000\n10X14_4_A_1:GAGGGAACGACGAGx  9.772689 9.772689     0  9.772689  9.772689\n                                Rpa2     Pclaf   Rpl22l1   Fam210b     Nrarp\n10X12_3_A_1:CCATTAACTCGTGAx 9.621451 11.326145  0.000000  0.000000  8.928370\n10X12_3_A_1:AACATTGACCATAGx 0.000000  9.644715  0.000000  0.000000  0.000000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000  0.000000  9.538551  0.000000  0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000 10.754302 10.061177 10.754302 10.061177\n10X12_3_A_1:TAGTGGTGCGTACAx 0.000000 10.366742  0.000000  9.961293  9.268193\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  0.000000 10.465807  0.000000  9.772689\n                             Serpinh1      Rgcc Tuba1c  Gm29260    Rgs20\n10X12_3_A_1:CCATTAACTCGTGAx  9.621451 10.720019      0 10.31456 8.928370\n10X12_3_A_1:AACATTGACCATAGx  0.000000  0.000000      0 10.74328 0.000000\n10X12_3_A_1:CTATGACTTTGGCAx  9.538551  0.000000      0 10.63711 0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 10.061177  0.000000      0  0.00000 0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193 10.366742      0 10.36674 0.000000\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000  9.772689      0 10.87126 9.772689\n                              Sema5b     Cyr61    Zfp536   Pitpnc1   Prdm16\n10X12_3_A_1:CCATTAACTCGTGAx 8.928370 10.026894  0.000000  0.000000 9.621451\n10X12_3_A_1:AACATTGACCATAGx 0.000000  0.000000  9.644715  0.000000 0.000000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000  0.000000 10.231662 10.231662 0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000  0.000000 10.754302  0.000000 0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx 9.268193  9.268193  9.268193  9.268193 9.268193\n10X14_4_A_1:GAGGGAACGACGAGx 9.772689 10.465807  0.000000  9.772689 0.000000\n                                Csmd1    Alcam   Slc1a3    Ptprz1    Maml2\n10X12_3_A_1:CCATTAACTCGTGAx 11.125476 8.928370  0.00000 10.026894 8.928370\n10X12_3_A_1:AACATTGACCATAGx  0.000000 9.644715  0.00000  9.644715 9.644715\n10X12_3_A_1:CTATGACTTTGGCAx  0.000000 0.000000  0.00000  0.000000 0.000000\n10X12_3_A_1:ATGTTCACTAGACCx  0.000000 0.000000 10.06118 10.061177 0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193 0.000000  0.00000  0.000000 0.000000\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000 0.000000 10.87126  9.772689 0.000000\n                               Cadm2     Tenm3     Rrm2 Hist1h1b     Hes6\n10X12_3_A_1:CCATTAACTCGTGAx 10.31456  9.621451  8.92837  0.00000  8.92837\n10X12_3_A_1:AACATTGACCATAGx  0.00000  9.644715  0.00000  0.00000 10.74328\n10X12_3_A_1:CTATGACTTTGGCAx  0.00000  0.000000  0.00000  0.00000 10.63711\n10X12_3_A_1:ATGTTCACTAGACCx 11.44744 11.159760 10.06118 10.06118  0.00000\n10X12_3_A_1:TAGTGGTGCGTACAx 10.65442  9.961293 10.36674  0.00000  0.00000\n10X14_4_A_1:GAGGGAACGACGAGx  0.00000  0.000000  0.00000  0.00000  0.00000\n                              Rhbdl3   Neurog2  Igfbpl1     Zmiz1 Hist1h2ae\n10X12_3_A_1:CCATTAACTCGTGAx 8.928370  0.000000  8.92837  0.000000         0\n10X12_3_A_1:AACATTGACCATAGx 0.000000 12.283713  0.00000 11.030961         0\n10X12_3_A_1:CTATGACTTTGGCAx 9.538551 11.330250 10.23166  9.538551         0\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000  0.000000 10.06118  0.000000         0\n10X12_3_A_1:TAGTGGTGCGTACAx 0.000000  9.268193  0.00000  0.000000         0\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  0.000000  0.00000  9.772689         0\n                                Lockd     Fezf2   Bcl11a     Tenm2    Nr2f1\n10X12_3_A_1:CCATTAACTCGTGAx  8.928370  0.000000  0.00000  9.621451  8.92837\n10X12_3_A_1:AACATTGACCATAGx 10.337830  0.000000  0.00000 10.337830  0.00000\n10X12_3_A_1:CTATGACTTTGGCAx  0.000000  0.000000 10.92479 10.637115 10.23166\n10X12_3_A_1:ATGTTCACTAGACCx  0.000000 10.754302  0.00000  0.000000  0.00000\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193  9.961293  0.00000 10.366742  0.00000\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000  0.000000  0.00000  9.772689 10.46581\n                                Ap3s1     Fat3  Mir670hg      Gpc6      Dab1\n10X12_3_A_1:CCATTAACTCGTGAx  0.000000  0.00000  8.928370 10.026894 10.537702\n10X12_3_A_1:AACATTGACCATAGx  0.000000  0.00000  0.000000  0.000000 10.743284\n10X12_3_A_1:CTATGACTTTGGCAx 10.231662 10.23166  9.538551  0.000000  9.538551\n10X12_3_A_1:ATGTTCACTAGACCx  0.000000  0.00000 10.061177 11.670580 10.061177\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193  0.00000 10.654417  9.268193  0.000000\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000 10.46581 10.465807  9.772689  0.000000\n                                 Ank2      Rprm    Bach2      Nrg1\n10X12_3_A_1:CCATTAACTCGTGAx  0.000000  9.621451  8.92837 10.537702\n10X12_3_A_1:AACATTGACCATAGx  0.000000  0.000000 10.33783  0.000000\n10X12_3_A_1:CTATGACTTTGGCAx  0.000000  0.000000  0.00000 10.637115\n10X12_3_A_1:ATGTTCACTAGACCx 10.754302 10.061177 10.06118  0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193  0.000000  0.00000  9.268193\n10X14_4_A_1:GAGGGAACGACGAGx  9.772689  0.000000  0.00000  9.772689\n                            X2010107E04Rik Tbrg1    Birc5     Cdk1 Cdc20\n10X12_3_A_1:CCATTAACTCGTGAx       9.621451     0 9.621451 9.621451     0\n10X12_3_A_1:AACATTGACCATAGx      11.030961     0 9.644715 0.000000     0\n10X12_3_A_1:CTATGACTTTGGCAx       0.000000     0 0.000000 0.000000     0\n10X12_3_A_1:ATGTTCACTAGACCx       0.000000     0 0.000000 0.000000     0\n10X12_3_A_1:TAGTGGTGCGTACAx       0.000000     0 0.000000 9.961293     0\n10X14_4_A_1:GAGGGAACGACGAGx      10.465807     0 0.000000 0.000000     0\n                                 Mcm2   Aurkb     Hells    Psmd1    Fbxo5\n10X12_3_A_1:CCATTAACTCGTGAx  8.928370 8.92837 10.537702  0.00000 8.928370\n10X12_3_A_1:AACATTGACCATAGx  0.000000 0.00000  9.644715  0.00000 0.000000\n10X12_3_A_1:CTATGACTTTGGCAx  9.538551 0.00000  0.000000  0.00000 0.000000\n10X12_3_A_1:ATGTTCACTAGACCx  0.000000 0.00000 10.061177 10.06118 0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx 10.366742 0.00000 10.366742  0.00000 9.961293\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000 0.00000  0.000000  0.00000 0.000000\n                                Plk1      Rfc3      Smc2    Smchd1     Gmnn\n10X12_3_A_1:CCATTAACTCGTGAx 0.000000 10.537702  8.928370 10.874166 10.87417\n10X12_3_A_1:AACATTGACCATAGx 0.000000  0.000000  0.000000  0.000000  0.00000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000  0.000000  0.000000 10.231662  0.00000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000 10.061177 10.061177 10.754302  0.00000\n10X12_3_A_1:TAGTGGTGCGTACAx 9.268193  9.268193  9.268193  9.961293 10.36674\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  9.772689  0.000000  0.000000  0.00000\n                              Suclg1   Igf2bp3     Usp1 Cdca3 Canx      Sltm\n10X12_3_A_1:CCATTAACTCGTGAx 9.621451  9.621451 10.02689     0    0  0.000000\n10X12_3_A_1:AACATTGACCATAGx 0.000000  9.644715  0.00000     0    0  0.000000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000 10.231662  0.00000     0    0 10.231662\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000 10.754302 10.06118     0    0 11.159760\n10X12_3_A_1:TAGTGGTGCGTACAx 0.000000 10.366742  0.00000     0    0  0.000000\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  9.772689  0.00000     0    0  9.772689\n                               Cops8      Tyms Cdca2     Smc4    Uqcrb\n10X12_3_A_1:CCATTAACTCGTGAx 0.000000  9.621451     0  8.92837 0.000000\n10X12_3_A_1:AACATTGACCATAGx 9.644715 10.337830     0  0.00000 9.644715\n10X12_3_A_1:CTATGACTTTGGCAx 9.538551  0.000000     0  0.00000 0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000  0.000000     0 10.06118 0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx 9.961293  9.268193     0  0.00000 9.268193\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  0.000000     0  0.00000 0.000000\n                                 Bub3      Tk1    Mki67    Pde4d    Spag9\n10X12_3_A_1:CCATTAACTCGTGAx  0.000000 8.928370 0.000000  0.00000  8.92837\n10X12_3_A_1:AACATTGACCATAGx  9.644715 0.000000 0.000000 11.43642 10.33783\n10X12_3_A_1:CTATGACTTTGGCAx  9.538551 0.000000 9.538551 11.73571  0.00000\n10X12_3_A_1:ATGTTCACTAGACCx 10.061177 0.000000 0.000000  0.00000  0.00000\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193 9.268193 0.000000 12.15848  0.00000\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000 0.000000 0.000000 10.87126  0.00000\n                               Mbtd1     Magi1   Ankrd11   Phf21a    Cks2\n10X12_3_A_1:CCATTAACTCGTGAx 0.000000  8.928370  0.000000 0.000000 8.92837\n10X12_3_A_1:AACATTGACCATAGx 9.644715  9.644715  9.644715 0.000000 0.00000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000  9.538551  9.538551 9.538551 0.00000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000 10.061177 10.061177 0.000000 0.00000\n10X12_3_A_1:TAGTGGTGCGTACAx 0.000000  0.000000  9.961293 9.961293 0.00000\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  9.772689  0.000000 9.772689 0.00000\n                                Nde1      Rfc4 Pimreg   Zfp609   Tubb4b\n10X12_3_A_1:CCATTAACTCGTGAx 0.000000 10.026894      0 9.621451 10.02689\n10X12_3_A_1:AACATTGACCATAGx 0.000000  9.644715      0 0.000000  0.00000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000  0.000000      0 9.538551  0.00000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000 10.754302      0 0.000000  0.00000\n10X12_3_A_1:TAGTGGTGCGTACAx 9.961293  9.961293      0 0.000000  0.00000\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000  0.000000      0 0.000000  0.00000\n                                Rrm1    Prim1  Racgap1    Aurka       Pbk\n10X12_3_A_1:CCATTAACTCGTGAx 8.928370 9.621451 0.000000 0.000000  9.621451\n10X12_3_A_1:AACATTGACCATAGx 0.000000 9.644715 9.644715 0.000000  0.000000\n10X12_3_A_1:CTATGACTTTGGCAx 0.000000 0.000000 0.000000 0.000000  0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 0.000000 0.000000 0.000000 0.000000 10.061177\n10X12_3_A_1:TAGTGGTGCGTACAx 9.268193 9.268193 0.000000 0.000000  9.268193\n10X14_4_A_1:GAGGGAACGACGAGx 0.000000 0.000000 0.000000 9.772689  0.000000\n                               Cdca8 Ccnb1     Cenpa   Ccna2     Prc1    Ccnb2\n10X12_3_A_1:CCATTAACTCGTGAx  0.00000     0  0.000000 8.92837 8.928370 0.000000\n10X12_3_A_1:AACATTGACCATAGx  0.00000     0 10.337830 0.00000 0.000000 9.644715\n10X12_3_A_1:CTATGACTTTGGCAx  0.00000     0  0.000000 0.00000 0.000000 0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 10.06118     0  0.000000 0.00000 0.000000 0.000000\n10X12_3_A_1:TAGTGGTGCGTACAx  0.00000     0  0.000000 0.00000 9.268193 0.000000\n10X14_4_A_1:GAGGGAACGACGAGx  0.00000     0  9.772689 0.00000 0.000000 0.000000\n                              Arl6ip1    Pttg1     Hmgn5    Tubb3     Basp1\n10X12_3_A_1:CCATTAACTCGTGAx  8.928370 0.000000  8.928370  8.92837  9.621451\n10X12_3_A_1:AACATTGACCATAGx  0.000000 9.644715  9.644715 10.74328 10.337830\n10X12_3_A_1:CTATGACTTTGGCAx  0.000000 0.000000  0.000000 10.23166  9.538551\n10X12_3_A_1:ATGTTCACTAGACCx 10.061177 0.000000 10.061177  0.00000 10.061177\n10X12_3_A_1:TAGTGGTGCGTACAx  9.268193 0.000000  0.000000  0.00000  9.961293\n10X14_4_A_1:GAGGGAACGACGAGx  0.000000 0.000000  0.000000 10.46581 11.382081\n                                Xist     Fdps     Vbp1     Top2a Nusap1 Kif23\n10X12_3_A_1:CCATTAACTCGTGAx 10.87417  0.00000 0.000000  9.621451      0     0\n10X12_3_A_1:AACATTGACCATAGx  0.00000  0.00000 0.000000  0.000000      0     0\n10X12_3_A_1:CTATGACTTTGGCAx 10.23166  0.00000 0.000000  0.000000      0     0\n10X12_3_A_1:ATGTTCACTAGACCx 11.44744 10.06118 0.000000 10.061177      0     0\n10X12_3_A_1:TAGTGGTGCGTACAx  0.00000  0.00000 9.961293  0.000000      0     0\n10X14_4_A_1:GAGGGAACGACGAGx  0.00000  0.00000 0.000000  9.772689      0     0\n                              Spc25 Ect2 Kif22    Ube2c    Cenpf    Dpysl3\n10X12_3_A_1:CCATTAACTCGTGAx 8.92837    0     0 0.000000 0.000000  0.000000\n10X12_3_A_1:AACATTGACCATAGx 0.00000    0     0 9.644715 0.000000  9.644715\n10X12_3_A_1:CTATGACTTTGGCAx 0.00000    0     0 0.000000 0.000000  0.000000\n10X12_3_A_1:ATGTTCACTAGACCx 0.00000    0     0 0.000000 0.000000 10.061177\n10X12_3_A_1:TAGTGGTGCGTACAx 0.00000    0     0 0.000000 0.000000  0.000000\n10X14_4_A_1:GAGGGAACGACGAGx 0.00000    0     0 9.772689 9.772689  9.772689\n                            COTAN_Cl.code\n10X12_3_A_1:CCATTAACTCGTGAx             1\n10X12_3_A_1:AACATTGACCATAGx             0\n10X12_3_A_1:CTATGACTTTGGCAx             0\n10X12_3_A_1:ATGTTCACTAGACCx             0\n10X12_3_A_1:TAGTGGTGCGTACAx             1\n10X14_4_A_1:GAGGGAACGACGAGx             0\n\n\n\n# Fit the model\nmodel &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 50))\n# Summarize the model\nsummary(model)\n\n\nCall:\nglm(formula = COTAN_Cl.code ~ ., family = binomial, data = train.data, \n    control = list(maxit = 50))\n\nCoefficients:\n                 Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)    -1.258e+02  1.738e+06       0        1\nGpc4           -5.769e-01  6.618e+04       0        1\nGcsh            2.684e-01  4.828e+04       0        1\nSpc24          -7.342e-01  5.362e+04       0        1\nMcm6            8.160e-01  5.177e+04       0        1\nShroom3         9.559e-02  4.319e+04       0        1\nRpa2           -9.167e-01  9.345e+04       0        1\nPclaf          -5.198e-03  4.774e+04       0        1\nRpl22l1         1.434e+00  7.650e+04       0        1\nFam210b         6.654e-01  5.459e+04       0        1\nNrarp          -3.833e-01  5.881e+04       0        1\nSerpinh1       -1.473e-01  7.232e+04       0        1\nRgcc            1.002e-01  6.976e+04       0        1\nTuba1c          2.372e+00  6.278e+04       0        1\nGm29260         8.822e-01  7.552e+04       0        1\nRgs20          -1.584e+00  7.486e+04       0        1\nSema5b          1.526e+00  5.811e+04       0        1\nCyr61           1.599e-01  4.479e+04       0        1\nZfp536          4.045e-01  4.707e+04       0        1\nPitpnc1         3.166e-01  6.907e+04       0        1\nPrdm16          9.862e-01  5.876e+04       0        1\nCsmd1           2.047e+00  5.322e+04       0        1\nAlcam          -6.817e-01  4.230e+04       0        1\nSlc1a3          1.879e-01  7.661e+04       0        1\nPtprz1         -3.854e-01  5.266e+04       0        1\nMaml2          -6.116e-01  5.436e+04       0        1\nCadm2           5.507e-01  7.044e+04       0        1\nTenm3           3.359e-01  8.672e+04       0        1\nRrm2            8.523e-01  7.963e+04       0        1\nHist1h1b        7.448e-01  1.150e+05       0        1\nHes6           -2.688e-02  4.738e+04       0        1\nRhbdl3          1.661e-01  5.170e+04       0        1\nNeurog2        -3.816e-01  5.160e+04       0        1\nIgfbpl1         6.288e-01  6.647e+04       0        1\nZmiz1          -7.988e-01  5.395e+04       0        1\nHist1h2ae       3.007e+00  7.630e+04       0        1\nLockd           7.641e-01  4.956e+04       0        1\nFezf2          -3.347e-01  4.995e+04       0        1\nBcl11a         -6.376e-02  5.968e+04       0        1\nTenm2           1.347e+00  6.245e+04       0        1\nNr2f1          -4.364e-02  6.535e+04       0        1\nAp3s1          -1.876e+00  5.930e+04       0        1\nFat3           -4.538e-02  5.493e+04       0        1\nMir670hg       -7.718e-01  4.114e+04       0        1\nGpc6           -8.556e-01  4.596e+04       0        1\nDab1            1.023e+00  5.075e+04       0        1\nAnk2            7.944e-01  4.552e+04       0        1\nRprm           -2.214e-01  4.523e+04       0        1\nBach2           9.891e-01  5.692e+04       0        1\nNrg1           -3.338e-01  5.329e+04       0        1\nX2010107E04Rik  7.571e-01  6.660e+04       0        1\nTbrg1           7.002e-01  5.388e+04       0        1\nBirc5          -8.046e-01  6.038e+04       0        1\nCdk1            1.803e+00  1.105e+05       0        1\nCdc20          -2.139e+00  8.773e+04       0        1\nMcm2            1.545e+00  6.359e+04       0        1\nAurkb          -2.592e-01  7.640e+04       0        1\nHells          -1.688e-01  7.203e+04       0        1\nPsmd1          -5.750e-01  4.171e+04       0        1\nFbxo5           4.044e-01  8.246e+04       0        1\nPlk1           -1.408e+00  9.732e+04       0        1\nRfc3           -6.153e-03  6.341e+04       0        1\nSmc2            4.082e-01  5.083e+04       0        1\nSmchd1         -2.977e-01  5.561e+04       0        1\nGmnn            1.571e+00  8.963e+04       0        1\nSuclg1         -7.641e-01  6.860e+04       0        1\nIgf2bp3         3.897e-01  4.334e+04       0        1\nUsp1           -3.074e+00  4.761e+04       0        1\nCdca3          -6.153e-01  8.618e+04       0        1\nCanx            1.551e-01  3.986e+04       0        1\nSltm            8.742e-01  3.762e+04       0        1\nCops8          -5.185e-01  4.496e+04       0        1\nTyms           -7.388e-01  6.212e+04       0        1\nCdca2           1.432e+00  1.454e+05       0        1\nSmc4            1.294e+00  5.488e+04       0        1\nUqcrb          -1.652e+00  3.383e+04       0        1\nBub3           -1.221e+00  4.444e+04       0        1\nTk1             1.292e+00  6.755e+04       0        1\nMki67           2.453e+00  5.293e+04       0        1\nPde4d           8.283e-01  7.950e+04       0        1\nSpag9          -1.049e+00  5.317e+04       0        1\nMbtd1          -5.802e-02  6.353e+04       0        1\nMagi1           3.187e-01  4.093e+04       0        1\nAnkrd11        -2.000e-01  5.187e+04       0        1\nPhf21a         -2.331e-01  5.670e+04       0        1\nCks2           -1.662e-01  5.849e+04       0        1\nNde1            5.406e-01  4.777e+04       0        1\nRfc4            1.257e+00  7.367e+04       0        1\nPimreg         -1.092e-01  8.627e+04       0        1\nZfp609          1.335e+00  4.553e+04       0        1\nTubb4b         -6.380e-01  5.776e+04       0        1\nRrm1            1.116e+00  5.785e+04       0        1\nPrim1           2.289e+00  4.338e+04       0        1\nRacgap1         1.087e+00  8.712e+04       0        1\nAurka           1.378e+00  8.675e+04       0        1\nPbk            -1.242e+00  6.531e+04       0        1\nCdca8           2.378e+00  6.305e+04       0        1\nCcnb1           1.244e+00  8.618e+04       0        1\nCenpa          -1.226e+00  7.783e+04       0        1\nCcna2          -1.101e+00  7.212e+04       0        1\nPrc1            1.258e-02  7.602e+04       0        1\nCcnb2           6.641e-01  8.750e+04       0        1\nArl6ip1         1.015e+00  3.995e+04       0        1\nPttg1          -6.374e-01  9.615e+04       0        1\nHmgn5          -1.843e-01  9.124e+04       0        1\nTubb3           1.364e+00  4.758e+04       0        1\nBasp1           8.492e-01  5.729e+04       0        1\nXist            1.026e+00  6.437e+04       0        1\nFdps           -3.254e-01  7.900e+04       0        1\nVbp1           -8.241e-02  5.569e+04       0        1\nTop2a           2.192e+00  9.877e+04       0        1\nNusap1         -1.141e+00  8.514e+04       0        1\nKif23           3.391e-02  1.158e+05       0        1\nSpc25          -5.105e-01  7.337e+04       0        1\nEct2            2.213e+00  6.265e+04       0        1\nKif22           1.824e+00  6.516e+04       0        1\nUbe2c          -2.167e+00  5.627e+04       0        1\nCenpf           2.118e-01  7.897e+04       0        1\nDpysl3         -1.111e-01  6.478e+04       0        1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 4.6163e+02  on 338  degrees of freedom\nResidual deviance: 4.4706e-10  on 220  degrees of freedom\nAIC: 238\n\nNumber of Fisher Scoring iterations: 28\n\n# Make predictions\nprobabilities &lt;- model %&gt;% predict(test.data, type = \"response\")\npredicted.classes &lt;- ifelse(probabilities &gt; 0.5, \"1\", \"0\")\n# Model accuracy\naccuracy &lt;- mean(predicted.classes == test.data$COTAN_Cl.code)\nresult.df[nrow(result.df),\"Accuracy\"] &lt;- accuracy\n\naccuracy\n\n[1] 0.8809524\n\n\nSo also in this case a logistic regression confirm the difference in cell population detected by COTAN.\n\ncl186e13.5ClsMarkers &lt;- findClustersMarkers(cl186e13.5,n = 200,method = \"BH\")\ncl186e13.5ClsMarkers\n\n    CL           Gene      Score      adjPVal         DEA IsMarker   logFoldCh\n1    1          Top2a -0.6241274 1.292542e-33 -0.29949111        0 -1.03505499\n2    1          Fbxo5 -0.5368323 1.527305e-24 -0.23974039        0 -1.02515510\n3    1           Prc1 -0.5169059 8.967094e-23 -0.24226314        0 -0.86258805\n4    1           Cdk1 -0.4954494 6.934280e-21 -0.24180281        0 -0.65205791\n5    1      Hist1h2ae -0.4637589 3.667538e-18 -0.21831525        0 -0.70353869\n6    1            Tk1 -0.4610062 5.266749e-18 -0.22079670        0 -0.67661988\n7    1           Ect2 -0.4520040 2.617743e-17 -0.20278173        0 -0.96306525\n8    1           Smc4 -0.4437438 1.115307e-16 -0.21186519        0 -0.46959448\n9    1          Cdca2 -0.4407355 1.752002e-16 -0.18123487        0 -0.90223009\n10   1          Aurkb -0.4379989 2.638139e-16 -0.18687151        0 -0.64740645\n11   1         Nusap1 -0.4354922 3.832352e-16 -0.20604464        0 -0.56899168\n12   1           Plk4 -0.4216280 4.476096e-15 -0.18001799        0 -0.71772044\n13   1          Esco2 -0.4198080 5.736386e-15 -0.16798934        0 -0.82372390\n14   1       Mis18bp1 -0.4191589 5.985871e-15 -0.17109117        0 -0.93220123\n15   1       Hist1h1b -0.4126483 1.783295e-14 -0.18426695        0 -0.80773217\n16   1          Kif11 -0.4024871 9.874964e-14 -0.16366408        0 -0.85190570\n17   1          Pclaf -0.3995401 1.543165e-13 -0.18246408        0 -0.64556163\n18   1         Mis18a -0.3963100 2.530142e-13 -0.17492741        0 -0.74923124\n19   1           Mxd3 -0.3946120 3.197655e-13 -0.15987046        0 -0.83852593\n20   1            Ttk -0.3890896 7.691862e-13 -0.15034926        0 -1.01599564\n21   1           Smc2 -0.3873698 9.758191e-13 -0.18794153        0 -0.38551792\n22   1          Neil3 -0.3842747 1.555673e-12 -0.13936725        0 -1.20481989\n23   1         Incenp -0.3683449 1.957365e-11 -0.15718746        0 -0.68874522\n24   1          Csmd1 -0.3673088 2.128448e-11 -0.17914517        0 -0.55650257\n25   1          Asf1b -0.3672883 2.128448e-11 -0.15216123        0 -0.78441288\n26   1          Mki67 -0.3651294 2.875696e-11 -0.16876402        0 -0.63197162\n27   1            Pbk -0.3646642 2.979028e-11 -0.17773888        0 -0.44386736\n28   1           Plk1 -0.3631370 3.648689e-11 -0.15140812        0 -0.60260192\n29   1         Cep192 -0.3597104 5.927429e-11 -0.13903802        0 -0.75227596\n30   1          Cdca5 -0.3566898 8.752493e-11 -0.13017556        0 -0.98305078\n31   1          Cep55 -0.3566270 8.752493e-11 -0.13574524        0 -0.82727395\n32   1          Cdc45 -0.3551074 1.071269e-10 -0.13855246        0 -0.65502596\n33   1           Ccnf -0.3547971 1.090271e-10 -0.11607353        0 -1.19001599\n34   1          Kntc1 -0.3544816 1.111406e-10 -0.13361878        0 -0.79583101\n35   1          Ube2t -0.3521104 1.550074e-10 -0.14436727        0 -0.69141894\n36   1         Kifc5b -0.3507345 1.857469e-10 -0.12082807        0 -1.25460801\n37   1         Ckap2l -0.3489810 2.355805e-10 -0.13612119        0 -0.67396872\n38   1           Rrm2 -0.3469937 3.092361e-10 -0.16247352        0 -0.50938218\n39   1           Gmnn -0.3457666 3.539799e-10 -0.16569200        0 -0.39778537\n40   1          Atad2 -0.3457536 3.539799e-10 -0.15338976        0 -0.59290217\n41   1          Spc25 -0.3447707 3.999903e-10 -0.14382137        0 -0.58585847\n42   1          Aurka -0.3413782 6.453245e-10 -0.14735357        0 -0.56562767\n43   1          Cenpf -0.3393142 8.538480e-10 -0.16092890        0 -0.67932723\n44   1          Spc24 -0.3385516 9.333482e-10 -0.16403827        0 -0.42034392\n45   1          Kif23 -0.3335465 1.886726e-09 -0.14528407        0 -0.53144810\n46   1           Gpc6 -0.3300905 3.029595e-09 -0.15377295        0 -0.31498460\n47   1            Cit -0.3282684 3.843544e-09 -0.11468670        0 -1.01291443\n48   1            Blm -0.3249790 5.988938e-09 -0.11926938        0 -0.87682876\n49   1           Sgo1 -0.3227317 8.038391e-09 -0.12701859        0 -0.57979869\n50   1          Cenpp -0.3207087 1.044120e-08 -0.14547807        0 -0.56105028\n51   1          Kif22 -0.3196039 1.193253e-08 -0.14718923        0 -0.53875529\n52   1           Tyms -0.3193061 1.219908e-08 -0.15448875        0 -0.43425557\n53   1          Ncaph -0.3171756 1.572668e-08 -0.12202211        0 -0.71026499\n54   1           Ska3 -0.3170940 1.572668e-08 -0.10456357        0 -1.00698512\n55   1           Knl1 -0.3170601 1.572668e-08 -0.12694685        0 -0.53836489\n56   1          Cenpq -0.3168772 1.584302e-08 -0.14404521        0 -0.46605312\n57   1           Ska1 -0.3154813 1.884513e-08 -0.13165028        0 -0.56240457\n58   1          Kif15 -0.3135751 2.401252e-08 -0.12996107        0 -0.65598399\n59   1         Cdkn2d -0.3119223 2.953221e-08 -0.13191363        0 -0.53537092\n60   1           Nrg3 -0.3103533 3.588305e-08 -0.13164389        0 -0.56782659\n61   1           Dbf4 -0.3070238 5.422081e-08 -0.13553022        0 -0.52116859\n62   1          Clspn -0.3067323 5.548243e-08 -0.12667969        0 -0.59844286\n63   1       Rad51ap1 -0.3056040 6.344649e-08 -0.11643321        0 -0.71308999\n64   1           Exo1 -0.3029217 8.899451e-08 -0.12076591        0 -0.62804245\n65   1         Diaph3 -0.3021658 9.680104e-08 -0.12385492        0 -0.62378867\n66   1           E2f8 -0.2999551 1.272769e-07 -0.09493299        0 -1.00613196\n67   1          Cadm2 -0.2962538 2.024159e-07 -0.14350500        0 -0.38910393\n68   1          Brca1 -0.2942802 2.569286e-07 -0.09475966        0 -0.99716014\n69   1          Tcf19 -0.2939530 2.604469e-07 -0.11026875        0 -0.77285271\n70   1           Eme1 -0.2921452 3.232964e-07 -0.11072592        0 -0.73503313\n71   1          Ccna2 -0.2903183 4.018119e-07 -0.13863943        0 -0.33579007\n72   1           Rfc4 -0.2896939 4.288904e-07 -0.13925174        0 -0.30522426\n73   1          Spag5 -0.2882680 5.062042e-07 -0.10141049        0 -0.79224265\n74   1           Lrr1 -0.2878571 5.259967e-07 -0.10321172        0 -0.82220166\n75   1          H2afx -0.2860552 6.500667e-07 -0.12097237        0 -0.49159875\n76   1           Melk -0.2857725 6.647878e-07 -0.12008714        0 -0.47443488\n77   1           Pif1 -0.2848193 7.388413e-07 -0.07755439        0 -1.41142747\n78   1          Rad51 -0.2844884 7.602230e-07 -0.12183270        0 -0.55249652\n79   1          Nup85 -0.2834666 8.519251e-07 -0.12211710        0 -0.51145518\n80   1          Kifc1 -0.2813649 1.089528e-06 -0.10084333        0 -0.68300408\n81   1           Mdc1 -0.2784771 1.530325e-06 -0.10163731        0 -0.69383518\n82   1          Ndc80 -0.2780323 1.596005e-06 -0.09582663        0 -0.55825879\n83   1          Cenpn -0.2778262 1.617278e-06 -0.11789053        0 -0.45916943\n84   1         Zfp367 -0.2777229 1.618785e-06 -0.10631442        0 -0.58360219\n85   1           Rfc1 -0.2774258 1.658883e-06 -0.13503011        0 -0.31542498\n86   1          Npas3 -0.2768669 1.754650e-06 -0.12438318        0 -0.34305698\n87   1         Tuba1c -0.2767577 1.758143e-06 -0.12079187        0 -0.50595908\n88   1         Mms22l -0.2763561 1.824972e-06 -0.13355118        0 -0.35516073\n89   1         Shcbp1 -0.2757193 1.948720e-06 -0.12011296        0 -0.47025266\n90   1           Wee1 -0.2753587 2.013002e-06 -0.10792756        0 -0.60268425\n91   1          Sgo2a -0.2741483 2.301967e-06 -0.09578293        0 -0.70127236\n92   1           Rpa2 -0.2732687 2.529593e-06 -0.13309242        0 -0.37172319\n93   1          Cenpu -0.2722801 2.815336e-06 -0.10525669        0 -0.54492889\n94   1         Cdkn2c -0.2721327 2.835445e-06 -0.11276747        0 -0.47491120\n95   1           Lig1 -0.2718079 2.916652e-06 -0.12761070        0 -0.49135545\n96   1          Prim1 -0.2702688 3.462905e-06 -0.13141745        0 -0.35960529\n97   1         Kif18a -0.2679705 4.489523e-06 -0.08627226        0 -0.59299024\n98   1           Dhfr -0.2669948 4.980996e-06 -0.12602335        0 -0.42375904\n99   1           Fen1 -0.2653219 5.989705e-06 -0.12383592        0 -0.30867106\n100  1          Nemp1 -0.2623510 8.351518e-06 -0.08721154        0 -0.81550604\n101  1           Kif4 -0.2622050 8.410747e-06 -0.09223845        0 -0.62980624\n102  1      Hist1h2ap -0.2612121 9.331743e-06 -0.06834949        0 -1.48176354\n103  1         Dlgap5 -0.2597397 1.092971e-05 -0.09475726        0 -0.60066226\n104  1           Pole -0.2590638 1.168972e-05 -0.09868926        0 -0.58895400\n105  1          Birc5 -0.2584719 1.238330e-05 -0.12545530        0 -0.38904462\n106  1         Cep128 -0.2582151 1.263060e-05 -0.08170584        0 -0.82524231\n107  1          Spdl1 -0.2567923 1.468983e-05 -0.07983004        0 -0.66328484\n108  1       Hist1h1a -0.2562698 1.543625e-05 -0.08034232        0 -0.78722399\n109  1         Pkmyt1 -0.2557959 1.613220e-05 -0.08757398        0 -0.79271344\n110  1         Kif20b -0.2534420 2.078265e-05 -0.09354028        0 -0.62377410\n111  1         Fam83d -0.2529834 2.163127e-05 -0.07236812        0 -0.70682799\n112  1          Hjurp -0.2529224 2.163127e-05 -0.09731555        0 -0.55789485\n113  1          Rfwd3 -0.2526700 2.205212e-05 -0.10200886        0 -0.51389021\n114  1          Grik2 -0.2522592 2.287890e-05 -0.11745822        0 -0.21041018\n115  1          Kpna2 -0.2517917 2.388579e-05 -0.11747526        0 -0.47370231\n116  1           Wwox -0.2508073 2.639455e-05 -0.11376407        0 -0.43612043\n117  1          Cks1b -0.2495474 3.004879e-05 -0.09243932        0 -0.23556582\n118  1           Rfc2 -0.2491653 3.093276e-05 -0.11761211        0 -0.34103727\n119  1         Iqgap3 -0.2491307 3.093276e-05 -0.06028889        0 -1.27458481\n120  1         Tubb4b -0.2484494 3.304617e-05 -0.11853889        0 -0.28999510\n121  1           Aspm -0.2474243 3.664171e-05 -0.08347983        0 -0.51621992\n122  1          Chek2 -0.2473443 3.666505e-05 -0.08527439        0 -0.65838009\n123  1          Meaf6 -0.2455802 4.401184e-05 -0.11860464        0 -0.33711247\n124  1        Racgap1 -0.2434093 5.511107e-05 -0.11647258        0 -0.25123633\n125  1         Mad2l1 -0.2432658 5.552474e-05 -0.11035670        0 -0.30814890\n126  1           Lsm2 -0.2415337 6.624218e-05 -0.08960905        0 -0.26772200\n127  1          Kif14 -0.2413563 6.697992e-05 -0.05739981        0 -1.42479045\n128  1          Ccne2 -0.2407200 7.093645e-05 -0.07618563        0 -0.71455928\n129  1        Depdc1b -0.2406696 7.093645e-05 -0.05616915        0 -1.56056026\n130  1         Chaf1a -0.2402076 7.392247e-05 -0.10026504        0 -0.42660203\n131  1           Bub3 -0.2371624 1.009733e-04 -0.11330861        0 -0.32575557\n132  1           E2f7 -0.2362972 1.088608e-04 -0.07277220        0 -0.85357845\n133  1          Traip -0.2352978 1.190139e-04 -0.07380604        0 -0.59275787\n134  1          Hyls1 -0.2352964 1.190139e-04 -0.06330716        0 -0.95670143\n135  1          Kif24 -0.2349072 1.230099e-04 -0.08422839        0 -0.49690869\n136  1          Reep4 -0.2347259 1.235970e-04 -0.07157787        0 -0.65557999\n137  1          Cenph -0.2347227 1.235970e-04 -0.10487389        0 -0.41492497\n138  1           Hmmr -0.2342765 1.285075e-04 -0.08589794        0 -0.52028450\n139  1           Anln -0.2332649 1.416020e-04 -0.07113966        0 -0.75927799\n140  1          Ticrr -0.2327705 1.479314e-04 -0.07496548        0 -0.70524025\n141  1         Pimreg -0.2324257 1.521902e-04 -0.10581301        0 -0.34621829\n142  1          Aunip -0.2320124 1.576701e-04 -0.07999779        0 -0.59213946\n143  1           Nuf2 -0.2304250 1.840666e-04 -0.08503240        0 -0.50607161\n144  1            Dtl -0.2302743 1.856399e-04 -0.10446510        0 -0.42075676\n145  1          Cenpx -0.2292344 2.048590e-04 -0.11056324        0 -0.24235016\n146  1         Cntrob -0.2291129 2.060064e-04 -0.07438217        0 -0.67894677\n147  1         Rad54l -0.2267090 2.588286e-04 -0.09004554        0 -0.41184508\n148  1          Cenpw -0.2250111 3.045286e-04 -0.10922664        0 -0.20244836\n149  1           Cmc2 -0.2247665 3.099833e-04 -0.10594066        0 -0.29671280\n150  1          Fanci -0.2245715 3.139981e-04 -0.06121890        0 -0.86014425\n151  1          Fanca -0.2242669 3.215408e-04 -0.06905363        0 -0.73870863\n152  1          Cdca8 -0.2235385 3.433389e-04 -0.10857123        0 -0.23368209\n153  1           Rrm1 -0.2233040 3.491473e-04 -0.10792749        0 -0.31568820\n154  1       Arhgef39 -0.2224917 3.758314e-04 -0.05565570        0 -0.97607975\n155  1         Ncapd2 -0.2221900 3.847103e-04 -0.09335827        0 -0.36937880\n156  1          Pola1 -0.2217078 4.008275e-04 -0.08728350        0 -0.42263953\n157  1            Alk -0.2212275 4.168180e-04 -0.06871975        0 -0.46461618\n158  1          Hmgb2 -0.2208959 4.260067e-04 -0.05924880        0 -0.24553304\n159  1          Mcm10 -0.2207681 4.287401e-04 -0.06170596        0 -0.90064164\n160  1        Efcab11 -0.2204868 4.380070e-04 -0.07655856        0 -0.54307122\n161  1          Cenpk -0.2202202 4.468346e-04 -0.09314175        0 -0.39547251\n162  1          Cenpl -0.2200001 4.522312e-04 -0.07022052        0 -0.37863481\n163  1         Kif20a -0.2198404 4.534013e-04 -0.08537312        0 -0.29966932\n164  1         Kif18b -0.2197383 4.546569e-04 -0.05128913        0 -0.95785453\n165  1          Ncam1 -0.2195373 4.609372e-04 -0.10363067        0 -0.19612184\n166  1          Mastl -0.2178766 5.381386e-04 -0.05862032        0 -0.79832815\n167  1           Nrg1 -0.2169574 5.845271e-04 -0.10327106        0 -0.30303545\n168  1           Smc6 -0.2161918 6.254620e-04 -0.09910599        0 -0.21993711\n169  1          Dscc1 -0.2159463 6.367035e-04 -0.07644786        0 -0.58640682\n170  1          Cenpe -0.2155197 6.594551e-04 -0.09889853        0 -0.38378393\n171  1           Bub1 -0.2154250 6.617248e-04 -0.07862032        0 -0.42258635\n172  1          Haus6 -0.2142610 7.351154e-04 -0.07866538        0 -0.43741610\n173  1          Kif2c -0.2139140 7.555163e-04 -0.07800039        0 -0.52744112\n174  1         Ctnnd2 -0.2137427 7.573381e-04 -0.09568769        0 -0.15534393\n175  1          Ckap2 -0.2137406 7.573381e-04 -0.08947444        0 -0.36850685\n176  1         Gas2l3 -0.2133515 7.796036e-04 -0.05890705        0 -0.72795802\n177  1         Trim59 -0.2128214 8.152110e-04 -0.09803222        0 -0.30218599\n178  1           Polq -0.2127256 8.176158e-04 -0.06224861        0 -0.76304017\n179  1          Gtse1 -0.2126768 8.176158e-04 -0.04870482        0 -1.14166990\n180  1          Alcam -0.2121553 8.542220e-04 -0.10317920        0 -0.24756436\n181  1         Sac3d1 -0.2116731 8.891085e-04 -0.10025733        0 -0.19423089\n182  1          Cyr61 -0.2112661 9.188636e-04 -0.10204325        0 -0.16795355\n183  1        Zfp280b -0.2108908 9.467642e-04 -0.05358259        0 -0.95203364\n184  1            Cpq -0.2106668 9.617950e-04 -0.09906932        0 -0.20075735\n185  1        Depdc1a -0.2099214 1.020489e-03 -0.05333948        0 -0.80206625\n186  1        Tbc1d31 -0.2098100 1.025866e-03 -0.06141142        0 -0.73036862\n187  1           Mcm8 -0.2081406 1.185742e-03 -0.07174984        0 -0.58955329\n188  1          Auts2 -0.2081393 1.185742e-03 -0.06640302        0 -0.19535794\n189  1         Ncapg2 -0.2062340 1.398899e-03 -0.06037660        0 -0.67393298\n190  1         Zwilch -0.2058915 1.431226e-03 -0.06738995        0 -0.46756468\n191  1         Prdm16 -0.2051094 1.527476e-03 -0.09883291        0 -0.27672292\n192  1          Dusp1 -0.2049245 1.545835e-03 -0.08776518        0 -0.35223351\n193  1 X4930503L19Rik -0.2048064 1.554926e-03 -0.06122883        0 -0.56591168\n194  1          Mybl2 -0.2041545 1.641891e-03 -0.04854400        0 -0.98716750\n195  1          Mcph1 -0.2031345 1.792176e-03 -0.06855129        0 -0.65518956\n196  1         Cfap43 -0.2029929 1.805870e-03 -0.06645196        0 -0.49553195\n197  1         Gemin6 -0.2029438 1.805870e-03 -0.08767795        0 -0.30328523\n198  1         Chtf18 -0.2023525 1.895742e-03 -0.06107332        0 -0.74072318\n199  1         Parpbp -0.2018880 1.967288e-03 -0.05285000        0 -0.70517028\n200  1          Fstl5 -0.2014934 2.028652e-03 -0.08728841        0 -0.31422503\n201  1        Gadd45g  0.3595736 5.927429e-11  0.14934759        0  1.08181331\n202  1        Neurog2  0.3084574 4.551272e-08  0.15056727        0  0.79111438\n203  1      Hist1h2bc  0.2941585 2.572768e-07  0.12847347        0  0.52148412\n204  1          Podxl  0.2363473 1.088608e-04  0.07279118        0  0.70127905\n205  1           Mfng  0.2274360 2.422516e-04  0.07840404        0  0.55033747\n206  1          Aldoa  0.2211818 4.168180e-04  0.08213426        0  0.26310717\n207  1           Dll1  0.2199744 4.522312e-04  0.06502292        0  0.81833603\n208  1          Ddit4  0.2198268 4.534013e-04  0.10178360        0  0.39760980\n209  1           Hes6  0.2137150 7.573381e-04  0.10384479        0  0.30821612\n210  1          Tomm7  0.2103569 9.849345e-04  0.06493611        0  0.16139786\n211  1          Rnf14  0.2074146 1.261389e-03  0.09013062        0  0.33618320\n212  1         Gm9856  0.2058759 1.431226e-03  0.07197281        0  0.47750325\n213  1        Fam136a  0.1921611 4.097780e-03  0.09113293        0  0.21039371\n214  1         Ndufb3  0.1919332 4.146230e-03  0.08632615        0  0.15553870\n215  1         Tspan6  0.1903079 4.651188e-03  0.09212389        0  0.16223114\n216  1           Aprt  0.1864537 6.117260e-03  0.08223017        0  0.13770635\n217  1        Trmt61a  0.1846892 6.848078e-03  0.06818529        0  0.43004524\n218  1         Srfbp1  0.1840712 7.154392e-03  0.05877979        0  0.44510482\n219  1        Tmem178  0.1839731 7.186083e-03  0.06256253        0  0.37939803\n220  1          Rab8b  0.1828234 7.538909e-03  0.06259367        0  0.49522401\n221  1           Tma7  0.1820912 7.867291e-03  0.04044068        0  0.15760872\n222  1           Sub1  0.1812591 8.392081e-03  0.01569188        0  0.07469808\n223  1           Cct2  0.1810312 8.490936e-03  0.06715492        0  0.18952998\n224  1         Acot13  0.1803756 8.872374e-03  0.08391502        0  0.26157293\n225  1         Arl2bp  0.1774562 1.078002e-02  0.07140941        0  0.19942396\n226  1         Ptp4a3  0.1773747 1.081536e-02  0.05356866        0  0.58530066\n227  1          Ap3m1  0.1770835 1.103439e-02  0.07491121        0  0.27987165\n228  1 X1810058I24Rik  0.1768613 1.112398e-02  0.07971667        0  0.12541811\n229  1           Sdhc  0.1761029 1.174160e-02  0.08389415        0  0.19825925\n230  1         Fbxl20  0.1751397 1.251452e-02  0.07610586        0  0.31119901\n231  1        Gm32834  0.1748799 1.269440e-02  0.03676239        0  1.09973833\n232  1        Slc39a7  0.1746889 1.280739e-02  0.07569310        0  0.34680381\n233  1          Bnip3  0.1742117 1.321642e-02  0.05880009        0  0.46651426\n234  1        Neurog1  0.1739841 1.333193e-02  0.04054636        0  0.67051461\n235  1          Cebpz  0.1733341 1.390273e-02  0.08236175        0  0.24311459\n236  1         Mrpl19  0.1724317 1.474105e-02  0.08379000        0  0.16097334\n237  1          Ddx18  0.1720202 1.508618e-02  0.08369583        0  0.18557967\n238  1            Spr  0.1703012 1.674071e-02  0.07922818        0  0.21624946\n239  1       Dmrta2os  0.1699963 1.708988e-02  0.05981817        0  0.35377404\n240  1          Kcmf1  0.1690751 1.815902e-02  0.07500989        0  0.31577046\n241  1         Ndufc2  0.1690552 1.815902e-02  0.01485588        0  0.06217101\n242  1          Cmtm7  0.1689266 1.818872e-02  0.06531315        0  0.29572684\n243  1          Kdm5b  0.1686558 1.846588e-02  0.07619411        0  0.25491105\n244  1          Mccc1  0.1670770 2.037122e-02  0.05194350        0  0.46974262\n245  1        Abhd14a  0.1663399 2.114490e-02  0.06871033        0  0.27428763\n246  1          Rcor2  0.1661839 2.126872e-02  0.07006605        0  0.27689886\n247  1          Hddc2  0.1660825 2.126872e-02  0.08072340        0  0.24241510\n248  1         Ndufb5  0.1659661 2.131547e-02  0.03953737        0  0.09638996\n249  1        Cox7a2l  0.1658503 2.140478e-02  0.05235214        0  0.11824384\n250  1 X2810001G20Rik  0.1645005 2.333334e-02  0.06866515        0  0.29024271\n251  1         Rangrf  0.1620887 2.694558e-02  0.07529293        0  0.20839021\n252  1          Lrp10  0.1605675 2.969498e-02  0.04544019        0  0.43615464\n253  1         Rhbdl3  0.1599337 3.080253e-02  0.07787645        0  0.18396329\n254  1         Zfp106  0.1592079 3.239819e-02  0.07251392        0  0.19686795\n255  1        Tmem216  0.1589157 3.285479e-02  0.07163892        0  0.24091087\n256  1          Snrpa  0.1572212 3.601140e-02  0.05669367        0  0.12667597\n257  1          Ssbp1  0.1571507 3.605846e-02  0.06485716        0  0.06850980\n258  1           Cct5  0.1571383 3.605846e-02  0.02339027        0  0.13050399\n259  1       Slc25a53  0.1566034 3.712613e-02  0.04682089        0  0.56385943\n260  1         Pabpc4  0.1560212 3.844173e-02  0.07468316        0  0.15725450\n261  1 X6330403K07Rik  0.1555787 3.949586e-02  0.04751099        0  0.10755792\n262  1         Elavl4  0.1553604 4.002414e-02  0.07342346        0  0.32321693\n263  1          Eif1a  0.1552060 4.028365e-02  0.06799225        0  0.21842702\n264  1            Bsg  0.1549499 4.093202e-02  0.05036785        0  0.11675589\n265  1         Cachd1  0.1549066 4.094674e-02  0.07451348        0  0.13780933\n266  1        Tcp11l2  0.1540318 4.272180e-02  0.02318693        0  1.61513667\n267  1         Zfp429  0.1540318 4.272180e-02  0.02318693        0  1.58709349\n268  1          Gsta4  0.1535901 4.388212e-02  0.06959148        0  0.20019753\n269  1          Fscn1  0.1534030 4.436779e-02  0.05699276        0  0.15007753\n270  1           Btg2  0.1532538 4.464086e-02  0.07338873        0  0.26686974\n271  1           Rcn2  0.1528100 4.585610e-02  0.05546453        0  0.13155531\n272  1            Cth  0.1522227 4.721100e-02  0.04096806        0  0.51121186\n273  1          Kdm7a  0.1517242 4.853033e-02  0.04927190        0  0.38875129\n274  1            Oaf  0.1512680 4.999282e-02  0.03179492        0  0.79620125\n275  1         Akr1b3  0.1505660 5.194022e-02  0.06884697        0  0.17848833\n276  1        Laptm4a  0.1504818 5.213468e-02  0.05470694        0  0.11598270\n277  1           Emc6  0.1498508 5.383723e-02  0.05955018        0  0.13941727\n278  1          Cyb5a  0.1498460 5.383723e-02  0.07115940        0  0.15924006\n279  1          Smyd5  0.1498331 5.383723e-02  0.05306514        0  0.31180686\n280  1          Eomes  0.1497793 5.383723e-02  0.03426595        0  0.99653304\n281  1           Twf2  0.1494332 5.478815e-02  0.04645294        0  0.34609526\n282  1         Dynll1  0.1491893 5.550503e-02  0.02403243        0  0.13920907\n283  1           Ppib  0.1491850 5.550503e-02  0.04812378        0  0.13658345\n284  1          Car14  0.1488945 5.650954e-02  0.06858438        0  0.27265318\n285  1           Ssr3  0.1488520 5.655955e-02  0.07229142        0  0.17499463\n286  1       Slc16a14  0.1484626 5.762160e-02  0.04250286        0  0.49775549\n287  1           Ptms  0.1482478 5.835794e-02  0.05377923        0  0.16232360\n288  1         Akr1a1  0.1478421 5.941518e-02  0.05012078        0  0.07991564\n289  1         Mrpl50  0.1477853 5.941518e-02  0.07182503        0  0.19412975\n290  1         Ube2e1  0.1477802 5.941518e-02  0.06744562        0  0.14635510\n291  1          Stat3  0.1471698 6.132974e-02  0.04444910        0  0.41955609\n292  1          Psma4  0.1470254 6.157121e-02  0.04668576        0  0.11493070\n293  1          Sept1  0.1468237 6.225423e-02  0.05199323        0  0.27879073\n294  1          Prr13  0.1468055 6.225423e-02  0.05974453        0  0.23693862\n295  1          Rrp36  0.1464758 6.328175e-02  0.06347167        0  0.30509595\n296  1          Msto1  0.1461502 6.445302e-02  0.05175333        0  0.31388792\n297  1          Pmpcb  0.1454773 6.668687e-02  0.06915984        0  0.17388327\n298  1           Imp3  0.1454748 6.668687e-02  0.06915860        0  0.12688902\n299  1           Cd63  0.1450193 6.822172e-02  0.06637609        0  0.13224445\n300  1 X2610318N02Rik  0.1449954 6.822172e-02  0.05967041        0  0.20833730\n301  1          Prmt6  0.1443797 7.018013e-02  0.05080573        0  0.30059609\n302  1          Ntpcr  0.1443774 7.018013e-02  0.03174679        0  0.75997647\n303  1        Gm19710  0.1439911 7.135076e-02  0.02720730        0  0.93374304\n304  1         Snap23  0.1438457 7.178142e-02  0.06085069        0  0.24740506\n305  1        Slc25a4  0.1435621 7.274965e-02  0.01342982        0  0.06335178\n306  1        Tcp11l1  0.1432926 7.352784e-02  0.05831071        0  0.16940140\n307  1          Stk16  0.1427134 7.585860e-02  0.06877953        0  0.21944668\n308  1          Fubp1  0.1424622 7.685432e-02  0.03880012        0  0.04863724\n309  1         Ccdc12  0.1423095 7.749491e-02  0.06607496        0  0.14966536\n310  1         Dlgap4  0.1422088 7.773359e-02  0.06538154        0  0.25058020\n311  1           Tln1  0.1421004 7.808204e-02  0.05064403        0  0.34831994\n312  1           Pecr  0.1417621 7.960855e-02  0.05582087        0  0.24887079\n313  1          Ddx54  0.1417396 7.960855e-02  0.05700177        0  0.22828241\n314  1          Cd24a  0.1416218 7.980361e-02  0.06674687        0  0.25014508\n315  1           Gcsh  0.1412395 8.154795e-02  0.06820932        0  0.07318525\n316  1          Tmem5  0.1407533 8.345675e-02  0.05855359        0  0.21542673\n317  1         Snhg20  0.1403694 8.513433e-02  0.04064673        0  0.42820856\n318  1         Fam53a  0.1398698 8.750023e-02  0.06419564        0  0.27774908\n319  1        Gm10282  0.1397897 8.774911e-02  0.06471505        0  0.19348540\n320  1           Palm  0.1397478 8.774911e-02  0.05985586        0  0.17080431\n321  1          Simc1  0.1396326 8.795086e-02  0.03198960        0  0.61938780\n322  1          Pebp1  0.1395347 8.826323e-02  0.02511708        0  0.08695352\n323  1         Igfbp2  0.1385384 9.267770e-02  0.05982675        0  0.19631217\n324  1          Pias1  0.1384789 9.284811e-02  0.06282098        0  0.22298746\n325  1           Dcxr  0.1384581 9.284811e-02  0.02536880        0  0.92110045\n326  1       Ankrd13a  0.1380796 9.466960e-02  0.02760831        0  0.62519506\n327  1         Ubxn2b  0.1379544 9.496243e-02  0.05816930        0  0.22615426\n328  1         Pik3r2  0.1377437 9.578391e-02  0.05028361        0  0.24968510\n329  1 X5031425E22Rik  0.1377167 9.579232e-02  0.06320169        0  0.21372264\n330  1         Fbxo17  0.1375642 9.655605e-02  0.03846721        0  0.46627106\n331  1          Ramp2  0.1374382 9.679857e-02  0.01855276        0  1.52943421\n332  1         Tspyl5  0.1374382 9.679857e-02  0.01855276        0  1.62043701\n333  1         Scpep1  0.1371149 9.811397e-02  0.04452717        0  0.33635588\n334  1           Nip7  0.1370386 9.843514e-02  0.06649356        0  0.15686110\n335  1         Hmgcs1  0.1369218 9.901431e-02  0.05854540        0  0.16564632\n336  1 X6230400D17Rik  0.1367976 9.945869e-02  0.02942634        0  0.70453254\n337  1        Mthfd2l  0.1367763 9.945869e-02  0.06604103        0  0.23476654\n338  1         Gm2000  0.1366102 1.001981e-01  0.04124338        0  0.16473992\n339  1        Gpatch4  0.1361654 1.027534e-01  0.05831893        0  0.15582933\n340  1           Phb2  0.1360299 1.029859e-01  0.04213203        0  0.07712588\n341  1           Sra1  0.1359891 1.030905e-01  0.06544024        0  0.18380800\n342  1          Lzts1  0.1358559 1.038028e-01  0.02715838        0  0.72530722\n343  1         Mospd3  0.1357947 1.040434e-01  0.05013706        0  0.31776492\n344  1        Arl6ip5  0.1351405 1.069055e-01  0.06325452        0  0.10783623\n345  1           Eprs  0.1350991 1.069055e-01  0.06333042        0  0.03475520\n346  1          Cenpa  0.1348554 1.077045e-01  0.06546116        0  0.16292070\n347  1          Cops9  0.1347265 1.084185e-01  0.05264567        0  0.04780959\n348  1          Uchl1  0.1346927 1.084829e-01  0.06545006        0  0.06169592\n349  1        Gm11266  0.1345357 1.092275e-01  0.05996771        0  0.26634756\n350  1          Nr2c1  0.1343209 1.100428e-01  0.03194647        0  0.56368999\n351  1          Wdr95  0.1339481 1.121434e-01  0.01807128        0  1.56297981\n352  1 X2300009A05Rik  0.1334970 1.144051e-01  0.05474103        0  0.25224360\n353  1          Rnf11  0.1334470 1.144051e-01  0.05876416        0  0.22090448\n354  1          Eif4b  0.1334379 1.144051e-01  0.06489145        0  0.12319154\n355  1          Ahsa2  0.1327525 1.174805e-01  0.06412959        0  0.15270116\n356  1 X2010107E04Rik  0.1327236 1.175189e-01  0.06319460        0  0.15734182\n357  1           Tfrc  0.1325234 1.188205e-01  0.02976028        0  0.49164112\n358  1          Vps72  0.1322207 1.208627e-01  0.05705755        0  0.07620395\n359  1         Txnrd3  0.1319679 1.213933e-01  0.02081053        0  0.87045585\n360  1 X1700086P04Rik  0.1319679 1.213933e-01  0.02081053        0  1.10064867\n361  1          Acads  0.1318497 1.219337e-01  0.05145460        0  0.21839838\n362  1         Mplkip  0.1316710 1.229369e-01  0.06385187        0  0.05028944\n363  1         Alkbh1  0.1310999 1.259716e-01  0.06274193        0  0.12453101\n364  1          Hmgn5  0.1309723 1.265239e-01  0.06364395        0  0.14034239\n365  1          Tbrg1  0.1309390 1.265239e-01  0.06361414        0  0.15973951\n366  1         Ifngr1  0.1309286 1.265239e-01  0.03113228        0  0.41843898\n367  1        Dynlrb1  0.1308534 1.267525e-01  0.03910559        0  0.11418009\n368  1           Arf3  0.1307502 1.271165e-01  0.04931862        0  0.31921695\n369  1        Mettl25  0.1306796 1.273307e-01  0.05121933        0  0.15377880\n370  1         Timm10  0.1305824 1.273307e-01  0.06288290        0  0.08988204\n371  1           Mpnd  0.1304876 1.276586e-01  0.06293474        0  0.10671049\n372  1           Ric1  0.1302890 1.288663e-01  0.02738871        0  0.52437183\n373  1          Car12  0.1301317 1.295363e-01  0.02306257        0  0.77035970\n374  1           Pigw  0.1301317 1.295363e-01  0.02306257        0  0.70318278\n375  1           Mafb  0.1300376 1.299221e-01  0.02530018        0  0.59310627\n376  1          Snhg6  0.1297346 1.310917e-01  0.05769545        0  0.24447194\n377  1         Gtpbp4  0.1297027 1.310917e-01  0.06228343        0  0.23450875\n378  1          Nadk2  0.1292870 1.331436e-01  0.04549243        0  0.33504725\n379  1          Mkrn1  0.1291793 1.338412e-01  0.06071828        0  0.23594339\n380  1          Nek11  0.1289698 1.346706e-01  0.02710808        0  0.42844149\n381  1         Cacul1  0.1289460 1.346706e-01  0.04595601        0  0.27116308\n382  1          Arl5b  0.1285275 1.371064e-01  0.03881029        0  0.45247846\n383  1          Masp1  0.1285267 1.371064e-01  0.06208850        0  0.13588728\n384  1           Nbdy  0.1284647 1.371064e-01  0.06229046        0  0.09349612\n385  1         Kif21b  0.1284549 1.371064e-01  0.01623913        0  1.66205924\n386  1      Trp53inp1  0.1284549 1.371064e-01  0.01623913        0  1.61979104\n387  1          Rragc  0.1283215 1.380392e-01  0.03987145        0  0.25524563\n388  1         Lmbr1l  0.1282351 1.385814e-01  0.04570180        0  0.27113358\n389  1          Grina  0.1280122 1.395824e-01  0.04016381        0  0.36177408\n390  1         Eif3j2  0.1280082 1.395824e-01  0.05783071        0  0.21027348\n391  1          Pcgf6  0.1278201 1.404456e-01  0.04115869        0  0.36212766\n392  1           Eml2  0.1275988 1.416518e-01  0.04400849        0  0.20888016\n393  1        Trappc4  0.1275492 1.416518e-01  0.05485342        0  0.11320166\n394  1         Trmt12  0.1275144 1.416518e-01  0.03812821        0  0.33337235\n395  1        Rpl36al  0.1275143 1.416518e-01  0.04801270        0  0.03789278\n396  1           Nfs1  0.1274958 1.416518e-01  0.04543699        0  0.33097538\n397  1          Cox17  0.1274539 1.417436e-01  0.05919833        0  0.16747023\n398  1         Zfp560  0.1271865 1.430436e-01  0.04894073        0  0.21297836\n399  1 X4833420G17Rik  0.1271798 1.430436e-01  0.05541118        0  0.31809204\n400  1           Sqle  0.1271778 1.430436e-01  0.06131240        0  0.09573956\n401  2        Gadd45g -0.3595837 5.918118e-11 -0.15200690        0 -1.08181331\n402  2        Neurog2 -0.3084489 4.556460e-08 -0.15323973        0 -0.79111438\n403  2      Hist1h2bc -0.2941607 2.572046e-07 -0.13075837        0 -0.52148412\n404  2          Podxl -0.2363572 1.088527e-04 -0.07408833        0 -0.70127905\n405  2           Mfng -0.2274326 2.423335e-04 -0.07979668        0 -0.55033747\n406  2          Aldoa -0.2211792 4.169229e-04 -0.08359342        0 -0.26310717\n407  2           Dll1 -0.2199764 4.521433e-04 -0.06617946        0 -0.81833603\n408  2          Ddit4 -0.2198345 4.532820e-04 -0.10359669        0 -0.39760980\n409  2           Hes6 -0.2137113 7.576046e-04 -0.10568904        0 -0.30821612\n410  2          Tomm7 -0.2103627 9.844036e-04 -0.06609232        0 -0.16139786\n411  2          Rnf14 -0.2074194 1.260826e-03 -0.09173506        0 -0.33618320\n412  2         Gm9856 -0.2058774 1.431027e-03 -0.07325284        0 -0.47750325\n413  2        Fam136a -0.1921529 4.095497e-03 -0.09274904        0 -0.21039371\n414  2         Ndufb3 -0.1919400 4.142248e-03 -0.08786392        0 -0.15553870\n415  2         Tspan6 -0.1903016 4.653688e-03 -0.09375851        0 -0.16223114\n416  2           Aprt -0.1864500 6.119130e-03 -0.08369037        0 -0.13770635\n417  2        Trmt61a -0.1846770 6.855004e-03 -0.06939287        0 -0.43004524\n418  2         Srfbp1 -0.1840697 7.155293e-03 -0.05982425        0 -0.44510482\n419  2        Tmem178 -0.1839804 7.181725e-03 -0.06367726        0 -0.37939803\n420  2          Rab8b -0.1828327 7.533120e-03 -0.06370968        0 -0.49522401\n421  2           Tma7 -0.1821031 7.859615e-03 -0.04116231        0 -0.15760872\n422  2           Sub1 -0.1812468 8.400527e-03 -0.01596976        0 -0.07469808\n423  2           Cct2 -0.1810271 8.493803e-03 -0.06834720        0 -0.18952998\n424  2         Acot13 -0.1803725 8.878394e-03 -0.08540537        0 -0.26157293\n425  2         Arl2bp -0.1774545 1.078150e-02 -0.07267819        0 -0.19942396\n426  2         Ptp4a3 -0.1773755 1.081472e-02 -0.05452120        0 -0.58530066\n427  2          Ap3m1 -0.1770850 1.103302e-02 -0.07624360        0 -0.27987165\n428  2 X1810058I24Rik -0.1768683 1.111774e-02 -0.08113705        0 -0.12541811\n429  2           Sdhc -0.1761079 1.173695e-02 -0.08538799        0 -0.19825925\n430  2         Fbxl20 -0.1751477 1.250660e-02 -0.07746236        0 -0.31119901\n431  2        Gm32834 -0.1748872 1.268914e-02 -0.03741748        0 -1.09973833\n432  2        Slc39a7 -0.1746822 1.281420e-02 -0.07703575        0 -0.34680381\n433  2          Bnip3 -0.1742010 1.322760e-02 -0.05984172        0 -0.46651426\n434  2        Neurog1 -0.1739863 1.332968e-02 -0.04126767        0 -0.67051461\n435  2          Cebpz -0.1733362 1.390045e-02 -0.08382694        0 -0.24311459\n436  2         Mrpl19 -0.1724289 1.474425e-02 -0.08527819        0 -0.16097334\n437  2          Ddx18 -0.1720213 1.508488e-02 -0.08518428        0 -0.18557967\n438  2            Spr -0.1702982 1.674463e-02 -0.08063521        0 -0.21624946\n439  2       Dmrta2os -0.1699909 1.709699e-02 -0.06087965        0 -0.35377404\n440  2         Ndufc2 -0.1690962 1.814800e-02 -0.01512365        0 -0.06217101\n441  2          Kcmf1 -0.1690665 1.814800e-02 -0.07633949        0 -0.31577046\n442  2          Cmtm7 -0.1689323 1.818080e-02 -0.06647649        0 -0.29572684\n443  2          Kdm5b -0.1686472 1.847808e-02 -0.07754468        0 -0.25491105\n444  2          Mccc1 -0.1670793 2.036757e-02 -0.05286767        0 -0.46974262\n445  2        Abhd14a -0.1663357 2.116173e-02 -0.06993005        0 -0.27428763\n446  2          Rcor2 -0.1661838 2.126580e-02 -0.07131158        0 -0.27689886\n447  2          Hddc2 -0.1660861 2.126580e-02 -0.08216021        0 -0.24241510\n448  2         Ndufb5 -0.1659689 2.130799e-02 -0.04024091        0 -0.09638996\n449  2        Cox7a2l -0.1658405 2.142052e-02 -0.05327968        0 -0.11824384\n450  2 X2810001G20Rik -0.1645036 2.332793e-02 -0.06988715        0 -0.29024271\n451  2         Rangrf -0.1620829 2.695698e-02 -0.07662873        0 -0.20839021\n452  2          Lrp10 -0.1605539 2.972456e-02 -0.04624408        0 -0.43615464\n453  2         Rhbdl3 -0.1599396 3.078911e-02 -0.07926385        0 -0.18396329\n454  2         Zfp106 -0.1592108 3.239139e-02 -0.07380437        0 -0.19686795\n455  2        Tmem216 -0.1589145 3.285764e-02 -0.07291193        0 -0.24091087\n456  2          Snrpa -0.1572189 3.601733e-02 -0.05770070        0 -0.12667597\n457  2           Cct5 -0.1571537 3.603018e-02 -0.02380842        0 -0.13050399\n458  2          Ssbp1 -0.1571492 3.603018e-02 -0.06600952        0 -0.06850980\n459  2       Slc25a53 -0.1566045 3.712324e-02 -0.04765357        0 -0.56385943\n460  2         Pabpc4 -0.1560155 3.845750e-02 -0.07600804        0 -0.15725450\n461  2 X6330403K07Rik -0.1555930 3.945538e-02 -0.04836008        0 -0.10755792\n462  2         Elavl4 -0.1553694 3.999857e-02 -0.07473305        0 -0.32321693\n463  2          Eif1a -0.1552051 4.028640e-02 -0.06920055        0 -0.21842702\n464  2            Bsg -0.1549543 4.091921e-02 -0.05126472        0 -0.11675589\n465  2         Cachd1 -0.1549163 4.093764e-02 -0.07584285        0 -0.13780933\n466  2        Tcp11l2 -0.1540007 4.281572e-02 -0.02359438        0 -1.61513667\n467  2         Zfp429 -0.1540007 4.281572e-02 -0.02359438        0 -1.58709349\n468  2          Gsta4 -0.1535908 4.388019e-02 -0.07082893        0 -0.20019753\n469  2          Fscn1 -0.1533933 4.439793e-02 -0.05800230        0 -0.15007753\n470  2           Btg2 -0.1532524 4.464512e-02 -0.07469273        0 -0.26686974\n471  2           Rcn2 -0.1528176 4.583175e-02 -0.05645334        0 -0.13155531\n472  2            Cth -0.1522388 4.721775e-02 -0.04170078        0 -0.51121186\n473  2          Kdm7a -0.1517203 4.854347e-02 -0.05014655        0 -0.38875129\n474  2            Oaf -0.1512588 5.002462e-02 -0.03235820        0 -0.79620125\n475  2         Akr1b3 -0.1505592 5.196462e-02 -0.07006774        0 -0.17848833\n476  2        Laptm4a -0.1504796 5.214241e-02 -0.05567869        0 -0.11598270\n477  2           Emc6 -0.1498619 5.380964e-02 -0.06061335        0 -0.13941727\n478  2          Cyb5a -0.1498478 5.380964e-02 -0.07242528        0 -0.15924006\n479  2          Smyd5 -0.1498445 5.380964e-02 -0.05401260        0 -0.31180686\n480  2          Eomes -0.1497961 5.380964e-02 -0.03487901        0 -0.99653304\n481  2           Twf2 -0.1494464 5.473842e-02 -0.04728292        0 -0.34609526\n482  2           Ppib -0.1491962 5.557599e-02 -0.04898297        0 -0.13658345\n483  2         Dynll1 -0.1491630 5.558912e-02 -0.02445536        0 -0.13920907\n484  2          Car14 -0.1488953 5.650635e-02 -0.06980402        0 -0.27265318\n485  2           Ssr3 -0.1488556 5.654535e-02 -0.07357838        0 -0.17499463\n486  2       Slc16a14 -0.1484599 5.763242e-02 -0.04325765        0 -0.49775549\n487  2           Ptms -0.1482455 5.836717e-02 -0.05473443        0 -0.16232360\n488  2         Akr1a1 -0.1478476 5.941075e-02 -0.05101371        0 -0.07991564\n489  2         Ube2e1 -0.1477805 5.941075e-02 -0.06864477        0 -0.14635510\n490  2         Mrpl50 -0.1477769 5.941075e-02 -0.07309777        0 -0.19412975\n491  2          Stat3 -0.1471849 6.127832e-02 -0.04524393        0 -0.41955609\n492  2          Psma4 -0.1470182 6.160150e-02 -0.04751337        0 -0.11493070\n493  2          Sept1 -0.1468223 6.225913e-02 -0.05291703        0 -0.27879073\n494  2          Prr13 -0.1468044 6.225913e-02 -0.06080615        0 -0.23693862\n495  2          Rrp36 -0.1464705 6.327585e-02 -0.06459770        0 -0.30509595\n496  2          Msto1 -0.1461568 6.442428e-02 -0.05267575        0 -0.31388792\n497  2           Imp3 -0.1454728 6.670492e-02 -0.07038709        0 -0.12688902\n498  2          Pmpcb -0.1454708 6.670492e-02 -0.07038615        0 -0.17388327\n499  2           Cd63 -0.1450200 6.818114e-02 -0.06755641        0 -0.13224445\n500  2 X2610318N02Rik -0.1450037 6.818114e-02 -0.06073467        0 -0.20833730\n501  2          Prmt6 -0.1443678 7.024368e-02 -0.05170465        0 -0.30059609\n502  2          Ntpcr -0.1443638 7.024368e-02 -0.03230814        0 -0.75997647\n503  2        Gm19710 -0.1440032 7.129288e-02 -0.02769331        0 -0.93374304\n504  2         Snap23 -0.1438472 7.177397e-02 -0.06193312        0 -0.24740506\n505  2        Slc25a4 -0.1435659 7.273119e-02 -0.01366893        0 -0.06335178\n506  2        Tcp11l1 -0.1432905 7.353777e-02 -0.05934648        0 -0.16940140\n507  2          Stk16 -0.1427143 7.585412e-02 -0.07000269        0 -0.21944668\n508  2          Fubp1 -0.1424769 7.677960e-02 -0.03949396        0 -0.04863724\n509  2         Ccdc12 -0.1423097 7.749424e-02 -0.06724967        0 -0.14966536\n510  2         Dlgap4 -0.1422050 7.775325e-02 -0.06654207        0 -0.25058020\n511  2           Tln1 -0.1420950 7.806190e-02 -0.05154239        0 -0.34831994\n512  2           Pecr -0.1417578 7.960705e-02 -0.05681148        0 -0.24887079\n513  2          Ddx54 -0.1417399 7.960705e-02 -0.05801523        0 -0.22828241\n514  2          Cd24a -0.1416197 7.981475e-02 -0.06793243        0 -0.25014508\n515  2           Gcsh -0.1412350 8.157178e-02 -0.06941972        0 -0.07318525\n516  2          Tmem5 -0.1407450 8.350171e-02 -0.05959104        0 -0.21542673\n517  2         Snhg20 -0.1403717 8.512575e-02 -0.04137003        0 -0.42820856\n518  2         Fam53a -0.1398682 8.750936e-02 -0.06533613        0 -0.27774908\n519  2        Gm10282 -0.1397952 8.777509e-02 -0.06586811        0 -0.19348540\n520  2           Palm -0.1397409 8.778311e-02 -0.06091692        0 -0.17080431\n521  2          Simc1 -0.1396293 8.797012e-02 -0.03255751        0 -0.61938780\n522  2          Pebp1 -0.1395388 8.826259e-02 -0.02556433        0 -0.08695352\n523  2         Igfbp2 -0.1385365 9.268903e-02 -0.06088948        0 -0.19631217\n524  2           Dcxr -0.1384752 9.275620e-02 -0.02582298        0 -0.92110045\n525  2          Pias1 -0.1384734 9.275620e-02 -0.06393526        0 -0.22298746\n526  2       Ankrd13a -0.1380825 9.465205e-02 -0.02809970        0 -0.62519506\n527  2         Ubxn2b -0.1379558 9.495371e-02 -0.05920401        0 -0.22615426\n528  2         Pik3r2 -0.1377413 9.579824e-02 -0.05117666        0 -0.24968510\n529  2 X5031425E22Rik -0.1377098 9.583477e-02 -0.06432204        0 -0.21372264\n530  2         Fbxo17 -0.1375802 9.647802e-02 -0.03915561        0 -0.46627106\n531  2          Ramp2 -0.1374653 9.671652e-02 -0.01888630        0 -1.52943421\n532  2         Tspyl5 -0.1374653 9.671652e-02 -0.01888630        0 -1.62043701\n533  2         Scpep1 -0.1371058 9.817111e-02 -0.04531574        0 -0.33635588\n534  2           Nip7 -0.1370387 9.843461e-02 -0.06767569        0 -0.15686110\n535  2         Hmgcs1 -0.1369305 9.895937e-02 -0.05958996        0 -0.16564632\n536  2 X6230400D17Rik -0.1367963 9.945121e-02 -0.02994917        0 -0.70453254\n537  2        Mthfd2l -0.1367774 9.945121e-02 -0.06721565        0 -0.23476654\n538  2         Gm2000 -0.1366051 1.002309e-01 -0.04197501        0 -0.16473992\n539  2        Gpatch4 -0.1361589 1.027958e-01 -0.05935287        0 -0.15582933\n540  2           Phb2 -0.1360390 1.030021e-01 -0.04288388        0 -0.07712588\n541  2           Sra1 -0.1359958 1.030460e-01 -0.06660692        0 -0.18380800\n542  2          Lzts1 -0.1358407 1.039037e-01 -0.02763807        0 -0.72530722\n543  2         Mospd3 -0.1357939 1.040485e-01 -0.05102807        0 -0.31776492\n544  2        Arl6ip5 -0.1351390 1.068945e-01 -0.06437830        0 -0.10783623\n545  2           Eprs -0.1350970 1.068945e-01 -0.06445527        0 -0.03475520\n546  2          Cenpa -0.1348527 1.077228e-01 -0.06662356        0 -0.16292070\n547  2          Cops9 -0.1347204 1.084602e-01 -0.05357915        0 -0.04780959\n548  2          Uchl1 -0.1346926 1.084836e-01 -0.06661354        0 -0.06169592\n549  2        Gm11266 -0.1345404 1.091958e-01 -0.06103587        0 -0.26634756\n550  2          Nr2c1 -0.1343176 1.100660e-01 -0.03251359        0 -0.56368999\n551  2          Wdr95 -0.1339797 1.119207e-01 -0.01839688        0 -1.56297981\n552  2 X2300009A05Rik -0.1334867 1.144180e-01 -0.05570988        0 -0.25224360\n553  2          Rnf11 -0.1334571 1.144180e-01 -0.05981336        0 -0.22090448\n554  2          Eif4b -0.1334361 1.144180e-01 -0.06604417        0 -0.12319154\n555  2          Ahsa2 -0.1327486 1.174861e-01 -0.06526772        0 -0.15270116\n556  2 X2010107E04Rik -0.1327281 1.174861e-01 -0.06432020        0 -0.15734182\n557  2           Tfrc -0.1325098 1.189214e-01 -0.03028623        0 -0.49164112\n558  2          Vps72 -0.1322102 1.208584e-01 -0.05806729        0 -0.07620395\n559  2         Txnrd3 -0.1319787 1.213117e-01 -0.02118222        0 -0.87045585\n560  2 X1700086P04Rik -0.1319787 1.213117e-01 -0.02118222        0 -1.10064867\n561  2          Acads -0.1318518 1.219175e-01 -0.05237018        0 -0.21839838\n562  2         Mplkip -0.1316768 1.228930e-01 -0.06498984        0 -0.05028944\n563  2         Alkbh1 -0.1310985 1.259206e-01 -0.06385663        0 -0.12453101\n564  2          Hmgn5 -0.1309764 1.265095e-01 -0.06477740        0 -0.14034239\n565  2         Ifngr1 -0.1309404 1.265104e-01 -0.03168858        0 -0.41843898\n566  2          Tbrg1 -0.1309303 1.265104e-01 -0.06474075        0 -0.15973951\n567  2        Dynlrb1 -0.1308498 1.267808e-01 -0.03979968        0 -0.11418009\n568  2           Arf3 -0.1307387 1.271133e-01 -0.05019095        0 -0.31921695\n569  2        Mettl25 -0.1306839 1.273640e-01 -0.05213158        0 -0.15377880\n570  2         Timm10 -0.1305845 1.273883e-01 -0.06400178        0 -0.08988204\n571  2           Mpnd -0.1304973 1.276562e-01 -0.06405830        0 -0.10671049\n572  2           Ric1 -0.1302963 1.288087e-01 -0.02787716        0 -0.52437183\n573  2          Car12 -0.1301060 1.296035e-01 -0.02346793        0 -0.77035970\n574  2           Pigw -0.1301060 1.296035e-01 -0.02346793        0 -0.70318278\n575  2           Mafb -0.1300473 1.298922e-01 -0.02575188        0 -0.59310627\n576  2          Snhg6 -0.1297347 1.310983e-01 -0.05872116        0 -0.24447194\n577  2         Gtpbp4 -0.1297033 1.310983e-01 -0.06339098        0 -0.23450875\n578  2          Nadk2 -0.1292932 1.330933e-01 -0.04630338        0 -0.33504725\n579  2          Mkrn1 -0.1291854 1.337913e-01 -0.06180062        0 -0.23594339\n580  2          Nek11 -0.1289607 1.346627e-01 -0.02758804        0 -0.42844149\n581  2         Cacul1 -0.1289470 1.346627e-01 -0.04677334        0 -0.27116308\n582  2          Arl5b -0.1285354 1.372128e-01 -0.03950266        0 -0.45247846\n583  2          Masp1 -0.1285223 1.372128e-01 -0.06319010        0 -0.13588728\n584  2           Nbdy -0.1284706 1.372128e-01 -0.06340076        0 -0.09349612\n585  2         Kif21b -0.1284421 1.372128e-01 -0.01652618        0 -1.66205924\n586  2      Trp53inp1 -0.1284421 1.372128e-01 -0.01652618        0 -1.61979104\n587  2          Rragc -0.1283335 1.379390e-01 -0.04058404        0 -0.25524563\n588  2         Lmbr1l -0.1282425 1.385193e-01 -0.04651694        0 -0.27113358\n589  2         Eif3j2 -0.1280180 1.395962e-01 -0.05886331        0 -0.21027348\n590  2          Grina -0.1280065 1.395962e-01 -0.04087599        0 -0.36177408\n591  2          Pcgf6 -0.1278124 1.404571e-01 -0.04188787        0 -0.36212766\n592  2           Eml2 -0.1275876 1.417131e-01 -0.04478693        0 -0.20888016\n593  2        Trappc4 -0.1275513 1.417131e-01 -0.05582951        0 -0.11320166\n594  2        Rpl36al -0.1275263 1.417131e-01 -0.04887084        0 -0.03789278\n595  2         Trmt12 -0.1275214 1.417131e-01 -0.03880816        0 -0.33337235\n596  2           Nfs1 -0.1274956 1.417514e-01 -0.04624466        0 -0.33097538\n597  2          Cox17 -0.1274556 1.417581e-01 -0.06025151        0 -0.16747023\n598  2         Zfp560 -0.1271855 1.430528e-01 -0.04981035        0 -0.21297836\n599  2 X4833420G17Rik -0.1271854 1.430528e-01 -0.05639871        0 -0.31809204\n600  2           Sqle -0.1271809 1.430528e-01 -0.06240391        0 -0.09573956\n601  2          Top2a  0.6241192 1.295363e-33  0.30481127        0  1.03505499\n602  2          Fbxo5  0.5368226 1.530677e-24  0.24399797        0  1.02515510\n603  2           Prc1  0.5169154 8.948340e-23  0.24657448        0  0.86258805\n604  2           Cdk1  0.4954547 6.926501e-21  0.24610407        0  0.65205791\n605  2      Hist1h2ae  0.4637646 3.663359e-18  0.22219908        0  0.70353869\n606  2            Tk1  0.4610006 5.272598e-18  0.22471915        0  0.67661988\n607  2           Ect2  0.4519974 2.621075e-17  0.20638366        0  0.96306525\n608  2           Smc4  0.4437526 1.113449e-16  0.21563587        0  0.46959448\n609  2          Cdca2  0.4407380 1.751159e-16  0.18445782        0  0.90223009\n610  2          Aurkb  0.4379928 2.641195e-16  0.19019092        0  0.64740645\n611  2         Nusap1  0.4354920 3.832490e-16  0.20970748        0  0.56899168\n612  2           Plk4  0.4216241 4.479243e-15  0.18321656        0  0.71772044\n613  2          Esco2  0.4198172 5.726840e-15  0.17097953        0  0.82372390\n614  2       Mis18bp1  0.4191500 5.995434e-15  0.17412903        0  0.93220123\n615  2       Hist1h1b  0.4126528 1.781894e-14  0.18754476        0  0.80773217\n616  2          Kif11  0.4024781 9.890357e-14  0.16656987        0  0.85190570\n617  2          Pclaf  0.3995424 1.542565e-13  0.18570887        0  0.64556163\n618  2         Mis18a  0.3963114 2.529529e-13  0.17803780        0  0.74923124\n619  2           Mxd3  0.3946218 3.192336e-13  0.16271660        0  0.83852593\n620  2            Ttk  0.3890929 7.687694e-13  0.15302335        0  1.01599564\n621  2           Smc2  0.3873762 9.747725e-13  0.19128582        0  0.38551792\n622  2          Neil3  0.3842696 1.556984e-12  0.14184295        0  1.20481989\n623  2         Incenp  0.3683534 1.954707e-11  0.15998557        0  0.68874522\n624  2          Csmd1  0.3673051 2.131700e-11  0.18232806        0  0.55650257\n625  2          Asf1b  0.3672786 2.131700e-11  0.15486219        0  0.78441288\n626  2          Mki67  0.3651247 2.877842e-11  0.17176197        0  0.63197162\n627  2            Pbk  0.3646703 2.976172e-11  0.18090165        0  0.44386736\n628  2           Plk1  0.3631327 3.651109e-11  0.15409796        0  0.60260192\n629  2         Cep192  0.3597167 5.918118e-11  0.14151223        0  0.75227596\n630  2          Cdca5  0.3566938 8.753467e-11  0.13249124        0  0.98305078\n631  2          Cep55  0.3566263 8.753467e-11  0.13815815        0  0.82727395\n632  2          Cdc45  0.3551162 1.069827e-10  0.14101906        0  0.65502596\n633  2           Ccnf  0.3547905 1.091380e-10  0.11813480        0  1.19001599\n634  2          Kntc1  0.3544794 1.111790e-10  0.13599331        0  0.79583101\n635  2          Ube2t  0.3521086 1.550498e-10  0.14693299        0  0.69141894\n636  2         Kifc5b  0.3507468 1.854010e-10  0.12298040        0  1.25460801\n637  2         Ckap2l  0.3489860 2.354010e-10  0.13854308        0  0.67396872\n638  2           Rrm2  0.3469875 3.095252e-10  0.16535890        0  0.50938218\n639  2           Gmnn  0.3457621 3.545272e-10  0.16863538        0  0.39778537\n640  2          Atad2  0.3457432 3.545272e-10  0.15611195        0  0.59290217\n641  2          Spc25  0.3447624 4.004849e-10  0.14637461        0  0.58585847\n642  2          Aurka  0.3413800 6.451494e-10  0.14997395        0  0.56562767\n643  2          Cenpf  0.3393071 8.547284e-10  0.16378640        0  0.67932723\n644  2          Spc24  0.3385466 9.340295e-10  0.16695198        0  0.42034392\n645  2          Kif23  0.3335440 1.887401e-09  0.14786574        0  0.53144810\n646  2           Gpc6  0.3300873 3.030962e-09  0.15650514        0  0.31498460\n647  2            Cit  0.3282710 3.842163e-09  0.11672643        0  1.01291443\n648  2            Blm  0.3249901 5.979628e-09  0.12139382        0  0.87682876\n649  2           Sgo1  0.3227427 8.026114e-09  0.12928104        0  0.57979869\n650  2          Cenpp  0.3207055 1.044587e-08  0.14806280        0  0.56105028\n651  2          Kif22  0.3195953 1.194683e-08  0.14980180        0  0.53875529\n652  2           Tyms  0.3193015 1.220686e-08  0.15723289        0  0.43425557\n653  2          Ncaph  0.3171647 1.573898e-08  0.12418708        0  0.71026499\n654  2           Ska3  0.3170864 1.573898e-08  0.10641990        0  1.00698512\n655  2           Knl1  0.3170544 1.573898e-08  0.12920131        0  0.53836489\n656  2          Cenpq  0.3168794 1.583814e-08  0.14660700        0  0.46605312\n657  2           Ska1  0.3154709 1.887192e-08  0.13398626        0  0.56240457\n658  2          Kif15  0.3135778 2.400358e-08  0.13227260        0  0.65598399\n659  2         Cdkn2d  0.3119156 2.955883e-08  0.13425584        0  0.53537092\n660  2           Nrg3  0.3103612 3.584519e-08  0.13398756        0  0.56782659\n661  2           Dbf4  0.3070288 5.418472e-08  0.13794185        0  0.52116859\n662  2          Clspn  0.3067350 5.546219e-08  0.12893288        0  0.59844286\n663  2       Rad51ap1  0.3055980 6.349710e-08  0.11850075        0  0.71308999\n664  2           Exo1  0.3029188 8.902774e-08  0.12291166        0  0.62804245\n665  2         Diaph3  0.3021556 9.692950e-08  0.12605252        0  0.62378867\n666  2           E2f8  0.2999414 1.275052e-07  0.09661621        0  1.00613196\n667  2          Cadm2  0.2962601 2.022532e-07  0.14605923        0  0.38910393\n668  2          Brca1  0.2942879 2.566768e-07  0.09644675        0  0.99716014\n669  2          Tcf19  0.2939451 2.607096e-07  0.11222602        0  0.77285271\n670  2           Eme1  0.2921402 3.234981e-07  0.11269244        0  0.73503313\n671  2          Ccna2  0.2903101 4.022268e-07  0.14110010        0  0.33579007\n672  2           Rfc4  0.2896869 4.292689e-07  0.14172384        0  0.30522426\n673  2          Spag5  0.2882586 5.068027e-07  0.10320992        0  0.79224265\n674  2           Lrr1  0.2878457 5.267450e-07  0.10504241        0  0.82220166\n675  2          H2afx  0.2860506 6.504335e-07  0.12312099        0  0.49159875\n676  2           Melk  0.2857641 6.654748e-07  0.12221842        0  0.47443488\n677  2           Pif1  0.2848199 7.387860e-07  0.07893327        0  1.41142747\n678  2          Rad51  0.2844812 7.608951e-07  0.12399545        0  0.55249652\n679  2          Nup85  0.2834612 8.524920e-07  0.12428566        0  0.51145518\n680  2          Kifc1  0.2813612 1.090020e-06  0.10263471        0  0.68300408\n681  2           Mdc1  0.2784867 1.528535e-06  0.10344774        0  0.69383518\n682  2          Ndc80  0.2780435 1.593845e-06  0.09753411        0  0.55825879\n683  2          Cenpn  0.2778278 1.616965e-06  0.11998700        0  0.45916943\n684  2         Zfp367  0.2777221 1.618929e-06  0.10820413        0  0.58360219\n685  2           Rfc1  0.2774230 1.659438e-06  0.13742922        0  0.31542498\n686  2          Npas3  0.2768742 1.753115e-06  0.12659771        0  0.34305698\n687  2         Tuba1c  0.2767561 1.758477e-06  0.12293854        0  0.50595908\n688  2         Mms22l  0.2763654 1.822913e-06  0.13592999        0  0.35516073\n689  2         Shcbp1  0.2757227 1.947924e-06  0.12224976        0  0.47025266\n690  2           Wee1  0.2753639 2.011730e-06  0.10984834        0  0.60268425\n691  2          Sgo2a  0.2741412 2.303917e-06  0.09748318        0  0.70127236\n692  2           Rpa2  0.2732675 2.529950e-06  0.13545787        0  0.37172319\n693  2          Cenpu  0.2722717 2.818161e-06  0.10712455        0  0.54492889\n694  2         Cdkn2c  0.2721293 2.836592e-06  0.11477075        0  0.47491120\n695  2           Lig1  0.2718056 2.917463e-06  0.12987816        0  0.49135545\n696  2          Prim1  0.2702629 3.465289e-06  0.13375081        0  0.35960529\n697  2         Kif18a  0.2679723 4.488554e-06  0.08780656        0  0.59299024\n698  2           Dhfr  0.2669989 4.978591e-06  0.12826571        0  0.42375904\n699  2           Fen1  0.2653242 5.988095e-06  0.12603850        0  0.30867106\n700  2          Nemp1  0.2623482 8.354198e-06  0.08876098        0  0.81550604\n701  2           Kif4  0.2621951 8.420290e-06  0.09387466        0  0.62980624\n702  2      Hist1h2ap  0.2612014 9.343143e-06  0.06956172        0  1.48176354\n703  2         Dlgap5  0.2597354 1.093512e-05  0.09644018        0  0.60066226\n704  2           Pole  0.2590611 1.169331e-05  0.10044265        0  0.58895400\n705  2          Birc5  0.2584639 1.239448e-05  0.12768162        0  0.38904462\n706  2         Cep128  0.2582118 1.263537e-05  0.08315728        0  0.82524231\n707  2          Spdl1  0.2567818 1.470720e-05  0.08124589        0  0.66328484\n708  2       Hist1h1a  0.2562719 1.543264e-05  0.08177126        0  0.78722399\n709  2         Pkmyt1  0.2557846 1.615247e-05  0.08912691        0  0.79271344\n710  2         Kif20b  0.2534405 2.078610e-05  0.09520262        0  0.62377410\n711  2         Fam83d  0.2529974 2.161721e-05  0.07365871        0  0.70682799\n712  2          Hjurp  0.2529283 2.161721e-05  0.09904786        0  0.55789485\n713  2          Rfwd3  0.2526603 2.207576e-05  0.10381833        0  0.51389021\n714  2          Grik2  0.2522582 2.288150e-05  0.11954583        0  0.21041018\n715  2          Kpna2  0.2517923 2.388427e-05  0.11956394        0  0.47370231\n716  2           Wwox  0.2508100 2.638673e-05  0.11578775        0  0.43612043\n717  2          Cks1b  0.2495353 3.008862e-05  0.09407808        0  0.23556582\n718  2           Rfc2  0.2491566 3.094796e-05  0.11969877        0  0.34103727\n719  2         Iqgap3  0.2491262 3.094796e-05  0.06135956        0  1.27458481\n720  2         Tubb4b  0.2484483 3.305030e-05  0.12064564        0  0.28999510\n721  2           Aspm  0.2474217 3.665182e-05  0.08496301        0  0.51621992\n722  2          Chek2  0.2473336 3.670750e-05  0.08678660        0  0.65838009\n723  2          Meaf6  0.2455794 4.401556e-05  0.12071273        0  0.33711247\n724  2        Racgap1  0.2434107 5.510299e-05  0.11854383        0  0.25123633\n725  2         Mad2l1  0.2432598 5.556032e-05  0.11231578        0  0.30814890\n726  2           Lsm2  0.2415230 6.631687e-05  0.09119805        0  0.26772200\n727  2          Kif14  0.2413502 6.702351e-05  0.05841875        0  1.42479045\n728  2          Ccne2  0.2407062 7.106429e-05  0.07753557        0  0.71455928\n729  2        Depdc1b  0.2406526 7.106429e-05  0.05716365        0  1.56056026\n730  2         Chaf1a  0.2402151 7.386380e-05  0.10205069        0  0.42660203\n731  2           Bub3  0.2371657 1.009385e-04  0.11532455        0  0.32575557\n732  2           E2f7  0.2362979 1.088527e-04  0.07406613        0  0.85357845\n733  2          Traip  0.2353070 1.190132e-04  0.07512106        0  0.59275787\n734  2          Hyls1  0.2352964 1.190132e-04  0.06443261        0  0.95670143\n735  2          Kif24  0.2349089 1.229873e-04  0.08572640        0  0.49690869\n736  2          Cenph  0.2347315 1.236356e-04  0.10674226        0  0.41492497\n737  2          Reep4  0.2347197 1.236356e-04  0.07284840        0  0.65557999\n738  2           Hmmr  0.2342861 1.283812e-04  0.08742854        0  0.52028450\n739  2           Anln  0.2332682 1.415541e-04  0.07240536        0  0.75927799\n740  2          Ticrr  0.2327634 1.480393e-04  0.07629584        0  0.70524025\n741  2         Pimreg  0.2324309 1.521085e-04  0.10769652        0  0.34621829\n742  2          Aunip  0.2320028 1.578239e-04  0.08141659        0  0.59213946\n743  2           Nuf2  0.2304171 1.842135e-04  0.08654110        0  0.50607161\n744  2            Dtl  0.2302685 1.857484e-04  0.10631956        0  0.42075676\n745  2          Cenpx  0.2292383 2.047787e-04  0.11253067        0  0.24235016\n746  2         Cntrob  0.2291182 2.058961e-04  0.07570624        0  0.67894677\n747  2         Rad54l  0.2267010 2.590362e-04  0.09164308        0  0.41184508\n748  2          Cenpw  0.2250186 3.043028e-04  0.11117209        0  0.20244836\n749  2           Cmc2  0.2247701 3.098723e-04  0.10782574        0  0.29671280\n750  2          Fanci  0.2245646 3.142111e-04  0.06230531        0  0.86014425\n751  2          Fanca  0.2242688 3.214795e-04  0.07028183        0  0.73870863\n752  2          Cdca8  0.2235384 3.433423e-04  0.11050130        0  0.23368209\n753  2           Rrm1  0.2233000 3.492876e-04  0.10984415        0  0.31568820\n754  2       Arhgef39  0.2225079 3.752340e-04  0.05664924        0  0.97607975\n755  2         Ncapd2  0.2221978 3.844162e-04  0.09502127        0  0.36937880\n756  2          Pola1  0.2217146 4.005620e-04  0.08883788        0  0.42263953\n757  2            Alk  0.2212186 4.169229e-04  0.06993860        0  0.46461618\n758  2          Hmgb2  0.2208925 4.261468e-04  0.06030117        0  0.24553304\n759  2          Mcm10  0.2207568 4.292129e-04  0.06279972        0  0.90064164\n760  2        Efcab11  0.2204878 4.379632e-04  0.07791994        0  0.54307122\n761  2          Cenpk  0.2202247 4.466379e-04  0.09479952        0  0.39547251\n762  2          Cenpl  0.2199947 4.521433e-04  0.07146710        0  0.37863481\n763  2         Kif20a  0.2198295 4.532820e-04  0.08688651        0  0.29966932\n764  2         Kif18b  0.2197351 4.547993e-04  0.05220015        0  0.95785453\n765  2          Ncam1  0.2195334 4.611136e-04  0.10547106        0  0.19612184\n766  2          Mastl  0.2178767 5.381359e-04  0.05966245        0  0.79832815\n767  2           Nrg1  0.2169512 5.848745e-04  0.10510395        0  0.30303545\n768  2           Smc6  0.2161941 6.253229e-04  0.10086892        0  0.21993711\n769  2          Dscc1  0.2159458 6.367350e-04  0.07780672        0  0.58640682\n770  2          Cenpe  0.2155155 6.597181e-04  0.10065474        0  0.38378393\n771  2           Bub1  0.2154290 6.614711e-04  0.08001948        0  0.42258635\n772  2          Haus6  0.2142551 7.355311e-04  0.08006162        0  0.43741610\n773  2          Kif2c  0.2139089 7.558774e-04  0.07938517        0  0.52744112\n774  2          Ckap2  0.2137504 7.576046e-04  0.09106923        0  0.36850685\n775  2         Ctnnd2  0.2137386 7.576046e-04  0.09738694        0  0.15534393\n776  2         Gas2l3  0.2133568 7.792085e-04  0.05995577        0  0.72795802\n777  2         Trim59  0.2128148 8.157218e-04  0.09977186        0  0.30218599\n778  2           Polq  0.2127364 8.173513e-04  0.06335844        0  0.76304017\n779  2          Gtse1  0.2126802 8.173513e-04  0.04957146        0  1.14166990\n780  2          Alcam  0.2121577 8.540285e-04  0.10501465        0  0.24756436\n781  2         Sac3d1  0.2116658 8.897163e-04  0.10203613        0  0.19423089\n782  2          Cyr61  0.2112620 9.192157e-04  0.10385530        0  0.16795355\n783  2        Zfp280b  0.2108824 9.475133e-04  0.05453296        0  0.95203364\n784  2            Cpq  0.2106569 9.626824e-04  0.10082580        0  0.20075735\n785  2        Depdc1a  0.2099398 1.018745e-03  0.05429247        0  0.80206625\n786  2        Tbc1d31  0.2098045 1.026400e-03  0.06250149        0  0.73036862\n787  2          Auts2  0.2081472 1.186246e-03  0.06758606        0  0.19535794\n788  2           Mcm8  0.2081347 1.186246e-03  0.07302329        0  0.58955329\n789  2         Ncapg2  0.2062499 1.396864e-03  0.06145467        0  0.67393298\n790  2         Zwilch  0.2058796 1.431027e-03  0.06858399        0  0.46756468\n791  2         Prdm16  0.2051178 1.526316e-03  0.10059399        0  0.27672292\n792  2          Dusp1  0.2049282 1.545304e-03  0.08932706        0  0.35223351\n793  2 X4930503L19Rik  0.2048188 1.553177e-03  0.06232108        0  0.56591168\n794  2          Mybl2  0.2041427 1.643651e-03  0.04940413        0  0.98716750\n795  2          Mcph1  0.2031320 1.792577e-03  0.06976910        0  0.65518956\n796  2         Cfap43  0.2029895 1.804235e-03  0.06763217        0  0.49553195\n797  2         Gemin6  0.2029539 1.804235e-03  0.08924105        0  0.30328523\n798  2         Chtf18  0.2023550 1.895310e-03  0.06215982        0  0.74072318\n799  2         Parpbp  0.2018899 1.966966e-03  0.05379002        0  0.70517028\n800  2          Fstl5  0.2015029 2.026934e-03  0.08884433        0  0.31422503"
  },
  {
    "objectID": "NonCT_clusters.html#summary",
    "href": "NonCT_clusters.html#summary",
    "title": "Not Uniform Transcriptomic clusters with Logistic Regression",
    "section": "Summary",
    "text": "Summary\n\nresult.df\n\n  OriginalCluster CellNumber COTANClusterNumber          Accuracy\n1      Cl525E15.0        826                  3 0.786585365853659\n2      Cl511E15.0        540                  2 0.916666666666667\n3      Cl184E15.0        322                  2          0.734375\n4      Cl432E13.5        536                  2  0.88785046728972\n5      Cl432E15.0        586                  2 0.811965811965812\n6      cl186e13.5        423                  2 0.880952380952381\n         Clusters\n1 316 - 176 - 334\n2       143 - 397\n3        94 - 228\n4       247 - 289\n5       183 - 403\n6       246 - 177\n\n\n\n\nSys.time()\n\n[1] \"2024-06-22 12:12:01 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] nnet_7.3-19        COTAN_2.5.4        caret_6.0-94       lattice_0.22-6    \n [5] lubridate_1.9.3    forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4       \n [9] purrr_1.0.2        readr_2.1.5        tibble_3.2.1       tidyverse_2.0.0   \n[13] tidyr_1.3.1        parallelDist_0.2.6 data.table_1.15.4  zeallot_0.1.0     \n[17] ggplot2_3.5.1     \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.0            \n  [3] later_1.3.2               polyclip_1.10-6          \n  [5] hardhat_1.3.1             pROC_1.18.5              \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.4           doParallel_1.0.17        \n [11] globals_0.16.3            MASS_7.3-60.2            \n [13] dendextend_1.17.1         magrittr_2.0.3           \n [15] plotly_4.10.4             rmarkdown_2.27           \n [17] yaml_2.3.8                httpuv_1.6.15            \n [19] Seurat_5.1.0              sctransform_0.4.1        \n [21] askpass_1.2.0             spam_2.10-0              \n [23] spatstat.sparse_3.0-3     sp_2.1-4                 \n [25] reticulate_1.37.0         cowplot_1.1.3            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] abind_1.4-5               zlibbioc_1.50.0          \n [31] Rtsne_0.17                BiocGenerics_0.50.0      \n [33] ipred_0.9-14              circlize_0.4.16          \n [35] lava_1.8.0                IRanges_2.38.0           \n [37] S4Vectors_0.42.0          ggrepel_0.9.5            \n [39] irlba_2.3.5.1             spatstat.utils_3.0-4     \n [41] listenv_0.9.1             umap_0.2.10.0            \n [43] goftest_1.2-3             RSpectra_0.16-1          \n [45] spatstat.random_3.2-3     dqrng_0.4.0              \n [47] fitdistrplus_1.1-11       parallelly_1.37.1        \n [49] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [51] codetools_0.2-20          DelayedArray_0.30.1      \n [53] tidyselect_1.2.1          shape_1.4.6.1            \n [55] farver_2.1.2              viridis_0.6.5            \n [57] ScaledMatrix_1.12.0       spatstat.explore_3.2-7   \n [59] matrixStats_1.3.0         stats4_4.4.0             \n [61] jsonlite_1.8.8            GetoptLong_1.0.5         \n [63] progressr_0.14.0          ggridges_0.5.6           \n [65] survival_3.6-4            iterators_1.0.14         \n [67] foreach_1.5.2             tools_4.4.0              \n [69] ica_1.0-3                 Rcpp_1.0.12              \n [71] glue_1.7.0                gridExtra_2.3            \n [73] prodlim_2023.08.28        SparseArray_1.4.5        \n [75] xfun_0.44                 MatrixGenerics_1.16.0    \n [77] ggthemes_5.1.0            withr_3.0.0              \n [79] fastmap_1.2.0             fansi_1.0.6              \n [81] openssl_2.2.0             digest_0.6.35            \n [83] rsvd_1.0.5                timechange_0.3.0         \n [85] R6_2.5.1                  mime_0.12                \n [87] colorspace_2.1-0          scattermore_1.2          \n [89] tensor_1.5                spatstat.data_3.0-4      \n [91] utf8_1.2.4                generics_0.1.3           \n [93] recipes_1.0.10            class_7.3-22             \n [95] httr_1.4.7                htmlwidgets_1.6.4        \n [97] S4Arrays_1.4.1            uwot_0.2.2               \n [99] ModelMetrics_1.2.2.2      pkgconfig_2.0.3          \n[101] gtable_0.3.5              timeDate_4032.109        \n[103] ComplexHeatmap_2.20.0     lmtest_0.9-40            \n[105] XVector_0.44.0            htmltools_0.5.8.1        \n[107] dotCall64_1.1-1           clue_0.3-65              \n[109] SeuratObject_5.0.2        scales_1.3.0             \n[111] png_0.1-8                 gower_1.0.1              \n[113] knitr_1.47                rstudioapi_0.16.0        \n[115] tzdb_0.4.0                reshape2_1.4.4           \n[117] rjson_0.2.21              nlme_3.1-164             \n[119] zoo_1.8-12                GlobalOptions_0.1.2      \n[121] KernSmooth_2.23-24        parallel_4.4.0           \n[123] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[125] pillar_1.9.0              grid_4.4.0               \n[127] vctrs_0.6.5               RANN_2.6.1               \n[129] promises_1.3.0            BiocSingular_1.20.0      \n[131] beachmat_2.20.0           xtable_1.8-4             \n[133] cluster_2.1.6             evaluate_0.23            \n[135] cli_3.6.2                 compiler_4.4.0           \n[137] rlang_1.1.3               crayon_1.5.2             \n[139] future.apply_1.11.2       labeling_0.4.3           \n[141] plyr_1.8.9                stringi_1.8.4            \n[143] deldir_2.0-4              viridisLite_0.4.2        \n[145] BiocParallel_1.38.0       assertthat_0.2.1         \n[147] munsell_0.5.1             lazyeval_0.2.2           \n[149] spatstat.geom_3.2-9       PCAtools_2.16.0          \n[151] Matrix_1.7-0              RcppHNSW_0.6.0           \n[153] hms_1.1.3                 patchwork_1.2.0          \n[155] sparseMatrixStats_1.16.0  future_1.33.2            \n[157] shiny_1.8.1.1             ROCR_1.0-11              \n[159] Rfast_2.1.0               igraph_2.0.3             \n[161] RcppParallel_5.1.7"
  },
  {
    "objectID": "PBMC1_filtering.html",
    "href": "PBMC1_filtering.html",
    "title": "Filtering of PBMC1 using COTAN",
    "section": "",
    "text": "Library import\n\nlibrary(dplyr)\nlibrary(COTAN)\nlibrary(Seurat)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(DropletUtils)\n\nSettings\n\ndatasetName = 'PBMC1'\ndatasetFolder = './Data/'\n\ninDir  = paste(datasetFolder, datasetName, '/raw/10X/', sep='')\noutDir = paste(datasetFolder, datasetName, '/filtered/', sep='')\ndir10X = paste(outDir, '10X/', sep='')\n\nif (!dir.exists(outDir)) {\n  dir.create(outDir, recursive = TRUE, showWarnings = FALSE)\n}\n\nsetLoggingLevel(2)\nsetLoggingFile(paste(outDir, \"logfile.log\", sep=\"\"))\noptions(parallelly.fork.enable = TRUE)\n\nData loading\n\ndataset = Read10X(data.dir = inDir, strip.suffix = TRUE)\ndataset = dataset[[1]]\nsampleCond &lt;- datasetName\nPBMC1 &lt;- COTAN(raw = dataset)\nPBMC1 &lt;- initializeMetaDataset(\n  PBMC1,\n  GEO = paste(\"10X \", datasetName, sep=\"\"),\n  sequencingMethod = \"10X\",\n  sampleCond = sampleCond\n)\n\nInspect cells’ sizes\n\ncellSizePlot(PBMC1)\n\n\n\n\nDrop cells with too many reads as they are probably doublets\n\ncellsSizeThr &lt;- 25000\nPBMC1 &lt;- addElementToMetaDataset(PBMC1, \"Cells size threshold\", cellsSizeThr)\n\ncellsToRem &lt;- getCells(PBMC1)[getCellsSize(PBMC1) &gt; cellsSizeThr]\nPBMC1 &lt;- dropGenesCells(PBMC1, cells = cellsToRem)\n\ncellSizePlot(PBMC1, splitPattern = \"-\", numCol = 2)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(PBMC1, splitPattern = \"-\", numCol = 2)\n\n\n\n\nDrop cells with too high genes expression as they are probably doublets\n\ngeneSizeThr &lt;- 4500\nPBMC1 &lt;- addElementToMetaDataset(PBMC1, \"Num genes threshold\", geneSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(PBMC1)\ncellsToRem &lt;- names(numExprGenes)[numExprGenes &gt; geneSizeThr]\nPBMC1 &lt;- dropGenesCells(PBMC1, cells = cellsToRem)\n\ngenesSizePlot(PBMC1, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCheck number of mithocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^[Mm][Tt]-\"\ngetGenes(PBMC1)[grep(mitGenesPattern, getGenes(PBMC1))]\n\n [1] \"MT-ND1\"  \"MT-ND2\"  \"MT-CO1\"  \"MT-CO2\"  \"MT-ATP8\" \"MT-ATP6\" \"MT-CO3\" \n [8] \"MT-ND3\"  \"MT-ND4L\" \"MT-ND4\"  \"MT-ND5\"  \"MT-ND6\"  \"MT-CYB\" \n\n\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC1, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nWe drop cells with a too high percentage of mitocondrial genes (are likely dead)\n\nmitPercThr &lt;- 10\nPBMC1 &lt;- addElementToMetaDataset(PBMC1, \"Mitoc. perc. threshold\", mitPercThr)\n\ncellsToRem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nPBMC1 &lt;- dropGenesCells(PBMC1, cells = cellsToRem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC1, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nCheck number of ribosomial genes expressed in each cell\n\nribGenesPattern &lt;- \"^RP[SL]\\\\d+\"\ngetGenes(PBMC1)[grep(ribGenesPattern, getGenes(PBMC1))]\n\n  [1] \"RPL22\"          \"RPL11\"          \"RPS6KA1\"        \"RPS8\"          \n  [5] \"RPL5\"           \"RPS27\"          \"RPS6KC1\"        \"RPS7\"          \n  [9] \"RPS27A\"         \"RPL31\"          \"RPL37A\"         \"RPL32\"         \n [13] \"RPL15\"          \"RPL14\"          \"RPL29\"          \"RPL24\"         \n [17] \"RPL22L1\"        \"RPL39L\"         \"RPL35A\"         \"RPL9\"          \n [21] \"RPL34-AS1\"      \"RPL34\"          \"RPS3A\"          \"RPL37\"         \n [25] \"RPS23\"          \"RPS14\"          \"RPL26L1\"        \"RPS18\"         \n [29] \"RPS10-NUDT3\"    \"RPS10\"          \"RPL10A\"         \"RPL7L1\"        \n [33] \"RPS12\"          \"RPS6KA2\"        \"RPS6KA2-AS1\"    \"RPS6KA3\"       \n [37] \"RPS4X\"          \"RPS6KA6\"        \"RPL36A\"         \"RPL36A-HNRNPH2\"\n [41] \"RPL39\"          \"RPL10\"          \"RPS20\"          \"RPL7\"          \n [45] \"RPL30\"          \"RPL8\"           \"RPS6\"           \"RPL35\"         \n [49] \"RPL12\"          \"RPL7A\"          \"RPL27A\"         \"RPS13\"         \n [53] \"RPS6KA4\"        \"RPS6KB2\"        \"RPS6KB2-AS1\"    \"RPS3\"          \n [57] \"RPS25\"          \"RPS24\"          \"RPS26\"          \"RPL41\"         \n [61] \"RPL6\"           \"RPL21\"          \"RPL10L\"         \"RPS29\"         \n [65] \"RPL36AL\"        \"RPS6KL1\"        \"RPS6KA5\"        \"RPS27L\"        \n [69] \"RPL4\"           \"RPS17\"          \"RPL3L\"          \"RPS2\"          \n [73] \"RPS15A\"         \"RPL13\"          \"RPL26\"          \"RPL23A\"        \n [77] \"RPL23\"          \"RPL19\"          \"RPL27\"          \"RPS6KB1\"       \n [81] \"RPL38\"          \"RPL17-C18orf32\" \"RPL17\"          \"RPS21\"         \n [85] \"RPS15\"          \"RPL36\"          \"RPS28\"          \"RPL18A\"        \n [89] \"RPS16\"          \"RPS19\"          \"RPL18\"          \"RPL13A\"        \n [93] \"RPS11\"          \"RPS9\"           \"RPL28\"          \"RPS5\"          \n [97] \"RPS4Y1\"         \"RPS4Y2\"         \"RPL3\"           \"RPS19BP1\"      \n\n\n\nc(ribPlot, ribSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC1, genePrefix = ribGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(ribPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(PBMC1, splitPattern = \"-\", numCol = 2)\n\n\n\n\n\ngenesSizePlot(PBMC1, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCleaning, round 1\n\nPBMC1 &lt;- clean(PBMC1)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC1)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nPBMC1 &lt;- addElementToMetaDataset(PBMC1, \"Num drop B group\", 0)\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)  \n\n\n\n\n\nyset=0.16\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(PBMC1)), \"n\" = seq_along(getNu(PBMC1)))\nPBMC1 &lt;- addElementToMetaDataset(PBMC1, \"Threshold low UDE cells:\", yset)\ncellsToRem &lt;-rownames(nuDf)[nuDf[[\"nu\"]] &lt; yset]\nPBMC1 &lt;- dropGenesCells(PBMC1, cells = cellsToRem)\n\nCleaning, round 2\n\nPBMC1 &lt;- clean(PBMC1)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC1)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(pcaCellsData)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\n\nplot(cellSizePlot(PBMC1, splitPattern = \"-\", numCol = 2))\n\n\n\n\n\nplot(genesSizePlot(PBMC1, splitPattern = \"-\", numCol = 2))\n\n\n\n\nSave the filtered dataset\n\nif (!dir.exists(dir10X)) {\n  write10xCounts(dir10X, getRawData(PBMC1))\n}\n\n\nsaveRDS(PBMC1, file = paste0(outDir, sampleCond, \".cotan.RDS\"))\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] DropletUtils_1.20.0         SingleCellExperiment_1.22.0\n [3] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] BiocGenerics_0.46.0         MatrixGenerics_1.12.3      \n[11] matrixStats_1.2.0           zeallot_0.1.0              \n[13] ggplot2_3.4.2               tibble_3.2.1               \n[15] Seurat_5.0.0                SeuratObject_5.0.0         \n[17] sp_2.1-1                    COTAN_2.3.0                \n[19] dplyr_1.1.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] R.oo_1.25.0               polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] edgeR_3.42.4              doParallel_1.0.17        \n [11] globals_0.16.2            lattice_0.22-5           \n [13] MASS_7.3-60               dendextend_1.17.1        \n [15] magrittr_2.0.3            limma_3.56.2             \n [17] plotly_4.10.2             rmarkdown_2.24           \n [19] yaml_2.3.7                httpuv_1.6.11            \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] reticulate_1.34.0         cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.16                R.utils_2.12.2           \n [33] purrr_1.0.1               RCurl_1.98-1.12          \n [35] circlize_0.4.15           GenomeInfoDbData_1.2.10  \n [37] ggrepel_0.9.3             irlba_2.3.5.1            \n [39] listenv_0.9.0             spatstat.utils_3.0-3     \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       scuttle_1.10.2           \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              ScaledMatrix_1.8.1       \n [57] viridis_0.6.4             spatstat.explore_3.2-1   \n [59] jsonlite_1.8.7            GetoptLong_1.0.5         \n [61] ellipsis_0.3.2            progressr_0.14.0         \n [63] ggridges_0.5.4            survival_3.5-7           \n [65] iterators_1.0.14          foreach_1.5.2            \n [67] tools_4.3.2               ica_1.0-3                \n [69] Rcpp_1.0.11               glue_1.6.2               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.0.0            HDF5Array_1.28.1         \n [75] withr_2.5.0               fastmap_1.1.1            \n [77] rhdf5filters_1.12.1       fansi_1.0.4              \n [79] openssl_2.1.0             digest_0.6.33            \n [81] rsvd_1.0.5                parallelDist_0.2.6       \n [83] R6_2.5.1                  mime_0.12                \n [85] colorspace_2.1-0          scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] R.methodsS3_1.8.2         utf8_1.2.3               \n [91] tidyr_1.3.0               generics_0.1.3           \n [93] data.table_1.14.8         httr_1.4.6               \n [95] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [97] uwot_0.1.16               pkgconfig_2.0.3          \n [99] gtable_0.3.3              ComplexHeatmap_2.16.0    \n[101] lmtest_0.9-40             XVector_0.40.0           \n[103] htmltools_0.5.7           dotCall64_1.1-0          \n[105] clue_0.3-64               scales_1.3.0             \n[107] png_0.1-8                 knitr_1.43               \n[109] rstudioapi_0.15.0         reshape2_1.4.4           \n[111] rjson_0.2.21              nlme_3.1-163             \n[113] rhdf5_2.44.0              zoo_1.8-12               \n[115] GlobalOptions_0.1.2       stringr_1.5.0            \n[117] KernSmooth_2.23-22        parallel_4.3.2           \n[119] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[121] pillar_1.9.0              grid_4.3.2               \n[123] vctrs_0.6.3               RANN_2.6.1               \n[125] promises_1.2.0.1          BiocSingular_1.16.0      \n[127] beachmat_2.16.0           xtable_1.8-4             \n[129] cluster_2.1.6             evaluate_0.21            \n[131] locfit_1.5-9.8            cli_3.6.1                \n[133] compiler_4.3.2            rlang_1.1.1              \n[135] crayon_1.5.2              future.apply_1.11.0      \n[137] labeling_0.4.2            plyr_1.8.8               \n[139] stringi_1.8.1             viridisLite_0.4.2        \n[141] deldir_2.0-2              BiocParallel_1.34.2      \n[143] assertthat_0.2.1          munsell_0.5.0            \n[145] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[147] PCAtools_2.14.0           Matrix_1.6-3             \n[149] RcppHNSW_0.5.0            patchwork_1.1.2          \n[151] sparseMatrixStats_1.12.2  future_1.33.0            \n[153] Rhdf5lib_1.22.0           shiny_1.8.0              \n[155] ROCR_1.0-11               Rfast_2.1.0              \n[157] igraph_1.6.0              RcppParallel_5.1.7"
  },
  {
    "objectID": "PBMC3_filtering.html",
    "href": "PBMC3_filtering.html",
    "title": "Filtering of PBMC3 using COTAN",
    "section": "",
    "text": "Library import\n\nlibrary(dplyr)\nlibrary(COTAN)\nlibrary(Seurat)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(DropletUtils)\n\nSettings\n\ndatasetName = 'PBMC3'\ndatasetFolder = './Data/'\n\ninDir  = paste(datasetFolder, datasetName, '/raw/10X/', sep='')\noutDir = paste(datasetFolder, datasetName, '/filtered/', sep='')\ndir10X = paste(outDir, '10X/', sep='')\n\nif (!dir.exists(outDir)) {\n  dir.create(outDir, recursive = TRUE, showWarnings = FALSE)\n}\n\nsetLoggingLevel(2)\nsetLoggingFile(paste(outDir, \"logfile.log\", sep=\"\"))\noptions(parallelly.fork.enable = TRUE)\n\nData loading\n\ndataset = Read10X(data.dir = inDir, strip.suffix = TRUE)\ndataset = dataset[[1]]\nsampleCond &lt;- datasetName\nPBMC3 &lt;- COTAN(raw = dataset)\nPBMC3 &lt;- initializeMetaDataset(\n  PBMC3,\n  GEO = paste(\"10X \", datasetName, sep=\"\"),\n  sequencingMethod = \"10X\",\n  sampleCond = sampleCond\n)\n\nInspect cells’ sizes\n\ncellSizePlot(PBMC3)\n\n\n\n\nDrop cells with too many reads as they are probably doublets\n\ncellsSizeThr &lt;- 20000\nPBMC3 &lt;- addElementToMetaDataset(PBMC3, \"Cells size threshold\", cellsSizeThr)\n\ncellsToRem &lt;- getCells(PBMC3)[getCellsSize(PBMC3) &gt; cellsSizeThr]\nPBMC3 &lt;- dropGenesCells(PBMC3, cells = cellsToRem)\n\ncellSizePlot(PBMC3, splitPattern = \"-\", numCol = 2)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(PBMC3, splitPattern = \"-\", numCol = 2)\n\n\n\n\nDrop cells with too high genes expression as they are probably doublets\n\ngeneSizeThr &lt;- 3500\nPBMC3 &lt;- addElementToMetaDataset(PBMC3, \"Num genes threshold\", geneSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(PBMC3)\ncellsToRem &lt;- names(numExprGenes)[numExprGenes &gt; geneSizeThr]\nPBMC3 &lt;- dropGenesCells(PBMC3, cells = cellsToRem)\n\ngenesSizePlot(PBMC3, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCheck number of mithocondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^[Mm][Tt]-\"\ngetGenes(PBMC3)[grep(mitGenesPattern, getGenes(PBMC3))]\n\n [1] \"MT-ND1\"  \"MT-ND2\"  \"MT-CO1\"  \"MT-CO2\"  \"MT-ATP8\" \"MT-ATP6\" \"MT-CO3\" \n [8] \"MT-ND3\"  \"MT-ND4L\" \"MT-ND4\"  \"MT-ND5\"  \"MT-ND6\"  \"MT-CYB\" \n\n\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC3, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nWe drop cells with a too high percentage of mitocondrial genes (are likely dead)\n\nmitPercThr &lt;- 10\nPBMC3 &lt;- addElementToMetaDataset(PBMC3, \"Mitoc. perc. threshold\", mitPercThr)\n\ncellsToRem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\nPBMC3 &lt;- dropGenesCells(PBMC3, cells = cellsToRem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC3, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nCheck number of ribosomial genes expressed in each cell\n\nribGenesPattern &lt;- \"^RP[SL]\\\\d+\"\ngetGenes(PBMC3)[grep(ribGenesPattern, getGenes(PBMC3))]\n\n  [1] \"RPL22\"          \"RPL11\"          \"RPS6KA1\"        \"RPS8\"          \n  [5] \"RPL5\"           \"RPS27\"          \"RPS6KC1\"        \"RPS7\"          \n  [9] \"RPS27A\"         \"RPL31\"          \"RPL37A\"         \"RPL32\"         \n [13] \"RPL15\"          \"RPL14\"          \"RPL29\"          \"RPL24\"         \n [17] \"RPL22L1\"        \"RPL39L\"         \"RPL35A\"         \"RPL9\"          \n [21] \"RPL34-AS1\"      \"RPL34\"          \"RPS3A\"          \"RPL37\"         \n [25] \"RPS23\"          \"RPS14\"          \"RPL26L1\"        \"RPS18\"         \n [29] \"RPS10-NUDT3\"    \"RPS10\"          \"RPL10A\"         \"RPL7L1\"        \n [33] \"RPS12\"          \"RPS6KA2\"        \"RPS6KA2-AS1\"    \"RPS6KA3\"       \n [37] \"RPS4X\"          \"RPS6KA6\"        \"RPL36A\"         \"RPL36A-HNRNPH2\"\n [41] \"RPL39\"          \"RPL10\"          \"RPS20\"          \"RPL7\"          \n [45] \"RPL30\"          \"RPL8\"           \"RPS6\"           \"RPL35\"         \n [49] \"RPL12\"          \"RPL7A\"          \"RPL27A\"         \"RPS13\"         \n [53] \"RPS6KA4\"        \"RPS6KB2\"        \"RPS6KB2-AS1\"    \"RPS3\"          \n [57] \"RPS25\"          \"RPS24\"          \"RPS26\"          \"RPL41\"         \n [61] \"RPL6\"           \"RPL21\"          \"RPL10L\"         \"RPS29\"         \n [65] \"RPL36AL\"        \"RPS6KL1\"        \"RPS6KA5\"        \"RPS27L\"        \n [69] \"RPL4\"           \"RPS17\"          \"RPL3L\"          \"RPS2\"          \n [73] \"RPS15A\"         \"RPL13\"          \"RPL26\"          \"RPL23A\"        \n [77] \"RPL23\"          \"RPL19\"          \"RPL27\"          \"RPS6KB1\"       \n [81] \"RPL38\"          \"RPL17-C18orf32\" \"RPL17\"          \"RPS21\"         \n [85] \"RPS15\"          \"RPL36\"          \"RPS28\"          \"RPL18A\"        \n [89] \"RPS16\"          \"RPS19\"          \"RPL18\"          \"RPL13A\"        \n [93] \"RPS11\"          \"RPS9\"           \"RPL28\"          \"RPS5\"          \n [97] \"RPS4Y1\"         \"RPS4Y2\"         \"RPL3\"           \"RPS19BP1\"      \n\n\n\nc(ribPlot, ribSizes) %&lt;-%\n  mitochondrialPercentagePlot(PBMC3, genePrefix = ribGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(ribPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(PBMC3, splitPattern = \"-\", numCol = 2)\n\n\n\n\n\ngenesSizePlot(PBMC3, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCleaning, round 1\n\nPBMC3 &lt;- clean(PBMC3)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC3)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nPBMC3 &lt;- addElementToMetaDataset(PBMC3, \"Num drop B group\", 0)\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)  \n\n\n\n\n\nyset=0.16\nnuDf &lt;- data.frame(\"nu\" = sort(getNu(PBMC3)), \"n\" = seq_along(getNu(PBMC3)))\nPBMC3 &lt;- addElementToMetaDataset(PBMC3, \"Threshold low UDE cells:\", yset)\ncellsToRem &lt;-rownames(nuDf)[nuDf[[\"nu\"]] &lt; yset]\nPBMC3 &lt;- dropGenesCells(PBMC3, cells = cellsToRem)\n\nCleaning, round 2\n\nPBMC3 &lt;- clean(PBMC3)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(PBMC3)\n\nplot(pcaCellsPlot)\n\n\n\n\n\nplot(pcaCellsData)\n\n\n\n\n\nplot(genesPlot)\n\n\n\n\n\nplot(UDEPlot)\n\n\n\n\n\nplot(nuPlot)\n\n\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\n\nplot(cellSizePlot(PBMC3, splitPattern = \"-\", numCol = 2))\n\n\n\n\n\nplot(genesSizePlot(PBMC3, splitPattern = \"-\", numCol = 2))\n\n\n\n\nSave the filtered dataset\n\nif (!dir.exists(dir10X)) {\n  write10xCounts(dir10X, getRawData(PBMC3))\n}\n\n\nsaveRDS(PBMC3, file = paste0(outDir, sampleCond, \".cotan.RDS\"))\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] DropletUtils_1.20.0         SingleCellExperiment_1.22.0\n [3] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] BiocGenerics_0.46.0         MatrixGenerics_1.12.3      \n[11] matrixStats_1.2.0           zeallot_0.1.0              \n[13] ggplot2_3.4.2               tibble_3.2.1               \n[15] Seurat_5.0.0                SeuratObject_5.0.0         \n[17] sp_2.1-1                    COTAN_2.3.0                \n[19] dplyr_1.1.2                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] R.oo_1.25.0               polyclip_1.10-4          \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] edgeR_3.42.4              doParallel_1.0.17        \n [11] globals_0.16.2            lattice_0.22-5           \n [13] MASS_7.3-60               dendextend_1.17.1        \n [15] magrittr_2.0.3            limma_3.56.2             \n [17] plotly_4.10.2             rmarkdown_2.24           \n [19] yaml_2.3.7                httpuv_1.6.11            \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] reticulate_1.34.0         cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.16                R.utils_2.12.2           \n [33] purrr_1.0.1               RCurl_1.98-1.12          \n [35] circlize_0.4.15           GenomeInfoDbData_1.2.10  \n [37] ggrepel_0.9.3             irlba_2.3.5.1            \n [39] listenv_0.9.0             spatstat.utils_3.0-3     \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.36.0         DelayedMatrixStats_1.22.5\n [49] leiden_0.4.3              codetools_0.2-19         \n [51] DelayedArray_0.26.7       scuttle_1.10.2           \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              ScaledMatrix_1.8.1       \n [57] viridis_0.6.4             spatstat.explore_3.2-1   \n [59] jsonlite_1.8.7            GetoptLong_1.0.5         \n [61] ellipsis_0.3.2            progressr_0.14.0         \n [63] ggridges_0.5.4            survival_3.5-7           \n [65] iterators_1.0.14          foreach_1.5.2            \n [67] tools_4.3.2               ica_1.0-3                \n [69] Rcpp_1.0.11               glue_1.6.2               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.0.0            HDF5Array_1.28.1         \n [75] withr_2.5.0               fastmap_1.1.1            \n [77] rhdf5filters_1.12.1       fansi_1.0.4              \n [79] openssl_2.1.0             digest_0.6.33            \n [81] rsvd_1.0.5                parallelDist_0.2.6       \n [83] R6_2.5.1                  mime_0.12                \n [85] colorspace_2.1-0          scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] R.methodsS3_1.8.2         utf8_1.2.3               \n [91] tidyr_1.3.0               generics_0.1.3           \n [93] data.table_1.14.8         httr_1.4.6               \n [95] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [97] uwot_0.1.16               pkgconfig_2.0.3          \n [99] gtable_0.3.3              ComplexHeatmap_2.16.0    \n[101] lmtest_0.9-40             XVector_0.40.0           \n[103] htmltools_0.5.7           dotCall64_1.1-0          \n[105] clue_0.3-64               scales_1.3.0             \n[107] png_0.1-8                 knitr_1.43               \n[109] rstudioapi_0.15.0         reshape2_1.4.4           \n[111] rjson_0.2.21              nlme_3.1-163             \n[113] rhdf5_2.44.0              zoo_1.8-12               \n[115] GlobalOptions_0.1.2       stringr_1.5.0            \n[117] KernSmooth_2.23-22        parallel_4.3.2           \n[119] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[121] pillar_1.9.0              grid_4.3.2               \n[123] vctrs_0.6.3               RANN_2.6.1               \n[125] promises_1.2.0.1          BiocSingular_1.16.0      \n[127] beachmat_2.16.0           xtable_1.8-4             \n[129] cluster_2.1.6             evaluate_0.21            \n[131] locfit_1.5-9.8            cli_3.6.1                \n[133] compiler_4.3.2            rlang_1.1.1              \n[135] crayon_1.5.2              future.apply_1.11.0      \n[137] labeling_0.4.2            plyr_1.8.8               \n[139] stringi_1.8.1             viridisLite_0.4.2        \n[141] deldir_2.0-2              BiocParallel_1.34.2      \n[143] assertthat_0.2.1          munsell_0.5.0            \n[145] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[147] PCAtools_2.14.0           Matrix_1.6-3             \n[149] RcppHNSW_0.5.0            patchwork_1.1.2          \n[151] sparseMatrixStats_1.12.2  future_1.33.0            \n[153] Rhdf5lib_1.22.0           shiny_1.8.0              \n[155] ROCR_1.0-11               Rfast_2.1.0              \n[157] igraph_1.6.0              RcppParallel_5.1.7"
  },
  {
    "objectID": "Real_UT_clustersByCotan.html",
    "href": "Real_UT_clustersByCotan.html",
    "title": "Real UT clusters",
    "section": "",
    "text": "Cl432 E13.5 E15.0"
  },
  {
    "objectID": "Real_UT_clustersByCotan.html#preamble",
    "href": "Real_UT_clustersByCotan.html#preamble",
    "title": "Real UT clusters",
    "section": "Preamble",
    "text": "Preamble\n\nlibrary(ggplot2)\nlibrary(zeallot)\nlibrary(data.table)\nlibrary(parallelDist)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(caret)\ntheme_set(theme_bw())\nlibrary(COTAN)\nlibrary(stringr)\nlibrary(nnet)\n\noptions(parallelly.fork.enable = TRUE)\ninDir &lt;- file.path(\"Data/MouseCortexFromLoom/\")\n\n#setLoggingLevel(2)\n#setLoggingFile(file.path(inDir, \"MixingClustersGDI_ForebrainDorsal.log\"))\n\noutDir &lt;- file.path(\"Data/MouseCortexFromLoom/PureClusters/\")\nif (!file.exists(outDir)) {\n  dir.create(outDir)\n}"
  },
  {
    "objectID": "Real_UT_clustersByCotan.html#and-434-e15.0",
    "href": "Real_UT_clustersByCotan.html#and-434-e15.0",
    "title": "Real UT clusters",
    "section": "428 and 434 e15.0",
    "text": "428 and 434 e15.0\n\ne15.0 &lt;- readRDS(paste0(inDir,\"e15.0_ForebrainDorsal.cotan.RDS\"))\n\ncells &lt;- c(rownames(getMetadataCells(e15.0)[getMetadataCells(e15.0)[,\"Clusters\"] == 428,]),\n           rownames(getMetadataCells(e15.0)[getMetadataCells(e15.0)[,\"Clusters\"] == 434,]))\n\ncl428_cl434 &lt;- dropGenesCells(e15.0,cells = getCells(e15.0)[!getCells(e15.0) %in% cells] )\n\ncl428_cl434 &lt;- clean(cl428_cl434)\ncl428_cl434 &lt;- proceedToCoex(cl428_cl434)\n\n#saveRDS(cl428_cl434,past0(outDir,\"cl428_cl434.cotan.RDS\"))\n\n\ncl428_cl434GDI &lt;- calculateGDI(cl428_cl434)\n\nsubsetGDIcl428_cl434 &lt;- cl428_cl434GDI[cl428_cl434GDI$sum.raw.norm &gt; 7,]\ntop.GDI.genes &lt;- rownames(subsetGDIcl428_cl434[order(subsetGDIcl428_cl434$GDI,decreasing = T),])[1:50]\n\nGDIPlot(cl428_cl434,genes = \"\",GDIIn = cl428_cl434GDI)\n\n\n\n\n\ndata &lt;- getNormalizedData(cl428_cl434)\ndata &lt;- data[!rowSums(as.matrix(data)) &lt; 1,]\ndata &lt;- log(data*10000+1)\n\nrow_stdev &lt;- apply(data, 1, sd, na.rm=TRUE)\nrow_stdev &lt;- row_stdev[order(row_stdev,decreasing = T)]\n\ngenes.to.keep &lt;- c(names(row_stdev[1:100]),top.GDI.genes)\n\ndata.small &lt;- data[rownames(data) %in% genes.to.keep,]\n\n#data &lt;- t(as.matrix(data))\ndata.small &lt;- t(as.matrix(data.small))\n\n\nCOTAN_Cl.code &lt;- as.numeric(getClusterizationData(cl428_cl434,clName = \"original.clusters\")[[1]])\n\nCOTAN_Cl.code &lt;- COTAN_Cl.code -1\n\ndata.small &lt;- cbind(data.small,COTAN_Cl.code)\ndata.small &lt;- as.data.frame(data.small)\n\n# Split the data into training and test set\nset.seed(123)\ntraining.samples &lt;- data.small[,\"COTAN_Cl.code\"] %&gt;% \n  createDataPartition(p = 0.8, list = FALSE)\ntrain.data  &lt;- data.small[training.samples, ]\ntest.data &lt;- data.small[-training.samples, ]\nhead(train.data)\n\n                               Abracl  Cdkn1c    Cited2     Mllt3  Fam210b\n10X74_4_A_1:GTAACGTGCCATAGx 10.128836 0.00000  9.435728  9.435728 0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 10.211198 0.00000 10.904327 10.211198 9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx 10.518544 9.13233  9.825424  9.132330 9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.916737 0.00000  9.307371 10.405923 9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 0.00000 11.194560  0.000000 0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx 11.828628 0.00000 10.941336  8.995532 8.995532\n                                Mfap4   Cxcl12  Cdc42ep3    Limch1     Ier2\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728 9.435728  0.000000  0.000000 0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx  9.518087 0.000000  9.518087  0.000000 0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx 11.078148 9.825424  0.000000  9.132330 9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.405923 0.000000 10.000473 10.000473 9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 9.585177  0.000000  0.000000 0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx 10.941336 9.688617  0.000000  8.995532 8.995532\n                                Ptprk   Gm29260    Sfrp1    Pantr1     Magi2\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728  0.000000 9.435728 10.534287  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 10.211198  9.518087 9.518087  9.518087  9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx  9.132330  9.825424 9.825424 10.518544  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx  9.307371 10.000473 0.000000 10.405923  0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177  0.000000 9.585177  0.000000  0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000  8.995532 9.688617 10.604871 10.381733\n                             Tmem108     Ddr1       Ezr    Sncaip CT025619.1\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000 0.000000  9.435728  0.000000   9.435728\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000 0.000000  0.000000  9.518087  10.211198\n10X74_4_A_1:GATTCGGAGGTGAGx 0.000000 0.000000 10.230871  9.825424   9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx 9.307371 0.000000  0.000000 10.000473   9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 0.000000 0.000000 10.278290  0.000000   9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 8.995532 8.995532  8.995532  0.000000   8.995532\n                               Fabp7 Ctnnd2       Ptn    Frmd4a    Sorbs2\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000      0 10.128836 11.227421 10.534287\n10X73_3_A_1:ACGCCGGATCGTAGx 9.518087      0  9.518087  9.518087 10.616651\n10X74_4_A_1:GATTCGGAGGTGAGx 9.132330      0  0.000000  0.000000  9.825424\n10X74_4_A_1:CTGAGCCTGGTAAAx 9.307371      0 10.693598  9.307371 10.000473\n10X74_4_A_1:CCTAGAGAGTCACAx 9.585177      0 10.278290  0.000000  9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 9.688617      0  0.000000  0.000000 10.094061\n                                Hes6       Dcc   Neurog2     Tcf12  Fam110a\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000  9.435728  0.000000  0.000000 0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 9.518087  0.000000  0.000000 10.616651 0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx 9.825424  9.825424 10.741682  9.825424 9.825424\n10X74_4_A_1:CTGAGCCTGGTAAAx 0.000000 10.916737  0.000000 10.000473 0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx 9.585177  0.000000  0.000000 11.194560 9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 0.000000  8.995532  8.995532 10.094061 0.000000\n                               Dhrs4     Ccnd2    Elavl4      Ank3    Klf12\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000  0.000000  9.435728  9.435728 0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000  9.518087  0.000000  9.518087 0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx 9.132330 10.924000  9.132330  0.000000 9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx 0.000000  0.000000 10.000473 10.916737 9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 0.000000 10.278290 10.971420  9.585177 9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 9.688617 10.094061 10.094061  9.688617 0.000000\n                             Slc17a6     Lzts1      Map2      Lhx2   Neurod2\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000  0.000000  0.000000 10.128836 10.534287\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000  9.518087 10.211198  9.518087  9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx 9.132330 10.518544  9.825424 10.230871  9.825424\n10X74_4_A_1:CTGAGCCTGGTAAAx 0.000000 10.405923  0.000000 10.000473 11.099055\n10X74_4_A_1:CCTAGAGAGTCACAx 0.000000  0.000000 10.971420 10.971420 10.278290\n10X74_4_A_1:CTAGGATGCTTGCCx 8.995532 10.381733  8.995532 10.787188 10.604871\n                               Sstr2     Eomes   Vps37b      Ier5  Cttnbp2\n10X74_4_A_1:GTAACGTGCCATAGx 10.82196  0.000000  0.00000 10.128836  0.00000\n10X73_3_A_1:ACGCCGGATCGTAGx 10.21120  0.000000  0.00000  9.518087 11.12747\n10X74_4_A_1:GATTCGGAGGTGAGx 10.51854  9.825424  9.13233  0.000000 10.23087\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.69360  0.000000  0.00000  0.000000  0.00000\n10X74_4_A_1:CCTAGAGAGTCACAx 10.27829 10.278290 10.27829  9.585177 11.19456\n10X74_4_A_1:CTAGGATGCTTGCCx 10.94134  0.000000 10.60487  0.000000 10.94134\n                              Tmem178   Plxna4      Aff3     Tiam2  Ppp2r2b\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728 9.435728  9.435728  9.435728 10.82196\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000 0.000000 10.616651 10.211198 10.21120\n10X74_4_A_1:GATTCGGAGGTGAGx  9.132330 0.000000  0.000000 10.230871  9.13233\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.405923 0.000000  0.000000  9.307371 10.91674\n10X74_4_A_1:CCTAGAGAGTCACAx  0.000000 0.000000  0.000000  0.000000 10.27829\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000 0.000000  0.000000 10.094061 10.09406\n                                 Zeb2     Gria2     Nbea     Ptprd      Sox5\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728 10.534287 0.000000  9.435728 10.821963\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000 10.211198 9.518087  0.000000  9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx  9.825424  9.132330 0.000000  0.000000  9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx  0.000000 10.405923 0.000000 10.405923 10.000473\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177  9.585177 0.000000  0.000000 10.278290\n10X74_4_A_1:CTAGGATGCTTGCCx 10.381733  0.000000 0.000000  0.000000  0.000000\n                               Mpped2   Bcl11b    Epha5     Nol4    Grik2\n10X74_4_A_1:GTAACGTGCCATAGx 10.534287 9.435728 10.53429  0.00000 9.435728\n10X73_3_A_1:ACGCCGGATCGTAGx 10.211198 0.000000 10.61665 10.21120 0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx 10.924000 0.000000 10.23087  0.00000 9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx  9.307371 0.000000 10.00047 10.91674 0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx  0.000000 0.000000 10.68374 10.97142 0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx  9.688617 0.000000 10.38173  0.00000 8.995532\n                            Mir124.2hg      Pcp4   Ccser1     Kcnb2   Dscaml1\n10X74_4_A_1:GTAACGTGCCATAGx   0.000000  0.000000 11.63288 10.128836  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx   0.000000 11.127466 10.90433  0.000000  0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx   0.000000 10.741682  0.00000  9.132330  9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx   0.000000  0.000000 11.09906  0.000000  0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx   0.000000 10.971420 10.27829  0.000000 10.278290\n10X74_4_A_1:CTAGGATGCTTGCCx   8.995532  9.688617 10.38173  8.995532  9.688617\n                                Kcnh7       Pam     Negr1     Ppm1e     Myt1l\n10X74_4_A_1:GTAACGTGCCATAGx  0.000000  0.000000  9.435728 10.534287 11.515100\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000 10.616651 10.616651  9.518087 10.211198\n10X74_4_A_1:GATTCGGAGGTGAGx  9.132330  9.825424 10.518544  9.825424  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx  9.307371  9.307371  0.000000  0.000000 10.405923\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 10.683744 11.194560  0.000000  9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 10.381733  8.995532  0.000000  9.688617 10.094061\n                                Foxp2     Gpc6     Masp1 Serpini1    Pcdh7\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728 10.12884  0.000000 9.435728 10.12884\n10X73_3_A_1:ACGCCGGATCGTAGx  9.518087 10.21120  9.518087 0.000000 11.12747\n10X74_4_A_1:GATTCGGAGGTGAGx  0.000000  0.00000  9.132330 0.000000  9.13233\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.405923  0.00000 10.693598 0.000000  0.00000\n10X74_4_A_1:CCTAGAGAGTCACAx  0.000000  0.00000  0.000000 0.000000 10.97142\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000  0.00000  9.688617 0.000000 10.09406\n                               Rbfox1    Robo2     Fhod3     Rprm      Gng3\n10X74_4_A_1:GTAACGTGCCATAGx 10.821963 11.38157  9.435728 0.000000 10.128836\n10X73_3_A_1:ACGCCGGATCGTAGx 11.463934 11.71525 10.211198 0.000000  0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx  9.132330 11.32946  9.132330 9.825424  9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx 11.099055 10.69360  0.000000 0.000000  0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 10.68374  0.000000 0.000000  0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000 11.19265  9.688617 8.995532  8.995532\n                               Uchl1  Tmem176b      Nrn1   Snap25     Nrg1\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000  9.435728  0.000000 9.435728 11.04510\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000 10.211198  0.000000 0.000000 10.90433\n10X74_4_A_1:GATTCGGAGGTGAGx 0.000000  9.132330  9.825424 0.000000 10.74168\n10X74_4_A_1:CTGAGCCTGGTAAAx 9.307371  0.000000 10.916737 9.307371 11.38673\n10X74_4_A_1:CCTAGAGAGTCACAx 0.000000  9.585177  9.585177 9.585177 10.97142\n10X74_4_A_1:CTAGGATGCTTGCCx 0.000000  8.995532  9.688617 9.688617 11.19265\n                                Cdh8   Trim17     Chga    Rpl26     Rack1\n10X74_4_A_1:GTAACGTGCCATAGx 10.12884 0.000000 0.000000 10.82196  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 11.30979 0.000000 9.518087 11.30979  0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx 10.74168 0.000000 0.000000 10.92400 10.230871\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.40592 9.307371 9.307371 10.91674  9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 10.27829 9.585177 0.000000 10.68374 10.278290\n10X74_4_A_1:CTAGGATGCTTGCCx 10.38173 8.995532 0.000000 11.29801 10.094061\n                             Hsp90b1    Aldoa   Tuba1b    Sf3b6      Top1\n10X74_4_A_1:GTAACGTGCCATAGx 9.435728 9.435728 9.435728  0.00000 10.534287\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000 9.518087 9.518087  0.00000  9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx 0.000000 9.132330 9.132330  9.13233 10.230871\n10X74_4_A_1:CTGAGCCTGGTAAAx 0.000000 9.307371 9.307371  0.00000  9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 0.000000 0.000000 0.000000  0.00000  9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 0.000000 8.995532 0.000000 10.09406 10.094061\n                                  Tpr     Smc3     Rplp1     Rpl22   Rpl36a\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728 0.000000 10.128836  0.000000 10.53429\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000 0.000000 10.616651  0.000000  0.00000\n10X74_4_A_1:GATTCGGAGGTGAGx 10.230871 0.000000 10.518544  9.132330  0.00000\n10X74_4_A_1:CTGAGCCTGGTAAAx  0.000000 0.000000  9.307371 10.000473 11.09906\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 0.000000 10.683744  0.000000 10.68374\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000 8.995532 10.094061  9.688617 10.09406\n                                Rps21    Eif4a1      Erh      Mdk     Pde4d\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728  9.435728 0.000000  0.00000  9.435728\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000 10.211198 0.000000 10.61665 10.616651\n10X74_4_A_1:GATTCGGAGGTGAGx 10.741682  9.825424 0.000000 11.07815  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx  9.307371 10.916737 0.000000 11.79219  0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 10.278290 0.000000 11.19456  9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 10.381733  9.688617 9.688617 10.94134 10.941336\n                              Pgrmc1    Ube2r2     Bri3     Rps28     Mbtd1\n10X74_4_A_1:GTAACGTGCCATAGx 0.000000  0.000000 0.000000  9.435728  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000  9.518087 0.000000  9.518087 10.616651\n10X74_4_A_1:GATTCGGAGGTGAGx 9.132330  0.000000 9.132330  9.132330  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx 9.307371 10.000473 9.307371 10.000473  9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 9.585177  0.000000 9.585177  0.000000 10.683744\n10X74_4_A_1:CTAGGATGCTTGCCx 0.000000  0.000000 9.688617  8.995532  9.688617\n                               Rpl15     Macf1   Phf21a     Oaz2      Gnb1\n10X74_4_A_1:GTAACGTGCCATAGx 10.53429  9.435728 0.000000 10.12884  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx  0.00000  9.518087 0.000000  0.00000 10.211198\n10X74_4_A_1:GATTCGGAGGTGAGx 10.51854  0.000000 9.825424  9.13233  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.40592  9.307371 0.000000  0.00000  9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 10.68374  0.000000 0.000000  0.00000  9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 10.60487 10.381733 8.995532  0.00000  0.000000\n                               Zfp422    Rpl35a     Cox8a   Nt5dc2\n10X74_4_A_1:GTAACGTGCCATAGx 10.128836 10.821963 10.128836  0.00000\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000  9.518087 10.211198  0.00000\n10X74_4_A_1:GATTCGGAGGTGAGx  9.132330 10.518544  9.132330 10.92400\n10X74_4_A_1:CTGAGCCTGGTAAAx  0.000000 10.000473  9.307371 10.00047\n10X74_4_A_1:CCTAGAGAGTCACAx  0.000000  0.000000  0.000000  0.00000\n10X74_4_A_1:CTAGGATGCTTGCCx  8.995532  9.688617  8.995532 10.09406\n                            X4930402H24Rik     Ttc28      Ckb   Sh3bgrl\n10X74_4_A_1:GTAACGTGCCATAGx      10.821963 10.128836 9.435728  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx       9.518087 10.616651 0.000000  9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx       0.000000 10.741682 9.132330  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx      10.000473 11.253204 0.000000  0.000000\n10X74_4_A_1:CCTAGAGAGTCACAx       0.000000 10.278290 0.000000 10.278290\n10X74_4_A_1:CTAGGATGCTTGCCx       0.000000  9.688617 8.995532  9.688617\n                               Top2b  Ndufa10 C530008M17Rik     Basp1  Gpatch8\n10X74_4_A_1:GTAACGTGCCATAGx 9.435728  0.00000      0.000000 10.534287 9.435728\n10X73_3_A_1:ACGCCGGATCGTAGx 0.000000  0.00000      0.000000 10.616651 9.518087\n10X74_4_A_1:GATTCGGAGGTGAGx 0.000000 10.23087      0.000000 10.518544 9.132330\n10X74_4_A_1:CTGAGCCTGGTAAAx 0.000000 10.00047      0.000000  9.307371 9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx 0.000000  0.00000      9.585177  0.000000 0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx 8.995532  0.00000     10.094061  9.688617 8.995532\n                                Map1b  Ccdc88a     Xist    Ctnna2     Rnf7\n10X74_4_A_1:GTAACGTGCCATAGx 10.534287 0.000000  0.00000 10.534287 9.435728\n10X73_3_A_1:ACGCCGGATCGTAGx  9.518087 9.518087 10.61665 11.463934 0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx  0.000000 0.000000  0.00000  9.825424 0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.000473 0.000000 10.69360 10.000473 9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177 0.000000 11.78234  0.000000 0.000000\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000 8.995532 10.38173  9.688617 9.688617\n                                Fabp5    Usmg5     Phip     Rbmx    Zbtb20\n10X74_4_A_1:GTAACGTGCCATAGx  0.000000 9.435728 9.435728 10.12884  9.435728\n10X73_3_A_1:ACGCCGGATCGTAGx  9.518087 0.000000 0.000000  0.00000 10.211198\n10X74_4_A_1:GATTCGGAGGTGAGx  9.825424 0.000000 9.132330  9.13233 10.518544\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.000473 9.307371 0.000000  0.00000  9.307371\n10X74_4_A_1:CCTAGAGAGTCACAx  0.000000 0.000000 0.000000  0.00000 10.278290\n10X74_4_A_1:CTAGGATGCTTGCCx 10.381733 8.995532 0.000000  0.00000  8.995532\n                                Eif1b      Lcor      Nsg1      Evl      Meg3\n10X74_4_A_1:GTAACGTGCCATAGx  9.435728  0.000000  9.435728 9.435728  0.000000\n10X73_3_A_1:ACGCCGGATCGTAGx 10.616651  9.518087  9.518087 9.518087  0.000000\n10X74_4_A_1:GATTCGGAGGTGAGx  9.132330  9.825424  9.825424 0.000000  0.000000\n10X74_4_A_1:CTGAGCCTGGTAAAx 10.693598 10.000473 10.693598 0.000000 10.000473\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177  0.000000 10.683744 0.000000  9.585177\n10X74_4_A_1:CTAGGATGCTTGCCx 10.094061  0.000000  9.688617 8.995532  8.995532\n                               Eif4a2     Rab10    Mllt11 COTAN_Cl.code\n10X74_4_A_1:GTAACGTGCCATAGx 10.821963  0.000000 10.128836             0\n10X73_3_A_1:ACGCCGGATCGTAGx  0.000000  9.518087  0.000000             0\n10X74_4_A_1:GATTCGGAGGTGAGx  0.000000 10.230871  9.132330             0\n10X74_4_A_1:CTGAGCCTGGTAAAx  0.000000  0.000000 10.405923             0\n10X74_4_A_1:CCTAGAGAGTCACAx  9.585177  0.000000  9.585177             0\n10X74_4_A_1:CTAGGATGCTTGCCx  0.000000  0.000000 10.381733             0\n\n\n\n# Fit the model\nmodel &lt;- glm( COTAN_Cl.code ~., data = train.data, family = binomial,control = list(maxit = 50))\n# Summarize the model\nsummary(model)\n\n\nCall:\nglm(formula = COTAN_Cl.code ~ ., family = binomial, data = train.data, \n    control = list(maxit = 50))\n\nCoefficients:\n                 Estimate Std. Error    z value Pr(&gt;|z|)    \n(Intercept)    -1.686e+15  5.418e+07  -31111735   &lt;2e-16 ***\nAbracl         -4.715e+13  1.108e+06  -42568677   &lt;2e-16 ***\nCdkn1c          1.198e+14  8.449e+05  141835339   &lt;2e-16 ***\nCited2         -1.123e+14  1.158e+06  -96984394   &lt;2e-16 ***\nMllt3          -1.480e+13  9.271e+05  -15963843   &lt;2e-16 ***\nFam210b         5.776e+12  7.886e+05    7324089   &lt;2e-16 ***\nMfap4           1.224e+13  1.105e+06   11082390   &lt;2e-16 ***\nCxcl12          9.768e+12  8.228e+05   11871498   &lt;2e-16 ***\nCdc42ep3        2.679e+13  8.102e+05   33062536   &lt;2e-16 ***\nLimch1          3.888e+13  7.629e+05   50956797   &lt;2e-16 ***\nIer2           -1.941e+13  8.096e+05  -23978642   &lt;2e-16 ***\nPtprk          -1.101e+13  7.877e+05  -13974326   &lt;2e-16 ***\nGm29260        -1.365e+14  8.513e+05 -160329184   &lt;2e-16 ***\nSfrp1          -5.195e+13  7.665e+05  -67769176   &lt;2e-16 ***\nPantr1         -6.604e+13  1.184e+06  -55777291   &lt;2e-16 ***\nMagi2           2.868e+13  7.718e+05   37162645   &lt;2e-16 ***\nTmem108         2.640e+13  8.406e+05   31407609   &lt;2e-16 ***\nDdr1           -7.295e+13  7.777e+05  -93801889   &lt;2e-16 ***\nEzr            -4.928e+12  8.165e+05   -6035217   &lt;2e-16 ***\nSncaip         -9.105e+13  7.615e+05 -119561130   &lt;2e-16 ***\nCT025619.1      7.755e+13  7.693e+05  100806643   &lt;2e-16 ***\nFabp7          -7.246e+12  7.987e+05   -9071616   &lt;2e-16 ***\nCtnnd2          4.181e+13  7.989e+05   52332613   &lt;2e-16 ***\nPtn            -6.993e+13  8.866e+05  -78870444   &lt;2e-16 ***\nFrmd4a         -8.510e+12  8.139e+05  -10455059   &lt;2e-16 ***\nSorbs2          8.519e+13  1.040e+06   81931351   &lt;2e-16 ***\nHes6            4.145e+13  8.207e+05   50507058   &lt;2e-16 ***\nDcc            -7.059e+13  1.091e+06  -64717826   &lt;2e-16 ***\nNeurog2         1.400e+13  8.991e+05   15569920   &lt;2e-16 ***\nTcf12           5.909e+13  7.580e+05   77960833   &lt;2e-16 ***\nFam110a        -1.887e+13  7.726e+05  -24430882   &lt;2e-16 ***\nDhrs4          -8.288e+13  8.280e+05 -100100195   &lt;2e-16 ***\nCcnd2          -6.734e+12  8.477e+05   -7943945   &lt;2e-16 ***\nElavl4          7.681e+13  1.040e+06   73878040   &lt;2e-16 ***\nAnk3            3.085e+13  8.158e+05   37815294   &lt;2e-16 ***\nKlf12           2.096e+13  8.113e+05   25830911   &lt;2e-16 ***\nSlc17a6         4.704e+13  7.777e+05   60486563   &lt;2e-16 ***\nLzts1           1.221e+13  7.629e+05   16006958   &lt;2e-16 ***\nMap2           -2.064e+13  1.049e+06  -19667725   &lt;2e-16 ***\nLhx2            7.691e+13  1.073e+06   71697568   &lt;2e-16 ***\nNeurod2         1.553e+14  1.308e+06  118766112   &lt;2e-16 ***\nSstr2          -1.201e+13  1.123e+06  -10693159   &lt;2e-16 ***\nEomes           4.862e+13  8.998e+05   54037701   &lt;2e-16 ***\nVps37b          5.989e+13  7.719e+05   77580428   &lt;2e-16 ***\nIer5           -7.104e+13  7.933e+05  -89558067   &lt;2e-16 ***\nCttnbp2        -6.238e+12  1.026e+06   -6082076   &lt;2e-16 ***\nTmem178         4.639e+13  7.711e+05   60164738   &lt;2e-16 ***\nPlxna4          2.699e+13  8.247e+05   32726248   &lt;2e-16 ***\nAff3            2.566e+13  8.494e+05   30215978   &lt;2e-16 ***\nTiam2           3.867e+13  8.431e+05   45865723   &lt;2e-16 ***\nPpp2r2b         7.367e+12  1.343e+06    5487241   &lt;2e-16 ***\nZeb2           -8.699e+13  8.214e+05 -105905030   &lt;2e-16 ***\nGria2           4.712e+12  8.115e+05    5807339   &lt;2e-16 ***\nNbea           -3.057e+13  7.864e+05  -38878840   &lt;2e-16 ***\nPtprd          -1.635e+13  8.432e+05  -19394693   &lt;2e-16 ***\nSox5            7.997e+11  9.521e+05     839948   &lt;2e-16 ***\nMpped2         -1.178e+13  9.316e+05  -12640992   &lt;2e-16 ***\nBcl11b         -8.699e+13  8.186e+05 -106261338   &lt;2e-16 ***\nEpha5           7.789e+13  1.438e+06   54158015   &lt;2e-16 ***\nNol4            4.350e+13  8.773e+05   49578826   &lt;2e-16 ***\nGrik2           2.092e+13  7.828e+05   26717635   &lt;2e-16 ***\nMir124.2hg     -1.978e+13  8.306e+05  -23811113   &lt;2e-16 ***\nPcp4           -7.976e+12  7.703e+05  -10354354   &lt;2e-16 ***\nCcser1          7.204e+13  1.011e+06   71225614   &lt;2e-16 ***\nKcnb2          -6.638e+13  7.809e+05  -85011877   &lt;2e-16 ***\nDscaml1        -2.009e+13  8.061e+05  -24923932   &lt;2e-16 ***\nKcnh7          -6.348e+13  8.216e+05  -77260888   &lt;2e-16 ***\nPam            -1.908e+13  9.566e+05  -19940070   &lt;2e-16 ***\nNegr1          -5.593e+13  8.125e+05  -68845519   &lt;2e-16 ***\nPpm1e          -5.188e+12  7.777e+05   -6670744   &lt;2e-16 ***\nMyt1l          -1.775e+13  9.473e+05  -18739638   &lt;2e-16 ***\nFoxp2           1.982e+13  7.833e+05   25304938   &lt;2e-16 ***\nGpc6            4.766e+12  7.945e+05    5999112   &lt;2e-16 ***\nMasp1           4.384e+13  7.665e+05   57188102   &lt;2e-16 ***\nSerpini1        2.141e+13  8.061e+05   26565876   &lt;2e-16 ***\nPcdh7           4.264e+13  8.073e+05   52814591   &lt;2e-16 ***\nRbfox1         -2.540e+12  8.031e+05   -3162771   &lt;2e-16 ***\nRobo2          -1.937e+13  1.420e+06  -13639796   &lt;2e-16 ***\nFhod3           4.406e+13  7.980e+05   55209662   &lt;2e-16 ***\nRprm            5.339e+13  7.835e+05   68145974   &lt;2e-16 ***\nGng3           -2.037e+13  7.680e+05  -26522083   &lt;2e-16 ***\nUchl1           7.239e+12  7.594e+05    9531581   &lt;2e-16 ***\nTmem176b        3.088e+13  8.030e+05   38459013   &lt;2e-16 ***\nNrn1           -5.860e+13  9.557e+05  -61323738   &lt;2e-16 ***\nSnap25         -2.782e+13  7.898e+05  -35221750   &lt;2e-16 ***\nNrg1           -1.037e+14  1.511e+06  -68676296   &lt;2e-16 ***\nCdh8           -6.110e+13  9.459e+05  -64591781   &lt;2e-16 ***\nTrim17         -4.393e+13  7.920e+05  -55467510   &lt;2e-16 ***\nChga            3.352e+13  7.864e+05   42626343   &lt;2e-16 ***\nRpl26          -1.541e+14  1.158e+06 -133038070   &lt;2e-16 ***\nRack1          -1.958e+13  1.065e+06  -18388573   &lt;2e-16 ***\nHsp90b1         1.180e+13  7.764e+05   15202488   &lt;2e-16 ***\nAldoa           5.076e+13  7.895e+05   64297711   &lt;2e-16 ***\nTuba1b         -2.882e+13  7.673e+05  -37556112   &lt;2e-16 ***\nSf3b6          -8.811e+12  7.754e+05  -11363341   &lt;2e-16 ***\nTop1           -7.822e+13  1.256e+06  -62293981   &lt;2e-16 ***\nTpr             4.572e+13  8.111e+05   56364549   &lt;2e-16 ***\nSmc3            7.762e+12  7.864e+05    9869483   &lt;2e-16 ***\nRplp1           4.751e+13  1.506e+06   31536103   &lt;2e-16 ***\nRpl22           5.640e+13  9.818e+05   57449909   &lt;2e-16 ***\nRpl36a          5.228e+13  1.286e+06   40661251   &lt;2e-16 ***\nRps21          -6.595e+12  9.803e+05   -6728251   &lt;2e-16 ***\nEif4a1          5.623e+13  1.107e+06   50779647   &lt;2e-16 ***\nErh             5.627e+13  8.249e+05   68215509   &lt;2e-16 ***\nMdk             1.403e+13  1.311e+06   10698211   &lt;2e-16 ***\nPde4d           7.496e+13  8.054e+05   93072149   &lt;2e-16 ***\nPgrmc1          2.521e+13  7.890e+05   31958231   &lt;2e-16 ***\nUbe2r2          2.252e+13  7.630e+05   29515130   &lt;2e-16 ***\nBri3           -1.631e+13  7.624e+05  -21389061   &lt;2e-16 ***\nRps28           5.956e+12  1.081e+06    5511164   &lt;2e-16 ***\nMbtd1          -1.601e+13  8.020e+05  -19968438   &lt;2e-16 ***\nRpl15           1.769e+13  1.056e+06   16743069   &lt;2e-16 ***\nMacf1          -2.359e+13  7.456e+05  -31643581   &lt;2e-16 ***\nPhf21a         -2.270e+13  7.941e+05  -28584159   &lt;2e-16 ***\nOaz2           -1.602e+13  7.671e+05  -20878553   &lt;2e-16 ***\nGnb1            2.115e+13  7.786e+05   27161497   &lt;2e-16 ***\nZfp422         -1.520e+13  7.937e+05  -19144492   &lt;2e-16 ***\nRpl35a         -7.101e+13  1.012e+06  -70148519   &lt;2e-16 ***\nCox8a           8.371e+12  9.384e+05    8920618   &lt;2e-16 ***\nNt5dc2         -3.363e+13  7.820e+05  -43000354   &lt;2e-16 ***\nX4930402H24Rik  1.789e+12  8.011e+05    2232956   &lt;2e-16 ***\nTtc28           7.823e+12  9.395e+05    8326198   &lt;2e-16 ***\nCkb            -9.743e+13  8.412e+05 -115823225   &lt;2e-16 ***\nSh3bgrl        -2.330e+13  7.831e+05  -29748021   &lt;2e-16 ***\nTop2b           5.521e+13  7.850e+05   70331459   &lt;2e-16 ***\nNdufa10        -7.000e+13  7.998e+05  -87527429   &lt;2e-16 ***\nC530008M17Rik  -5.369e+13  8.134e+05  -66011040   &lt;2e-16 ***\nBasp1           1.162e+14  1.002e+06  115896331   &lt;2e-16 ***\nGpatch8         1.888e+13  7.653e+05   24675271   &lt;2e-16 ***\nMap1b          -2.937e+13  9.207e+05  -31901455   &lt;2e-16 ***\nCcdc88a         3.041e+13  7.736e+05   39301701   &lt;2e-16 ***\nXist            1.730e+13  7.861e+05   22010505   &lt;2e-16 ***\nCtnna2         -4.172e+13  9.718e+05  -42928048   &lt;2e-16 ***\nRnf7           -2.193e+13  8.067e+05  -27182858   &lt;2e-16 ***\nFabp5           6.984e+13  9.924e+05   70373006   &lt;2e-16 ***\nUsmg5           5.091e+13  7.931e+05   64193211   &lt;2e-16 ***\nPhip            2.855e+13  7.823e+05   36499842   &lt;2e-16 ***\nRbmx            1.080e+13  7.791e+05   13857287   &lt;2e-16 ***\nZbtb20         -3.542e+13  1.022e+06  -34653461   &lt;2e-16 ***\nEif1b          -5.204e+13  1.019e+06  -51060909   &lt;2e-16 ***\nLcor            1.071e+13  7.874e+05   13600823   &lt;2e-16 ***\nNsg1           -6.878e+12  9.945e+05   -6915923   &lt;2e-16 ***\nEvl            -3.260e+13  7.905e+05  -41243490   &lt;2e-16 ***\nMeg3            6.629e+13  8.077e+05   82077606   &lt;2e-16 ***\nEif4a2         -3.223e+13  7.879e+05  -40902790   &lt;2e-16 ***\nRab10          -3.146e+13  7.727e+05  -40719594   &lt;2e-16 ***\nMllt11          1.398e+14  1.233e+06  113408602   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance:  653.13  on 472  degrees of freedom\nResidual deviance: 4757.76  on 326  degrees of freedom\nAIC: 5051.8\n\nNumber of Fisher Scoring iterations: 46\n\n# Make predictions\nprobabilities &lt;- model %&gt;% predict(test.data, type = \"response\")\npredicted.classes &lt;- ifelse(probabilities &gt; 0.5, \"1\", \"0\")\n# Model accuracy\nmean(predicted.classes == test.data$COTAN_Cl.code)\n\n[1] 0.6694915"
  },
  {
    "objectID": "Real_UT_clustersByCotan.html#e13.5-e14.5",
    "href": "Real_UT_clustersByCotan.html#e13.5-e14.5",
    "title": "Real UT clusters",
    "section": "434 e13.5 e14.5",
    "text": "434 e13.5 e14.5\n\n\nSys.time()\n\n[1] \"2024-04-19 12:11:58 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] torch_0.12.0       nnet_7.3-19        COTAN_2.5.0        caret_6.0-94      \n [5] lattice_0.22-5     lubridate_1.9.2    forcats_1.0.0      stringr_1.5.0     \n [9] dplyr_1.1.2        purrr_1.0.1        readr_2.1.4        tibble_3.2.1      \n[13] tidyverse_2.0.0    tidyr_1.3.0        parallelDist_0.2.6 data.table_1.15.0 \n[17] zeallot_0.1.0      ggplot2_3.5.0     \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               polyclip_1.10-4          \n  [5] hardhat_1.3.0             pROC_1.18.4              \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           doParallel_1.0.17        \n [11] processx_3.8.2            globals_0.16.2           \n [13] MASS_7.3-60               dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             Seurat_5.0.0             \n [21] sctransform_0.4.1         askpass_1.2.0            \n [23] spam_2.10-0               spatstat.sparse_3.0-2    \n [25] sp_2.1-1                  reticulate_1.35.0        \n [27] cowplot_1.1.1             pbapply_1.7-2            \n [29] RColorBrewer_1.1-3        abind_1.4-5              \n [31] Rtsne_0.17                BiocGenerics_0.46.0      \n [33] coro_1.0.4                ipred_0.9-14             \n [35] circlize_0.4.15           lava_1.8.0               \n [37] IRanges_2.34.1            S4Vectors_0.38.1         \n [39] ggrepel_0.9.5             irlba_2.3.5.1            \n [41] spatstat.utils_3.0-3      listenv_0.9.0            \n [43] umap_0.2.10.0             goftest_1.2-3            \n [45] RSpectra_0.16-1           spatstat.random_3.2-1    \n [47] dqrng_0.3.0               fitdistrplus_1.1-11      \n [49] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [51] leiden_0.4.3              codetools_0.2-19         \n [53] DelayedArray_0.26.7       tidyselect_1.2.0         \n [55] shape_1.4.6               farver_2.1.1             \n [57] viridis_0.6.4             ScaledMatrix_1.8.1       \n [59] spatstat.explore_3.2-1    matrixStats_1.2.0        \n [61] stats4_4.3.2              jsonlite_1.8.7           \n [63] GetoptLong_1.0.5          ellipsis_0.3.2           \n [65] progressr_0.14.0          ggridges_0.5.4           \n [67] survival_3.5-8            iterators_1.0.14         \n [69] foreach_1.5.2             tools_4.3.2              \n [71] ica_1.0-3                 Rcpp_1.0.11              \n [73] glue_1.7.0                gridExtra_2.3            \n [75] prodlim_2023.08.28        xfun_0.39                \n [77] MatrixGenerics_1.12.3     ggthemes_5.1.0           \n [79] withr_3.0.0               fastmap_1.1.1            \n [81] fansi_1.0.4               openssl_2.1.0            \n [83] callr_3.7.3               digest_0.6.33            \n [85] rsvd_1.0.5                timechange_0.3.0         \n [87] R6_2.5.1                  mime_0.12                \n [89] colorspace_2.1-0          scattermore_1.2          \n [91] tensor_1.5                spatstat.data_3.0-1      \n [93] utf8_1.2.3                generics_0.1.3           \n [95] recipes_1.0.8             class_7.3-22             \n [97] httr_1.4.6                htmlwidgets_1.6.2        \n [99] S4Arrays_1.2.0            uwot_0.1.16              \n[101] ModelMetrics_1.2.2.2      pkgconfig_2.0.3          \n[103] gtable_0.3.3              timeDate_4032.109        \n[105] ComplexHeatmap_2.16.0     lmtest_0.9-40            \n[107] htmltools_0.5.8           dotCall64_1.1-0          \n[109] clue_0.3-64               SeuratObject_5.0.0       \n[111] scales_1.3.0              png_0.1-8                \n[113] gower_1.0.1               knitr_1.43               \n[115] rstudioapi_0.15.0         tzdb_0.4.0               \n[117] reshape2_1.4.4            rjson_0.2.21             \n[119] nlme_3.1-163              zoo_1.8-12               \n[121] GlobalOptions_0.1.2       KernSmooth_2.23-22       \n[123] parallel_4.3.2            miniUI_0.1.1.1           \n[125] RcppZiggurat_0.1.6        pillar_1.9.0             \n[127] grid_4.3.2                vctrs_0.6.3              \n[129] RANN_2.6.1                promises_1.2.0.1         \n[131] BiocSingular_1.16.0       beachmat_2.16.0          \n[133] xtable_1.8-4              cluster_2.1.6            \n[135] evaluate_0.21             cli_3.6.1                \n[137] compiler_4.3.2            rlang_1.1.1              \n[139] crayon_1.5.2              future.apply_1.11.0      \n[141] labeling_0.4.2            ps_1.7.5                 \n[143] plyr_1.8.8                stringi_1.8.1            \n[145] deldir_2.0-2              viridisLite_0.4.2        \n[147] BiocParallel_1.34.2       assertthat_0.2.1         \n[149] munsell_0.5.0             lazyeval_0.2.2           \n[151] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[153] Matrix_1.6-3              RcppHNSW_0.6.0           \n[155] hms_1.1.3                 patchwork_1.2.0          \n[157] bit64_4.0.5               sparseMatrixStats_1.12.2 \n[159] future_1.33.0             shiny_1.8.0              \n[161] ROCR_1.0-11               Rfast_2.1.0              \n[163] igraph_2.0.3              RcppParallel_5.1.7       \n[165] bit_4.0.5"
  },
  {
    "objectID": "cd14_analysis.html",
    "href": "cd14_analysis.html",
    "title": "CD14 Data-set Anaysis with cleaning",
    "section": "",
    "text": "#library(SingleCellExperiment)\n#library(DuoClustering2018)\n#library(tidyr)\nlibrary(ggplot2)\n#library(ggsankey) # remotes::install_github(\"davidsjoberg/ggsankey\")\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(COTAN)\noptions(parallelly.fork.enable = TRUE)\n\noutDir &lt;- \"Data/CD14Cleaned/\"\n\nsetLoggingLevel(2)\nsetLoggingFile(file.path(outDir, \"cd14_analysis.log\"))\n\n\nlibrary(Seurat)\ndataset &lt;- Read10X(file.path(outDir, \"/OrigialDatahg19\"))\n\n\nsampleCondition &lt;- \"CD14_Monocytes\"\ncd14Obj &lt;- COTAN(raw = dataset)\ncd14Obj &lt;- initializeMetaDataset(cd14Obj,\n                                 GEO = \"10X CD14+ Monocytes\",\n                                 sequencingMethod = \"10X\",\n                                 sampleCondition = sampleCondition)\n\nsampleCondition\n\n[1] \"CD14_Monocytes\"\n\n\nInspect cells’ sizes\n\ncellSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2)\n\n\n\n\nDrop cells with too many reads as they are probably doublets\n\ncellsSizeThr &lt;- 2500\ncd14Obj &lt;- addElementToMetaDataset(cd14Obj, \"Cells size threshold\", cellsSizeThr)\n\ncells_to_rem &lt;- getCells(cd14Obj)[getCellsSize(cd14Obj) &gt; cellsSizeThr]\ncd14Obj &lt;- dropGenesCells(cd14Obj, cells = cells_to_rem)\n\ncellSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2)\n\n\n\n\nInspect the number of expressed genes per cell\n\ngenesSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2)\n\n\n\n\nDrop cells with too high genes expression as they are probably doublets\n\ngenesSizeThr &lt;- 800\ncd14Obj &lt;- addElementToMetaDataset(cd14Obj, \"Num genes threshold\", genesSizeThr)\n\nnumExprGenes &lt;- getNumExpressedGenes(cd14Obj)\ncells_to_rem &lt;- names(numExprGenes)[numExprGenes &gt; genesSizeThr]\ncd14Obj &lt;- dropGenesCells(cd14Obj, cells = cells_to_rem)\n\ngenesSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2)\n\n\n\n\nCheck number of mitochondrial genes expressed in each cell\n\nmitGenesPattern &lt;- \"^[Mm][Tt]-\"\ngetGenes(cd14Obj)[grep(mitGenesPattern, getGenes(cd14Obj))]\n\n [1] \"MT-ND1\"  \"MT-ND2\"  \"MT-CO1\"  \"MT-CO2\"  \"MT-ATP8\" \"MT-ATP6\" \"MT-CO3\" \n [8] \"MT-ND3\"  \"MT-ND4L\" \"MT-ND4\"  \"MT-ND5\"  \"MT-ND6\"  \"MT-CYB\" \n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(cd14Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nCells with a too high percentage of mitochondrial genes are likely dead (or at the last problematic) cells. So we drop them!\n\nmitPercThr &lt;- 7\ncd14Obj &lt;- addElementToMetaDataset(cd14Obj, \"Mitoc. perc. threshold\", mitPercThr)\n\ncells_to_rem &lt;- rownames(mitSizes)[mitSizes[[\"mit.percentage\"]] &gt; mitPercThr]\n\ncd14Obj &lt;- dropGenesCells(cd14Obj, cells = cells_to_rem)\n\nc(mitPlot, mitSizes) %&lt;-%\n  mitochondrialPercentagePlot(cd14Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(mitPlot)\n\n\n\n\nCheck the number of ribosomal genes expressed in each cell\n\nribGenesPattern &lt;- \"^RP[SL]\\\\d+\"\ngetGenes(cd14Obj)[grep(ribGenesPattern, getGenes(cd14Obj))]\n\n  [1] \"RPL22\"          \"RPL11\"          \"RPS6KA1\"        \"RPS8\"          \n  [5] \"RPL5\"           \"RPS27\"          \"RPS10P7\"        \"RPS6KC1\"       \n  [9] \"RPS7\"           \"RPS27A\"         \"RPL31\"          \"RPL37A\"        \n [13] \"RPL32\"          \"RPL15\"          \"RPL14\"          \"RPL29\"         \n [17] \"RPL24\"          \"RPL22L1\"        \"RPL39L\"         \"RPL35A\"        \n [21] \"RPL9\"           \"RPL34-AS1\"      \"RPL34\"          \"RPS3A\"         \n [25] \"RPL37\"          \"RPS23\"          \"RPS14\"          \"RPL26L1\"       \n [29] \"RPS18\"          \"RPS10-NUDT3\"    \"RPS10\"          \"RPL10A\"        \n [33] \"RPL7L1\"         \"RPS12\"          \"RPS6KA2\"        \"RPS6KA2-AS1\"   \n [37] \"RPS6KA3\"        \"RPS4X\"          \"RPS6KA6\"        \"RPL36A\"        \n [41] \"RPL36A-HNRNPH2\" \"RPL39\"          \"RPL10\"          \"RPS20\"         \n [45] \"RPL7\"           \"RPL30\"          \"RPL8\"           \"RPS6\"          \n [49] \"RPL35\"          \"RPL12\"          \"RPL7A\"          \"RPS24\"         \n [53] \"RPL27A\"         \"RPS13\"          \"RPS6KA4\"        \"RPS6KB2\"       \n [57] \"RPS3\"           \"RPS25\"          \"RPS26\"          \"RPL41\"         \n [61] \"RPL6\"           \"RPL21\"          \"RPL10L\"         \"RPS29\"         \n [65] \"RPL36AL\"        \"RPS6KL1\"        \"RPS6KA5\"        \"RPS27L\"        \n [69] \"RPL4\"           \"RPS17\"          \"RPS17L\"         \"RPL3L\"         \n [73] \"RPS2\"           \"RPS15A\"         \"RPL13\"          \"RPL26\"         \n [77] \"RPL23A\"         \"RPL23\"          \"RPL19\"          \"RPL27\"         \n [81] \"RPS6KB1\"        \"RPL38\"          \"RPL17-C18orf32\" \"RPL17\"         \n [85] \"RPS21\"          \"RPS15\"          \"RPL36\"          \"RPS28\"         \n [89] \"RPL18A\"         \"RPS16\"          \"RPS19\"          \"RPL18\"         \n [93] \"RPL13A\"         \"RPS11\"          \"RPS9\"           \"RPL28\"         \n [97] \"RPS5\"           \"RPS4Y1\"         \"RPS4Y2\"         \"RPL3\"          \n[101] \"RPS19BP1\"      \n\nc(ribPlot, ribSizes) %&lt;-%\n  mitochondrialPercentagePlot(cd14Obj, genePrefix = mitGenesPattern,\n                              splitPattern = \"-\", numCol = 2)\n\nplot(ribPlot)\n\n\n\n\nCheck no further outliers after all the culling\n\ncellSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2)\n\n\n\ngenesSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2)\n\n\n\n\nClean: round 1\n\ncd14Obj &lt;- clean(cd14Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cd14Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(genesPlot)\n\n\n\ncd14Obj &lt;- addElementToMetaDataset(cd14Obj, \"Num drop B group\", 0)\n\nVisualize if all is ok:\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(zoomedNuPlot)\n\n\n\n\nFinal cleaning to check all is OK\n\ncd14Obj &lt;- clean(cd14Obj)\n\nc(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot, zoomedNuPlot) %&lt;-% cleanPlots(cd14Obj)\n\nplot(pcaCellsPlot)\n\n\n\nplot(pcaCellsData)\n\n\n\nplot(genesPlot)\n\n\n\nplot(UDEPlot)\n\n\n\nplot(nuPlot)\n\n\n\nplot(zoomedNuPlot)\n\n\n\nplot(cellSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2))\n\n\n\nplot(genesSizePlot(cd14Obj, splitPattern = \"-\", numCol = 2))\n\n\n\n\nCalculate genes’ COEX\n\nSys.time()\n\ncd14Obj &lt;- proceedToCoex(cd14Obj, calcCoex = TRUE, cores = 12,\n                         saveObj = TRUE, outDir = outDir)\n\n\ncd14Obj &lt;- readRDS(file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\ngdiData &lt;- calculateGDI(cd14Obj)\n\ngenesToLabel &lt;- head(rownames(gdiData[order(gdiData[[\"GDI\"]],\n                                            decreasing = TRUE), ]), n = 50L)\n\nsort(genesToLabel)\n\n [1] \"ABI3\"      \"ARHGDIB\"   \"ATP5A1\"    \"ATP6V1G1\"  \"CALM2\"     \"CD53\"     \n [7] \"CD7\"       \"CLEC10A\"   \"CPVL\"      \"CTSW\"      \"FCER1A\"    \"FKBP1A\"   \n[13] \"H2AFY\"     \"HLA-DMB\"   \"HLA-DPA1\"  \"HLA-DPB1\"  \"HLA-DQA1\"  \"HLA-DQA2\" \n[19] \"HLA-DQB1\"  \"HLA-DRA\"   \"HMGN1\"     \"HNRNPA0\"   \"HNRNPA1\"   \"HNRNPA2B1\"\n[25] \"IFITM1\"    \"IL2RG\"     \"IL32\"      \"LDHA\"      \"LDHB\"      \"MYL12A\"   \n[31] \"NPM1\"      \"PARK7\"     \"PDIA6\"     \"PGK1\"      \"PTPRCAP\"   \"RAB7A\"    \n[37] \"RBM3\"      \"RHOA\"      \"RHOC\"      \"RPL5\"      \"S100A6\"    \"S100A8\"   \n[43] \"S100A9\"    \"SELL\"      \"SLC25A5\"   \"TMEM230\"   \"TMEM66\"    \"TUBA1B\"   \n[49] \"TYROBP\"    \"YBX1\"     \n\ngdiData[genesToLabel[[50L]], \"GDI\"]\n\n[1] 1.606624\n\ngdiPlot &lt;- GDIPlot(cd14Obj, GDIIn = gdiData, GDIThreshold = 1.4,\n                   genes = list(\"Top 10 GDI genes\" = genesToLabel[1L:10L]))\n\nplot(gdiPlot)\n\n\n\nSys.time()\n\n[1] \"2024-05-10 19:18:01 CEST\"\n\n\nSave the COTAN object\n\nsaveRDS(cd14Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\ncd14Obj &lt;- readRDS(file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(splitClusters, splitCoexDF) %&lt;-%\n  cellsUniformClustering(cd14Obj, GDIThreshold = 1.43, cores = 13,\n                         saveObj = TRUE, outDir = outDir)\n\ncd14Obj &lt;- addClusterization(cd14Obj, clName = \"split\",\n                             clusters = splitClusters,\n                             coexDF = splitCoexDF, override = TRUE)\n\n\nsplitClusters &lt;- getClusterizationData(cd14Obj, clName = \"split\")[[1]]\n\ntable(splitClusters)\n\nsplitClusters\n  1   2   3   4   5 \n878  38 637 837  48 \n\n\n\nsaveRDS(cd14Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nc(mergedClusters, mergedCoexDF) %&lt;-%\n  mergeUniformCellsClusters(cd14Obj, clusters = splitClusters,\n                            GDIThreshold = 1.43, cores = 13,\n                            saveObj = TRUE, outDir = outDir)\n\ncd14Obj &lt;- addClusterization(cd14Obj, clName = \"merge\",\n                             clusters = mergedClusters,\n                             coexDF = mergedCoexDF,\n                             override = TRUE)\n\n\nmergedClusters &lt;- getClusterizationData(cd14Obj, clName = \"merge\")[[1]]\n\ntable(mergedClusters)\n\nmergedClusters\n   1    2    3 \n1522  878   38 \n\n\n\nsaveRDS(cd14Obj, file = file.path(outDir, paste0(sampleCondition, \".cotan.RDS\")))\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] Seurat_5.0.0       SeuratObject_5.0.0 sp_2.1-1           COTAN_2.5.0       \n[5] zeallot_0.1.0      tibble_3.2.1       ggplot2_3.5.0     \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               R.oo_1.26.0              \n  [5] polyclip_1.10-4           fastDummies_1.7.3        \n  [7] lifecycle_1.0.3           doParallel_1.0.17        \n  [9] globals_0.16.2            lattice_0.22-5           \n [11] MASS_7.3-60               dendextend_1.17.1        \n [13] magrittr_2.0.3            plotly_4.10.2            \n [15] rmarkdown_2.24            yaml_2.3.7               \n [17] httpuv_1.6.11             sctransform_0.4.1        \n [19] spam_2.10-0               askpass_1.2.0            \n [21] spatstat.sparse_3.0-2     reticulate_1.36.1        \n [23] cowplot_1.1.1             pbapply_1.7-2            \n [25] RColorBrewer_1.1-3        abind_1.4-5              \n [27] Rtsne_0.17                purrr_1.0.1              \n [29] R.utils_2.12.2            BiocGenerics_0.46.0      \n [31] circlize_0.4.15           IRanges_2.34.1           \n [33] S4Vectors_0.38.1          ggrepel_0.9.5            \n [35] irlba_2.3.5.1             listenv_0.9.0            \n [37] spatstat.utils_3.0-3      umap_0.2.10.0            \n [39] goftest_1.2-3             RSpectra_0.16-1          \n [41] spatstat.random_3.2-1     dqrng_0.3.0              \n [43] fitdistrplus_1.1-11       parallelly_1.37.1        \n [45] DelayedMatrixStats_1.22.5 leiden_0.4.3             \n [47] codetools_0.2-19          DelayedArray_0.26.7      \n [49] tidyselect_1.2.0          shape_1.4.6              \n [51] farver_2.1.1              ScaledMatrix_1.8.1       \n [53] viridis_0.6.4             matrixStats_1.2.0        \n [55] stats4_4.3.2              spatstat.explore_3.2-1   \n [57] jsonlite_1.8.7            GetoptLong_1.0.5         \n [59] ellipsis_0.3.2            progressr_0.14.0         \n [61] ggridges_0.5.4            survival_3.5-8           \n [63] iterators_1.0.14          foreach_1.5.2            \n [65] tools_4.3.2               ica_1.0-3                \n [67] Rcpp_1.0.11               glue_1.7.0               \n [69] gridExtra_2.3             xfun_0.39                \n [71] MatrixGenerics_1.12.3     ggthemes_5.1.0           \n [73] dplyr_1.1.2               withr_3.0.0              \n [75] fastmap_1.1.1             fansi_1.0.4              \n [77] openssl_2.1.0             digest_0.6.33            \n [79] rsvd_1.0.5                parallelDist_0.2.6       \n [81] R6_2.5.1                  mime_0.12                \n [83] colorspace_2.1-0          scattermore_1.2          \n [85] tensor_1.5                spatstat.data_3.0-1      \n [87] R.methodsS3_1.8.2         utf8_1.2.3               \n [89] tidyr_1.3.0               generics_0.1.3           \n [91] data.table_1.15.0         httr_1.4.6               \n [93] htmlwidgets_1.6.2         S4Arrays_1.2.0           \n [95] uwot_0.1.16               pkgconfig_2.0.3          \n [97] gtable_0.3.3              ComplexHeatmap_2.16.0    \n [99] lmtest_0.9-40             htmltools_0.5.8          \n[101] dotCall64_1.1-0           clue_0.3-64              \n[103] scales_1.3.0              png_0.1-8                \n[105] knitr_1.43                rstudioapi_0.15.0        \n[107] reshape2_1.4.4            rjson_0.2.21             \n[109] nlme_3.1-163              zoo_1.8-12               \n[111] GlobalOptions_0.1.2       stringr_1.5.0            \n[113] KernSmooth_2.23-22        parallel_4.3.2           \n[115] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[117] pillar_1.9.0              grid_4.3.2               \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             evaluate_0.21            \n[127] cli_3.6.1                 compiler_4.3.2           \n[129] rlang_1.1.1               crayon_1.5.2             \n[131] future.apply_1.11.0       labeling_0.4.2           \n[133] plyr_1.8.8                stringi_1.8.1            \n[135] viridisLite_0.4.2         deldir_2.0-2             \n[137] BiocParallel_1.34.2       assertthat_0.2.1         \n[139] munsell_0.5.0             lazyeval_0.2.2           \n[141] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[143] Matrix_1.6-3              RcppHNSW_0.6.0           \n[145] patchwork_1.2.0           sparseMatrixStats_1.12.2 \n[147] future_1.33.0             shiny_1.8.0              \n[149] ROCR_1.0-11               Rfast_2.1.0              \n[151] igraph_2.0.3              RcppParallel_5.1.7"
  },
  {
    "objectID": "geneCoexAnalysis.html",
    "href": "geneCoexAnalysis.html",
    "title": "Gene Correlation Analysis",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\n\nLoading required package: grid\n\n\n========================================\nComplexHeatmap version 2.16.0\nBioconductor page: http://bioconductor.org/packages/ComplexHeatmap/\nGithub page: https://github.com/jokergoo/ComplexHeatmap\nDocumentation: http://jokergoo.github.io/ComplexHeatmap-reference\n\nIf you use it in published research, please cite either one:\n- Gu, Z. Complex Heatmap Visualization. iMeta 2022.\n- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional \n    genomic data. Bioinformatics 2016.\n\n\nThe new InteractiveComplexHeatmap package can directly export static \ncomplex heatmaps into an interactive Shiny app with zero effort. Have a try!\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(ComplexHeatmap))\n========================================\n\nlibrary(circlize)\n\n========================================\ncirclize version 0.4.15\nCRAN page: https://cran.r-project.org/package=circlize\nGithub page: https://github.com/jokergoo/circlize\nDocumentation: https://jokergoo.github.io/circlize_book/book/\n\nIf you use it in published research, please cite:\nGu, Z. circlize implements and enhances circular visualization\n  in R. Bioinformatics 2014.\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(circlize))\n========================================\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\")\n)"
  },
  {
    "objectID": "geneCoexAnalysis.html#cotan",
    "href": "geneCoexAnalysis.html#cotan",
    "title": "Gene Correlation Analysis",
    "section": "COTAN",
    "text": "COTAN\n\nobj &lt;- readRDS(\"Data/MouseCortex/MouseCortex_E14.5.cotan.RDS\")\n\n\n# pValues &lt;- calculatePValue(obj, geneSubsetCol = \n#             c(genesList$NPGs,genesList$PNGs,genesList$hk),\n#             geneSubsetRow = \n#              c(genesList$NPGs,genesList$PNGs,genesList$hk))\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDIPlot(obj,genes = genesList,GDIThreshold = 1.4)\n\nSetting new log level to 1\n\n\nRemoved 0 low GDI genes (such as the fully-expressed) in GDI plot"
  },
  {
    "objectID": "geneCoexAnalysis.html#seurat-correlation",
    "href": "geneCoexAnalysis.html#seurat-correlation",
    "title": "Gene Correlation Analysis",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(Seurat)\n\nAttaching SeuratObject\n\n\n\nAttaching package: 'Seurat'\n\n\nThe following object is masked from 'package:COTAN':\n\n    UMAPPlot\n\nlibrary(patchwork)\nlibrary(Rfast)\n\nLoading required package: Rcpp\n\n\nLoading required package: RcppZiggurat\n\n\n\nAttaching package: 'Rfast'\n\n\nThe following object is masked from 'package:dplyr':\n\n    nth\n\n\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), project = \"E14.5\", min.cells = 3, min.features = 200)\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\nWhen using repel, set xnudge and ynudge to 0 for optimal results\n\n\nWarning: ggrepel: 17 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\nWhen using repel, set xnudge and ynudge to 0 for optimal results\n\n\nWarning: ggrepel: 5 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\n\nCentering and scaling data matrix\n\nseurat.data = srat[[\"RNA\"]]@data\n\n\nseurat.data.cor = cora(t(as.matrix(seurat.data)[c(genesList$NPGs,genesList$hk,genesList$PNGs),]), large = T)\n\nWarning in asMethod(object): sparse-&gt;dense coercion: allocating vector of size\n1.1 GiB\n\nrownames(seurat.data.cor) &lt;- c(genesList$NPGs,genesList$hk,genesList$PNGs)\ncolnames(seurat.data.cor) &lt;- c(genesList$NPGs,genesList$hk,genesList$PNGs)\n\ndiag(seurat.data.cor) &lt;- 0\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(seurat.data.cor),\n        #width = ncol(seurat.corMat)*unit(2.5, \"mm\"), \n        height = nrow(seurat.data.cor)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"Seurat corr SCT\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nsrat &lt;-  SCTransform(srat, method = \"glmGamPoi\", vars.to.regress = \"percent.mt\", verbose = FALSE)\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nWarning: useNames = NA is deprecated. Instead, specify either useNames = TRUE\nor useNames = TRUE.\n\nseurat.data = srat[[\"SCT\"]]@data\nseurat.data.cor = cora(t(as.matrix(seurat.data)[c(genesList$NPGs,genesList$hk,genesList$PNGs),]), large = T)\n\nWarning in asMethod(object): sparse-&gt;dense coercion: allocating vector of size\n1.1 GiB\n\nrownames(seurat.data.cor) &lt;- c(genesList$NPGs,genesList$hk,genesList$PNGs)\ncolnames(seurat.data.cor) &lt;- c(genesList$NPGs,genesList$hk,genesList$PNGs)\n\ndiag(seurat.data.cor) &lt;- 0\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(seurat.data.cor),\n        #width = ncol(seurat.corMat)*unit(2.5, \"mm\"), \n        height = nrow(seurat.data.cor)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"Seurat corr SCT\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] Rfast_2.0.7           RcppZiggurat_0.1.6    Rcpp_1.0.10          \n [4] patchwork_1.1.2       SeuratObject_4.1.3    Seurat_4.3.0         \n [7] dplyr_1.1.2           circlize_0.4.15       ComplexHeatmap_2.16.0\n[10] COTAN_2.1.2          \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3          rstudioapi_0.14            \n  [3] jsonlite_1.8.4              shape_1.4.6                \n  [5] umap_0.2.10.0               magrittr_2.0.3             \n  [7] spatstat.utils_3.0-3        farver_2.1.1               \n  [9] rmarkdown_2.21              zlibbioc_1.46.0            \n [11] GlobalOptions_0.1.2         vctrs_0.6.1                \n [13] ROCR_1.0-11                 DelayedMatrixStats_1.22.0  \n [15] spatstat.explore_3.2-1      RCurl_1.98-1.12            \n [17] askpass_1.1                 S4Arrays_1.0.1             \n [19] htmltools_0.5.5             sctransform_0.3.5          \n [21] parallelly_1.36.0           KernSmooth_2.23-20         \n [23] htmlwidgets_1.6.2           ica_1.0-3                  \n [25] plyr_1.8.8                  plotly_4.10.1              \n [27] zoo_1.8-12                  igraph_1.4.2               \n [29] mime_0.12                   lifecycle_1.0.3            \n [31] iterators_1.0.14            pkgconfig_2.0.3            \n [33] Matrix_1.5-4                R6_2.5.1                   \n [35] fastmap_1.1.1               GenomeInfoDbData_1.2.10    \n [37] MatrixGenerics_1.12.0       fitdistrplus_1.1-8         \n [39] future_1.32.0               shiny_1.7.4                \n [41] clue_0.3-64                 digest_0.6.31              \n [43] colorspace_2.1-0            S4Vectors_0.38.0           \n [45] tensor_1.5                  RSpectra_0.16-1            \n [47] irlba_2.3.5.1               GenomicRanges_1.52.0       \n [49] labeling_0.4.2              progressr_0.13.0           \n [51] fansi_1.0.4                 spatstat.sparse_3.0-1      \n [53] httr_1.4.5                  polyclip_1.10-4            \n [55] abind_1.4-5                 compiler_4.3.0             \n [57] withr_2.5.0                 doParallel_1.0.17          \n [59] viridis_0.6.2               dendextend_1.17.1          \n [61] MASS_7.3-59                 openssl_2.0.6              \n [63] DelayedArray_0.26.1         rjson_0.2.21               \n [65] tools_4.3.0                 lmtest_0.9-40              \n [67] httpuv_1.6.9                future.apply_1.11.0        \n [69] goftest_1.2-3               glmGamPoi_1.12.1           \n [71] glue_1.6.2                  nlme_3.1-162               \n [73] promises_1.2.0.1            Rtsne_0.16                 \n [75] cluster_2.1.4               reshape2_1.4.4             \n [77] generics_0.1.3              gtable_0.3.3               \n [79] spatstat.data_3.0-1         tidyr_1.3.0                \n [81] data.table_1.14.8           XVector_0.40.0             \n [83] sp_1.6-0                    utf8_1.2.3                 \n [85] BiocGenerics_0.46.0         spatstat.geom_3.2-1        \n [87] RcppAnnoy_0.0.20            ggrepel_0.9.3              \n [89] RANN_2.6.1                  foreach_1.5.2              \n [91] pillar_1.9.0                stringr_1.5.0              \n [93] later_1.3.0                 splines_4.3.0              \n [95] lattice_0.21-8              survival_3.5-5             \n [97] deldir_1.0-6                tidyselect_1.2.0           \n [99] miniUI_0.1.1.1              pbapply_1.7-0              \n[101] knitr_1.42                  gridExtra_2.3              \n[103] IRanges_2.34.0              SummarizedExperiment_1.30.1\n[105] scattermore_1.1             stats4_4.3.0               \n[107] xfun_0.39                   Biobase_2.60.0             \n[109] factoextra_1.0.7            matrixStats_1.0.0          \n[111] stringi_1.7.12              lazyeval_0.2.2             \n[113] yaml_2.3.7                  evaluate_0.20              \n[115] codetools_0.2-19            tibble_3.2.1               \n[117] cli_3.6.1                   uwot_0.1.14                \n[119] xtable_1.8-4                reticulate_1.28            \n[121] munsell_0.5.0               GenomeInfoDb_1.36.0        \n[123] globals_0.16.2              spatstat.random_3.1-4      \n[125] zeallot_0.1.0               png_0.1-8                  \n[127] parallel_4.3.0              ellipsis_0.3.2             \n[129] ggplot2_3.4.2               assertthat_0.2.1           \n[131] sparseMatrixStats_1.12.0    bitops_1.0-7               \n[133] listenv_0.9.0               ggthemes_4.2.4             \n[135] viridisLite_0.4.1           scales_1.2.1               \n[137] ggridges_0.5.4              leiden_0.4.3               \n[139] purrr_1.0.1                 crayon_1.5.2               \n[141] GetoptLong_1.0.5            rlang_1.1.0                \n[143] cowplot_1.1.1"
  },
  {
    "objectID": "geneCoexAnalysisE13.5MouseBrain.html",
    "href": "geneCoexAnalysisE13.5MouseBrain.html",
    "title": "Gene Correlation Analysis E13.5 Mouse Brain",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortexFromLoom/e13.5_ForebrainDorsal.cotan.RDS\"\n\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E13.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE13.5MouseBrain.html#prologue",
    "href": "geneCoexAnalysisE13.5MouseBrain.html#prologue",
    "title": "Gene Correlation Analysis E13.5 Mouse Brain",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortexFromLoom/e13.5_ForebrainDorsal.cotan.RDS\"\n\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E13.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE13.5MouseBrain.html#cotan",
    "href": "geneCoexAnalysisE13.5MouseBrain.html#cotan",
    "title": "Gene Correlation Analysis E13.5 Mouse Brain",
    "section": "COTAN",
    "text": "COTAN\n\nint.genes &lt;-getGenes(obj)\n\n\ncoexMat.big &lt;- getGenesCoex(obj)#[int.genes,int.genes]\n\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDI_DF &lt;- calculateGDI(obj)\nGDI_DF$geneType &lt;- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType &lt;- cat\n}\n\nGDI_DF$GDI_centered &lt;- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n\n         sum.raw.norm      GDI  exp.cells geneType GDI_centered\nNes          7.581052 4.192489 25.4165830     NPGs   3.04415531\nVim          9.971694 3.984104 76.6512748     NPGs   2.75607580\nSox2         7.082317 3.999433 18.5304156     NPGs   2.77726729\nSox1         5.715170 2.983572  5.6615138     NPGs   1.37290505\nNotch1       7.227078 3.984877 20.6384260     NPGs   2.75714514\nHes1         8.449033 4.822367 31.8409958     NPGs   3.91492097\nHes5         9.585092 4.784038 42.6018872     NPGs   3.86193346\nPax6         8.481894 4.385577 44.5492873     NPGs   3.31108627\nMap2         9.355155 3.931909 70.5681590     PNGs   2.68391910\nTubb3       10.986131 4.374838 76.9524192     PNGs   3.29624084\nNeurod1      5.123468 2.046275  2.8508332     PNGs   0.07715236\nNefm         5.862676 3.085697  5.9024292     PNGs   1.51408601\nNefl         4.741106 2.586671  1.8871713     PNGs   0.82421512\nDcx          8.357463 4.539183 39.6707488     PNGs   3.52343659\nTbr1         7.759295 4.237369 26.0991769     PNGs   3.10619909\nCalm1       10.447080 1.385779 97.8919896       hk  -0.83594052\nCox6b1       9.981533 1.441202 96.6673359       hk  -0.75932183\nPpia        10.196964 2.609030 86.8901827       hk   0.85512419\nRpl18       10.790428 1.335148 99.6386268       hk  -0.90593539\nCox7c       10.031070 1.518121 97.1893194       hk  -0.65298677\nErh          9.280735 2.711007 67.8377836       hk   0.99610081\nH3f3a       10.665312 1.380775 99.6587031       hk  -0.84285899\nTaf1         6.937213 2.168233 17.1049990       hk   0.24575162\nTaf2         6.537627 1.310694 12.1863080       hk  -0.93974092\nGapdh        9.979987 2.531673 92.7323831       hk   0.74818409\nActb        11.323008 1.382499 99.4980928       hk  -0.84047559\nGolph3       6.990454 1.648246 19.0724754       hk  -0.47309720\nZfr          8.192974 2.212476 47.4001205       hk   0.30691375\nSub1         9.735618 2.343091 92.1903232       hk   0.48748156\nTars         6.946500 1.753805 17.9682795       hk  -0.32716939\nAmacr        5.143626 1.632567  3.4932744       hk  -0.49477252\nReln         7.550123 3.069353  8.3718129   layers   1.49149142\nLhx5         4.850935 2.291750  1.5057217   layers   0.41650600\nCux1         8.229655 3.634065 43.1840996   layers   2.27216946\nSatb2        7.683171 3.401215 21.5418591   layers   1.95026951\nTle1         7.461375 2.108275 25.6976511   layers   0.16286267\nMef2c        7.773242 3.876656 19.5543064   layers   2.60753655\nRorb         6.274757 1.635946  7.5486850   layers  -0.49010169\nSox5         9.709193 3.707954 64.7460349   layers   2.37431668\nBcl11b       8.848123 4.654283 43.7060831   layers   3.68255551\nFezf2        8.690887 2.925436 54.6878137   layers   1.29253570\nFoxp2        7.803267 2.713967 28.2674162   layers   1.00019356\nNtf3         5.006960 2.463725  2.2485445   layers   0.65424957\nNA                 NA       NA         NA     &lt;NA&gt;           NA\nNA.1               NA       NA         NA     &lt;NA&gt;           NA\nCux2         6.681962 2.670967  9.2551696   layers   0.94074878\nSlc17a6      7.136129 3.316106 14.1337081   layers   1.83261146\nSema3c       6.576389 2.740901  8.7733387   layers   1.03742781\nThsd7a       4.705115 1.784039  1.3451114   layers  -0.28537229\nSulf2        5.293881 2.461288  3.2523590   layers   0.65088105\nKcnk2        7.401683 1.957314 21.6422405   layers  -0.04583116\nGrik3        5.864890 3.353295  5.0793013   layers   1.88402330\nEtv1         5.600431 2.460104  4.1758683   layers   0.64924346\nTle4         6.694944 1.811217 12.5276049   layers  -0.24780084\nTmem200a     4.701951 2.381286  1.8068661   layers   0.54028368\nGlra2        6.044741 3.654254  5.6414375   layers   2.30007960\nEtv1.1       5.600431 2.460104  4.1758683   layers   0.64924346\nNA.2               NA       NA         NA     &lt;NA&gt;           NA\nSulf1        4.529211 2.076179  0.9235093   layers   0.11849227\nNA.3               NA       NA         NA     &lt;NA&gt;           NA\nSyt6         5.144411 2.559922  2.6902228   layers   0.78723640\n\n\n\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)"
  },
  {
    "objectID": "geneCoexAnalysisE13.5MouseBrain.html#seurat-correlation",
    "href": "geneCoexAnalysisE13.5MouseBrain.html#seurat-correlation",
    "title": "Gene Correlation Analysis E13.5 Mouse Brain",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance &lt;- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n\n\ncorr.pval.list &lt;- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   7130858  380.9   11454895   611.8   11454895   611.8\nVcells 840516207 6412.7 1342169060 10240.0 1342169060 10240.0\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nSeurat SC Transform\n\nsrat &lt;-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data &lt;- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data &lt;-seurat.data[rowSums(seurat.data) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   8859943  473.2   16748832   894.5   12021442   642.1\nVcells 861708025 6574.4 1932899446 14746.9 1610675510 12288.5\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE13.5MouseBrain.html#monocle",
    "href": "geneCoexAnalysisE13.5MouseBrain.html#monocle",
    "title": "Gene Correlation Analysis E13.5 Mouse Brain",
    "section": "Monocle",
    "text": "Monocle\n\nlibrary(monocle3)\n\n\ncds &lt;- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds &lt;- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts &lt;- normalized_counts(cds)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;- normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle &lt;- corr.pval.list$p_values\nmonocle.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9971655  532.6   16748832   894.5   16748832   894.5\nVcells 896560359 6840.3 2062053399 15732.3 2062053399 15732.3\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE13.5MouseBrain.html#scanpy",
    "href": "geneCoexAnalysisE13.5MouseBrain.html#scanpy",
    "title": "Gene Correlation Analysis E13.5 Mouse Brain",
    "section": "ScanPy",
    "text": "ScanPy\n\nlibrary(reticulate)\n\ndirOutScP &lt;- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts &lt;- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts &lt;- t(normalized_counts)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;-normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp &lt;- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy &lt;- corr.pval.list$p_values\nScanPy.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9994943  533.8   16748832   894.5   16748832   894.5\nVcells 966228182 7371.8 2062053399 15732.3 2062053399 15732.3\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-06 11:52:16 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3"
  },
  {
    "objectID": "geneCoexAnalysisE15.0MouseBrain.html",
    "href": "geneCoexAnalysisE15.0MouseBrain.html",
    "title": "Gene Correlation Analysis E15.0 Mouse Brain",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortexFromLoom/e15.0_ForebrainDorsal.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E15.0\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE15.0MouseBrain.html#prologue",
    "href": "geneCoexAnalysisE15.0MouseBrain.html#prologue",
    "title": "Gene Correlation Analysis E15.0 Mouse Brain",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- \"Data/MouseCortexFromLoom/e15.0_ForebrainDorsal.cotan.RDS\"\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E15.0\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE15.0MouseBrain.html#cotan",
    "href": "geneCoexAnalysisE15.0MouseBrain.html#cotan",
    "title": "Gene Correlation Analysis E15.0 Mouse Brain",
    "section": "COTAN",
    "text": "COTAN\n\nint.genes &lt;-getGenes(obj)\n\n\ncoexMat.big &lt;- getGenesCoex(obj)#[int.genes,int.genes]\n\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDI_DF &lt;- calculateGDI(obj)\nGDI_DF$geneType &lt;- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType &lt;- cat\n}\n\nGDI_DF$GDI_centered &lt;- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n\n         sum.raw.norm      GDI  exp.cells geneType GDI_centered\nNes          7.036617 4.395412 10.3013315     NPGs  2.844118518\nVim          9.750744 4.622956 44.6274235     NPGs  3.141716247\nSox2         6.748800 4.388553  7.8019154     NPGs  2.835147083\nSox1         5.573231 2.954812  2.4760570     NPGs  0.959999758\nNotch1       6.804377 4.507208  8.3158141     NPGs  2.990333393\nHes1         7.293684 5.025427  8.7362766     NPGs  3.668097091\nHes5         7.762615 4.779269 10.1845363     NPGs  3.346154337\nPax6         7.996731 4.881428 18.3368372     NPGs  3.479764633\nMap2        10.179711 4.599886 82.3872927     PNGs  3.111544365\nTubb3       11.940548 5.083784 90.3527213     PNGs  3.744420459\nNeurod1      5.831083 2.015123  3.2936230     PNGs -0.268991989\nNefm         6.753599 3.152181  7.2996963     PNGs  1.218132436\nNefl         6.160391 2.932141  2.9081990     PNGs  0.930349401\nDcx          9.308480 4.495594 58.9581873     PNGs  2.975143901\nTbr1         8.629160 3.877197 34.4662462     PNGs  2.166359967\nCalm1       11.069821 2.194787 97.4421864       hk -0.034015260\nCox6b1      10.240794 2.951945 90.9950946       hk  0.956249628\nPpia        10.343824 2.955456 89.4183602       hk  0.960842148\nRpl18       10.858263 2.901626 96.6596590       hk  0.890439277\nCox7c       10.245556 3.030177 90.4578370       hk  1.058567954\nErh          9.288155 2.659736 65.1016118       hk  0.574079159\nH3f3a       11.042683 2.850307 97.6991357       hk  0.823321315\nTaf1         7.373313 1.751203 15.6855875       hk -0.614165195\nTaf2         7.069134 1.415716 11.9247839       hk -1.052939358\nGapdh       10.083151 3.161859 85.3422098       hk  1.230790542\nActb        11.906861 1.608850 99.5912170       hk -0.800344008\nGolph3       7.440459 1.866369 17.4842327       hk -0.463542657\nZfr          8.645382 2.219651 44.1485634       hk -0.001496122\nSub1         9.822502 3.217085 80.7171222       hk  1.303018400\nTars         7.476170 1.988439 17.9981313       hk -0.303891645\nAmacr        5.810916 1.827868  3.9710348       hk -0.513897792\nReln         8.349205 2.819876  8.3625321   layers  0.783521463\nLhx5         5.830435 3.139114  1.8220042   layers  1.201042642\nCux1         8.606685 3.850086 34.5713618   layers  2.130902087\nSatb2        9.146209 3.735391 31.3361364   layers  1.980896809\nTle1         8.069147 2.752489 25.8000467   layers  0.695387361\nMef2c        9.310240 4.395042 37.2226115   layers  2.843634817\nRorb         7.450810 2.392823 10.9437047   layers  0.224990367\nSox5        10.622002 4.093212 73.5926185   layers  2.448880218\nBcl11b       9.575893 4.600605 54.8937164   layers  3.112483916\nFezf2        9.378784 3.369265 51.6935295   layers  1.502050523\nFoxp2        8.380413 3.553319 23.5342210   layers  1.742770215\nNtf3         5.324482 2.116601  1.8920813   layers -0.136271617\nNA                 NA       NA         NA     &lt;NA&gt;           NA\nNA.1               NA       NA         NA     &lt;NA&gt;           NA\nCux2         7.592847 3.129196 12.2401308   layers  1.188071005\nSlc17a6      7.647733 3.418696 13.7351086   layers  1.566700439\nSema3c       7.661987 2.896666 13.8752628   layers  0.883952732\nThsd7a       6.173797 2.313999  3.1067508   layers  0.121899301\nSulf2        5.738452 2.925339  2.7914039   layers  0.921453194\nKcnk2        8.245680 2.304727 27.1548704   layers  0.109773149\nGrik3        7.243325 3.637511 10.5349217   layers  1.852881971\nEtv1         6.019894 2.984098  3.2235459   layers  0.998302023\nTle4         7.432453 2.929052 13.0343378   layers  0.926308788\nTmem200a     6.201199 2.658151  4.7886008   layers  0.572005411\nGlra2        7.633574 3.878564 13.7467881   layers  2.168147973\nEtv1.1       6.019894 2.984098  3.2235459   layers  0.998302023\nHtr1f        4.884079 2.283998  1.0394768   layers  0.082662331\nSulf1        4.901491 2.120374  0.7241299   layers -0.131337122\nNA.2               NA       NA         NA     &lt;NA&gt;           NA\nSyt6         6.394410 2.800827  4.5082925   layers  0.758607816\n\n\n\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)"
  },
  {
    "objectID": "geneCoexAnalysisE15.0MouseBrain.html#seurat-correlation",
    "href": "geneCoexAnalysisE15.0MouseBrain.html#seurat-correlation",
    "title": "Gene Correlation Analysis E15.0 Mouse Brain",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance &lt;- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n\n\ncorr.pval.list &lt;- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   7142014  381.5   11454574   611.8   11454574   611.8\nVcells 924825723 7055.9 1760848247 13434.3 1760848247 13434.3\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nSeurat SC Transform\n\nsrat &lt;-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data &lt;- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data &lt;-seurat.data[rowSums(seurat.data) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   8876782  474.1   16780957   896.2   12523735   668.9\nVcells 981924984 7491.5 2113097896 16121.7 2010387494 15338.1\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE15.0MouseBrain.html#monocle",
    "href": "geneCoexAnalysisE15.0MouseBrain.html#monocle",
    "title": "Gene Correlation Analysis E15.0 Mouse Brain",
    "section": "Monocle",
    "text": "Monocle\n\nlibrary(monocle3)\n\n\ncds &lt;- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds &lt;- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts &lt;- normalized_counts(cds)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;- normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle &lt;- corr.pval.list$p_values\nmonocle.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   9988466  533.5   16780957   896.2   16780957   896.2\nVcells 985703858 7520.4 2113097896 16121.7 2113090291 16121.6\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE15.0MouseBrain.html#scanpy",
    "href": "geneCoexAnalysisE15.0MouseBrain.html#scanpy",
    "title": "Gene Correlation Analysis E15.0 Mouse Brain",
    "section": "ScanPy",
    "text": "ScanPy\n\nlibrary(reticulate)\n\ndirOutScP &lt;- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts &lt;- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts &lt;- t(normalized_counts)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;-normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp &lt;- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy &lt;- corr.pval.list$p_values\nScanPy.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n             used   (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells   10011754  534.7   16780957   896.2   16780957   896.2\nVcells 1104424249 8426.1 2535797475 19346.6 2113094869 16121.7\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-06 12:53:42 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3"
  },
  {
    "objectID": "geneCoexAnalysisE17.5Yuzwa.html",
    "href": "geneCoexAnalysisE17.5Yuzwa.html",
    "title": "Gene Correlation Analysis E17.5",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- (\"Data/Yuzwa_MouseCortex/CorticalCells_GSM2861514_E175.cotan.RDS\")\n\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E17.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE17.5Yuzwa.html#prologue",
    "href": "geneCoexAnalysisE17.5Yuzwa.html#prologue",
    "title": "Gene Correlation Analysis E17.5",
    "section": "",
    "text": "library(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(Hmisc)\nlibrary(Seurat)\nlibrary(patchwork)\nlibrary(Rfast)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(HiClimR)\nlibrary(stringr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\ndataSetFile &lt;- (\"Data/Yuzwa_MouseCortex/CorticalCells_GSM2861514_E175.cotan.RDS\")\n\nname &lt;- str_split(dataSetFile,pattern = \"/\",simplify = T)[3]\nname &lt;- str_remove(name,pattern = \".RDS\")\n\nproject = \"E17.5\"\n\n\nsetLoggingLevel(1)\noutDir &lt;- \"CoexData/\"\nsetLoggingFile(paste0(outDir, \"Logs/\",name,\".log\"))\n\n\nobj &lt;- readRDS(dataSetFile)\nfile_code = getMetadataElement(obj, datasetTags()[[\"cond\"]])\n\n\nsource(\"src/Functions.R\")\n\nTo compare the ability of COTAN to asses the real correlation between genes we define some pools of genes:\n\nConstitutive genes\nNeural progenitor genes\nPan neuronal genes\nSome layer marker genes\n\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = \n    c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "geneCoexAnalysisE17.5Yuzwa.html#cotan",
    "href": "geneCoexAnalysisE17.5Yuzwa.html#cotan",
    "title": "Gene Correlation Analysis E17.5",
    "section": "COTAN",
    "text": "COTAN\n\nint.genes &lt;-getGenes(obj)\n\n\ncoexMat.big &lt;- getGenesCoex(obj)#[int.genes,int.genes]\n\ncoexMat &lt;- getGenesCoex(obj)[c(genesList$NPGs,genesList$hk,genesList$PNGs),c(genesList$NPGs,genesList$hk,genesList$PNGs)]\n\nf1 = colorRamp2(seq(-0.5,0.5, length = 3), c(\"#DC0000B2\", \"white\",\"#3C5488B2\" ))\n\nsplit.genes &lt;- factor(c(rep(\"NPGs\",length(genesList[[\"NPGs\"]])),\n                         rep(\"HK\",length(genesList[[\"hk\"]])),\n                         rep(\"PNGs\",length(genesList[[\"PNGs\"]]))\n                        ),\n                         levels = c(\"NPGs\",\"HK\",\"PNGs\"))\n\nlgd = Legend(col_fun = f1, title = \"COTAN coex\")\n\nhtmp &lt;- Heatmap(as.matrix(coexMat),\n        #width = ncol(coexMat)*unit(2.5, \"mm\"), \n        height = nrow(coexMat)*unit(3, \"mm\"),\n        cluster_rows = FALSE,\n        cluster_columns = FALSE,\n        col = f1,\n        row_names_side = \"left\",\n        row_names_gp = gpar(fontsize = 11),\n        column_names_gp  = gpar(fontsize = 11),\n        column_split = split.genes,\n        row_split = split.genes,\n        cluster_row_slices = FALSE, \n    cluster_column_slices = FALSE,\n    heatmap_legend_param = list(\n        title = \"COTAN coex\", at = c(-0.5, 0, 0.5),direction = \"horizontal\",\n        labels = c(\"-0.5\", \"0\", \"0.5\")\n    )\n   )\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nGDI_DF &lt;- calculateGDI(obj)\nGDI_DF$geneType &lt;- NA\nfor (cat in names(genesList)) {\n  GDI_DF[rownames(GDI_DF) %in% genesList[[cat]],]$geneType &lt;- cat\n}\n\nGDI_DF$GDI_centered &lt;- scale(GDI_DF$GDI,center = T,scale = T)\n\nwrite.csv(GDI_DF,paste0(\"CoexData/\",\"Variance_GDI_genes\",file_code,\".csv\"))\n\n\nGDI_DF[unlist(genesList),]\n\n         sum.raw.norm       GDI  exp.cells geneType GDI_centered\nNes          5.220644 1.9759151 13.9588101     NPGs   3.88073248\nVim          5.707954 2.4316257 13.3867277     NPGs   6.38025751\nSox2         5.049686 2.4580921  9.2677346     NPGs   6.52542286\nSox1         2.596456 1.5372902  1.7162471     NPGs   1.47492018\nNotch1       2.548442 1.2912127  1.2585812     NPGs   0.12521118\nHes1         3.815307 2.0026215  3.0892449     NPGs   4.02721428\nHes5         5.005001 2.3956230  6.5217391     NPGs   6.18278634\nPax6         3.925807 1.7927127  4.0045767     NPGs   2.87588602\nMap2         7.165812 1.5519874 65.3318078     PNGs   1.55553290\nTubb3        8.735578 2.3871787 90.9610984     PNGs   6.13647007\nNeurod1      5.979697 1.4115723 20.8237986     PNGs   0.78537104\nNefm         5.247537 1.8040041 11.4416476     PNGs   2.93781860\nNefl         4.397731 1.6537969  5.2631579     PNGs   2.11394740\nDcx          7.063133 1.6738575 63.1578947     PNGs   2.22397771\nTbr1         5.930953 1.5543822 26.6590389     PNGs   1.56866816\nCalm1        8.420630 1.9599507 89.4736842       hk   3.79316931\nCox6b1       7.396777 1.6401134 75.9725400       hk   2.03889511\nPpia         4.938416 1.5230935 15.4462243       hk   1.39705306\nRpl18        6.336462 1.4146625 44.1647597       hk   0.80232041\nCox7c        6.144064 1.3937240 39.0160183       hk   0.68747482\nErh          5.116709 1.2996389 17.9633867       hk   0.17142798\nH3f3a        6.883043 1.5810893 61.7848970       hk   1.71515374\nTaf1         5.356496 1.3000061 16.4759725       hk   0.17344183\nTaf2         4.784093 1.3661691 11.5560641       hk   0.53633887\nGapdh        2.027649 1.0309864  0.9153318       hk  -1.30210301\nActb         9.168400 1.2795919 98.3981693       hk   0.06147194\nGolph3       4.401339 1.2584072  8.6956522       hk  -0.05472380\nZfr          6.134988 1.4748224 35.0114416       hk   1.13229093\nSub1         6.778528 1.6575142 56.9794050       hk   2.13433668\nTars         4.622981 1.3112605 10.4118993       hk   0.23517106\nAmacr        3.001914 1.0595608  1.7162471       hk  -1.14537537\nReln         4.630042 1.3624092  4.1189931   layers   0.51571626\nLhx5         3.288483 1.4261767  1.4874142   layers   0.86547473\nCux1         6.104752 1.4098312 32.6086957   layers   0.77582115\nSatb2        6.545260 1.7564615 38.9016018   layers   2.67705206\nTle1         4.942203 1.2576091 12.4713959   layers  -0.05910126\nMef2c        7.176654 2.0319404 50.2288330   layers   4.18802527\nRorb         4.038835 1.4237173  5.0343249   layers   0.85198472\nSox5         5.686965 1.4932040 18.0778032   layers   1.23311226\nBcl11b       5.827814 1.3788500 22.6544622   layers   0.60589249\nFezf2        5.060242 1.8449393 10.0686499   layers   3.16234383\nFoxp2        3.715673 1.2017254  2.6315789   layers  -0.36561756\nNtf3         3.517345 1.3707172  2.5171625   layers   0.56128503\nNA                 NA        NA         NA     &lt;NA&gt;           NA\nPvrl3        4.638048 1.4248249  8.6956522   layers   0.85805972\nCux2         5.235976 1.3303178 14.6453089   layers   0.33969841\nSlc17a6      4.833627 1.3393122  9.9542334   layers   0.38903165\nSema3c       5.091768 1.3767920 11.8993135   layers   0.59460463\nThsd7a       4.340644 1.2252121  4.9199085   layers  -0.23679530\nSulf2        3.014381 1.2499911  1.7162471   layers  -0.10088493\nKcnk2        5.256674 1.3228860 19.1075515   layers   0.29893593\nGrik3        3.920478 1.3638079  2.8604119   layers   0.52338795\nEtv1         3.994692 1.5185054  4.1189931   layers   1.37188765\nTle4         4.873726 1.4669420  8.4668192   layers   1.08906769\nTmem200a     2.962816 1.1818921  2.0594966   layers  -0.47440110\nGlra2        4.613463 1.3419476  9.7254005   layers   0.40348636\nEtv1.1       3.994692 1.5185054  4.1189931   layers   1.37188765\nHtr1f        2.004839 0.9689532  0.6864989   layers  -1.64234848\nNA.1               NA        NA         NA     &lt;NA&gt;           NA\nNA.2               NA        NA         NA     &lt;NA&gt;           NA\nSyt6         3.750383 1.3359728  3.6613272   layers   0.37071545\n\n\n\nGDIPlot(obj,GDIIn = GDI_DF, genes = genesList,GDIThreshold = 1.4)"
  },
  {
    "objectID": "geneCoexAnalysisE17.5Yuzwa.html#seurat-correlation",
    "href": "geneCoexAnalysisE17.5Yuzwa.html#seurat-correlation",
    "title": "Gene Correlation Analysis E17.5",
    "section": "Seurat correlation",
    "text": "Seurat correlation\n\nsrat&lt;- CreateSeuratObject(counts = getRawData(obj), \n                          project = project, \n                          min.cells = 3, \n                          min.features = 200)\nsrat[[\"percent.mt\"]] &lt;- PercentageFeatureSet(srat, pattern = \"^mt-\")\nsrat &lt;- NormalizeData(srat)\nsrat &lt;- FindVariableFeatures(srat, selection.method = \"vst\", nfeatures = 2000)\n\n# plot variable features with and without labels\nplot1 &lt;- VariableFeaturePlot(srat)\n\nplot1$data$centered_variance &lt;- scale(plot1$data$variance.standardized,\n                                      center = T,scale = F)\n\nwrite.csv(plot1$data,paste0(\"CoexData/\",\n                            \"Variance_Seurat_genes\",\n                            getMetadataElement(obj, \n                                               datasetTags()[[\"cond\"]]),\".csv\"))\n\nLabelPoints(plot = plot1, points = c(genesList$NPGs,genesList$PNGs,genesList$layers), repel = TRUE)\n\n\n\n\n\nLabelPoints(plot = plot1, points = c(genesList$hk), repel = TRUE)\n\n\n\n\n\nall.genes &lt;- rownames(srat)\nsrat &lt;- ScaleData(srat, features = all.genes)\nseurat.data = GetAssayData(srat[[\"RNA\"]],layer = \"data\")\n\n\ncorr.pval.list &lt;- correlation_pvalues(data = seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr\")\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells   7108398  379.7   11454412  611.8  11454412  611.8\nVcells 564771015 4308.9  902333175 6884.3 902333175 6884.3\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\nSeurat SC Transform\n\nsrat &lt;-  SCTransform(srat, \n                     method = \"glmGamPoi\", \n                     vars.to.regress = \"percent.mt\", \n                     verbose = FALSE)\n\nseurat.data &lt;- GetAssayData(srat[[\"SCT\"]],layer = \"data\")\n\n#Remove genes with all zeros\nseurat.data &lt;-seurat.data[rowSums(seurat.data) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(seurat.data,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nseurat.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(seurat.data.cor.big, \n                         genesList, title=\"Seurat corr SCT\")\n\n\n\np_values.fromSeurat &lt;- corr.pval.list$p_values\nseurat.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   8837356  472.0   16666662  890.1   13556438  724.0\nVcells 485068772 3700.8 1039644617 7931.9 1082876197 8261.7\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE17.5Yuzwa.html#monocle",
    "href": "geneCoexAnalysisE17.5Yuzwa.html#monocle",
    "title": "Gene Correlation Analysis E17.5",
    "section": "Monocle",
    "text": "Monocle\n\nlibrary(monocle3)\n\n\ncds &lt;- new_cell_data_set(getRawData(obj),\n                         cell_metadata = getMetadataCells(obj),\n                         gene_metadata = getMetadataGenes(obj)\n                         )\ncds &lt;- preprocess_cds(cds, num_dim = 100)\n\nnormalized_counts &lt;- normalized_counts(cds)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;- normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nrm(normalized_counts)\n\nmonocle.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\nhtmp &lt;- correlation_plot(data.cor.big = monocle.data.cor.big,\n                         genesList,\n                         title = \"Monocle corr\")\n\n\np_values.from.monocle &lt;- corr.pval.list$p_values\nmonocle.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   9949073  531.4   16666662  890.1   16666662  890.1\nVcells 577016889 4402.3 1197846598 9138.9 1170159130 8927.7\n\ndraw(htmp, heatmap_legend_side=\"right\")"
  },
  {
    "objectID": "geneCoexAnalysisE17.5Yuzwa.html#scanpy",
    "href": "geneCoexAnalysisE17.5Yuzwa.html#scanpy",
    "title": "Gene Correlation Analysis E17.5",
    "section": "ScanPy",
    "text": "ScanPy\n\nlibrary(reticulate)\n\ndirOutScP &lt;- paste0(\"CoexData/ScanPy/\")\nif (!dir.exists(dirOutScP)) {\n  dir.create(dirOutScP)\n}\n\nSys.setenv(RETICULATE_PYTHON = \"../../../bin/python3\")\n  py &lt;- import(\"sys\")\n  \n  source_python(\"src/scanpyGenesExpression.py\")\n  scanpyFDR(getRawData(obj), \n                  getMetadataCells(obj), \n                  getMetadataGenes(obj), \n                   \"mt\", \n                   dirOutScP, \n                   file_code,\n            int.genes)\n\nnormalized_counts &lt;- read.csv(paste0(dirOutScP,\n                                     file_code,\"_Scampy_expression_all_genes.gz\"),header = T,row.names = 1)\n\nnormalized_counts &lt;- t(normalized_counts)\n\n\n#Remove genes with all zeros\nnormalized_counts &lt;-normalized_counts[rowSums(normalized_counts) &gt; 0,]\n\n\ncorr.pval.list &lt;- correlation_pvalues(normalized_counts,\n                                      int.genes,\n                                      n.cells = getNumCells(obj))\n\nScanPy.data.cor.big &lt;- as.matrix(Matrix::forceSymmetric(corr.pval.list$data.cor, uplo = \"U\"))\n\n\nhtmp &lt;- correlation_plot(data.cor.big = ScanPy.data.cor.big,\n                         genesList,\n                         title = \"ScanPy corr\")\n\np_values.from.ScanPy &lt;- corr.pval.list$p_values\nScanPy.data.cor.big &lt;- corr.pval.list$data.cor\n\nrm(corr.pval.list)\ngc()\n\n            used   (Mb) gc trigger   (Mb)   max used   (Mb)\nNcells   9972882  532.7   16666662  890.1   16666662  890.1\nVcells 549865083 4195.2 1197846598 9138.9 1197843725 9138.9\n\ndraw(htmp, heatmap_legend_side=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-06 12:30:26 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n[1] C.UTF-8\n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n [1] stats4    parallel  grid      stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] reticulate_1.36.1           monocle3_1.3.4             \n [3] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [5] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1        \n [7] IRanges_2.34.1              S4Vectors_0.38.1           \n [9] MatrixGenerics_1.12.3       matrixStats_1.2.0          \n[11] Biobase_2.60.0              BiocGenerics_0.46.0        \n[13] fstcore_0.9.18              fst_0.9.8                  \n[15] stringr_1.5.0               HiClimR_2.2.1              \n[17] doParallel_1.0.17           iterators_1.0.14           \n[19] foreach_1.5.2               Rfast_2.1.0                \n[21] RcppParallel_5.1.7          RcppZiggurat_0.1.6         \n[23] Rcpp_1.0.11                 patchwork_1.2.0            \n[25] Seurat_5.0.0                SeuratObject_5.0.0         \n[27] sp_2.1-1                    Hmisc_5.1-0                \n[29] dplyr_1.1.2                 circlize_0.4.15            \n[31] ComplexHeatmap_2.16.0       COTAN_2.5.0                \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               bitops_1.0-7             \n  [5] tibble_3.2.1              polyclip_1.10-4          \n  [7] rpart_4.1.23              fastDummies_1.7.3        \n  [9] lifecycle_1.0.3           globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] backports_1.4.1           dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             glmGamPoi_1.12.2         \n [21] sctransform_0.4.1         spam_2.10-0              \n [23] askpass_1.2.0             spatstat.sparse_3.0-2    \n [25] minqa_1.2.5               cowplot_1.1.1            \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] zlibbioc_1.46.0           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] RCurl_1.98-1.12           nnet_7.3-19              \n [35] GenomeInfoDbData_1.2.10   ggrepel_0.9.5            \n [37] irlba_2.3.5.1             listenv_0.9.0            \n [39] spatstat.utils_3.0-3      terra_1.7-39             \n [41] umap_0.2.10.0             goftest_1.2-3            \n [43] RSpectra_0.16-1           spatstat.random_3.2-1    \n [45] dqrng_0.3.0               fitdistrplus_1.1-11      \n [47] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [49] ncdf4_1.22                leiden_0.4.3             \n [51] codetools_0.2-19          DelayedArray_0.26.7      \n [53] tidyselect_1.2.0          shape_1.4.6              \n [55] farver_2.1.1              lme4_1.1-34              \n [57] ScaledMatrix_1.8.1        viridis_0.6.4            \n [59] base64enc_0.1-3           spatstat.explore_3.2-1   \n [61] jsonlite_1.8.7            GetoptLong_1.0.5         \n [63] ellipsis_0.3.2            progressr_0.14.0         \n [65] Formula_1.2-5             ggridges_0.5.4           \n [67] survival_3.5-8            tools_4.3.2              \n [69] ica_1.0-3                 glue_1.7.0               \n [71] gridExtra_2.3             xfun_0.39                \n [73] ggthemes_5.1.0            withr_3.0.0              \n [75] fastmap_1.1.1             boot_1.3-28              \n [77] fansi_1.0.4               openssl_2.1.0            \n [79] digest_0.6.33             rsvd_1.0.5               \n [81] parallelDist_0.2.6        R6_2.5.1                 \n [83] mime_0.12                 colorspace_2.1-0         \n [85] Cairo_1.6-1               scattermore_1.2          \n [87] tensor_1.5                spatstat.data_3.0-1      \n [89] utf8_1.2.3                tidyr_1.3.0              \n [91] generics_0.1.3            data.table_1.15.0        \n [93] httr_1.4.6                htmlwidgets_1.6.2        \n [95] S4Arrays_1.2.0            uwot_0.1.16              \n [97] pkgconfig_2.0.3           gtable_0.3.3             \n [99] lmtest_0.9-40             XVector_0.40.0           \n[101] htmltools_0.5.8           dotCall64_1.1-0          \n[103] clue_0.3-64               scales_1.3.0             \n[105] png_0.1-8                 knitr_1.43               \n[107] rstudioapi_0.15.0         reshape2_1.4.4           \n[109] rjson_0.2.21              nloptr_2.0.3             \n[111] checkmate_2.3.0           nlme_3.1-163             \n[113] zoo_1.8-12                GlobalOptions_0.1.2      \n[115] KernSmooth_2.23-22        miniUI_0.1.1.1           \n[117] foreign_0.8-86            pillar_1.9.0             \n[119] vctrs_0.6.3               RANN_2.6.1               \n[121] promises_1.2.0.1          BiocSingular_1.16.0      \n[123] beachmat_2.16.0           xtable_1.8-4             \n[125] cluster_2.1.6             htmlTable_2.4.1          \n[127] evaluate_0.21             zeallot_0.1.0            \n[129] cli_3.6.1                 compiler_4.3.2           \n[131] rlang_1.1.1               crayon_1.5.2             \n[133] future.apply_1.11.0       labeling_0.4.2           \n[135] plyr_1.8.8                stringi_1.8.1            \n[137] viridisLite_0.4.2         deldir_2.0-2             \n[139] BiocParallel_1.34.2       assertthat_0.2.1         \n[141] munsell_0.5.0             lazyeval_0.2.2           \n[143] spatstat.geom_3.2-4       PCAtools_2.14.0          \n[145] Matrix_1.6-3              RcppHNSW_0.6.0           \n[147] sparseMatrixStats_1.12.2  future_1.33.0            \n[149] ggplot2_3.5.0             shiny_1.8.0              \n[151] ROCR_1.0-11               igraph_2.0.3"
  },
  {
    "objectID": "generalCoexAssess.html",
    "href": "generalCoexAssess.html",
    "title": "General Coex Evaluation",
    "section": "",
    "text": "library(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(gghalves)\nlibrary(ggstatsplot)\nlibrary(\"gridExtra\")\nlibrary(cowplot)\nlibrary(Matrix)\nlibrary(ggstance)\nlibrary(scales)\nlibrary(COTAN)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(dplyr)\nlibrary(fst)\n\noptions(parallelly.fork.enable = TRUE)\n\n#Define colors\ncolors.methods &lt;- c(\"#ed5537\",\"#a3505c\",\"#95ba8f\",\"#B3CDE3\",\"#8856A7\" )\n#layer.genes &lt;- read.csv(\"CoexData/some_layer_maerkers.csv\", header = T,row.names = 1)\n\ngenesList &lt;- list(\n  \"NPGs\"= \n    c(\"Nes\", \"Vim\", \"Sox2\", \"Sox1\", \"Notch1\", \"Hes1\", \"Hes5\", \"Pax6\"),\n  \"PNGs\"= \n    c(\"Map2\", \"Tubb3\", \"Neurod1\", \"Nefm\", \"Nefl\", \"Dcx\", \"Tbr1\"),\n  \"hk\"= \n    c(\"Calm1\", \"Cox6b1\", \"Ppia\", \"Rpl18\", \"Cox7c\", \"Erh\", \"H3f3a\",\n      \"Taf1\", \"Taf2\", \"Gapdh\", \"Actb\", \"Golph3\", \"Zfr\", \"Sub1\",\n      \"Tars\", \"Amacr\"),\n  \"layers\" = c(\"Reln\",\"Lhx5\",\"Cux1\",\"Satb2\",\"Tle1\",\"Mef2c\",\"Rorb\",\"Sox5\",\"Bcl11b\",\"Fezf2\",\"Foxp2\",\"Ntf3\",\"Rasgrf2\",\"Pvrl3\", \"Cux2\",\"Slc17a6\", \"Sema3c\",\"Thsd7a\", \"Sulf2\", \"Kcnk2\",\"Grik3\", \"Etv1\", \"Tle4\", \"Tmem200a\", \"Glra2\", \"Etv1\",\"Htr1f\", \"Sulf1\",\"Rxfp1\", \"Syt6\") #unique(unlist(str_split(layer.genes$supertype.markers.combo,pattern = \",\"))) \n  # From https://www.science.org/doi/10.1126/science.aam8999\n)"
  },
  {
    "objectID": "generalCoexAssess.html#coex-and-correlations",
    "href": "generalCoexAssess.html#coex-and-correlations",
    "title": "General Coex Evaluation",
    "section": "COEX and Correlations",
    "text": "COEX and Correlations\nImport COTAN coex and correlations data from file\n\ntable.tot.hk &lt;- NA\ntable.tot.neural &lt;- NA\nfor (file in list.files(\"CoexData/\",pattern = \"Corr|Coex\")) {\n#for (file in list.files(\"CoexData/\",pattern = \"Corr_e13.5|CorrSCT_e13.5|Coex_e13.5\")) {  \n  \n  #print(file)\n  #corr &lt;- readRDS(paste0(\"CoexData/\",file))\n  corr &lt;- read_fst(paste0(\"CoexData/\",file),to = 2)\n  colnames.corr &lt;- colnames(corr)\n  genesListPartial &lt;- genesList\n  for (na in names(genesListPartial)) {\n      if(!all(genesListPartial[[na]] %in% colnames.corr)){\n        print(na)\n        genesListPartial[[na]] &lt;- genesListPartial[[na]][-which(!genesList[[na]] %in% colnames.corr)]\n    }\n  }\n\n  \n  corr &lt;- read_fst(paste0(\"CoexData/\",file), \n        columns = unlist(genesListPartial))\n  corr &lt;- as.data.frame(as.matrix(corr))\n  rownames(corr) &lt;- colnames.corr\n  \n  if(str_detect(file,pattern = \"CotanCoex\")){\n    code &lt;- \"COTAN coex\"\n  }else if(str_detect(file,pattern = \"CorrSCT\")){\n    code &lt;- \"Seurat SCT corr.\"\n  }else if(str_detect(file,pattern = \"MonocleCorr\")){\n    code &lt;- \"Monocle corr.\"\n    #print(\"ok\")\n  }else if(str_detect(file,pattern = \"ScanPyCorr\")){\n    code &lt;- \"ScanPy corr.\"\n    #print(\"ok\")\n  }else if(str_detect(file,pattern = \"Corr\")){\n    code &lt;- \"Seurat corr.\"\n  }\n  \n  table.hk &lt;- as.data.frame(corr[,genesListPartial$hk])\n  table.hk$Gene1 &lt;- rownames(table.hk)\n  \n  table.hk &lt;- pivot_longer(as.data.frame(table.hk),cols = c(1:(ncol(table.hk)-1)),names_to = \"Gene2\")\n  table.hk$Method &lt;- code\n  \n  table.hk$Dataset &lt;- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n\n  table.tot.hk &lt;- rbind(table.tot.hk,table.hk)\n  table.tot.hk &lt;- table.tot.hk[! table.tot.hk$Gene1 == table.tot.hk$Gene2,]\n \n  #Not hk\n  table.neural &lt;- as.data.frame(corr[rownames(corr) %in% c(genesListPartial$NPGs,genesListPartial$PNGs,genesListPartial$layers),\n                                     colnames(corr) %in% c(genesListPartial$NPGs,genesListPartial$PNGs,genesList$layers)])\n  \n  table.neural$Gene1 &lt;- rownames(table.neural)\n  \n  table.neural &lt;- pivot_longer(as.data.frame(table.neural),cols = c(1:(ncol(table.neural)-1)),names_to = \"Gene2\")\n  table.neural$Method &lt;- code\n  table.neural$Dataset &lt;- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n  \n  table.tot.neural &lt;- rbind(table.tot.neural,table.neural)\n  table.tot.neural &lt;- table.tot.neural[! table.tot.neural$Gene1 == table.tot.neural$Gene2,]\n}\n\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"hk\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n\ntable.tot.hk$Method &lt;- factor(table.tot.hk$Method, levels = c(\"Seurat corr.\", \"Seurat SCT corr.\", \"Monocle corr.\", \"ScanPy corr.\", \"COTAN coex\"))\ntable.tot.neural$Method &lt;- factor(table.tot.neural$Method, levels = c(\"Seurat corr.\", \"Seurat SCT corr.\", \"Monocle corr.\", \"ScanPy corr.\", \"COTAN coex\"))\n\n\ntable.tot.hk &lt;- table.tot.hk[2:nrow(table.tot.hk),]\ntable.tot.hk$GeneType &lt;- \"Constitutive\" \ntable.tot.neural &lt;- table.tot.neural[2:nrow(table.tot.neural),]\ntable.tot.neural$GeneType &lt;- \"Neural\"\n\n## For ECDL\ntmp.tot &lt;- NA\nfor (method in unique(table.tot.hk$Method)) {\n  tmp &lt;- as.data.frame(table.tot.hk[table.tot.hk$Method == method,])\n  tmp$n &lt;- NA\n  tmp[order(abs(tmp$value)),]$n &lt;- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis &lt;- 1-tmp$n\n  tmp.tot &lt;- rbind(tmp.tot,tmp)\n}\ntmp.tot &lt;- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.hk &lt;- tmp.tot\n\ntmp.tot &lt;- NA\nfor (method in unique(table.tot.neural$Method)) {\n  tmp &lt;- as.data.frame(table.tot.neural[table.tot.neural$Method == method,])\n  tmp$n &lt;- NA\n  tmp[order(abs(tmp$value)),]$n &lt;- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis &lt;- 1-tmp$n\n  tmp.tot &lt;- rbind(tmp.tot,tmp)\n}\ntmp.tot &lt;- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.neural &lt;- tmp.tot\n\n############\n\ntable.tot &lt;- rbind(table.tot.hk,table.tot.neural) \ntable.tot &lt;- table.tot[!table.tot$Gene1 == table.tot$Gene2,]\n\nidentical(table.tot[table.tot$Method == \"COTAN coex\",]$Gene1,\n          table.tot[table.tot$Method == \"Seurat corr.\",]$Gene1 )\n\n[1] FALSE\n\nidentical(table.tot[table.tot$Method == \"COTAN coex\",]$Gene2,\n          table.tot[table.tot$Method == \"Seurat corr.\",]$Gene2 )\n\n[1] FALSE\n\ntable.tot$Method &lt;- factor(table.tot$Method, levels = c(\"Seurat corr.\", \"Seurat SCT corr.\", \"Monocle corr.\", \"ScanPy corr.\", \"COTAN coex\"))\n\nhead(table.tot)\n\n          Gene1  Gene2        value     Method                  Dataset\n2 0610007N19Rik  Calm1  0.030413962 COTAN coex CorticalCells_GSM2861511\n3 0610007N19Rik Cox6b1  0.008228765 COTAN coex CorticalCells_GSM2861511\n4 0610007N19Rik   Ppia -0.051969707 COTAN coex CorticalCells_GSM2861511\n5 0610007N19Rik  Rpl18  0.061781637 COTAN coex CorticalCells_GSM2861511\n6 0610007N19Rik  Cox7c  0.060690748 COTAN coex CorticalCells_GSM2861511\n7 0610007N19Rik    Erh  0.070534482 COTAN coex CorticalCells_GSM2861511\n      GeneType         n     Y_axis\n2 Constitutive 0.8021629 0.19783714\n3 Constitutive 0.3250217 0.67497834\n4 Constitutive 0.9391370 0.06086305\n5 Constitutive 0.9640681 0.03593190\n6 Constitutive 0.9620358 0.03796424\n7 Constitutive 0.9775790 0.02242102\n\n\n\ntable.tot$ValAbs &lt;- abs(table.tot$value)\ntable.tot$LogValAbs &lt;- log(table.tot$ValAbs+0.001)\ntable.tot$SqrValAbs &lt;- table.tot$ValAbs**2\n\nggplot(table.tot,aes(x=Method,y=ValAbs, fill=Method)) +\ngeom_half_violin(alpha=0.8) +\n  #geom_point(position = \"jitter\", size= 0.1,alpha = 0.3)+ \n  #geom_half_boxplot(width=0.1, alpha=0.8,side = \"r\") +\n  theme_bw()+   theme(legend.position=\"none\")+#ylim(0,1)+\n  facet_grid(GeneType ~ . , space = \"free_y\", scales = \"free\")+\n  scale_fill_manual(values = colors.methods)\n\n\n\n\n\nggplot(table.tot[table.tot$GeneType == \"Neural\",], aes(x = ValAbs, y = -0.5)) +\n\n  # horizontal box plot\n  geom_boxploth(aes(fill = Method)) +\n\n  # normal density plot\n  geom_density(aes(x = ValAbs), inherit.aes = FALSE) +\n\n  # # vertical lines at Q1 / Q2 / Q3\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xlower..)) +\n   stat_boxploth(geom = \"vline\", aes(xintercept = ..xmiddle..)) +\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xupper..)) +\n  # \n   facet_grid(Method ~ .) +\n  \n  # reproduce original chart's color scale (o/w ordered factors will result\n  # in viridis scale by default, using the current version of ggplot2)\n  #scale_fill_discrete()+\n  scale_fill_manual(values = colors.methods)+\n  theme_bw()+   theme(legend.position=\"none\")+xlim(0,0.2)\n\n\n\n\n\nggplot(table.tot[table.tot$GeneType == \"Constitutive\",], aes(x = ValAbs, y = -0.5)) +\n  # horizontal box plot\n  geom_boxploth(aes(fill = Method), outlier.size = 0.5,width=3) +\n  # normal density plot\n  geom_density(aes(x = ValAbs), inherit.aes = FALSE) +\n  # # vertical lines at Q1 / Q2 / Q3\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xlower..)) +\n   stat_boxploth(geom = \"vline\", aes(xintercept = ..xmiddle..)) +\n  # stat_boxploth(geom = \"vline\", aes(xintercept = ..xupper..)) +\n  # \n   facet_grid(Method ~ .) +\n    # reproduce original chart's color scale (o/w ordered factors will result\n  # in viridis scale by default, using the current version of ggplot2)\n  #scale_fill_discrete()+\n  scale_fill_manual(values = colors.methods)+\n  theme_bw()+   theme(legend.position=\"none\")+xlim(0,0.1)\n\n\n\n\nWe can clearly observe that the coex is generally more near to zero than the correlations.\n\nggplot(table.tot,aes(x=ValAbs, color=Method, y = Y_axis)) + \n  geom_point(alpha=0.8) +\n  scale_color_manual(values = colors.methods)+\n  scale_y_continuous(trans= \"log\",breaks = c(0,0.1,0.25,0.5)\n                         )+\n  scale_x_continuous(trans= \"log\",\n                     breaks = c(0.1,0.2,0.3, 0.4,0.5,0.8), limits = c(0.01,0.85))+\n  theme_bw()+   theme(legend.position=\"bottom\")+ \n  facet_grid(GeneType ~  Dataset)\n\n\n\n\n\nggplot(table.tot.hk,aes(x=abs(value), color=Method))+stat_ecdf(geom = \"point\", size = 0.5 )+scale_color_manual(values = colors.methods)+\n  scale_y_continuous(trans= \"exp\")+facet_grid(. ~  Dataset)\n\n\n\n\n\nggplot(table.tot,aes(x=Method,y=LogValAbs, fill=Method)) +\n#geom_half_boxplot(alpha=0.8) +\n  #geom_point(position = \"jitter\", size= 0.1,alpha = 0.3)+ \n  geom_boxplot(alpha=0.8,outlier.size = 0.1,outlier.colour='blue') +\n  theme_bw()+   theme(legend.position=\"none\")+#ylim(0,0.2)+\n  facet_grid(GeneType ~ Dataset , space = \"free_y\", scales = \"free\")+\n  scale_fill_manual(values = colors.methods)"
  },
  {
    "objectID": "generalCoexAssess.html#p-values",
    "href": "generalCoexAssess.html#p-values",
    "title": "General Coex Evaluation",
    "section": "p-values",
    "text": "p-values\n\ntable.tot.hk &lt;- NA\ntable.tot.neural &lt;- NA\nfor (file in list.files(\"CoexData/\",pattern = \"PValue\")) {\n  pval &lt;- read_fst(paste0(\"CoexData/\",file),to = 2)\n\n  colnames.pval &lt;- colnames(pval)\n  genesListPartial &lt;- genesList\n  for (na in names(genesListPartial)) {\n      if(!all(genesListPartial[[na]] %in% colnames.pval)){\n        print(na)\n        genesListPartial[[na]] &lt;- genesListPartial[[na]][-which(!genesList[[na]] %in% colnames.pval)]\n    }\n  }\n\n\n  pval &lt;- read_fst(paste0(\"CoexData/\",file), \n        columns = unlist(genesListPartial),)\n  pval &lt;- as.matrix(pval)\n  rownames(pval) &lt;- colnames.pval\n  \n  \n  if(all(diag(pval[colnames(pval),]) == 1)){\n      diag(pval[colnames(pval),]) = 0\n    }\n  \n  #pval &lt;- as.data.frame(as.matrix(pval))\n  if(str_detect(file,pattern = \"Cotan\")){\n    code &lt;- \"COTAN\"\n  }else if(str_detect(file,pattern = \"PValuesSCT\")){\n    code &lt;- \"Seurat SCT\"\n  }else if(str_detect(file,pattern = \"SeuratPValues\")){\n    code &lt;- \"Seurat\"\n  }else if(str_detect(file,pattern = \"MonoclePValues\")){\n    code &lt;- \"Monocle\"\n  }else if(str_detect(file,pattern = \"ScanPyPValues\")){\n    code &lt;- \"ScanPy\"\n  }\n  \n  \n  table.hk &lt;- as.data.frame(pval[,genesListPartial$hk])\n  table.hk$Gene1 &lt;- rownames(table.hk)\n  \n  table.hk &lt;- pivot_longer(as.data.frame(table.hk),\n                           cols = c(1:(ncol(table.hk)-1)),names_to = \"Gene2\")\n  table.hk$Method &lt;- code\n  table.hk$Dataset &lt;- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n\n  table.tot.hk &lt;- rbind(table.tot.hk,table.hk)\n  table.tot.hk &lt;- table.tot.hk[! table.tot.hk$Gene1 == table.tot.hk$Gene2,]\n \n  #Not hk\n  pval &lt;- as.data.frame(pval)\n  table.neural &lt;- pval[c(genesListPartial$NPGs,genesListPartial$PNGs,genesListPartial$layers),                              c(genesListPartial$NPGs,genesListPartial$PNGs,genesListPartial$layers)]\n  \n  table.neural$Gene1 &lt;- rownames(table.neural)\n  \n  table.neural &lt;- pivot_longer(as.data.frame(table.neural),\n                           cols = c(1:(ncol(table.neural)-1)),names_to = \"Gene2\")\n  \n  table.neural$Method &lt;- code\n  table.neural$Dataset &lt;- str_flatten(str_split(file,pattern = \"_\",simplify = T)[,c(2,3)],collapse = \"_\")\n  \n  table.tot.neural &lt;- rbind(table.tot.neural,table.neural)\n  table.tot.neural &lt;- table.tot.neural[! table.tot.neural$Gene1 == table.tot.neural$Gene2,]\n}\n\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"hk\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n[1] \"layers\"\n\ntable.tot.hk &lt;- table.tot.hk[2:nrow(table.tot.hk),]\ntable.tot.hk$GeneType &lt;- \"Constitutive\" \ntable.tot.neural &lt;- table.tot.neural[2:nrow(table.tot.neural),]\ntable.tot.neural$GeneType &lt;- \"Neural\"\n\n## For ECDL\ntmp.tot &lt;- NA\nfor (method in unique(table.tot.hk$Method)) {\n  tmp &lt;- as.data.frame(table.tot.hk[table.tot.hk$Method == method,])\n  tmp$n &lt;- NA\n  tmp[order(abs(tmp$value)),]$n &lt;- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis &lt;- 1-tmp$n\n  tmp.tot &lt;- rbind(tmp.tot,tmp)\n}\ntmp.tot &lt;- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.hk &lt;- tmp.tot\n\ntmp.tot &lt;- NA\nfor (method in unique(table.tot.neural$Method)) {\n  tmp &lt;- as.data.frame(table.tot.neural[table.tot.neural$Method == method,])\n  tmp$n &lt;- NA\n  tmp[order(abs(tmp$value)),]$n &lt;- c(1:dim(tmp)[1])/(dim(tmp)[1]+1)\n  tmp$Y_axis &lt;- 1-tmp$n\n  tmp.tot &lt;- rbind(tmp.tot,tmp)\n}\ntmp.tot &lt;- tmp.tot[2:nrow(tmp.tot),]\ntable.tot.neural &lt;- tmp.tot\n\n############\n\ntable.tot.hk$Method &lt;- factor(table.tot.hk$Method, levels = c(\"Seurat\", \"Seurat SCT\", \"Monocle\", \"ScanPy\", \"COTAN\"))\ntable.tot.neural$Method &lt;- factor(table.tot.neural$Method, levels = c(\"Seurat\", \"Seurat SCT\", \"Monocle\", \"ScanPy\", \"COTAN\"))\n\ntable.tot.neural &lt;- table.tot.neural[order(table.tot.neural$Method,decreasing = F),]\ntable.tot.hk &lt;- table.tot.hk[order(table.tot.hk$Method,decreasing = F),]\n\ntable.tot &lt;- rbind(table.tot.hk,table.tot.neural) \ntable.tot &lt;- table.tot[!table.tot$Gene1 == table.tot$Gene2,]\n\nidentical(table.tot[table.tot$Method == \"COTAN\",]$Gene1,\n          table.tot[table.tot$Method == \"Seurat\",]$Gene1 )\n\n[1] FALSE\n\nidentical(table.tot[table.tot$Method == \"COTAN\",]$Gene1,\n          table.tot[table.tot$Method == \"Monocle\",]$Gene1 )\n\n[1] TRUE\n\nhead(table.tot)\n\n                Gene1  Gene2       value Method                  Dataset\n3834146 0610007N19Rik  Calm1 0.849134106 Seurat CorticalCells_GSM2861511\n3834147 0610007N19Rik Cox6b1 0.143918297 Seurat CorticalCells_GSM2861511\n3834148 0610007N19Rik   Ppia 0.343763970 Seurat CorticalCells_GSM2861511\n3834149 0610007N19Rik  Rpl18 0.015566169 Seurat CorticalCells_GSM2861511\n3834150 0610007N19Rik  Cox7c 0.001363415 Seurat CorticalCells_GSM2861511\n3834151 0610007N19Rik    Erh 0.126004288 Seurat CorticalCells_GSM2861511\n            GeneType         n    Y_axis\n3834146 Constitutive 0.8971864 0.1028136\n3834147 Constitutive 0.3391140 0.6608860\n3834148 Constitutive 0.5164962 0.4835038\n3834149 Constitutive 0.1654806 0.8345194\n3834150 Constitutive 0.1020740 0.8979260\n3834151 Constitutive 0.3209477 0.6790523\n\n\n\nConstitutive genes\n\nggplot(table.tot[table.tot$GeneType == \"Constitutive\",], aes(y = value)) +\n  geom_boxplot(aes(fill = Method), outlier.size = 0.5,width=3) +\n  scale_fill_discrete()+ scale_fill_manual(values = colors.methods)+\n  facet_grid(. ~ Dataset )+\n  theme_bw()#+   theme(legend.position=\"none\")\n\n\n\n\n\nggplot(table.tot.hk,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+\n  scale_color_manual(values = colors.methods)+\n  facet_grid(. ~ Dataset )+\n  theme_bw()\n\n\n\n\n\nggplot(table.tot.hk,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+ scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),limits = c(10^(-100),0.05)) + ylim(0,0.4) +scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw()\n\n\n\n\nWe can observe from this plot that COTAN has lower false positive error in fact the number of constitutive genes with p-values lower than 0.05 is quite smaller than from Seurat (both normalization).\n\nggplot(table.tot[table.tot$GeneType == \"Constitutive\",],aes(x=value, color=Method))+geom_density()+xlim(0,0.05)+\n  scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw() \n\n\n\n\n\n\nNeural genes\n\nggplot(table.tot[table.tot$GeneType == \"Neural\",], aes(y = (value))) +\n  geom_boxplot(aes(fill = Method), outlier.size = 0.5,width=3) +\n  scale_fill_discrete()+scale_fill_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw() #+ theme(legend.position=\"none\")\n\n\n\n\n\nggplot(table.tot[table.tot$GeneType == \"Neural\",], aes(y = log(value+0.001))) +\n  geom_boxplot(aes(fill = Method), outlier.size = 0.5,width=3) +\n  scale_fill_discrete()+scale_fill_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw() #+ theme(legend.position=\"none\")\n\n\n\n\n\nggplot(table.tot.neural,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+scale_color_manual(values = colors.methods)+\n  theme_bw()\n\n\n\n\n\nggplot(table.tot.neural,aes(x=value,y=n, color=Method))+geom_point(size = 0.5 )+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(0.0001,0.05)) +\n  scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw()\n\n\n\n\n\nggplot(table.tot.neural,aes(x=value,y=n, color=Method))+geom_point(size = 0.5,alpha = 0.8)+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(10^(-300),0.05)) + ylim(0,0.5)+\n  scale_color_manual(values = colors.methods)+facet_grid(. ~ Dataset )+\n  theme_bw()\n\n\n\n\n\n\nDirect comparision\n\nggplot(table.tot,aes(x=value, color=Method))+geom_density()+\n  facet_grid(GeneType ~ Dataset,scales=\"free\")+\n  scale_color_manual(values = colors.methods)+\n  theme_bw()\n\n\n\n\n\nggplot(table.tot,aes(x=value,y=n, color=Method))+geom_point(size = 0.8, alpha=0.8 )+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(1e-10,0.05)\n    ) + \n  facet_grid(. ~ GeneType ,scales=\"free\") +\n  scale_color_manual(values = colors.methods)+xlab(\"p-values\")+\n  theme_bw()+ theme(legend.position=\"right\")\n\n\n\n\n\nggplot(table.tot,aes(x=value,y=n, color=Method))+geom_point(size = 0.8, alpha=0.8 )+ \n  scale_x_continuous(trans = log_trans(base = 10),\n    breaks = trans_breaks(\"log10\", function(x) 10^x),\n    labels = trans_format(\"log10\", math_format(10^.x)),\n    limits = c(1e-10,0.05)\n    ) + \n  facet_grid(Dataset ~ GeneType ,scales=\"free\") +\n  scale_color_manual(values = colors.methods)+xlab(\"p-values\")+\n  theme_bw()+ theme(legend.position=\"right\")\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-08 19:52:31 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] fstcore_0.9.18        fst_0.9.8             dplyr_1.1.2          \n [4] circlize_0.4.15       ComplexHeatmap_2.16.0 COTAN_2.5.0          \n [7] scales_1.3.0          ggstance_0.3.6        Matrix_1.6-3         \n[10] cowplot_1.1.1         gridExtra_2.3         ggstatsplot_0.12.0   \n[13] gghalves_0.1.4        ggplot2_3.5.0         stringr_1.5.0        \n[16] tidyr_1.3.0          \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21          splines_4.3.2            \n  [3] later_1.3.1               tibble_3.2.1             \n  [5] polyclip_1.10-4           datawizard_0.9.0         \n  [7] fastDummies_1.7.3         lifecycle_1.0.3          \n  [9] doParallel_1.0.17         globals_0.16.2           \n [11] lattice_0.22-5            MASS_7.3-60              \n [13] insight_0.19.6            dendextend_1.17.1        \n [15] magrittr_2.0.3            plotly_4.10.2            \n [17] rmarkdown_2.24            yaml_2.3.7               \n [19] httpuv_1.6.11             Seurat_5.0.0             \n [21] sctransform_0.4.1         askpass_1.2.0            \n [23] spam_2.10-0               sp_2.1-1                 \n [25] spatstat.sparse_3.0-2     reticulate_1.36.1        \n [27] pbapply_1.7-2             RColorBrewer_1.1-3       \n [29] multcomp_1.4-25           abind_1.4-5              \n [31] Rtsne_0.17                purrr_1.0.1              \n [33] BiocGenerics_0.46.0       TH.data_1.1-2            \n [35] sandwich_3.1-0            IRanges_2.34.1           \n [37] S4Vectors_0.38.1          ggrepel_0.9.5            \n [39] irlba_2.3.5.1             listenv_0.9.0            \n [41] spatstat.utils_3.0-3      correlation_0.8.4        \n [43] umap_0.2.10.0             goftest_1.2-3            \n [45] RSpectra_0.16-1           spatstat.random_3.2-1    \n [47] dqrng_0.3.0               fitdistrplus_1.1-11      \n [49] parallelly_1.37.1         DelayedMatrixStats_1.22.5\n [51] leiden_0.4.3              codetools_0.2-19         \n [53] DelayedArray_0.26.7       tidyselect_1.2.0         \n [55] shape_1.4.6               farver_2.1.1             \n [57] viridis_0.6.4             ScaledMatrix_1.8.1       \n [59] matrixStats_1.2.0         stats4_4.3.2             \n [61] spatstat.explore_3.2-1    jsonlite_1.8.7           \n [63] GetoptLong_1.0.5          ellipsis_0.3.2           \n [65] progressr_0.14.0          ggridges_0.5.4           \n [67] survival_3.5-8            iterators_1.0.14         \n [69] emmeans_1.10.0            foreach_1.5.2            \n [71] tools_4.3.2               ica_1.0-3                \n [73] Rcpp_1.0.11               glue_1.7.0               \n [75] xfun_0.39                 MatrixGenerics_1.12.3    \n [77] ggthemes_5.1.0            withr_3.0.0              \n [79] fastmap_1.1.1             fansi_1.0.4              \n [81] openssl_2.1.0             digest_0.6.33            \n [83] rsvd_1.0.5                parallelDist_0.2.6       \n [85] R6_2.5.1                  mime_0.12                \n [87] estimability_1.5          colorspace_2.1-0         \n [89] scattermore_1.2           tensor_1.5               \n [91] spatstat.data_3.0-1       utf8_1.2.3               \n [93] generics_0.1.3            data.table_1.15.0        \n [95] httr_1.4.6                htmlwidgets_1.6.2        \n [97] S4Arrays_1.2.0            parameters_0.21.1        \n [99] uwot_0.1.16               pkgconfig_2.0.3          \n[101] gtable_0.3.3              statsExpressions_1.5.1   \n[103] lmtest_0.9-40             htmltools_0.5.8          \n[105] dotCall64_1.1-0           clue_0.3-64              \n[107] SeuratObject_5.0.0        png_0.1-8                \n[109] knitr_1.43                rstudioapi_0.15.0        \n[111] reshape2_1.4.4            rjson_0.2.21             \n[113] nlme_3.1-163              coda_0.19-4              \n[115] zoo_1.8-12                GlobalOptions_0.1.2      \n[117] KernSmooth_2.23-22        parallel_4.3.2           \n[119] miniUI_0.1.1.1            RcppZiggurat_0.1.6       \n[121] pillar_1.9.0              vctrs_0.6.3              \n[123] RANN_2.6.1                promises_1.2.0.1         \n[125] BiocSingular_1.16.0       beachmat_2.16.0          \n[127] xtable_1.8-4              cluster_2.1.6            \n[129] paletteer_1.6.0           evaluate_0.21            \n[131] zeallot_0.1.0             mvtnorm_1.2-2            \n[133] cli_3.6.1                 compiler_4.3.2           \n[135] rlang_1.1.1               crayon_1.5.2             \n[137] future.apply_1.11.0       labeling_0.4.2           \n[139] rematch2_2.1.2            plyr_1.8.8               \n[141] stringi_1.8.1             viridisLite_0.4.2        \n[143] deldir_2.0-2              BiocParallel_1.34.2      \n[145] assertthat_0.2.1          munsell_0.5.0            \n[147] lazyeval_0.2.2            spatstat.geom_3.2-4      \n[149] bayestestR_0.13.1         PCAtools_2.14.0          \n[151] RcppHNSW_0.6.0            patchwork_1.2.0          \n[153] sparseMatrixStats_1.12.2  future_1.33.0            \n[155] shiny_1.8.0               ROCR_1.0-11              \n[157] Rfast_2.1.0               igraph_2.0.3             \n[159] RcppParallel_5.1.7"
  },
  {
    "objectID": "probability_score.html",
    "href": "probability_score.html",
    "title": "Probability score computation",
    "section": "",
    "text": "library(rlang)\nlibrary(testthat)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(zeallot)\nlibrary(Seurat)\nlibrary(aricode)\nlibrary(funtimes)\nlibrary(monocle3)\nlibrary(cluster)\nlibrary(COTAN)\n\ntunings = c('default', 'antibody', 'celltypist')\ntools = c('monocle', 'scanpy', 'seurat', 'scvi-tools', 'COTAN')\n\n\naverageClustersDistance &lt;- function(probMatrixDF,\n                                    clustersList, numDim) {\n  \n  squareDist &lt;- function(subMatrix) {\n    subMatrix &lt;- scale(subMatrix, scale = FALSE, center = TRUE)\n    return(sum(rowSums(subMatrix^2)))\n}\n  \n  pca &lt;- PCAtools::pca(mat = probMatrixDF, rank = numDim, transposed = TRUE)\n\n  residual_variance = 100 - sum(pca[[\"variance\"]])\n\n  normMatrix &lt;- scale(x = pca[[\"rotated\"]], center = TRUE, scale = TRUE)\n  rownames(normMatrix) &lt;- rownames(probMatrixDF)\n\n  final_dimensions = dim(normMatrix)[2]\n\n  sumDist &lt;- 0.0\n  for (cl in clustersList) {\n    sumDist &lt;- sumDist + squareDist(normMatrix[cl, , drop = FALSE])\n  }\n  score = sumDist / ncol(normMatrix) / (nrow(normMatrix) - length(clustersList))\n  return(list(\"residual_variance\" = residual_variance, \"final_dimensions\" = final_dimensions, \"score\" = score))\n}"
  },
  {
    "objectID": "probability_score.html#pbmc1",
    "href": "probability_score.html#pbmc1",
    "title": "Probability score computation",
    "section": "PBMC1",
    "text": "PBMC1\n\ndataset = 'PBMC1'\ncelltypistPath = paste('Data/', dataset, '/celltypist/Immune_All_Low_probability_matrix.csv', sep='')\noutPath = paste('Data/', dataset, '/probabilistic_score.csv', sep='')\n\nLoad CellTypist clusterization\n\nprobMatrixDF &lt;- read.csv(celltypistPath, header = TRUE)\nprobMatrixDF &lt;- column_to_rownames(probMatrixDF, var = \"X\")\nrownames(probMatrixDF) &lt;- gsub(\"[.]\", \":\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- gsub(\"X10X\", \"10X\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- substr(rownames(probMatrixDF), 1, nchar(rownames(probMatrixDF)) - 2)\n\nEstimate number of dimensions\n\nprc &lt;- PCAtools::pca(mat = probMatrixDF, rank = 50, transposed = TRUE)\nplot(prc$sdev)\n\n\n\n\n\nnDims &lt;- 20\n\nCalculate the projection to spherical distribution [Malahanobis distance]: the sum of square distances from center of sub-cluster in pca-projected space\n\nscores = data.frame()#\"tool\" = NA, \"dataset\" = dataset, \"tuning\" = NA, \"score\" = NA, \"residual_variance\" = NA, \"final_dimensions\" = NA)\nfor (tool in tools) {\n  for (tuning in tunings) {\n    labelsPath = paste('Data/', dataset, '/', tool, '/', tuning, '/clustering_labels.csv', sep='')\n    labels &lt;- read.csv(labelsPath, header = TRUE)\n    clustersList&lt;- split(as.character(labels$cell), labels$cluster)\n    score_data = averageClustersDistance(probMatrixDF, clustersList,numDim = nDims)\n    scores = rbind(\n      scores,\n      data.frame(\n        \"tool\" = tool,\n        \"dataset\" = dataset,\n        \"tuning\" = tuning,\n        \"score\" = score_data$score,\n        \"residual_variance\" = score_data$residual_variance,\n        \"final_dimensions\" = score_data$final_dimensions\n      )\n    )\n  }\n}\nwrite.csv(scores, outPath, row.names = FALSE)\nscores\n\n         tool dataset     tuning     score residual_variance final_dimensions\n1     monocle   PBMC1    default 0.9064319         0.6614691               20\n2     monocle   PBMC1   antibody 0.7098190         0.6614691               20\n3     monocle   PBMC1 celltypist 0.6698957         0.6614691               20\n4      scanpy   PBMC1    default 0.5717224         0.6614691               20\n5      scanpy   PBMC1   antibody 0.6405931         0.6614691               20\n6      scanpy   PBMC1 celltypist 0.5765256         0.6614691               20\n7      seurat   PBMC1    default 0.6290241         0.6614691               20\n8      seurat   PBMC1   antibody 0.6275275         0.6614691               20\n9      seurat   PBMC1 celltypist 0.5283759         0.6614691               20\n10 scvi-tools   PBMC1    default 0.6027325         0.6614691               20\n11 scvi-tools   PBMC1   antibody 0.6605860         0.6614691               20\n12 scvi-tools   PBMC1 celltypist 0.5735559         0.6614691               20\n13      COTAN   PBMC1    default 0.5945573         0.6614691               20\n14      COTAN   PBMC1   antibody 0.7028721         0.6614691               20\n15      COTAN   PBMC1 celltypist 0.5945573         0.6614691               20\n\n\n\nset.seed(42)\nshuffledCells &lt;- rownames(probMatrixDF)\nrndDist &lt;- function(n) {\n  clusters &lt;- set_names(rep(1:n, ceiling(9000/n))[1:nrow(probMatrixDF)], shuffledCells)\n  cluster_list &lt;- split(names(clusters), clusters)\n  d &lt;- averageClustersDistance(probMatrixDF, cluster_list,nDims)\n  return(d$score)\n}\nsizes &lt;- c(1:15, seq(20, 50, by = 5), seq(60, 100, by = 10),\n           seq(150, 1000, by = 50), seq(1500, 9000, by = 500))\nsizesToDists &lt;- vapply(sizes,rndDist, numeric(1)) \nnames(sizesToDists) &lt;- sizes\npdf(paste('Data/', dataset, '/probability_score_dim_dependency.pdf', sep=''))\nplot(names(sizesToDists), sizesToDists)\ndev.off()\n\npng \n  2 \n\nplot(names(sizesToDists), sizesToDists)"
  },
  {
    "objectID": "probability_score.html#pbmc2",
    "href": "probability_score.html#pbmc2",
    "title": "Probability score computation",
    "section": "PBMC2",
    "text": "PBMC2\n\ndataset = 'PBMC2'\ncelltypistPath = paste('Data/', dataset, '/celltypist/Immune_All_Low_probability_matrix.csv', sep='')\noutPath = paste('Data/', dataset, '/probabilistic_score.csv', sep='')\n\nLoad CellTypist clusterization\n\nprobMatrixDF &lt;- read.csv(celltypistPath, header = TRUE)\nprobMatrixDF &lt;- column_to_rownames(probMatrixDF, var = \"X\")\nrownames(probMatrixDF) &lt;- gsub(\"[.]\", \":\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- gsub(\"X10X\", \"10X\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- substr(rownames(probMatrixDF), 1, nchar(rownames(probMatrixDF)) - 2)\n\nEstimate number of dimensions\n\nprc &lt;- PCAtools::pca(mat = probMatrixDF, rank = 50, transposed = TRUE)\nplot(prc$sdev)\n\n\n\n\n\nnDims &lt;- 20\n\nCalculate the projection to spherical distribution [Malahanobis distance]: the sum of square distances from center of sub-cluster in pca-projected space\n\nscores = data.frame()#\"tool\" = NA, \"dataset\" = dataset, \"tuning\" = NA, \"score\" = NA, \"residual_variance\" = NA, \"final_dimensions\" = NA)\nfor (tool in tools) {\n  for (tuning in tunings) {\n    labelsPath = paste('Data/', dataset, '/', tool, '/', tuning, '/clustering_labels.csv', sep='')\n    labels &lt;- read.csv(labelsPath, header = TRUE)\n    clustersList&lt;- split(as.character(labels$cell), labels$cluster)\n    score_data = averageClustersDistance(probMatrixDF, clustersList,numDim = nDims)\n    scores = rbind(\n      scores,\n      data.frame(\n        \"tool\" = tool,\n        \"dataset\" = dataset,\n        \"tuning\" = tuning,\n        \"score\" = score_data$score,\n        \"residual_variance\" = score_data$residual_variance,\n        \"final_dimensions\" = score_data$final_dimensions\n      )\n    )\n  }\n}\nwrite.csv(scores, outPath, row.names = FALSE)\nscores\n\n         tool dataset     tuning     score residual_variance final_dimensions\n1     monocle   PBMC2    default 0.9547651          0.632864               20\n2     monocle   PBMC2   antibody 0.7238461          0.632864               20\n3     monocle   PBMC2 celltypist 0.6804478          0.632864               20\n4      scanpy   PBMC2    default 0.5757901          0.632864               20\n5      scanpy   PBMC2   antibody 0.4720212          0.632864               20\n6      scanpy   PBMC2 celltypist 0.5721244          0.632864               20\n7      seurat   PBMC2    default 0.5494186          0.632864               20\n8      seurat   PBMC2   antibody 0.3949425          0.632864               20\n9      seurat   PBMC2 celltypist 0.4951102          0.632864               20\n10 scvi-tools   PBMC2    default 0.5851914          0.632864               20\n11 scvi-tools   PBMC2   antibody 0.4727416          0.632864               20\n12 scvi-tools   PBMC2 celltypist 0.5576107          0.632864               20\n13      COTAN   PBMC2    default 0.5599573          0.632864               20\n14      COTAN   PBMC2   antibody 0.6612736          0.632864               20\n15      COTAN   PBMC2 celltypist 0.5599573          0.632864               20\n\n\n\nset.seed(42)\nshuffledCells &lt;- rownames(probMatrixDF)\nrndDist &lt;- function(n) {\n  clusters &lt;- set_names(rep(1:n, ceiling(9000/n))[1:nrow(probMatrixDF)], shuffledCells)\n  cluster_list &lt;- split(names(clusters), clusters)\n  d &lt;- averageClustersDistance(probMatrixDF, cluster_list,nDims)\n  return(d$score)\n}\nsizes &lt;- c(1:15, seq(20, 50, by = 5), seq(60, 100, by = 10),\n           seq(150, 1000, by = 50), seq(1500, 9000, by = 500))\nsizesToDists &lt;- vapply(sizes, rndDist, numeric(1)) \nnames(sizesToDists) &lt;- sizes\npdf(paste('Data/', dataset, '/probability_score_dim_dependency.pdf', sep=''))\nplot(names(sizesToDists), sizesToDists)\ndev.off()\n\npng \n  2 \n\nplot(names(sizesToDists), sizesToDists)"
  },
  {
    "objectID": "probability_score.html#pbmc3",
    "href": "probability_score.html#pbmc3",
    "title": "Probability score computation",
    "section": "PBMC3",
    "text": "PBMC3\n\ndataset = 'PBMC3'\ncelltypistPath = paste('Data/', dataset, '/celltypist/Immune_All_Low_probability_matrix.csv', sep='')\noutPath = paste('Data/', dataset, '/probabilistic_score.csv', sep='')\n\nLoad CellTypist clusterization\n\nprobMatrixDF &lt;- read.csv(celltypistPath, header = TRUE)\nprobMatrixDF &lt;- column_to_rownames(probMatrixDF, var = \"X\")\nrownames(probMatrixDF) &lt;- gsub(\"[.]\", \":\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- gsub(\"X10X\", \"10X\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- substr(rownames(probMatrixDF), 1, nchar(rownames(probMatrixDF)) - 2)\n\nEstimate number of dimensions\n\nprc &lt;- PCAtools::pca(mat = probMatrixDF, rank = 50, transposed = TRUE)\nplot(prc$sdev)\n\n\n\n\n\nnDims &lt;- 20\n\nCalculate the projection to spherical distribution [Malahanobis distance]: the sum of square distances from center of sub-cluster in pca-projected space\n\nscores = data.frame()#\"tool\" = NA, \"dataset\" = dataset, \"tuning\" = NA, \"score\" = NA, \"residual_variance\" = NA, \"final_dimensions\" = NA)\nfor (tool in tools) {\n  for (tuning in tunings) {\n    labelsPath = paste('Data/', dataset, '/', tool, '/', tuning, '/clustering_labels.csv', sep='')\n    labels &lt;- read.csv(labelsPath, header = TRUE)\n    clustersList&lt;- split(as.character(labels$cell), labels$cluster)\n    score_data = averageClustersDistance(probMatrixDF, clustersList,numDim = nDims)\n    scores = rbind(\n      scores,\n      data.frame(\n        \"tool\" = tool,\n        \"dataset\" = dataset,\n        \"tuning\" = tuning,\n        \"score\" = score_data$score,\n        \"residual_variance\" = score_data$residual_variance,\n        \"final_dimensions\" = score_data$final_dimensions\n      )\n    )\n  }\n}\nwrite.csv(scores, outPath, row.names = FALSE)\nscores\n\n         tool dataset     tuning     score residual_variance final_dimensions\n1     monocle   PBMC3    default 0.9116157          0.666637               20\n2     monocle   PBMC3   antibody 0.7342920          0.666637               20\n3     monocle   PBMC3 celltypist 0.7235588          0.666637               20\n4      scanpy   PBMC3    default 0.5771388          0.666637               20\n5      scanpy   PBMC3   antibody 0.4865492          0.666637               20\n6      scanpy   PBMC3 celltypist 0.5750278          0.666637               20\n7      seurat   PBMC3    default 0.5237283          0.666637               20\n8      seurat   PBMC3   antibody 0.4024118          0.666637               20\n9      seurat   PBMC3 celltypist 0.5238608          0.666637               20\n10 scvi-tools   PBMC3    default 0.5606163          0.666637               20\n11 scvi-tools   PBMC3   antibody 0.4673312          0.666637               20\n12 scvi-tools   PBMC3 celltypist 0.5082920          0.666637               20\n13      COTAN   PBMC3    default 0.5034928          0.666637               20\n14      COTAN   PBMC3   antibody 0.6774677          0.666637               20\n15      COTAN   PBMC3 celltypist 0.6318363          0.666637               20\n\n\n\nset.seed(42)\nshuffledCells &lt;- rownames(probMatrixDF)\nrndDist &lt;- function(n) {\n  clusters &lt;- set_names(rep(1:n, ceiling(9000/n))[1:nrow(probMatrixDF)], shuffledCells)\n  cluster_list &lt;- split(names(clusters), clusters)\n  d &lt;- averageClustersDistance(probMatrixDF, cluster_list,nDims)\n  return(d$score)\n}\nsizes &lt;- c(1:15, seq(20, 50, by = 5), seq(60, 100, by = 10),\n           seq(150, 1000, by = 50), seq(1500, 9000, by = 500))\nsizesToDists &lt;- vapply(sizes, rndDist, numeric(1)) \nnames(sizesToDists) &lt;- sizes\npdf(paste('Data/', dataset, '/probability_score_dim_dependency.pdf', sep=''))\nplot(names(sizesToDists), sizesToDists)\ndev.off()\n\npng \n  2 \n\nplot(names(sizesToDists), sizesToDists)"
  },
  {
    "objectID": "probability_score.html#pbmc4",
    "href": "probability_score.html#pbmc4",
    "title": "Probability score computation",
    "section": "PBMC4",
    "text": "PBMC4\n\ndataset = 'PBMC4'\ncelltypistPath = paste('Data/', dataset, '/celltypist/Immune_All_Low_probability_matrix.csv', sep='')\noutPath = paste('Data/', dataset, '/probabilistic_score.csv', sep='')\n\nLoad CellTypist clusterization\n\nprobMatrixDF &lt;- read.csv(celltypistPath, header = TRUE)\nprobMatrixDF &lt;- column_to_rownames(probMatrixDF, var = \"X\")\nrownames(probMatrixDF) &lt;- gsub(\"[.]\", \":\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- gsub(\"X10X\", \"10X\", rownames(probMatrixDF))\nrownames(probMatrixDF) &lt;- substr(rownames(probMatrixDF), 1, nchar(rownames(probMatrixDF)) - 2)\n\nEstimate number of dimensions\n\nprc &lt;- PCAtools::pca(mat = probMatrixDF, rank = 50, transposed = TRUE)\nplot(prc$sdev)\n\n\n\n\n\nnDims &lt;- 20\n\nCalculate the projection to spherical distribution [Malahanobis distance]: the sum of square distances from center of sub-cluster in pca-projected space\n\nscores = data.frame()#\"tool\" = NA, \"dataset\" = dataset, \"tuning\" = NA, \"score\" = NA, \"residual_variance\" = NA, \"final_dimensions\" = NA)\nfor (tool in tools) {\n  for (tuning in tunings) {\n    labelsPath = paste('Data/', dataset, '/', tool, '/', tuning, '/clustering_labels.csv', sep='')\n    labels &lt;- read.csv(labelsPath, header = TRUE)\n    clustersList&lt;- split(as.character(labels$cell), labels$cluster)\n    score_data = averageClustersDistance(probMatrixDF, clustersList,numDim = nDims)\n    scores = rbind(\n      scores,\n      data.frame(\n        \"tool\" = tool,\n        \"dataset\" = dataset,\n        \"tuning\" = tuning,\n        \"score\" = score_data$score,\n        \"residual_variance\" = score_data$residual_variance,\n        \"final_dimensions\" = score_data$final_dimensions\n      )\n    )\n  }\n}\nwrite.csv(scores, outPath, row.names = FALSE)\nscores\n\n         tool dataset     tuning     score residual_variance final_dimensions\n1     monocle   PBMC4    default 0.9079955         0.7881445               20\n2     monocle   PBMC4   antibody 0.6896226         0.7881445               20\n3     monocle   PBMC4 celltypist 0.6513185         0.7881445               20\n4      scanpy   PBMC4    default 0.5667508         0.7881445               20\n5      scanpy   PBMC4   antibody 0.5639221         0.7881445               20\n6      scanpy   PBMC4 celltypist 0.5916285         0.7881445               20\n7      seurat   PBMC4    default 0.5272270         0.7881445               20\n8      seurat   PBMC4   antibody 0.4877846         0.7881445               20\n9      seurat   PBMC4 celltypist 0.5265706         0.7881445               20\n10 scvi-tools   PBMC4    default 0.6212800         0.7881445               20\n11 scvi-tools   PBMC4   antibody 0.5174726         0.7881445               20\n12 scvi-tools   PBMC4 celltypist 0.5219027         0.7881445               20\n13      COTAN   PBMC4    default 0.5755159         0.7881445               20\n14      COTAN   PBMC4   antibody 0.6613133         0.7881445               20\n15      COTAN   PBMC4 celltypist 0.5825237         0.7881445               20\n\n\n\nset.seed(42)\nshuffledCells &lt;- rownames(probMatrixDF)\nrndDist &lt;- function(n) {\n  clusters &lt;- set_names(rep(1:n, ceiling(9000/n))[1:nrow(probMatrixDF)], shuffledCells)\n  cluster_list &lt;- split(names(clusters), clusters)\n  d &lt;- averageClustersDistance(probMatrixDF, cluster_list,nDims)\n  return(d$score)\n}\nsizes &lt;- c(1:15, seq(20, 50, by = 5), seq(60, 100, by = 10),\n           seq(150, 1000, by = 50), seq(1500, 9000, by = 500))\nsizesToDists &lt;- vapply(sizes, rndDist, numeric(1)) \nnames(sizesToDists) &lt;- sizes\npdf(paste('Data/', dataset, '/probability_score_dim_dependency.pdf', sep=''))\nplot(names(sizesToDists), sizesToDists)\ndev.off()\n\npng \n  2 \n\nplot(names(sizesToDists), sizesToDists)\n\n\n\n\n\n\nSys.time()\n\n[1] \"2024-05-10 17:40:27 CEST\"\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3;  LAPACK version 3.9.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Europe/Rome\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] COTAN_2.5.0                 cluster_2.1.6              \n [3] monocle3_1.3.4              SingleCellExperiment_1.22.0\n [5] SummarizedExperiment_1.30.2 GenomicRanges_1.52.0       \n [7] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n [9] S4Vectors_0.38.1            MatrixGenerics_1.12.3      \n[11] matrixStats_1.2.0           Biobase_2.60.0             \n[13] BiocGenerics_0.46.0         funtimes_9.1               \n[15] aricode_1.0.3               Seurat_5.0.0               \n[17] SeuratObject_5.0.0          sp_2.1-1                   \n[19] zeallot_0.1.0               tibble_3.2.1               \n[21] ggplot2_3.5.0               testthat_3.2.0             \n[23] rlang_1.1.1                \n\nloaded via a namespace (and not attached):\n  [1] spatstat.sparse_3.0-2     bitops_1.0-7             \n  [3] httr_1.4.6                RColorBrewer_1.1-3       \n  [5] doParallel_1.0.17         tools_4.3.2              \n  [7] sctransform_0.4.1         backports_1.4.1          \n  [9] utf8_1.2.3                R6_2.5.1                 \n [11] lazyeval_0.2.2            uwot_0.1.16              \n [13] GetoptLong_1.0.5          withr_3.0.0              \n [15] gridExtra_2.3             parallelDist_0.2.6       \n [17] fdrtool_1.2.17            progressr_0.14.0         \n [19] qgraph_1.9.8              cli_3.6.1                \n [21] spatstat.explore_3.2-1    fastDummies_1.7.3        \n [23] mvtnorm_1.2-2             spatstat.data_3.0-1      \n [25] askpass_1.2.0             ggridges_0.5.4           \n [27] pbapply_1.7-2             pbivnorm_0.6.0           \n [29] foreign_0.8-86            dbscan_1.1-11            \n [31] parallelly_1.37.1         rstudioapi_0.15.0        \n [33] generics_0.1.3            shape_1.4.6              \n [35] gtools_3.9.4              ica_1.0-3                \n [37] spatstat.random_3.2-1     dendextend_1.17.1        \n [39] graphicalVAR_0.3.3        dplyr_1.1.2              \n [41] Matrix_1.6-3              fansi_1.0.4              \n [43] abind_1.4-5               PCAtools_2.14.0          \n [45] terra_1.7-39              lifecycle_1.0.3          \n [47] yaml_2.3.7                clusterGeneration_1.3.8  \n [49] Rtsne_0.17                grid_4.3.2               \n [51] lavaan_0.6-16             mlVAR_0.5.1              \n [53] dqrng_0.3.0               promises_1.2.0.1         \n [55] crayon_1.5.2              miniUI_0.1.1.1           \n [57] lattice_0.22-5            beachmat_2.16.0          \n [59] cowplot_1.1.1             pillar_1.9.0             \n [61] knitr_1.43                ComplexHeatmap_2.16.0    \n [63] rjson_0.2.21              boot_1.3-28              \n [65] corpcor_1.6.10            future.apply_1.11.0      \n [67] codetools_0.2-19          leiden_0.4.3             \n [69] glue_1.7.0                data.table_1.15.0        \n [71] vctrs_0.6.3               png_0.1-8                \n [73] spam_2.10-0               Rdpack_2.6               \n [75] gtable_0.3.3              assertthat_0.2.1         \n [77] gsubfn_0.7                xfun_0.39                \n [79] rbibutils_2.2.15          S4Arrays_1.2.0           \n [81] mime_0.12                 Rfast_2.1.0              \n [83] coda_0.19-4               survival_3.5-8           \n [85] Kendall_2.2.1             iterators_1.0.14         \n [87] MplusAutomation_1.1.0     ellipsis_0.3.2           \n [89] fitdistrplus_1.1-11       ROCR_1.0-11              \n [91] nlme_3.1-163              RcppAnnoy_0.0.21         \n [93] irlba_2.3.5.1             KernSmooth_2.23-22       \n [95] rpart_4.1.23              colorspace_2.1-0         \n [97] Hmisc_5.1-0               nnet_7.3-19              \n [99] mnormt_2.1.1              tidyselect_1.2.0         \n[101] compiler_4.3.2            glmnet_4.1-8             \n[103] htmlTable_2.4.1           DelayedArray_0.26.7      \n[105] plotly_4.10.2             checkmate_2.3.0          \n[107] scales_1.3.0              psych_2.4.3              \n[109] lmtest_0.9-40             quadprog_1.5-8           \n[111] stringr_1.5.0             digest_0.6.33            \n[113] goftest_1.2-3             spatstat.utils_3.0-3     \n[115] minqa_1.2.5               rmarkdown_2.24           \n[117] XVector_0.40.0            htmltools_0.5.8          \n[119] pkgconfig_2.0.3           jpeg_0.1-10              \n[121] base64enc_0.1-3           umap_0.2.10.0            \n[123] lme4_1.1-34               sparseMatrixStats_1.12.2 \n[125] fastmap_1.1.1             ggthemes_5.1.0           \n[127] GlobalOptions_0.1.2       htmlwidgets_1.6.2        \n[129] DelayedMatrixStats_1.22.5 shiny_1.8.0              \n[131] zoo_1.8-12                jsonlite_1.8.7           \n[133] BiocParallel_1.34.2       BiocSingular_1.16.0      \n[135] RCurl_1.98-1.12           magrittr_2.0.3           \n[137] Formula_1.2-5             GenomeInfoDbData_1.2.10  \n[139] dotCall64_1.1-0           patchwork_1.2.0          \n[141] texreg_1.39.3             munsell_0.5.0            \n[143] Rcpp_1.0.11               viridis_0.6.4            \n[145] proto_1.0.0               reticulate_1.36.1        \n[147] RcppZiggurat_0.1.6        stringi_1.8.1            \n[149] brio_1.1.3                zlibbioc_1.46.0          \n[151] MASS_7.3-60               plyr_1.8.8               \n[153] parallel_4.3.2            listenv_0.9.0            \n[155] ggrepel_0.9.5             deldir_2.0-2             \n[157] splines_4.3.2             pander_0.6.5             \n[159] tensor_1.5                circlize_0.4.15          \n[161] igraph_2.0.3              spatstat.geom_3.2-4      \n[163] RcppHNSW_0.6.0            reshape2_1.4.4           \n[165] ScaledMatrix_1.8.1        evaluate_0.21            \n[167] RcppParallel_5.1.7        nloptr_2.0.3             \n[169] foreach_1.5.2             httpuv_1.6.11            \n[171] openssl_2.1.0             RANN_2.6.1               \n[173] tidyr_1.3.0               purrr_1.0.1              \n[175] polyclip_1.10-4           clue_0.3-64              \n[177] future_1.33.0             scattermore_1.2          \n[179] rsvd_1.0.5                xtable_1.8-4             \n[181] RSpectra_0.16-1           later_1.3.1              \n[183] glasso_1.11               viridisLite_0.4.2        \n[185] arm_1.13-1                globals_0.16.2"
  }
]