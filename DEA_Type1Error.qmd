---
title: "Differential expression analisys: type I error"
author: "seriph78"
date: "`r Sys.Date()`"
output: html_document
---

### Automatic functions

```{r}
library(COTAN)
library(Seurat)
library(monocle3)
library(reticulate)
library(stringr)
```

```{r}

COTAN.DEA <- function(dataSet,clusters.list, GEO.code, sequencingMethod,sampleCondition){
  obj <- automaticCOTANObjectCreation(raw = dataSet,
                                      calcCoex = F,
                                      cores = 10,
                                      saveObj = F,
                                      GEO = GEO.code,
                                      sequencingMethod = sequencingMethod,
                                      sampleCondition = sampleCondition)
  obj <- addClusterization(obj,clName = clName,clusters = clusters.list)
  
  DF.DEA <- DEAOnClusters(obj,clName = clName )
  pval.DEA <- pValueFromDEA(DF.DEA,numCells = getNumCells(obj))
  adj.pval.DEA <- pval.DEA
  for (col in colnames(pval.DEA)) {
    adj.pval.DEA[,col] <- p.adjust(adj.pval.DEA[,col],method = "bonferroni")
  }
  n.genes.DEA <- sum(adj.pval.DEA < 0.05)
  return("n.genes.DEA"=n.genes.DEA,"DF.DEA"=DF.DEA,"adj.pval.DEA" = adj.pval.DEA)

}

Seurat.DEA <- function(dataSet,clusters.list, project){
  pbmc <- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 200)
  pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
  pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
  all.genes <- rownames(pbmc)
  pbmc <- ScaleData(pbmc, features = all.genes)
  
  pbmc@meta.data$TestCl <- NA
  pbmc@meta.data[names(clusters.list),]$TestCl <- clusters.list
  pbmc <- SetIdent(pbmc,value = "TestCl")
  pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
  
  pbmc <- RunPCA(pbmc)
  pbmc <- RunUMAP(pbmc, dims = 1:20)
  
  n.genes.DEA <- sum(pbmc.markers$p_val_adj < 0.05)
  return("n.genes.DEA"=n.genes.DEA,"markers"= pbmc.markers)
  }

Monocle.DEA <- function(dataSet,clusters.list){
  
  cell_metadata = as.data.frame(clusters.list[colnames(dataSet)])
  colnames(cell_metadata) <- "Clusters"
  cds <- new_cell_data_set(dataSet[rowSums(dataSet) > 3,],
                         cell_metadata = cell_metadata
                         )
  colData(cds)$cluster <- clusters.list[rownames(colData(cds))]

  cds <- preprocess_cds(cds, num_dim = 100)
  cds <- reduce_dimension(cds)
  #cds <- cluster_cells(cds, resolution=1e-5)

de_results <- fit_models(cds,model_formula_str = " ~ cluster",cores = 10,verbose = T)
fit_coefs <- coefficient_table(de_results)
fit_coefs <- fit_coefs %>% filter(term == "cluster")

return("n.genes.DEA"=sum(fit_coefs$q_value < 0.05, na.rm = T),"fit_coefs"= fit_coefs,
       "de_results"=de_results)
}


ScamPy.DEA <- function(dataSet,clusters.list, project){
  pbmc <- CreateSeuratObject(counts = dataSet, project = project, min.cells = 3, min.features = 200)
  pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
  pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
  all.genes <- rownames(pbmc)
  pbmc <- ScaleData(pbmc, features = all.genes)
  
  pbmc@meta.data$TestCl <- NA
  pbmc@meta.data[names(clusters.list),]$TestCl <- clusters.list
  
  pbmc <- RunPCA(pbmc)
  pbmc <- RunUMAP(pbmc, dims = 1:20)
  
  exprs <- GetAssayData(pbmc)
  meta <- pbmc[[]]
  feature_meta <- GetAssay(pbmc)[[]]
  embedding <- Embeddings(pbmc, "umap")
  
  Sys.setenv(RETICULATE_PYTHON = "../../../bin/python3")
  py <- import("sys")
  
  source_python("src/scanpyTypeIError.py")
  scanpyTypeIError(exprs, meta, feature_meta, embedding, "mt", "Results/TipeIError/")


}
```

```{r}
set.seed(42) ## for sake of reproducibility
dataSetDir <- "Data/MouseCortexFromLoom/SingleClusterRawData/"
for (dataSet in list.files(dataSetDir)) {
  cluster.name #mettere
  
  dataSet <- readRDS(paste0(dataSetDir,dataSet))
}

cl1 <- sample(colnames(dataSet), size = round(ncol(dataSet)/2,digits = 0))
clusters.list <- list("cl1"=cl1,"cl2"=colnames(dataSet)[!colnames(dataSet) %in% cl1])


clusters.list <- setNames(rep(1,ncol(dataSet)),colnames(dataSet))
clusters.list[colnames(dataSet)[!colnames(dataSet) %in% cl1]] <- 2 

cotan.dea.out <- COTAN.DEA(dataSet = dataSet,clusters.list = clusters.list,GEO.code = "",sequencingMethod = "10x",sampleCondition = "Temp")


```

```{r}

```
