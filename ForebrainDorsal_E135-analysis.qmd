---
title: "Forebrain Dorsal E13.5 Data-set Anaysis"
---

```{r}
library(ggplot2)
library(tibble)
library(zeallot)
library(COTAN)

options(parallelly.fork.enable = TRUE)

outDir <- "Data/MouseCortexFromLoom/"

setLoggingLevel(1)
setLoggingFile(file.path(outDir, "ForebrainDorsal_E135-analysis.log"))
```

Read the already created COTAN object

```{r}
fb135Obj <- readRDS("Data/MouseCortexFromLoom/SourceData/e13.5_ForebrainDorsal.cotan.RDS")
sampleCondition <- getMetadataElement(fb135Obj, datasetTags()[["cond"]])

sampleCondition
```

Inspect cells' sizes

```{r}
cellSizePlot(fb135Obj, splitPattern = ":", numCol = 1)
```

Drop cells with too many ritz reads as they are probably duplets

```{r}
cellsSizeThr <- 10000
fb135Obj <- addElementToMetaDataset(fb135Obj, "Cells size threshold", cellsSizeThr)

cells_to_rem <- getCells(fb135Obj)[getCellsSize(fb135Obj) > cellsSizeThr]
fb135Obj <- dropGenesCells(fb135Obj, cells = cells_to_rem)

cellSizePlot(fb135Obj, splitPattern = ":", numCol = 1)
```

Inspect the number of expressed genes per cell

```{r}
genesSizePlot(fb135Obj, splitPattern = ":", numCol = 1)
```

Drop cells with too low genes expession as they are probably dead

```{r}
genesSizeLowThr <- 700
fb135Obj <- addElementToMetaDataset(fb135Obj, "Num genes low threshold", genesSizeLowThr)

numExprGenes <- getNumGenes(fb135Obj)
cells_to_rem <- names(numExprGenes)[numExprGenes < genesSizeLowThr]
fb135Obj <- dropGenesCells(fb135Obj, cells = cells_to_rem)

genesSizePlot(fb135Obj, splitPattern = ":", numCol = 1)
```

Check number of mitocondrial genes expressed in each cell

```{r}
mitGenesPattern <- "^mt."
getGenes(fb135Obj)[grep(mitGenesPattern, getGenes(fb135Obj))]

c(mitPlot, mitSizes) %<-%
  mitochondrialPercentagePlot(fb135Obj, genePrefix = mitGenesPattern,
                              splitPattern = ":", numCol = 1)

plot(mitPlot)
```

Cells with a too high percentage of mitocondrial genes are likely dead (or at the last problematic) cells. So we drop them!

```{r}
mitPercThr <- 1.0
fb135Obj <- addElementToMetaDataset(fb135Obj, "Mitoc. perc. threshold", mitPercThr)

cells_to_rem <- rownames(mitSizes)[mitSizes[["mit.percentage"]] > mitPercThr]

fb135Obj <- dropGenesCells(fb135Obj, cells = cells_to_rem)

c(mitPlot, mitSizes) %<-%
  mitochondrialPercentagePlot(fb135Obj, genePrefix = mitGenesPattern,
                              splitPattern = ":", numCol = 1)

plot(mitPlot)
```

Check no further outliers after all the culling

```{r}
cellSizePlot(fb135Obj, splitPattern = ":", numCol = 1)
genesSizePlot(fb135Obj, splitPattern = ":", numCol = 1)
```

Clean: round 1

```{r}
fb135Obj <- clean(fb135Obj)

c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(fb135Obj)

plot(pcaCellsPlot)
plot(genesPlot)

fb135Obj <- addElementToMetaDataset(fb135Obj, "Num drop B group", 0)
```

B group contains high number of hemoglobin genes: so they are not interesting

```{r}
cells_to_rem <- rownames(pcaCellsData)[pcaCellsData[["groups"]] == "B"]

fb135Obj <- dropGenesCells(fb135Obj, cells = cells_to_rem)
```

Clean: round 2

```{r}
fb135Obj <- clean(fb135Obj)

c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(fb135Obj)

plot(pcaCellsPlot)
plot(genesPlot)

fb135Obj <- addElementToMetaDataset(fb135Obj, "Num drop B group", 1)
```

B group contains high number of hemoglobin genes: so they are not interesting

```{r}
cells_to_rem <- rownames(pcaCellsData)[pcaCellsData[["groups"]] == "B"]

fb135Obj <- dropGenesCells(fb135Obj, cells = cells_to_rem)
```

Clean: round 3

```{r}
fb135Obj <- clean(fb135Obj)

c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(fb135Obj)

plot(pcaCellsPlot)
plot(genesPlot)

fb135Obj <- addElementToMetaDataset(fb135Obj, "Num drop B group", 2)
```

Visualize if all is ok:

```{r}
plot(UDEPlot)

plot(nuPlot)

lowUDEThr <- 0.3 # the threshold to remove low UDE cells

nuDf <- data.frame("nu" = sort(getNu(fb135Obj)), "n" = seq_along(getNu(fb135Obj)))
UDEPlot_zoomed <- ggplot(nuDf, aes(x = n, y = nu)) +
            geom_point(colour = "#8491B4B2", size = 1.0) +
            xlim(0L, 400L) +
            ylim(0.0, 1.0) +
            geom_hline(yintercept = lowUDEThr, linetype = "dashed",
                       color = "darkred") +
            annotate(geom = "text", x = 200L, y = 0.25,
                     label = paste0("to remove cells with nu < ", lowUDEThr),
                     color = "darkred", size = 4.5)

plot(UDEPlot_zoomed)
```

Final cleaning to check all is OK

```{r}
fb135Obj <- clean(fb135Obj)

c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(fb135Obj)

plot(pcaCellsPlot)
plot(genesPlot)
plot(UDEPlot)
plot(nuPlot)

plot(cellSizePlot(fb135Obj, splitPattern = ":", numCol = 1))
plot(genesSizePlot(fb135Obj, splitPattern = ":", numCol = 1))
```

Calculate genes' COEX

```{r}
fb135Obj <- proceedToCoex(fb135Obj, calcCoex = TRUE, cores = 12,
                          saveObj = TRUE, outDir = outDir)

gdiData <- calculateGDI(fb135Obj)

genesToLabel <- head(rownames(gdiData[order(gdiData[["GDI"]],
                                            decreasing = TRUE), ]), n = 10L)

genesToLabel

gdiPlot <- GDIPlot(fb135Obj, GDIIn = gdiData, GDIThreshold = 1.4,
                   genes = list("Top 10 GDI genes" = genesToLabel))

plot(gdiPlot)
```

Save the COTAN object

```{r,eval=FALSE,echo=TRUE}
saveRDS(fb135Obj, file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))
```

```{r}
fb135Obj <- readRDS(file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))
```

```{r, echo=TRUE, eval=FALSE}
splitClusters <- cellsUniformClustering(fb135Obj, GDIThreshold = 1.4, cores = 13,
                                        saveObj = TRUE, outDir = outDir)

c(splitCoexDF, splitPValueDF) %<-% DEAOnClusters(fb135Obj, clusters = splitClusters)

fb135Obj <- addClusterization(fb135Obj, clName = "split",
                              clusters = splitClusters,
                              coexDF = splitCoexDF, override = TRUE)

table(splitClusters)
```

```{r, eval=FALSE}
saveRDS(fb135Obj, file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))
```

```{r, eval=FALSE, echo=TRUE}
c(mergedClusters, mergedCoexDF, mergedPValueDF) %<-%
  mergeUniformCellsClusters(fb135Obj, clusters = splitClusters,
                            GDIThreshold = 1.4, cores = 13,
                            saveObj = TRUE, outDir = outDir)

fb135Obj <- addClusterization(fb135Obj, clName = "merge",
                              clusters = mergedClusters,
                              coexDF = mergedCoexDF,
                              override = TRUE)

table(mergedClusters)
```

```{r, eval=FALSE}
saveRDS(fb135Obj, file = file.path(outDir, paste0(sampleCondition, ".cotan.RDS")))
```

```{r}
sessionInfo()
```
